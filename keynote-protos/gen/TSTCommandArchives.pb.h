// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSTCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSTCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSDArchives.pb.h"
#include "TSDCommandArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCEArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSTArchives.pb.h"
#include "TSTArchives.sos.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSTCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSTCommandArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSTCommandArchives_2eproto;
namespace TST {
class ColumnRowBundleArchive;
struct ColumnRowBundleArchiveDefaultTypeInternal;
extern ColumnRowBundleArchiveDefaultTypeInternal _ColumnRowBundleArchive_default_instance_;
class ColumnRowMetadataArchive;
struct ColumnRowMetadataArchiveDefaultTypeInternal;
extern ColumnRowMetadataArchiveDefaultTypeInternal _ColumnRowMetadataArchive_default_instance_;
class ColumnRowRestoreDataArchive;
struct ColumnRowRestoreDataArchiveDefaultTypeInternal;
extern ColumnRowRestoreDataArchiveDefaultTypeInternal _ColumnRowRestoreDataArchive_default_instance_;
class CommandAddTableStylePresetArchive;
struct CommandAddTableStylePresetArchiveDefaultTypeInternal;
extern CommandAddTableStylePresetArchiveDefaultTypeInternal _CommandAddTableStylePresetArchive_default_instance_;
class CommandApplyCellCommentArchive;
struct CommandApplyCellCommentArchiveDefaultTypeInternal;
extern CommandApplyCellCommentArchiveDefaultTypeInternal _CommandApplyCellCommentArchive_default_instance_;
class CommandApplyCellContentsArchive;
struct CommandApplyCellContentsArchiveDefaultTypeInternal;
extern CommandApplyCellContentsArchiveDefaultTypeInternal _CommandApplyCellContentsArchive_default_instance_;
class CommandApplyCellDiffMapArchive;
struct CommandApplyCellDiffMapArchiveDefaultTypeInternal;
extern CommandApplyCellDiffMapArchiveDefaultTypeInternal _CommandApplyCellDiffMapArchive_default_instance_;
class CommandApplyCellMapArchive;
struct CommandApplyCellMapArchiveDefaultTypeInternal;
extern CommandApplyCellMapArchiveDefaultTypeInternal _CommandApplyCellMapArchive_default_instance_;
class CommandApplyConcurrentCellMapArchive;
struct CommandApplyConcurrentCellMapArchiveDefaultTypeInternal;
extern CommandApplyConcurrentCellMapArchiveDefaultTypeInternal _CommandApplyConcurrentCellMapArchive_default_instance_;
class CommandApplyTableStylePresetArchive;
struct CommandApplyTableStylePresetArchiveDefaultTypeInternal;
extern CommandApplyTableStylePresetArchiveDefaultTypeInternal _CommandApplyTableStylePresetArchive_default_instance_;
class CommandCategoryChangeSummaryAggregateType;
struct CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal;
extern CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal _CommandCategoryChangeSummaryAggregateType_default_instance_;
class CommandCategoryCollapseExpandGroupArchive;
struct CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal;
extern CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal _CommandCategoryCollapseExpandGroupArchive_default_instance_;
class CommandCategoryMoveRowsArchive;
struct CommandCategoryMoveRowsArchiveDefaultTypeInternal;
extern CommandCategoryMoveRowsArchiveDefaultTypeInternal _CommandCategoryMoveRowsArchive_default_instance_;
class CommandCategoryResizeColumnOrRowArchive;
struct CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal;
extern CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal _CommandCategoryResizeColumnOrRowArchive_default_instance_;
class CommandCategorySetGroupingColumnsArchive;
struct CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal;
extern CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal _CommandCategorySetGroupingColumnsArchive_default_instance_;
class CommandCategorySetLabelRowVisibility;
struct CommandCategorySetLabelRowVisibilityDefaultTypeInternal;
extern CommandCategorySetLabelRowVisibilityDefaultTypeInternal _CommandCategorySetLabelRowVisibility_default_instance_;
class CommandCategoryWillChangeGroupValue;
struct CommandCategoryWillChangeGroupValueDefaultTypeInternal;
extern CommandCategoryWillChangeGroupValueDefaultTypeInternal _CommandCategoryWillChangeGroupValue_default_instance_;
class CommandChangeFreezeHeaderStateArchive;
struct CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal;
extern CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal _CommandChangeFreezeHeaderStateArchive_default_instance_;
class CommandChangeTableAreaForColumnOrRowArchive;
struct CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal;
extern CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal _CommandChangeTableAreaForColumnOrRowArchive_default_instance_;
class CommandChooseTableIdRemapperArchive;
struct CommandChooseTableIdRemapperArchiveDefaultTypeInternal;
extern CommandChooseTableIdRemapperArchiveDefaultTypeInternal _CommandChooseTableIdRemapperArchive_default_instance_;
class CommandDeleteCellContentsArchive;
struct CommandDeleteCellContentsArchiveDefaultTypeInternal;
extern CommandDeleteCellContentsArchiveDefaultTypeInternal _CommandDeleteCellContentsArchive_default_instance_;
class CommandDeleteCellsArchive;
struct CommandDeleteCellsArchiveDefaultTypeInternal;
extern CommandDeleteCellsArchiveDefaultTypeInternal _CommandDeleteCellsArchive_default_instance_;
class CommandExtendTableIDHistoryArchive;
struct CommandExtendTableIDHistoryArchiveDefaultTypeInternal;
extern CommandExtendTableIDHistoryArchiveDefaultTypeInternal _CommandExtendTableIDHistoryArchive_default_instance_;
class CommandHideShowArchive;
struct CommandHideShowArchiveDefaultTypeInternal;
extern CommandHideShowArchiveDefaultTypeInternal _CommandHideShowArchive_default_instance_;
class CommandInsertColumnsOrRowsArchive;
struct CommandInsertColumnsOrRowsArchiveDefaultTypeInternal;
extern CommandInsertColumnsOrRowsArchiveDefaultTypeInternal _CommandInsertColumnsOrRowsArchive_default_instance_;
class CommandInverseMergeArchive;
struct CommandInverseMergeArchiveDefaultTypeInternal;
extern CommandInverseMergeArchiveDefaultTypeInternal _CommandInverseMergeArchive_default_instance_;
class CommandJustForNotifyingArchive;
struct CommandJustForNotifyingArchiveDefaultTypeInternal;
extern CommandJustForNotifyingArchiveDefaultTypeInternal _CommandJustForNotifyingArchive_default_instance_;
class CommandMergeArchive;
struct CommandMergeArchiveDefaultTypeInternal;
extern CommandMergeArchiveDefaultTypeInternal _CommandMergeArchive_default_instance_;
class CommandMoveCellsArchive;
struct CommandMoveCellsArchiveDefaultTypeInternal;
extern CommandMoveCellsArchiveDefaultTypeInternal _CommandMoveCellsArchive_default_instance_;
class CommandMoveColumnsOrRowsArchive;
struct CommandMoveColumnsOrRowsArchiveDefaultTypeInternal;
extern CommandMoveColumnsOrRowsArchiveDefaultTypeInternal _CommandMoveColumnsOrRowsArchive_default_instance_;
class CommandMutateCellFormatArchive;
struct CommandMutateCellFormatArchiveDefaultTypeInternal;
extern CommandMutateCellFormatArchiveDefaultTypeInternal _CommandMutateCellFormatArchive_default_instance_;
class CommandPivotHideShowGrandTotalsArchive;
struct CommandPivotHideShowGrandTotalsArchiveDefaultTypeInternal;
extern CommandPivotHideShowGrandTotalsArchiveDefaultTypeInternal _CommandPivotHideShowGrandTotalsArchive_default_instance_;
class CommandPivotSetGroupingColumnOptionsArchive;
struct CommandPivotSetGroupingColumnOptionsArchiveDefaultTypeInternal;
extern CommandPivotSetGroupingColumnOptionsArchiveDefaultTypeInternal _CommandPivotSetGroupingColumnOptionsArchive_default_instance_;
class CommandPivotSetPivotRulesArchive;
struct CommandPivotSetPivotRulesArchiveDefaultTypeInternal;
extern CommandPivotSetPivotRulesArchiveDefaultTypeInternal _CommandPivotSetPivotRulesArchive_default_instance_;
class CommandPivotSortArchive;
struct CommandPivotSortArchiveDefaultTypeInternal;
extern CommandPivotSortArchiveDefaultTypeInternal _CommandPivotSortArchive_default_instance_;
class CommandPostflightSetCellArchive;
struct CommandPostflightSetCellArchiveDefaultTypeInternal;
extern CommandPostflightSetCellArchiveDefaultTypeInternal _CommandPostflightSetCellArchive_default_instance_;
class CommandRemoveColumnsOrRowsArchive;
struct CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal;
extern CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal _CommandRemoveColumnsOrRowsArchive_default_instance_;
class CommandRemoveTableStylePresetArchive;
struct CommandRemoveTableStylePresetArchiveDefaultTypeInternal;
extern CommandRemoveTableStylePresetArchiveDefaultTypeInternal _CommandRemoveTableStylePresetArchive_default_instance_;
class CommandReplaceCustomFormatArchive;
struct CommandReplaceCustomFormatArchiveDefaultTypeInternal;
extern CommandReplaceCustomFormatArchiveDefaultTypeInternal _CommandReplaceCustomFormatArchive_default_instance_;
class CommandReplaceTableStylePresetArchive;
struct CommandReplaceTableStylePresetArchiveDefaultTypeInternal;
extern CommandReplaceTableStylePresetArchiveDefaultTypeInternal _CommandReplaceTableStylePresetArchive_default_instance_;
class CommandResizeColumnOrRowArchive;
struct CommandResizeColumnOrRowArchiveDefaultTypeInternal;
extern CommandResizeColumnOrRowArchiveDefaultTypeInternal _CommandResizeColumnOrRowArchive_default_instance_;
class CommandRewriteCategoryFormulasArchive;
struct CommandRewriteCategoryFormulasArchiveDefaultTypeInternal;
extern CommandRewriteCategoryFormulasArchiveDefaultTypeInternal _CommandRewriteCategoryFormulasArchive_default_instance_;
class CommandRewriteConditionalStylesForRewriteSpecArchive;
struct CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal;
extern CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteConditionalStylesForRewriteSpecArchive_default_instance_;
class CommandRewriteFilterFormulasForRewriteSpecArchive;
struct CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal;
extern CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForRewriteSpecArchive_default_instance_;
class CommandRewriteFilterFormulasForTableResizeArchive;
struct CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal;
extern CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForTableResizeArchive_default_instance_;
class CommandRewriteFormulasForTransposeArchive;
struct CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal;
extern CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal _CommandRewriteFormulasForTransposeArchive_default_instance_;
class CommandRewriteHiddenStatesForGroupByChangeArchive;
struct CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal;
extern CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal _CommandRewriteHiddenStatesForGroupByChangeArchive_default_instance_;
class CommandRewriteMergeFormulasArchive;
struct CommandRewriteMergeFormulasArchiveDefaultTypeInternal;
extern CommandRewriteMergeFormulasArchiveDefaultTypeInternal _CommandRewriteMergeFormulasArchive_default_instance_;
class CommandRewritePencilAnnotationFormulasArchive;
struct CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal;
extern CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal _CommandRewritePencilAnnotationFormulasArchive_default_instance_;
class CommandRewritePencilAnnotationFormulasArchive_AnnotationPair;
struct CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal;
extern CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal _CommandRewritePencilAnnotationFormulasArchive_AnnotationPair_default_instance_;
class CommandRewritePivotOwnerFormulasArchive;
struct CommandRewritePivotOwnerFormulasArchiveDefaultTypeInternal;
extern CommandRewritePivotOwnerFormulasArchiveDefaultTypeInternal _CommandRewritePivotOwnerFormulasArchive_default_instance_;
class CommandRewriteSortOrderForRewriteSpecArchive;
struct CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal;
extern CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteSortOrderForRewriteSpecArchive_default_instance_;
class CommandRewriteSortOrderForTableResizeArchive;
struct CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal;
extern CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal _CommandRewriteSortOrderForTableResizeArchive_default_instance_;
class CommandRewriteTableFormulasForRewriteSpecArchive;
struct CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal;
extern CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteTableFormulasForRewriteSpecArchive_default_instance_;
class CommandRewriteTrackedReferencesArchive;
struct CommandRewriteTrackedReferencesArchiveDefaultTypeInternal;
extern CommandRewriteTrackedReferencesArchiveDefaultTypeInternal _CommandRewriteTrackedReferencesArchive_default_instance_;
class CommandRowColumnRangeArchive;
struct CommandRowColumnRangeArchiveDefaultTypeInternal;
extern CommandRowColumnRangeArchiveDefaultTypeInternal _CommandRowColumnRangeArchive_default_instance_;
class CommandSetAutomaticDurationUnitsArchive;
struct CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal;
extern CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal _CommandSetAutomaticDurationUnitsArchive_default_instance_;
class CommandSetBaseArchive;
struct CommandSetBaseArchiveDefaultTypeInternal;
extern CommandSetBaseArchiveDefaultTypeInternal _CommandSetBaseArchive_default_instance_;
class CommandSetBasePlacesArchive;
struct CommandSetBasePlacesArchiveDefaultTypeInternal;
extern CommandSetBasePlacesArchiveDefaultTypeInternal _CommandSetBasePlacesArchive_default_instance_;
class CommandSetBaseUseMinusSignArchive;
struct CommandSetBaseUseMinusSignArchiveDefaultTypeInternal;
extern CommandSetBaseUseMinusSignArchiveDefaultTypeInternal _CommandSetBaseUseMinusSignArchive_default_instance_;
class CommandSetCurrencyCodeArchive;
struct CommandSetCurrencyCodeArchiveDefaultTypeInternal;
extern CommandSetCurrencyCodeArchiveDefaultTypeInternal _CommandSetCurrencyCodeArchive_default_instance_;
class CommandSetDateTimeFormatArchive;
struct CommandSetDateTimeFormatArchiveDefaultTypeInternal;
extern CommandSetDateTimeFormatArchiveDefaultTypeInternal _CommandSetDateTimeFormatArchive_default_instance_;
class CommandSetDurationStyleArchive;
struct CommandSetDurationStyleArchiveDefaultTypeInternal;
extern CommandSetDurationStyleArchiveDefaultTypeInternal _CommandSetDurationStyleArchive_default_instance_;
class CommandSetDurationUnitSmallestLargestArchive;
struct CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal;
extern CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal _CommandSetDurationUnitSmallestLargestArchive_default_instance_;
class CommandSetFilterSetArchive;
struct CommandSetFilterSetArchiveDefaultTypeInternal;
extern CommandSetFilterSetArchiveDefaultTypeInternal _CommandSetFilterSetArchive_default_instance_;
class CommandSetFilterSetTypeArchive;
struct CommandSetFilterSetTypeArchiveDefaultTypeInternal;
extern CommandSetFilterSetTypeArchiveDefaultTypeInternal _CommandSetFilterSetTypeArchive_default_instance_;
class CommandSetFiltersEnabledArchive;
struct CommandSetFiltersEnabledArchiveDefaultTypeInternal;
extern CommandSetFiltersEnabledArchiveDefaultTypeInternal _CommandSetFiltersEnabledArchive_default_instance_;
class CommandSetFormulaTokenizationArchive;
struct CommandSetFormulaTokenizationArchiveDefaultTypeInternal;
extern CommandSetFormulaTokenizationArchiveDefaultTypeInternal _CommandSetFormulaTokenizationArchive_default_instance_;
class CommandSetFractionAccuracyArchive;
struct CommandSetFractionAccuracyArchiveDefaultTypeInternal;
extern CommandSetFractionAccuracyArchiveDefaultTypeInternal _CommandSetFractionAccuracyArchive_default_instance_;
class CommandSetGroupSortOrderArchive;
struct CommandSetGroupSortOrderArchiveDefaultTypeInternal;
extern CommandSetGroupSortOrderArchiveDefaultTypeInternal _CommandSetGroupSortOrderArchive_default_instance_;
class CommandSetNegativeNumberStyleArchive;
struct CommandSetNegativeNumberStyleArchiveDefaultTypeInternal;
extern CommandSetNegativeNumberStyleArchiveDefaultTypeInternal _CommandSetNegativeNumberStyleArchive_default_instance_;
class CommandSetNowArchive;
struct CommandSetNowArchiveDefaultTypeInternal;
extern CommandSetNowArchiveDefaultTypeInternal _CommandSetNowArchive_default_instance_;
class CommandSetNumberOfDecimalPlacesArchive;
struct CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal;
extern CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal _CommandSetNumberOfDecimalPlacesArchive_default_instance_;
class CommandSetPencilAnnotationsArchive;
struct CommandSetPencilAnnotationsArchiveDefaultTypeInternal;
extern CommandSetPencilAnnotationsArchiveDefaultTypeInternal _CommandSetPencilAnnotationsArchive_default_instance_;
class CommandSetRangeControlMinMaxIncArchive;
struct CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal;
extern CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal _CommandSetRangeControlMinMaxIncArchive_default_instance_;
class CommandSetRepeatingHeaderEnabledArchive;
struct CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal;
extern CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal _CommandSetRepeatingHeaderEnabledArchive_default_instance_;
class CommandSetShowThousandsSeparatorArchive;
struct CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal;
extern CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal _CommandSetShowThousandsSeparatorArchive_default_instance_;
class CommandSetSortOrderArchive;
struct CommandSetSortOrderArchiveDefaultTypeInternal;
extern CommandSetSortOrderArchiveDefaultTypeInternal _CommandSetSortOrderArchive_default_instance_;
class CommandSetStorageLanguageArchive;
struct CommandSetStorageLanguageArchiveDefaultTypeInternal;
extern CommandSetStorageLanguageArchiveDefaultTypeInternal _CommandSetStorageLanguageArchive_default_instance_;
class CommandSetStructuredTextImportRecordArchive;
struct CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal;
extern CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal _CommandSetStructuredTextImportRecordArchive_default_instance_;
class CommandSetTableFontNameArchive;
struct CommandSetTableFontNameArchiveDefaultTypeInternal;
extern CommandSetTableFontNameArchiveDefaultTypeInternal _CommandSetTableFontNameArchive_default_instance_;
class CommandSetTableFontSizeArchive;
struct CommandSetTableFontSizeArchiveDefaultTypeInternal;
extern CommandSetTableFontSizeArchiveDefaultTypeInternal _CommandSetTableFontSizeArchive_default_instance_;
class CommandSetTableNameArchive;
struct CommandSetTableNameArchiveDefaultTypeInternal;
extern CommandSetTableNameArchiveDefaultTypeInternal _CommandSetTableNameArchive_default_instance_;
class CommandSetTableNameEnabledArchive;
struct CommandSetTableNameEnabledArchiveDefaultTypeInternal;
extern CommandSetTableNameEnabledArchiveDefaultTypeInternal _CommandSetTableNameEnabledArchive_default_instance_;
class CommandSetTableNameHeightArchive;
struct CommandSetTableNameHeightArchiveDefaultTypeInternal;
extern CommandSetTableNameHeightArchiveDefaultTypeInternal _CommandSetTableNameHeightArchive_default_instance_;
class CommandSetTextStyleArchive;
struct CommandSetTextStyleArchiveDefaultTypeInternal;
extern CommandSetTextStyleArchiveDefaultTypeInternal _CommandSetTextStyleArchive_default_instance_;
class CommandSetTextStylePropertiesArchive;
struct CommandSetTextStylePropertiesArchiveDefaultTypeInternal;
extern CommandSetTextStylePropertiesArchiveDefaultTypeInternal _CommandSetTextStylePropertiesArchive_default_instance_;
class CommandSetUseAccountingStyleArchive;
struct CommandSetUseAccountingStyleArchiveDefaultTypeInternal;
extern CommandSetUseAccountingStyleArchiveDefaultTypeInternal _CommandSetUseAccountingStyleArchive_default_instance_;
class CommandSetWasCutArchive;
struct CommandSetWasCutArchiveDefaultTypeInternal;
extern CommandSetWasCutArchiveDefaultTypeInternal _CommandSetWasCutArchive_default_instance_;
class CommandSortArchive;
struct CommandSortArchiveDefaultTypeInternal;
extern CommandSortArchiveDefaultTypeInternal _CommandSortArchive_default_instance_;
class CommandStyleCellsArchive;
struct CommandStyleCellsArchiveDefaultTypeInternal;
extern CommandStyleCellsArchiveDefaultTypeInternal _CommandStyleCellsArchive_default_instance_;
class CommandStyleTableArchive;
struct CommandStyleTableArchiveDefaultTypeInternal;
extern CommandStyleTableArchiveDefaultTypeInternal _CommandStyleTableArchive_default_instance_;
class CommandTextPreflightInsertCellArchive;
struct CommandTextPreflightInsertCellArchiveDefaultTypeInternal;
extern CommandTextPreflightInsertCellArchiveDefaultTypeInternal _CommandTextPreflightInsertCellArchive_default_instance_;
class CommandTransposeTableArchive;
struct CommandTransposeTableArchiveDefaultTypeInternal;
extern CommandTransposeTableArchiveDefaultTypeInternal _CommandTransposeTableArchive_default_instance_;
class CommandUnmergeArchive;
struct CommandUnmergeArchiveDefaultTypeInternal;
extern CommandUnmergeArchiveDefaultTypeInternal _CommandUnmergeArchive_default_instance_;
class ControlCellSelectionTransformerArchive;
struct ControlCellSelectionTransformerArchiveDefaultTypeInternal;
extern ControlCellSelectionTransformerArchiveDefaultTypeInternal _ControlCellSelectionTransformerArchive_default_instance_;
class FormulaEditingCommandGroupArchive;
struct FormulaEditingCommandGroupArchiveDefaultTypeInternal;
extern FormulaEditingCommandGroupArchiveDefaultTypeInternal _FormulaEditingCommandGroupArchive_default_instance_;
class FormulaEditingCommandSelectionBehaviorArchive;
struct FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal _FormulaEditingCommandSelectionBehaviorArchive_default_instance_;
class FormulaRewriteSpecArchive;
struct FormulaRewriteSpecArchiveDefaultTypeInternal;
extern FormulaRewriteSpecArchiveDefaultTypeInternal _FormulaRewriteSpecArchive_default_instance_;
class IdempotentSelectionTransformerArchive;
struct IdempotentSelectionTransformerArchiveDefaultTypeInternal;
extern IdempotentSelectionTransformerArchiveDefaultTypeInternal _IdempotentSelectionTransformerArchive_default_instance_;
class RegionSelectionTransformerArchive;
struct RegionSelectionTransformerArchiveDefaultTypeInternal;
extern RegionSelectionTransformerArchiveDefaultTypeInternal _RegionSelectionTransformerArchive_default_instance_;
class RowColumnSelectionTransformerArchive;
struct RowColumnSelectionTransformerArchiveDefaultTypeInternal;
extern RowColumnSelectionTransformerArchiveDefaultTypeInternal _RowColumnSelectionTransformerArchive_default_instance_;
class StockCellSelectionTransformerArchive;
struct StockCellSelectionTransformerArchiveDefaultTypeInternal;
extern StockCellSelectionTransformerArchiveDefaultTypeInternal _StockCellSelectionTransformerArchive_default_instance_;
class StrokeSelectionTransformerArchive;
struct StrokeSelectionTransformerArchiveDefaultTypeInternal;
extern StrokeSelectionTransformerArchiveDefaultTypeInternal _StrokeSelectionTransformerArchive_default_instance_;
class TableCommandArchive;
struct TableCommandArchiveDefaultTypeInternal;
extern TableCommandArchiveDefaultTypeInternal _TableCommandArchive_default_instance_;
class TableCommandSelectionBehaviorArchive;
struct TableCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern TableCommandSelectionBehaviorArchiveDefaultTypeInternal _TableCommandSelectionBehaviorArchive_default_instance_;
class TableNameSelectionTransformerArchive;
struct TableNameSelectionTransformerArchiveDefaultTypeInternal;
extern TableNameSelectionTransformerArchiveDefaultTypeInternal _TableNameSelectionTransformerArchive_default_instance_;
class TableSubSelectionTransformerBaseArchive;
struct TableSubSelectionTransformerBaseArchiveDefaultTypeInternal;
extern TableSubSelectionTransformerBaseArchiveDefaultTypeInternal _TableSubSelectionTransformerBaseArchive_default_instance_;
class WPSelectionTransformerArchive;
struct WPSelectionTransformerArchiveDefaultTypeInternal;
extern WPSelectionTransformerArchiveDefaultTypeInternal _WPSelectionTransformerArchive_default_instance_;
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> ::TST::ColumnRowBundleArchive* Arena::CreateMaybeMessage<::TST::ColumnRowBundleArchive>(Arena*);
template<> ::TST::ColumnRowMetadataArchive* Arena::CreateMaybeMessage<::TST::ColumnRowMetadataArchive>(Arena*);
template<> ::TST::ColumnRowRestoreDataArchive* Arena::CreateMaybeMessage<::TST::ColumnRowRestoreDataArchive>(Arena*);
template<> ::TST::CommandAddTableStylePresetArchive* Arena::CreateMaybeMessage<::TST::CommandAddTableStylePresetArchive>(Arena*);
template<> ::TST::CommandApplyCellCommentArchive* Arena::CreateMaybeMessage<::TST::CommandApplyCellCommentArchive>(Arena*);
template<> ::TST::CommandApplyCellContentsArchive* Arena::CreateMaybeMessage<::TST::CommandApplyCellContentsArchive>(Arena*);
template<> ::TST::CommandApplyCellDiffMapArchive* Arena::CreateMaybeMessage<::TST::CommandApplyCellDiffMapArchive>(Arena*);
template<> ::TST::CommandApplyCellMapArchive* Arena::CreateMaybeMessage<::TST::CommandApplyCellMapArchive>(Arena*);
template<> ::TST::CommandApplyConcurrentCellMapArchive* Arena::CreateMaybeMessage<::TST::CommandApplyConcurrentCellMapArchive>(Arena*);
template<> ::TST::CommandApplyTableStylePresetArchive* Arena::CreateMaybeMessage<::TST::CommandApplyTableStylePresetArchive>(Arena*);
template<> ::TST::CommandCategoryChangeSummaryAggregateType* Arena::CreateMaybeMessage<::TST::CommandCategoryChangeSummaryAggregateType>(Arena*);
template<> ::TST::CommandCategoryCollapseExpandGroupArchive* Arena::CreateMaybeMessage<::TST::CommandCategoryCollapseExpandGroupArchive>(Arena*);
template<> ::TST::CommandCategoryMoveRowsArchive* Arena::CreateMaybeMessage<::TST::CommandCategoryMoveRowsArchive>(Arena*);
template<> ::TST::CommandCategoryResizeColumnOrRowArchive* Arena::CreateMaybeMessage<::TST::CommandCategoryResizeColumnOrRowArchive>(Arena*);
template<> ::TST::CommandCategorySetGroupingColumnsArchive* Arena::CreateMaybeMessage<::TST::CommandCategorySetGroupingColumnsArchive>(Arena*);
template<> ::TST::CommandCategorySetLabelRowVisibility* Arena::CreateMaybeMessage<::TST::CommandCategorySetLabelRowVisibility>(Arena*);
template<> ::TST::CommandCategoryWillChangeGroupValue* Arena::CreateMaybeMessage<::TST::CommandCategoryWillChangeGroupValue>(Arena*);
template<> ::TST::CommandChangeFreezeHeaderStateArchive* Arena::CreateMaybeMessage<::TST::CommandChangeFreezeHeaderStateArchive>(Arena*);
template<> ::TST::CommandChangeTableAreaForColumnOrRowArchive* Arena::CreateMaybeMessage<::TST::CommandChangeTableAreaForColumnOrRowArchive>(Arena*);
template<> ::TST::CommandChooseTableIdRemapperArchive* Arena::CreateMaybeMessage<::TST::CommandChooseTableIdRemapperArchive>(Arena*);
template<> ::TST::CommandDeleteCellContentsArchive* Arena::CreateMaybeMessage<::TST::CommandDeleteCellContentsArchive>(Arena*);
template<> ::TST::CommandDeleteCellsArchive* Arena::CreateMaybeMessage<::TST::CommandDeleteCellsArchive>(Arena*);
template<> ::TST::CommandExtendTableIDHistoryArchive* Arena::CreateMaybeMessage<::TST::CommandExtendTableIDHistoryArchive>(Arena*);
template<> ::TST::CommandHideShowArchive* Arena::CreateMaybeMessage<::TST::CommandHideShowArchive>(Arena*);
template<> ::TST::CommandInsertColumnsOrRowsArchive* Arena::CreateMaybeMessage<::TST::CommandInsertColumnsOrRowsArchive>(Arena*);
template<> ::TST::CommandInverseMergeArchive* Arena::CreateMaybeMessage<::TST::CommandInverseMergeArchive>(Arena*);
template<> ::TST::CommandJustForNotifyingArchive* Arena::CreateMaybeMessage<::TST::CommandJustForNotifyingArchive>(Arena*);
template<> ::TST::CommandMergeArchive* Arena::CreateMaybeMessage<::TST::CommandMergeArchive>(Arena*);
template<> ::TST::CommandMoveCellsArchive* Arena::CreateMaybeMessage<::TST::CommandMoveCellsArchive>(Arena*);
template<> ::TST::CommandMoveColumnsOrRowsArchive* Arena::CreateMaybeMessage<::TST::CommandMoveColumnsOrRowsArchive>(Arena*);
template<> ::TST::CommandMutateCellFormatArchive* Arena::CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(Arena*);
template<> ::TST::CommandPivotHideShowGrandTotalsArchive* Arena::CreateMaybeMessage<::TST::CommandPivotHideShowGrandTotalsArchive>(Arena*);
template<> ::TST::CommandPivotSetGroupingColumnOptionsArchive* Arena::CreateMaybeMessage<::TST::CommandPivotSetGroupingColumnOptionsArchive>(Arena*);
template<> ::TST::CommandPivotSetPivotRulesArchive* Arena::CreateMaybeMessage<::TST::CommandPivotSetPivotRulesArchive>(Arena*);
template<> ::TST::CommandPivotSortArchive* Arena::CreateMaybeMessage<::TST::CommandPivotSortArchive>(Arena*);
template<> ::TST::CommandPostflightSetCellArchive* Arena::CreateMaybeMessage<::TST::CommandPostflightSetCellArchive>(Arena*);
template<> ::TST::CommandRemoveColumnsOrRowsArchive* Arena::CreateMaybeMessage<::TST::CommandRemoveColumnsOrRowsArchive>(Arena*);
template<> ::TST::CommandRemoveTableStylePresetArchive* Arena::CreateMaybeMessage<::TST::CommandRemoveTableStylePresetArchive>(Arena*);
template<> ::TST::CommandReplaceCustomFormatArchive* Arena::CreateMaybeMessage<::TST::CommandReplaceCustomFormatArchive>(Arena*);
template<> ::TST::CommandReplaceTableStylePresetArchive* Arena::CreateMaybeMessage<::TST::CommandReplaceTableStylePresetArchive>(Arena*);
template<> ::TST::CommandResizeColumnOrRowArchive* Arena::CreateMaybeMessage<::TST::CommandResizeColumnOrRowArchive>(Arena*);
template<> ::TST::CommandRewriteCategoryFormulasArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteCategoryFormulasArchive>(Arena*);
template<> ::TST::CommandRewriteConditionalStylesForRewriteSpecArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteConditionalStylesForRewriteSpecArchive>(Arena*);
template<> ::TST::CommandRewriteFilterFormulasForRewriteSpecArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFilterFormulasForRewriteSpecArchive>(Arena*);
template<> ::TST::CommandRewriteFilterFormulasForTableResizeArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFilterFormulasForTableResizeArchive>(Arena*);
template<> ::TST::CommandRewriteFormulasForTransposeArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFormulasForTransposeArchive>(Arena*);
template<> ::TST::CommandRewriteHiddenStatesForGroupByChangeArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteHiddenStatesForGroupByChangeArchive>(Arena*);
template<> ::TST::CommandRewriteMergeFormulasArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteMergeFormulasArchive>(Arena*);
template<> ::TST::CommandRewritePencilAnnotationFormulasArchive* Arena::CreateMaybeMessage<::TST::CommandRewritePencilAnnotationFormulasArchive>(Arena*);
template<> ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* Arena::CreateMaybeMessage<::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair>(Arena*);
template<> ::TST::CommandRewritePivotOwnerFormulasArchive* Arena::CreateMaybeMessage<::TST::CommandRewritePivotOwnerFormulasArchive>(Arena*);
template<> ::TST::CommandRewriteSortOrderForRewriteSpecArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteSortOrderForRewriteSpecArchive>(Arena*);
template<> ::TST::CommandRewriteSortOrderForTableResizeArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteSortOrderForTableResizeArchive>(Arena*);
template<> ::TST::CommandRewriteTableFormulasForRewriteSpecArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteTableFormulasForRewriteSpecArchive>(Arena*);
template<> ::TST::CommandRewriteTrackedReferencesArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteTrackedReferencesArchive>(Arena*);
template<> ::TST::CommandRowColumnRangeArchive* Arena::CreateMaybeMessage<::TST::CommandRowColumnRangeArchive>(Arena*);
template<> ::TST::CommandSetAutomaticDurationUnitsArchive* Arena::CreateMaybeMessage<::TST::CommandSetAutomaticDurationUnitsArchive>(Arena*);
template<> ::TST::CommandSetBaseArchive* Arena::CreateMaybeMessage<::TST::CommandSetBaseArchive>(Arena*);
template<> ::TST::CommandSetBasePlacesArchive* Arena::CreateMaybeMessage<::TST::CommandSetBasePlacesArchive>(Arena*);
template<> ::TST::CommandSetBaseUseMinusSignArchive* Arena::CreateMaybeMessage<::TST::CommandSetBaseUseMinusSignArchive>(Arena*);
template<> ::TST::CommandSetCurrencyCodeArchive* Arena::CreateMaybeMessage<::TST::CommandSetCurrencyCodeArchive>(Arena*);
template<> ::TST::CommandSetDateTimeFormatArchive* Arena::CreateMaybeMessage<::TST::CommandSetDateTimeFormatArchive>(Arena*);
template<> ::TST::CommandSetDurationStyleArchive* Arena::CreateMaybeMessage<::TST::CommandSetDurationStyleArchive>(Arena*);
template<> ::TST::CommandSetDurationUnitSmallestLargestArchive* Arena::CreateMaybeMessage<::TST::CommandSetDurationUnitSmallestLargestArchive>(Arena*);
template<> ::TST::CommandSetFilterSetArchive* Arena::CreateMaybeMessage<::TST::CommandSetFilterSetArchive>(Arena*);
template<> ::TST::CommandSetFilterSetTypeArchive* Arena::CreateMaybeMessage<::TST::CommandSetFilterSetTypeArchive>(Arena*);
template<> ::TST::CommandSetFiltersEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetFiltersEnabledArchive>(Arena*);
template<> ::TST::CommandSetFormulaTokenizationArchive* Arena::CreateMaybeMessage<::TST::CommandSetFormulaTokenizationArchive>(Arena*);
template<> ::TST::CommandSetFractionAccuracyArchive* Arena::CreateMaybeMessage<::TST::CommandSetFractionAccuracyArchive>(Arena*);
template<> ::TST::CommandSetGroupSortOrderArchive* Arena::CreateMaybeMessage<::TST::CommandSetGroupSortOrderArchive>(Arena*);
template<> ::TST::CommandSetNegativeNumberStyleArchive* Arena::CreateMaybeMessage<::TST::CommandSetNegativeNumberStyleArchive>(Arena*);
template<> ::TST::CommandSetNowArchive* Arena::CreateMaybeMessage<::TST::CommandSetNowArchive>(Arena*);
template<> ::TST::CommandSetNumberOfDecimalPlacesArchive* Arena::CreateMaybeMessage<::TST::CommandSetNumberOfDecimalPlacesArchive>(Arena*);
template<> ::TST::CommandSetPencilAnnotationsArchive* Arena::CreateMaybeMessage<::TST::CommandSetPencilAnnotationsArchive>(Arena*);
template<> ::TST::CommandSetRangeControlMinMaxIncArchive* Arena::CreateMaybeMessage<::TST::CommandSetRangeControlMinMaxIncArchive>(Arena*);
template<> ::TST::CommandSetRepeatingHeaderEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetRepeatingHeaderEnabledArchive>(Arena*);
template<> ::TST::CommandSetShowThousandsSeparatorArchive* Arena::CreateMaybeMessage<::TST::CommandSetShowThousandsSeparatorArchive>(Arena*);
template<> ::TST::CommandSetSortOrderArchive* Arena::CreateMaybeMessage<::TST::CommandSetSortOrderArchive>(Arena*);
template<> ::TST::CommandSetStorageLanguageArchive* Arena::CreateMaybeMessage<::TST::CommandSetStorageLanguageArchive>(Arena*);
template<> ::TST::CommandSetStructuredTextImportRecordArchive* Arena::CreateMaybeMessage<::TST::CommandSetStructuredTextImportRecordArchive>(Arena*);
template<> ::TST::CommandSetTableFontNameArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableFontNameArchive>(Arena*);
template<> ::TST::CommandSetTableFontSizeArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableFontSizeArchive>(Arena*);
template<> ::TST::CommandSetTableNameArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableNameArchive>(Arena*);
template<> ::TST::CommandSetTableNameEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableNameEnabledArchive>(Arena*);
template<> ::TST::CommandSetTableNameHeightArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableNameHeightArchive>(Arena*);
template<> ::TST::CommandSetTextStyleArchive* Arena::CreateMaybeMessage<::TST::CommandSetTextStyleArchive>(Arena*);
template<> ::TST::CommandSetTextStylePropertiesArchive* Arena::CreateMaybeMessage<::TST::CommandSetTextStylePropertiesArchive>(Arena*);
template<> ::TST::CommandSetUseAccountingStyleArchive* Arena::CreateMaybeMessage<::TST::CommandSetUseAccountingStyleArchive>(Arena*);
template<> ::TST::CommandSetWasCutArchive* Arena::CreateMaybeMessage<::TST::CommandSetWasCutArchive>(Arena*);
template<> ::TST::CommandSortArchive* Arena::CreateMaybeMessage<::TST::CommandSortArchive>(Arena*);
template<> ::TST::CommandStyleCellsArchive* Arena::CreateMaybeMessage<::TST::CommandStyleCellsArchive>(Arena*);
template<> ::TST::CommandStyleTableArchive* Arena::CreateMaybeMessage<::TST::CommandStyleTableArchive>(Arena*);
template<> ::TST::CommandTextPreflightInsertCellArchive* Arena::CreateMaybeMessage<::TST::CommandTextPreflightInsertCellArchive>(Arena*);
template<> ::TST::CommandTransposeTableArchive* Arena::CreateMaybeMessage<::TST::CommandTransposeTableArchive>(Arena*);
template<> ::TST::CommandUnmergeArchive* Arena::CreateMaybeMessage<::TST::CommandUnmergeArchive>(Arena*);
template<> ::TST::ControlCellSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::ControlCellSelectionTransformerArchive>(Arena*);
template<> ::TST::FormulaEditingCommandGroupArchive* Arena::CreateMaybeMessage<::TST::FormulaEditingCommandGroupArchive>(Arena*);
template<> ::TST::FormulaEditingCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TST::FormulaEditingCommandSelectionBehaviorArchive>(Arena*);
template<> ::TST::FormulaRewriteSpecArchive* Arena::CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(Arena*);
template<> ::TST::IdempotentSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::IdempotentSelectionTransformerArchive>(Arena*);
template<> ::TST::RegionSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::RegionSelectionTransformerArchive>(Arena*);
template<> ::TST::RowColumnSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::RowColumnSelectionTransformerArchive>(Arena*);
template<> ::TST::StockCellSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::StockCellSelectionTransformerArchive>(Arena*);
template<> ::TST::StrokeSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::StrokeSelectionTransformerArchive>(Arena*);
template<> ::TST::TableCommandArchive* Arena::CreateMaybeMessage<::TST::TableCommandArchive>(Arena*);
template<> ::TST::TableCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TST::TableCommandSelectionBehaviorArchive>(Arena*);
template<> ::TST::TableNameSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::TableNameSelectionTransformerArchive>(Arena*);
template<> ::TST::TableSubSelectionTransformerBaseArchive* Arena::CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(Arena*);
template<> ::TST::WPSelectionTransformerArchive* Arena::CreateMaybeMessage<::TST::WPSelectionTransformerArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TST {

enum TableArea : int {
  TableAreaBody = 1,
  TableAreaHeaderRow = 2,
  TableAreaHeaderColumn = 3,
  TableAreaFooterRow = 4
};
bool TableArea_IsValid(int value);
constexpr TableArea TableArea_MIN = TableAreaBody;
constexpr TableArea TableArea_MAX = TableAreaFooterRow;
constexpr int TableArea_ARRAYSIZE = TableArea_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableArea_descriptor();
template<typename T>
inline const std::string& TableArea_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableArea>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableArea_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableArea_descriptor(), enum_t_value);
}
inline bool TableArea_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableArea* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableArea>(
    TableArea_descriptor(), name, value);
}
enum TableAreaTransition : int {
  TableAreaTransitionHeaderRowToBody = 1,
  TableAreaTransitionBodyToHeaderRow = 2,
  TableAreaTransitionFooterRowToBody = 3,
  TableAreaTransitionBodyToFooterRow = 4,
  TableAreaTransitionHeaderColumnToBody = 5,
  TableAreaTransitionBodyToHeaderColumn = 6
};
bool TableAreaTransition_IsValid(int value);
constexpr TableAreaTransition TableAreaTransition_MIN = TableAreaTransitionHeaderRowToBody;
constexpr TableAreaTransition TableAreaTransition_MAX = TableAreaTransitionBodyToHeaderColumn;
constexpr int TableAreaTransition_ARRAYSIZE = TableAreaTransition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableAreaTransition_descriptor();
template<typename T>
inline const std::string& TableAreaTransition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableAreaTransition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableAreaTransition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableAreaTransition_descriptor(), enum_t_value);
}
inline bool TableAreaTransition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableAreaTransition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableAreaTransition>(
    TableAreaTransition_descriptor(), name, value);
}
enum ColumnRowBundleItemTypeEnum : int {
  ColumnRowTypeAnchor = 0,
  ColumnRowTypeHeaderRow = 1,
  ColumnRowTypeBodyRow = 2,
  ColumnRowTypeFooterRow = 3,
  ColumnRowTypeHeaderColumn = 4,
  ColumnRowTypeBodyColumn = 5
};
bool ColumnRowBundleItemTypeEnum_IsValid(int value);
constexpr ColumnRowBundleItemTypeEnum ColumnRowBundleItemTypeEnum_MIN = ColumnRowTypeAnchor;
constexpr ColumnRowBundleItemTypeEnum ColumnRowBundleItemTypeEnum_MAX = ColumnRowTypeBodyColumn;
constexpr int ColumnRowBundleItemTypeEnum_ARRAYSIZE = ColumnRowBundleItemTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnRowBundleItemTypeEnum_descriptor();
template<typename T>
inline const std::string& ColumnRowBundleItemTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColumnRowBundleItemTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColumnRowBundleItemTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColumnRowBundleItemTypeEnum_descriptor(), enum_t_value);
}
inline bool ColumnRowBundleItemTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColumnRowBundleItemTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColumnRowBundleItemTypeEnum>(
    ColumnRowBundleItemTypeEnum_descriptor(), name, value);
}
// ===================================================================

class TableCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableCommandArchive) */ {
 public:
  inline TableCommandArchive() : TableCommandArchive(nullptr) {}
  ~TableCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR TableCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableCommandArchive(const TableCommandArchive& from);
  TableCommandArchive(TableCommandArchive&& from) noexcept
    : TableCommandArchive() {
    *this = ::std::move(from);
  }

  inline TableCommandArchive& operator=(const TableCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCommandArchive& operator=(TableCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TableCommandArchive*>(
               &_TableCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TableCommandArchive& a, TableCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableCommandArchive& from) {
    TableCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableCommandArchive";
  }
  protected:
  explicit TableCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandnameFieldNumber = 3,
    kSuperFieldNumber = 1,
    kTableInfoIdPathFieldNumber = 2,
    kDefaultCellStylesContainerFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kRandomSeedLoFieldNumber = 6,
    kRandomSeedHiFieldNumber = 7,
    kOldTimestampFieldNumber = 9,
    kOldRandomSeedFieldNumber = 10,
    kIsInverseFieldNumber = 8,
  };
  // optional string commandname = 3;
  bool has_commandname() const;
  private:
  bool _internal_has_commandname() const;
  public:
  void clear_commandname();
  const std::string& commandname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commandname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commandname();
  PROTOBUF_NODISCARD std::string* release_commandname();
  void set_allocated_commandname(std::string* commandname);
  private:
  const std::string& _internal_commandname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commandname(const std::string& value);
  std::string* _internal_mutable_commandname();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath table_info_id_path = 2;
  bool has_table_info_id_path() const;
  private:
  bool _internal_has_table_info_id_path() const;
  public:
  void clear_table_info_id_path();
  const ::TSP::UUIDPath& table_info_id_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_table_info_id_path();
  ::TSP::UUIDPath* mutable_table_info_id_path();
  void set_allocated_table_info_id_path(::TSP::UUIDPath* table_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_table_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_table_info_id_path();
  public:
  void unsafe_arena_set_allocated_table_info_id_path(
      ::TSP::UUIDPath* table_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_table_info_id_path();

  // optional .TSP.Reference default_cell_styles_container = 4;
  bool has_default_cell_styles_container() const;
  private:
  bool _internal_has_default_cell_styles_container() const;
  public:
  void clear_default_cell_styles_container();
  const ::TSP::Reference& default_cell_styles_container() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_default_cell_styles_container();
  ::TSP::Reference* mutable_default_cell_styles_container();
  void set_allocated_default_cell_styles_container(::TSP::Reference* default_cell_styles_container);
  private:
  const ::TSP::Reference& _internal_default_cell_styles_container() const;
  ::TSP::Reference* _internal_mutable_default_cell_styles_container();
  public:
  void unsafe_arena_set_allocated_default_cell_styles_container(
      ::TSP::Reference* default_cell_styles_container);
  ::TSP::Reference* unsafe_arena_release_default_cell_styles_container();

  // optional double timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional uint32 random_seed_lo = 6;
  bool has_random_seed_lo() const;
  private:
  bool _internal_has_random_seed_lo() const;
  public:
  void clear_random_seed_lo();
  uint32_t random_seed_lo() const;
  void set_random_seed_lo(uint32_t value);
  private:
  uint32_t _internal_random_seed_lo() const;
  void _internal_set_random_seed_lo(uint32_t value);
  public:

  // optional uint32 random_seed_hi = 7;
  bool has_random_seed_hi() const;
  private:
  bool _internal_has_random_seed_hi() const;
  public:
  void clear_random_seed_hi();
  uint32_t random_seed_hi() const;
  void set_random_seed_hi(uint32_t value);
  private:
  uint32_t _internal_random_seed_hi() const;
  void _internal_set_random_seed_hi(uint32_t value);
  public:

  // optional double old_timestamp = 9;
  bool has_old_timestamp() const;
  private:
  bool _internal_has_old_timestamp() const;
  public:
  void clear_old_timestamp();
  double old_timestamp() const;
  void set_old_timestamp(double value);
  private:
  double _internal_old_timestamp() const;
  void _internal_set_old_timestamp(double value);
  public:

  // optional uint64 old_random_seed = 10;
  bool has_old_random_seed() const;
  private:
  bool _internal_has_old_random_seed() const;
  public:
  void clear_old_random_seed();
  uint64_t old_random_seed() const;
  void set_old_random_seed(uint64_t value);
  private:
  uint64_t _internal_old_random_seed() const;
  void _internal_set_old_random_seed(uint64_t value);
  public:

  // optional bool is_inverse = 8;
  bool has_is_inverse() const;
  private:
  bool _internal_has_is_inverse() const;
  public:
  void clear_is_inverse();
  bool is_inverse() const;
  void set_is_inverse(bool value);
  private:
  bool _internal_is_inverse() const;
  void _internal_set_is_inverse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandname_;
    ::TSK::CommandArchive* super_;
    ::TSP::UUIDPath* table_info_id_path_;
    ::TSP::Reference* default_cell_styles_container_;
    double timestamp_;
    uint32_t random_seed_lo_;
    uint32_t random_seed_hi_;
    double old_timestamp_;
    uint64_t old_random_seed_;
    bool is_inverse_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyCellContentsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyCellContentsArchive) */ {
 public:
  inline CommandApplyCellContentsArchive() : CommandApplyCellContentsArchive(nullptr) {}
  ~CommandApplyCellContentsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyCellContentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyCellContentsArchive(const CommandApplyCellContentsArchive& from);
  CommandApplyCellContentsArchive(CommandApplyCellContentsArchive&& from) noexcept
    : CommandApplyCellContentsArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyCellContentsArchive& operator=(const CommandApplyCellContentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyCellContentsArchive& operator=(CommandApplyCellContentsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyCellContentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyCellContentsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyCellContentsArchive*>(
               &_CommandApplyCellContentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandApplyCellContentsArchive& a, CommandApplyCellContentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyCellContentsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyCellContentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyCellContentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyCellContentsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyCellContentsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyCellContentsArchive& from) {
    CommandApplyCellContentsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyCellContentsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyCellContentsArchive";
  }
  protected:
  explicit CommandApplyCellContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFormatKeysFieldNumber = 4,
    kActionStringFieldNumber = 5,
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 2,
    kRollbackCellDiffMapFieldNumber = 3,
  };
  // repeated .TSP.UUID custom_format_keys = 4;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // optional string action_string = 5;
  bool has_action_string() const;
  private:
  bool _internal_has_action_string() const;
  public:
  void clear_action_string();
  const std::string& action_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_string();
  PROTOBUF_NODISCARD std::string* release_action_string();
  void set_allocated_action_string(std::string* action_string);
  private:
  const std::string& _internal_action_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_string(const std::string& value);
  std::string* _internal_mutable_action_string();
  public:

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference cell_diff_map = 2;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference rollback_cell_diff_map = 3;
  bool has_rollback_cell_diff_map() const;
  private:
  bool _internal_has_rollback_cell_diff_map() const;
  public:
  void clear_rollback_cell_diff_map();
  const ::TSP::Reference& rollback_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_rollback_cell_diff_map();
  ::TSP::Reference* mutable_rollback_cell_diff_map();
  void set_allocated_rollback_cell_diff_map(::TSP::Reference* rollback_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_rollback_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_rollback_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_rollback_cell_diff_map(
      ::TSP::Reference* rollback_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_rollback_cell_diff_map();

  // @@protoc_insertion_point(class_scope:TST.CommandApplyCellContentsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_string_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* rollback_cell_diff_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyCellDiffMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyCellDiffMapArchive) */ {
 public:
  inline CommandApplyCellDiffMapArchive() : CommandApplyCellDiffMapArchive(nullptr) {}
  ~CommandApplyCellDiffMapArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyCellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyCellDiffMapArchive(const CommandApplyCellDiffMapArchive& from);
  CommandApplyCellDiffMapArchive(CommandApplyCellDiffMapArchive&& from) noexcept
    : CommandApplyCellDiffMapArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyCellDiffMapArchive& operator=(const CommandApplyCellDiffMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyCellDiffMapArchive& operator=(CommandApplyCellDiffMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyCellDiffMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyCellDiffMapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyCellDiffMapArchive*>(
               &_CommandApplyCellDiffMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandApplyCellDiffMapArchive& a, CommandApplyCellDiffMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyCellDiffMapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyCellDiffMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyCellDiffMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyCellDiffMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyCellDiffMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyCellDiffMapArchive& from) {
    CommandApplyCellDiffMapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyCellDiffMapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyCellDiffMapArchive";
  }
  protected:
  explicit CommandApplyCellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFormatKeysFieldNumber = 5,
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 2,
    kInverseCellDiffMapFieldNumber = 4,
    kShouldAllowMergeFragmentsFieldNumber = 3,
  };
  // repeated .TSP.UUID custom_format_keys = 5;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference cell_diff_map = 2;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // required bool should_allow_merge_fragments = 3;
  bool has_should_allow_merge_fragments() const;
  private:
  bool _internal_has_should_allow_merge_fragments() const;
  public:
  void clear_should_allow_merge_fragments();
  bool should_allow_merge_fragments() const;
  void set_should_allow_merge_fragments(bool value);
  private:
  bool _internal_should_allow_merge_fragments() const;
  void _internal_set_should_allow_merge_fragments(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyCellDiffMapArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* inverse_cell_diff_map_;
    bool should_allow_merge_fragments_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyCellMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyCellMapArchive) */ {
 public:
  inline CommandApplyCellMapArchive() : CommandApplyCellMapArchive(nullptr) {}
  ~CommandApplyCellMapArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyCellMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyCellMapArchive(const CommandApplyCellMapArchive& from);
  CommandApplyCellMapArchive(CommandApplyCellMapArchive&& from) noexcept
    : CommandApplyCellMapArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyCellMapArchive& operator=(const CommandApplyCellMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyCellMapArchive& operator=(CommandApplyCellMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyCellMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyCellMapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyCellMapArchive*>(
               &_CommandApplyCellMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandApplyCellMapArchive& a, CommandApplyCellMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyCellMapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyCellMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyCellMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyCellMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyCellMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyCellMapArchive& from) {
    CommandApplyCellMapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyCellMapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyCellMapArchive";
  }
  protected:
  explicit CommandApplyCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFormatKeysFieldNumber = 5,
    kFormulaRewriteCommandsFieldNumber = 8,
    kSuperFieldNumber = 1,
    kRedoCellMapFieldNumber = 2,
    kUndoCellMapFieldNumber = 3,
    kUndoFormulaRewriteCommandFieldNumber = 4,
    kMergeOwnerRollbackIndexFieldNumber = 6,
    kIsFromPasteFieldNumber = 7,
  };
  // repeated .TSP.UUID custom_format_keys = 5;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  int formula_rewrite_commands_size() const;
  private:
  int _internal_formula_rewrite_commands_size() const;
  public:
  void clear_formula_rewrite_commands();
  ::TSP::Reference* mutable_formula_rewrite_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_formula_rewrite_commands();
  private:
  const ::TSP::Reference& _internal_formula_rewrite_commands(int index) const;
  ::TSP::Reference* _internal_add_formula_rewrite_commands();
  public:
  const ::TSP::Reference& formula_rewrite_commands(int index) const;
  ::TSP::Reference* add_formula_rewrite_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      formula_rewrite_commands() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference redo_cell_map = 2;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TSP::Reference& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_redo_cell_map();
  ::TSP::Reference* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TSP::Reference* redo_cell_map);
  private:
  const ::TSP::Reference& _internal_redo_cell_map() const;
  ::TSP::Reference* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TSP::Reference* redo_cell_map);
  ::TSP::Reference* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TSP::Reference& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_map();
  ::TSP::Reference* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TSP::Reference* undo_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_map();

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  bool has_undo_formula_rewrite_command() const;
  private:
  bool _internal_has_undo_formula_rewrite_command() const;
  public:
  void clear_undo_formula_rewrite_command();
  const ::TSP::Reference& undo_formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_formula_rewrite_command();
  ::TSP::Reference* mutable_undo_formula_rewrite_command();
  void set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_formula_rewrite_command(
      ::TSP::Reference* undo_formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_formula_rewrite_command();

  // optional uint32 merge_owner_rollback_index = 6;
  bool has_merge_owner_rollback_index() const;
  private:
  bool _internal_has_merge_owner_rollback_index() const;
  public:
  void clear_merge_owner_rollback_index();
  uint32_t merge_owner_rollback_index() const;
  void set_merge_owner_rollback_index(uint32_t value);
  private:
  uint32_t _internal_merge_owner_rollback_index() const;
  void _internal_set_merge_owner_rollback_index(uint32_t value);
  public:

  // required bool is_from_paste = 7;
  bool has_is_from_paste() const;
  private:
  bool _internal_has_is_from_paste() const;
  public:
  void clear_is_from_paste();
  bool is_from_paste() const;
  void set_is_from_paste(bool value);
  private:
  bool _internal_is_from_paste() const;
  void _internal_set_is_from_paste(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyCellMapArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > formula_rewrite_commands_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* redo_cell_map_;
    ::TSP::Reference* undo_cell_map_;
    ::TSP::Reference* undo_formula_rewrite_command_;
    uint32_t merge_owner_rollback_index_;
    bool is_from_paste_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyConcurrentCellMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyConcurrentCellMapArchive) */ {
 public:
  inline CommandApplyConcurrentCellMapArchive() : CommandApplyConcurrentCellMapArchive(nullptr) {}
  ~CommandApplyConcurrentCellMapArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyConcurrentCellMapArchive(const CommandApplyConcurrentCellMapArchive& from);
  CommandApplyConcurrentCellMapArchive(CommandApplyConcurrentCellMapArchive&& from) noexcept
    : CommandApplyConcurrentCellMapArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyConcurrentCellMapArchive& operator=(const CommandApplyConcurrentCellMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyConcurrentCellMapArchive& operator=(CommandApplyConcurrentCellMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyConcurrentCellMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyConcurrentCellMapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyConcurrentCellMapArchive*>(
               &_CommandApplyConcurrentCellMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandApplyConcurrentCellMapArchive& a, CommandApplyConcurrentCellMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyConcurrentCellMapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyConcurrentCellMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyConcurrentCellMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyConcurrentCellMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyConcurrentCellMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyConcurrentCellMapArchive& from) {
    CommandApplyConcurrentCellMapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyConcurrentCellMapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyConcurrentCellMapArchive";
  }
  protected:
  explicit CommandApplyConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFormatKeysFieldNumber = 5,
    kFormulaRewriteCommandsFieldNumber = 8,
    kSuperFieldNumber = 1,
    kRedoConcurrentCellMapFieldNumber = 2,
    kUndoConcurrentCellMapFieldNumber = 3,
    kUndoFormulaRewriteCommandFieldNumber = 4,
    kMergeOwnerRollbackIndexFieldNumber = 6,
    kIsFromPasteFieldNumber = 7,
  };
  // repeated .TSP.UUID custom_format_keys = 5;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  int formula_rewrite_commands_size() const;
  private:
  int _internal_formula_rewrite_commands_size() const;
  public:
  void clear_formula_rewrite_commands();
  ::TSP::Reference* mutable_formula_rewrite_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_formula_rewrite_commands();
  private:
  const ::TSP::Reference& _internal_formula_rewrite_commands(int index) const;
  ::TSP::Reference* _internal_add_formula_rewrite_commands();
  public:
  const ::TSP::Reference& formula_rewrite_commands(int index) const;
  ::TSP::Reference* add_formula_rewrite_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      formula_rewrite_commands() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference redo_concurrent_cell_map = 2;
  bool has_redo_concurrent_cell_map() const;
  private:
  bool _internal_has_redo_concurrent_cell_map() const;
  public:
  void clear_redo_concurrent_cell_map();
  const ::TSP::Reference& redo_concurrent_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_redo_concurrent_cell_map();
  ::TSP::Reference* mutable_redo_concurrent_cell_map();
  void set_allocated_redo_concurrent_cell_map(::TSP::Reference* redo_concurrent_cell_map);
  private:
  const ::TSP::Reference& _internal_redo_concurrent_cell_map() const;
  ::TSP::Reference* _internal_mutable_redo_concurrent_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_concurrent_cell_map(
      ::TSP::Reference* redo_concurrent_cell_map);
  ::TSP::Reference* unsafe_arena_release_redo_concurrent_cell_map();

  // optional .TSP.Reference undo_concurrent_cell_map = 3;
  bool has_undo_concurrent_cell_map() const;
  private:
  bool _internal_has_undo_concurrent_cell_map() const;
  public:
  void clear_undo_concurrent_cell_map();
  const ::TSP::Reference& undo_concurrent_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_concurrent_cell_map();
  ::TSP::Reference* mutable_undo_concurrent_cell_map();
  void set_allocated_undo_concurrent_cell_map(::TSP::Reference* undo_concurrent_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_concurrent_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_concurrent_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_concurrent_cell_map(
      ::TSP::Reference* undo_concurrent_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_concurrent_cell_map();

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  bool has_undo_formula_rewrite_command() const;
  private:
  bool _internal_has_undo_formula_rewrite_command() const;
  public:
  void clear_undo_formula_rewrite_command();
  const ::TSP::Reference& undo_formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_formula_rewrite_command();
  ::TSP::Reference* mutable_undo_formula_rewrite_command();
  void set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_formula_rewrite_command(
      ::TSP::Reference* undo_formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_formula_rewrite_command();

  // optional uint32 merge_owner_rollback_index = 6;
  bool has_merge_owner_rollback_index() const;
  private:
  bool _internal_has_merge_owner_rollback_index() const;
  public:
  void clear_merge_owner_rollback_index();
  uint32_t merge_owner_rollback_index() const;
  void set_merge_owner_rollback_index(uint32_t value);
  private:
  uint32_t _internal_merge_owner_rollback_index() const;
  void _internal_set_merge_owner_rollback_index(uint32_t value);
  public:

  // required bool is_from_paste = 7;
  bool has_is_from_paste() const;
  private:
  bool _internal_has_is_from_paste() const;
  public:
  void clear_is_from_paste();
  bool is_from_paste() const;
  void set_is_from_paste(bool value);
  private:
  bool _internal_is_from_paste() const;
  void _internal_set_is_from_paste(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyConcurrentCellMapArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > formula_rewrite_commands_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* redo_concurrent_cell_map_;
    ::TSP::Reference* undo_concurrent_cell_map_;
    ::TSP::Reference* undo_formula_rewrite_command_;
    uint32_t merge_owner_rollback_index_;
    bool is_from_paste_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChangeFreezeHeaderStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandChangeFreezeHeaderStateArchive) */ {
 public:
  inline CommandChangeFreezeHeaderStateArchive() : CommandChangeFreezeHeaderStateArchive(nullptr) {}
  ~CommandChangeFreezeHeaderStateArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandChangeFreezeHeaderStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChangeFreezeHeaderStateArchive(const CommandChangeFreezeHeaderStateArchive& from);
  CommandChangeFreezeHeaderStateArchive(CommandChangeFreezeHeaderStateArchive&& from) noexcept
    : CommandChangeFreezeHeaderStateArchive() {
    *this = ::std::move(from);
  }

  inline CommandChangeFreezeHeaderStateArchive& operator=(const CommandChangeFreezeHeaderStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChangeFreezeHeaderStateArchive& operator=(CommandChangeFreezeHeaderStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChangeFreezeHeaderStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChangeFreezeHeaderStateArchive* internal_default_instance() {
    return reinterpret_cast<const CommandChangeFreezeHeaderStateArchive*>(
               &_CommandChangeFreezeHeaderStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandChangeFreezeHeaderStateArchive& a, CommandChangeFreezeHeaderStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChangeFreezeHeaderStateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChangeFreezeHeaderStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChangeFreezeHeaderStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChangeFreezeHeaderStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChangeFreezeHeaderStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChangeFreezeHeaderStateArchive& from) {
    CommandChangeFreezeHeaderStateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChangeFreezeHeaderStateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandChangeFreezeHeaderStateArchive";
  }
  protected:
  explicit CommandChangeFreezeHeaderStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewFreezeStateFieldNumber = 3,
    kPrevFreezeStateFieldNumber = 4,
    kDirectionFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool new_freeze_state = 3;
  bool has_new_freeze_state() const;
  private:
  bool _internal_has_new_freeze_state() const;
  public:
  void clear_new_freeze_state();
  bool new_freeze_state() const;
  void set_new_freeze_state(bool value);
  private:
  bool _internal_new_freeze_state() const;
  void _internal_set_new_freeze_state(bool value);
  public:

  // required bool prev_freeze_state = 4;
  bool has_prev_freeze_state() const;
  private:
  bool _internal_has_prev_freeze_state() const;
  public:
  void clear_prev_freeze_state();
  bool prev_freeze_state() const;
  void set_prev_freeze_state(bool value);
  private:
  bool _internal_prev_freeze_state() const;
  void _internal_set_prev_freeze_state(bool value);
  public:

  // required .TST.TableDimensionArchive direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::TableDimensionArchive direction() const;
  void set_direction(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_direction() const;
  void _internal_set_direction(::TST::TableDimensionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandChangeFreezeHeaderStateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool new_freeze_state_;
    bool prev_freeze_state_;
    int direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandDeleteCellsArchive) */ {
 public:
  inline CommandDeleteCellsArchive() : CommandDeleteCellsArchive(nullptr) {}
  ~CommandDeleteCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteCellsArchive(const CommandDeleteCellsArchive& from);
  CommandDeleteCellsArchive(CommandDeleteCellsArchive&& from) noexcept
    : CommandDeleteCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteCellsArchive& operator=(const CommandDeleteCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteCellsArchive& operator=(CommandDeleteCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteCellsArchive*>(
               &_CommandDeleteCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandDeleteCellsArchive& a, CommandDeleteCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteCellsArchive& from) {
    CommandDeleteCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandDeleteCellsArchive";
  }
  protected:
  explicit CommandDeleteCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidRegionFieldNumber = 7,
    kSummaryCellUidListFieldNumber = 8,
    kInverseConcurrentCellMapFieldNumber = 9,
    kInvalidateCommentsFieldNumber = 5,
    kInvalidateCommentsValidFieldNumber = 6,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.CellUIDRegionArchive cell_uid_region = 7;
  bool has_cell_uid_region() const;
  private:
  bool _internal_has_cell_uid_region() const;
  public:
  void clear_cell_uid_region();
  const ::TST::CellUIDRegionArchive& cell_uid_region() const;
  PROTOBUF_NODISCARD ::TST::CellUIDRegionArchive* release_cell_uid_region();
  ::TST::CellUIDRegionArchive* mutable_cell_uid_region();
  void set_allocated_cell_uid_region(::TST::CellUIDRegionArchive* cell_uid_region);
  private:
  const ::TST::CellUIDRegionArchive& _internal_cell_uid_region() const;
  ::TST::CellUIDRegionArchive* _internal_mutable_cell_uid_region();
  public:
  void unsafe_arena_set_allocated_cell_uid_region(
      ::TST::CellUIDRegionArchive* cell_uid_region);
  ::TST::CellUIDRegionArchive* unsafe_arena_release_cell_uid_region();

  // optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
  bool has_summary_cell_uid_list() const;
  private:
  bool _internal_has_summary_cell_uid_list() const;
  public:
  void clear_summary_cell_uid_list();
  const ::TST::CellUIDListArchive& summary_cell_uid_list() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_summary_cell_uid_list();
  ::TST::CellUIDListArchive* mutable_summary_cell_uid_list();
  void set_allocated_summary_cell_uid_list(::TST::CellUIDListArchive* summary_cell_uid_list);
  private:
  const ::TST::CellUIDListArchive& _internal_summary_cell_uid_list() const;
  ::TST::CellUIDListArchive* _internal_mutable_summary_cell_uid_list();
  public:
  void unsafe_arena_set_allocated_summary_cell_uid_list(
      ::TST::CellUIDListArchive* summary_cell_uid_list);
  ::TST::CellUIDListArchive* unsafe_arena_release_summary_cell_uid_list();

  // optional .TSP.Reference inverse_concurrent_cell_map = 9;
  bool has_inverse_concurrent_cell_map() const;
  private:
  bool _internal_has_inverse_concurrent_cell_map() const;
  public:
  void clear_inverse_concurrent_cell_map();
  const ::TSP::Reference& inverse_concurrent_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_concurrent_cell_map();
  ::TSP::Reference* mutable_inverse_concurrent_cell_map();
  void set_allocated_inverse_concurrent_cell_map(::TSP::Reference* inverse_concurrent_cell_map);
  private:
  const ::TSP::Reference& _internal_inverse_concurrent_cell_map() const;
  ::TSP::Reference* _internal_mutable_inverse_concurrent_cell_map();
  public:
  void unsafe_arena_set_allocated_inverse_concurrent_cell_map(
      ::TSP::Reference* inverse_concurrent_cell_map);
  ::TSP::Reference* unsafe_arena_release_inverse_concurrent_cell_map();

  // optional bool invalidate_comments = 5;
  bool has_invalidate_comments() const;
  private:
  bool _internal_has_invalidate_comments() const;
  public:
  void clear_invalidate_comments();
  bool invalidate_comments() const;
  void set_invalidate_comments(bool value);
  private:
  bool _internal_invalidate_comments() const;
  void _internal_set_invalidate_comments(bool value);
  public:

  // optional bool invalidate_comments_valid = 6;
  bool has_invalidate_comments_valid() const;
  private:
  bool _internal_has_invalidate_comments_valid() const;
  public:
  void clear_invalidate_comments_valid();
  bool invalidate_comments_valid() const;
  void set_invalidate_comments_valid(bool value);
  private:
  bool _internal_invalidate_comments_valid() const;
  void _internal_set_invalidate_comments_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandDeleteCellsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellUIDRegionArchive* cell_uid_region_;
    ::TST::CellUIDListArchive* summary_cell_uid_list_;
    ::TSP::Reference* inverse_concurrent_cell_map_;
    bool invalidate_comments_;
    bool invalidate_comments_valid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteCellContentsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandDeleteCellContentsArchive) */ {
 public:
  inline CommandDeleteCellContentsArchive() : CommandDeleteCellContentsArchive(nullptr) {}
  ~CommandDeleteCellContentsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteCellContentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteCellContentsArchive(const CommandDeleteCellContentsArchive& from);
  CommandDeleteCellContentsArchive(CommandDeleteCellContentsArchive&& from) noexcept
    : CommandDeleteCellContentsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteCellContentsArchive& operator=(const CommandDeleteCellContentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteCellContentsArchive& operator=(CommandDeleteCellContentsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteCellContentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteCellContentsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteCellContentsArchive*>(
               &_CommandDeleteCellContentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandDeleteCellContentsArchive& a, CommandDeleteCellContentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteCellContentsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteCellContentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteCellContentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteCellContentsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteCellContentsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteCellContentsArchive& from) {
    CommandDeleteCellContentsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteCellContentsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandDeleteCellContentsArchive";
  }
  protected:
  explicit CommandDeleteCellContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidListFieldNumber = 2,
    kInverseCellDiffMapFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellUIDListArchive cell_uid_list = 2;
  bool has_cell_uid_list() const;
  private:
  bool _internal_has_cell_uid_list() const;
  public:
  void clear_cell_uid_list();
  const ::TST::CellUIDListArchive& cell_uid_list() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_cell_uid_list();
  ::TST::CellUIDListArchive* mutable_cell_uid_list();
  void set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uid_list() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uid_list();
  public:
  void unsafe_arena_set_allocated_cell_uid_list(
      ::TST::CellUIDListArchive* cell_uid_list);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uid_list();

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // @@protoc_insertion_point(class_scope:TST.CommandDeleteCellContentsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellUIDListArchive* cell_uid_list_;
    ::TSP::Reference* inverse_cell_diff_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMutateCellFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMutateCellFormatArchive) */ {
 public:
  inline CommandMutateCellFormatArchive() : CommandMutateCellFormatArchive(nullptr) {}
  ~CommandMutateCellFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMutateCellFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMutateCellFormatArchive(const CommandMutateCellFormatArchive& from);
  CommandMutateCellFormatArchive(CommandMutateCellFormatArchive&& from) noexcept
    : CommandMutateCellFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandMutateCellFormatArchive& operator=(const CommandMutateCellFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMutateCellFormatArchive& operator=(CommandMutateCellFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMutateCellFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMutateCellFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMutateCellFormatArchive*>(
               &_CommandMutateCellFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandMutateCellFormatArchive& a, CommandMutateCellFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMutateCellFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMutateCellFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMutateCellFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMutateCellFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMutateCellFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMutateCellFormatArchive& from) {
    CommandMutateCellFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMutateCellFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMutateCellFormatArchive";
  }
  protected:
  explicit CommandMutateCellFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidListFieldNumber = 2,
    kInverseCellDiffMapFieldNumber = 3,
    kWholeFormatDiffMapFieldNumber = 4,
    kIntendedFormatTypeFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.CellUIDListArchive cell_uid_list = 2;
  bool has_cell_uid_list() const;
  private:
  bool _internal_has_cell_uid_list() const;
  public:
  void clear_cell_uid_list();
  const ::TST::CellUIDListArchive& cell_uid_list() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_cell_uid_list();
  ::TST::CellUIDListArchive* mutable_cell_uid_list();
  void set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uid_list() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uid_list();
  public:
  void unsafe_arena_set_allocated_cell_uid_list(
      ::TST::CellUIDListArchive* cell_uid_list);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uid_list();

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // optional .TSP.Reference whole_format_diff_map = 4;
  bool has_whole_format_diff_map() const;
  private:
  bool _internal_has_whole_format_diff_map() const;
  public:
  void clear_whole_format_diff_map();
  const ::TSP::Reference& whole_format_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_whole_format_diff_map();
  ::TSP::Reference* mutable_whole_format_diff_map();
  void set_allocated_whole_format_diff_map(::TSP::Reference* whole_format_diff_map);
  private:
  const ::TSP::Reference& _internal_whole_format_diff_map() const;
  ::TSP::Reference* _internal_mutable_whole_format_diff_map();
  public:
  void unsafe_arena_set_allocated_whole_format_diff_map(
      ::TSP::Reference* whole_format_diff_map);
  ::TSP::Reference* unsafe_arena_release_whole_format_diff_map();

  // required uint32 intended_format_type = 5;
  bool has_intended_format_type() const;
  private:
  bool _internal_has_intended_format_type() const;
  public:
  void clear_intended_format_type();
  uint32_t intended_format_type() const;
  void set_intended_format_type(uint32_t value);
  private:
  uint32_t _internal_intended_format_type() const;
  void _internal_set_intended_format_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandMutateCellFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellUIDListArchive* cell_uid_list_;
    ::TSP::Reference* inverse_cell_diff_map_;
    ::TSP::Reference* whole_format_diff_map_;
    uint32_t intended_format_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetAutomaticDurationUnitsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetAutomaticDurationUnitsArchive) */ {
 public:
  inline CommandSetAutomaticDurationUnitsArchive() : CommandSetAutomaticDurationUnitsArchive(nullptr) {}
  ~CommandSetAutomaticDurationUnitsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetAutomaticDurationUnitsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetAutomaticDurationUnitsArchive(const CommandSetAutomaticDurationUnitsArchive& from);
  CommandSetAutomaticDurationUnitsArchive(CommandSetAutomaticDurationUnitsArchive&& from) noexcept
    : CommandSetAutomaticDurationUnitsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetAutomaticDurationUnitsArchive& operator=(const CommandSetAutomaticDurationUnitsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetAutomaticDurationUnitsArchive& operator=(CommandSetAutomaticDurationUnitsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetAutomaticDurationUnitsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetAutomaticDurationUnitsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetAutomaticDurationUnitsArchive*>(
               &_CommandSetAutomaticDurationUnitsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandSetAutomaticDurationUnitsArchive& a, CommandSetAutomaticDurationUnitsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetAutomaticDurationUnitsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetAutomaticDurationUnitsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetAutomaticDurationUnitsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetAutomaticDurationUnitsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetAutomaticDurationUnitsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetAutomaticDurationUnitsArchive& from) {
    CommandSetAutomaticDurationUnitsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetAutomaticDurationUnitsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetAutomaticDurationUnitsArchive";
  }
  protected:
  explicit CommandSetAutomaticDurationUnitsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kAutomaticUnitsFieldNumber = 4,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // optional bool automatic_units = 4;
  bool has_automatic_units() const;
  private:
  bool _internal_has_automatic_units() const;
  public:
  void clear_automatic_units();
  bool automatic_units() const;
  void set_automatic_units(bool value);
  private:
  bool _internal_automatic_units() const;
  void _internal_set_automatic_units(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetAutomaticDurationUnitsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    bool automatic_units_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetDurationStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetDurationStyleArchive) */ {
 public:
  inline CommandSetDurationStyleArchive() : CommandSetDurationStyleArchive(nullptr) {}
  ~CommandSetDurationStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetDurationStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetDurationStyleArchive(const CommandSetDurationStyleArchive& from);
  CommandSetDurationStyleArchive(CommandSetDurationStyleArchive&& from) noexcept
    : CommandSetDurationStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetDurationStyleArchive& operator=(const CommandSetDurationStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetDurationStyleArchive& operator=(CommandSetDurationStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetDurationStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetDurationStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetDurationStyleArchive*>(
               &_CommandSetDurationStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandSetDurationStyleArchive& a, CommandSetDurationStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetDurationStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetDurationStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetDurationStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetDurationStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetDurationStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetDurationStyleArchive& from) {
    CommandSetDurationStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetDurationStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetDurationStyleArchive";
  }
  protected:
  explicit CommandSetDurationStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDurationStyleFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // optional uint32 duration_style = 2;
  bool has_duration_style() const;
  private:
  bool _internal_has_duration_style() const;
  public:
  void clear_duration_style();
  uint32_t duration_style() const;
  void set_duration_style(uint32_t value);
  private:
  uint32_t _internal_duration_style() const;
  void _internal_set_duration_style(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetDurationStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    uint32_t duration_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetDurationUnitSmallestLargestArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetDurationUnitSmallestLargestArchive) */ {
 public:
  inline CommandSetDurationUnitSmallestLargestArchive() : CommandSetDurationUnitSmallestLargestArchive(nullptr) {}
  ~CommandSetDurationUnitSmallestLargestArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetDurationUnitSmallestLargestArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetDurationUnitSmallestLargestArchive(const CommandSetDurationUnitSmallestLargestArchive& from);
  CommandSetDurationUnitSmallestLargestArchive(CommandSetDurationUnitSmallestLargestArchive&& from) noexcept
    : CommandSetDurationUnitSmallestLargestArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetDurationUnitSmallestLargestArchive& operator=(const CommandSetDurationUnitSmallestLargestArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetDurationUnitSmallestLargestArchive& operator=(CommandSetDurationUnitSmallestLargestArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetDurationUnitSmallestLargestArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetDurationUnitSmallestLargestArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetDurationUnitSmallestLargestArchive*>(
               &_CommandSetDurationUnitSmallestLargestArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandSetDurationUnitSmallestLargestArchive& a, CommandSetDurationUnitSmallestLargestArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetDurationUnitSmallestLargestArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetDurationUnitSmallestLargestArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetDurationUnitSmallestLargestArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetDurationUnitSmallestLargestArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetDurationUnitSmallestLargestArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetDurationUnitSmallestLargestArchive& from) {
    CommandSetDurationUnitSmallestLargestArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetDurationUnitSmallestLargestArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetDurationUnitSmallestLargestArchive";
  }
  protected:
  explicit CommandSetDurationUnitSmallestLargestArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSmallestUnitFieldNumber = 2,
    kLargestUnitFieldNumber = 3,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // optional uint32 smallest_unit = 2;
  bool has_smallest_unit() const;
  private:
  bool _internal_has_smallest_unit() const;
  public:
  void clear_smallest_unit();
  uint32_t smallest_unit() const;
  void set_smallest_unit(uint32_t value);
  private:
  uint32_t _internal_smallest_unit() const;
  void _internal_set_smallest_unit(uint32_t value);
  public:

  // optional uint32 largest_unit = 3;
  bool has_largest_unit() const;
  private:
  bool _internal_has_largest_unit() const;
  public:
  void clear_largest_unit();
  uint32_t largest_unit() const;
  void set_largest_unit(uint32_t value);
  private:
  uint32_t _internal_largest_unit() const;
  void _internal_set_largest_unit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetDurationUnitSmallestLargestArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    uint32_t smallest_unit_;
    uint32_t largest_unit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceCustomFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandReplaceCustomFormatArchive) */ {
 public:
  inline CommandReplaceCustomFormatArchive() : CommandReplaceCustomFormatArchive(nullptr) {}
  ~CommandReplaceCustomFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceCustomFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceCustomFormatArchive(const CommandReplaceCustomFormatArchive& from);
  CommandReplaceCustomFormatArchive(CommandReplaceCustomFormatArchive&& from) noexcept
    : CommandReplaceCustomFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceCustomFormatArchive& operator=(const CommandReplaceCustomFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceCustomFormatArchive& operator=(CommandReplaceCustomFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceCustomFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceCustomFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceCustomFormatArchive*>(
               &_CommandReplaceCustomFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandReplaceCustomFormatArchive& a, CommandReplaceCustomFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceCustomFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceCustomFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceCustomFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceCustomFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceCustomFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceCustomFormatArchive& from) {
    CommandReplaceCustomFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceCustomFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandReplaceCustomFormatArchive";
  }
  protected:
  explicit CommandReplaceCustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoDiffMapFieldNumber = 1,
    kCommitDiffMapFieldNumber = 2,
    kSuperFieldNumber = 6,
  };
  // optional .TSP.Reference undo_diff_map = 1;
  bool has_undo_diff_map() const;
  private:
  bool _internal_has_undo_diff_map() const;
  public:
  void clear_undo_diff_map();
  const ::TSP::Reference& undo_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_diff_map();
  ::TSP::Reference* mutable_undo_diff_map();
  void set_allocated_undo_diff_map(::TSP::Reference* undo_diff_map);
  private:
  const ::TSP::Reference& _internal_undo_diff_map() const;
  ::TSP::Reference* _internal_mutable_undo_diff_map();
  public:
  void unsafe_arena_set_allocated_undo_diff_map(
      ::TSP::Reference* undo_diff_map);
  ::TSP::Reference* unsafe_arena_release_undo_diff_map();

  // optional .TSP.Reference commit_diff_map = 2;
  bool has_commit_diff_map() const;
  private:
  bool _internal_has_commit_diff_map() const;
  public:
  void clear_commit_diff_map();
  const ::TSP::Reference& commit_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_commit_diff_map();
  ::TSP::Reference* mutable_commit_diff_map();
  void set_allocated_commit_diff_map(::TSP::Reference* commit_diff_map);
  private:
  const ::TSP::Reference& _internal_commit_diff_map() const;
  ::TSP::Reference* _internal_mutable_commit_diff_map();
  public:
  void unsafe_arena_set_allocated_commit_diff_map(
      ::TSP::Reference* commit_diff_map);
  ::TSP::Reference* unsafe_arena_release_commit_diff_map();

  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandReplaceCustomFormatArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* undo_diff_map_;
    ::TSP::Reference* commit_diff_map_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMoveCellsArchive) */ {
 public:
  inline CommandMoveCellsArchive() : CommandMoveCellsArchive(nullptr) {}
  ~CommandMoveCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMoveCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveCellsArchive(const CommandMoveCellsArchive& from);
  CommandMoveCellsArchive(CommandMoveCellsArchive&& from) noexcept
    : CommandMoveCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveCellsArchive& operator=(const CommandMoveCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveCellsArchive& operator=(CommandMoveCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveCellsArchive*>(
               &_CommandMoveCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandMoveCellsArchive& a, CommandMoveCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMoveCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMoveCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMoveCellsArchive& from) {
    CommandMoveCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMoveCellsArchive";
  }
  protected:
  explicit CommandMoveCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaRewriteCommandsFieldNumber = 12,
    kCommentStoragesToRestoreFieldNumber = 15,
    kSuperFieldNumber = 1,
    kDstTableInfoIdPathFieldNumber = 2,
    kSrcUidRangeFieldNumber = 3,
    kDstUidRangeFieldNumber = 4,
    kSrcCellMapFieldNumber = 6,
    kDstCellMapFieldNumber = 7,
    kDstCellStylesContainerFieldNumber = 8,
    kSrcUndoCellMapFieldNumber = 9,
    kDstUndoCellMapFieldNumber = 10,
    kMergeActionToRestoreFieldNumber = 13,
    kCommentCellUidsToRestoreFieldNumber = 14,
    kDstMergeOwnerRollbackIndexFieldNumber = 11,
    kTableDimensionFieldNumber = 5,
  };
  // repeated .TSP.Reference formula_rewrite_commands = 12;
  int formula_rewrite_commands_size() const;
  private:
  int _internal_formula_rewrite_commands_size() const;
  public:
  void clear_formula_rewrite_commands();
  ::TSP::Reference* mutable_formula_rewrite_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_formula_rewrite_commands();
  private:
  const ::TSP::Reference& _internal_formula_rewrite_commands(int index) const;
  ::TSP::Reference* _internal_add_formula_rewrite_commands();
  public:
  const ::TSP::Reference& formula_rewrite_commands(int index) const;
  ::TSP::Reference* add_formula_rewrite_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      formula_rewrite_commands() const;

  // repeated .TSP.Reference comment_storages_to_restore = 15;
  int comment_storages_to_restore_size() const;
  private:
  int _internal_comment_storages_to_restore_size() const;
  public:
  void clear_comment_storages_to_restore();
  ::TSP::Reference* mutable_comment_storages_to_restore(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_comment_storages_to_restore();
  private:
  const ::TSP::Reference& _internal_comment_storages_to_restore(int index) const;
  ::TSP::Reference* _internal_add_comment_storages_to_restore();
  public:
  const ::TSP::Reference& comment_storages_to_restore(int index) const;
  ::TSP::Reference* add_comment_storages_to_restore();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      comment_storages_to_restore() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath dst_table_info_id_path = 2;
  bool has_dst_table_info_id_path() const;
  private:
  bool _internal_has_dst_table_info_id_path() const;
  public:
  void clear_dst_table_info_id_path();
  const ::TSP::UUIDPath& dst_table_info_id_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_dst_table_info_id_path();
  ::TSP::UUIDPath* mutable_dst_table_info_id_path();
  void set_allocated_dst_table_info_id_path(::TSP::UUIDPath* dst_table_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_dst_table_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_dst_table_info_id_path();
  public:
  void unsafe_arena_set_allocated_dst_table_info_id_path(
      ::TSP::UUIDPath* dst_table_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_dst_table_info_id_path();

  // required .TSP.UUIDRectArchive src_uid_range = 3;
  bool has_src_uid_range() const;
  private:
  bool _internal_has_src_uid_range() const;
  public:
  void clear_src_uid_range();
  const ::TSP::UUIDRectArchive& src_uid_range() const;
  PROTOBUF_NODISCARD ::TSP::UUIDRectArchive* release_src_uid_range();
  ::TSP::UUIDRectArchive* mutable_src_uid_range();
  void set_allocated_src_uid_range(::TSP::UUIDRectArchive* src_uid_range);
  private:
  const ::TSP::UUIDRectArchive& _internal_src_uid_range() const;
  ::TSP::UUIDRectArchive* _internal_mutable_src_uid_range();
  public:
  void unsafe_arena_set_allocated_src_uid_range(
      ::TSP::UUIDRectArchive* src_uid_range);
  ::TSP::UUIDRectArchive* unsafe_arena_release_src_uid_range();

  // required .TSP.UUIDRectArchive dst_uid_range = 4;
  bool has_dst_uid_range() const;
  private:
  bool _internal_has_dst_uid_range() const;
  public:
  void clear_dst_uid_range();
  const ::TSP::UUIDRectArchive& dst_uid_range() const;
  PROTOBUF_NODISCARD ::TSP::UUIDRectArchive* release_dst_uid_range();
  ::TSP::UUIDRectArchive* mutable_dst_uid_range();
  void set_allocated_dst_uid_range(::TSP::UUIDRectArchive* dst_uid_range);
  private:
  const ::TSP::UUIDRectArchive& _internal_dst_uid_range() const;
  ::TSP::UUIDRectArchive* _internal_mutable_dst_uid_range();
  public:
  void unsafe_arena_set_allocated_dst_uid_range(
      ::TSP::UUIDRectArchive* dst_uid_range);
  ::TSP::UUIDRectArchive* unsafe_arena_release_dst_uid_range();

  // required .TSP.Reference src_cell_map = 6;
  bool has_src_cell_map() const;
  private:
  bool _internal_has_src_cell_map() const;
  public:
  void clear_src_cell_map();
  const ::TSP::Reference& src_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_src_cell_map();
  ::TSP::Reference* mutable_src_cell_map();
  void set_allocated_src_cell_map(::TSP::Reference* src_cell_map);
  private:
  const ::TSP::Reference& _internal_src_cell_map() const;
  ::TSP::Reference* _internal_mutable_src_cell_map();
  public:
  void unsafe_arena_set_allocated_src_cell_map(
      ::TSP::Reference* src_cell_map);
  ::TSP::Reference* unsafe_arena_release_src_cell_map();

  // optional .TSP.Reference dst_cell_map = 7;
  bool has_dst_cell_map() const;
  private:
  bool _internal_has_dst_cell_map() const;
  public:
  void clear_dst_cell_map();
  const ::TSP::Reference& dst_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_dst_cell_map();
  ::TSP::Reference* mutable_dst_cell_map();
  void set_allocated_dst_cell_map(::TSP::Reference* dst_cell_map);
  private:
  const ::TSP::Reference& _internal_dst_cell_map() const;
  ::TSP::Reference* _internal_mutable_dst_cell_map();
  public:
  void unsafe_arena_set_allocated_dst_cell_map(
      ::TSP::Reference* dst_cell_map);
  ::TSP::Reference* unsafe_arena_release_dst_cell_map();

  // optional .TSP.Reference dst_cell_styles_container = 8;
  bool has_dst_cell_styles_container() const;
  private:
  bool _internal_has_dst_cell_styles_container() const;
  public:
  void clear_dst_cell_styles_container();
  const ::TSP::Reference& dst_cell_styles_container() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_dst_cell_styles_container();
  ::TSP::Reference* mutable_dst_cell_styles_container();
  void set_allocated_dst_cell_styles_container(::TSP::Reference* dst_cell_styles_container);
  private:
  const ::TSP::Reference& _internal_dst_cell_styles_container() const;
  ::TSP::Reference* _internal_mutable_dst_cell_styles_container();
  public:
  void unsafe_arena_set_allocated_dst_cell_styles_container(
      ::TSP::Reference* dst_cell_styles_container);
  ::TSP::Reference* unsafe_arena_release_dst_cell_styles_container();

  // optional .TSP.Reference src_undo_cell_map = 9;
  bool has_src_undo_cell_map() const;
  private:
  bool _internal_has_src_undo_cell_map() const;
  public:
  void clear_src_undo_cell_map();
  const ::TSP::Reference& src_undo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_src_undo_cell_map();
  ::TSP::Reference* mutable_src_undo_cell_map();
  void set_allocated_src_undo_cell_map(::TSP::Reference* src_undo_cell_map);
  private:
  const ::TSP::Reference& _internal_src_undo_cell_map() const;
  ::TSP::Reference* _internal_mutable_src_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_src_undo_cell_map(
      ::TSP::Reference* src_undo_cell_map);
  ::TSP::Reference* unsafe_arena_release_src_undo_cell_map();

  // optional .TSP.Reference dst_undo_cell_map = 10;
  bool has_dst_undo_cell_map() const;
  private:
  bool _internal_has_dst_undo_cell_map() const;
  public:
  void clear_dst_undo_cell_map();
  const ::TSP::Reference& dst_undo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_dst_undo_cell_map();
  ::TSP::Reference* mutable_dst_undo_cell_map();
  void set_allocated_dst_undo_cell_map(::TSP::Reference* dst_undo_cell_map);
  private:
  const ::TSP::Reference& _internal_dst_undo_cell_map() const;
  ::TSP::Reference* _internal_mutable_dst_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_dst_undo_cell_map(
      ::TSP::Reference* dst_undo_cell_map);
  ::TSP::Reference* unsafe_arena_release_dst_undo_cell_map();

  // optional .TST.MergeOperationArchive merge_action_to_restore = 13;
  bool has_merge_action_to_restore() const;
  private:
  bool _internal_has_merge_action_to_restore() const;
  public:
  void clear_merge_action_to_restore();
  const ::TST::MergeOperationArchive& merge_action_to_restore() const;
  PROTOBUF_NODISCARD ::TST::MergeOperationArchive* release_merge_action_to_restore();
  ::TST::MergeOperationArchive* mutable_merge_action_to_restore();
  void set_allocated_merge_action_to_restore(::TST::MergeOperationArchive* merge_action_to_restore);
  private:
  const ::TST::MergeOperationArchive& _internal_merge_action_to_restore() const;
  ::TST::MergeOperationArchive* _internal_mutable_merge_action_to_restore();
  public:
  void unsafe_arena_set_allocated_merge_action_to_restore(
      ::TST::MergeOperationArchive* merge_action_to_restore);
  ::TST::MergeOperationArchive* unsafe_arena_release_merge_action_to_restore();

  // optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
  bool has_comment_cell_uids_to_restore() const;
  private:
  bool _internal_has_comment_cell_uids_to_restore() const;
  public:
  void clear_comment_cell_uids_to_restore();
  const ::TST::CellUIDListArchive& comment_cell_uids_to_restore() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_comment_cell_uids_to_restore();
  ::TST::CellUIDListArchive* mutable_comment_cell_uids_to_restore();
  void set_allocated_comment_cell_uids_to_restore(::TST::CellUIDListArchive* comment_cell_uids_to_restore);
  private:
  const ::TST::CellUIDListArchive& _internal_comment_cell_uids_to_restore() const;
  ::TST::CellUIDListArchive* _internal_mutable_comment_cell_uids_to_restore();
  public:
  void unsafe_arena_set_allocated_comment_cell_uids_to_restore(
      ::TST::CellUIDListArchive* comment_cell_uids_to_restore);
  ::TST::CellUIDListArchive* unsafe_arena_release_comment_cell_uids_to_restore();

  // required uint32 dst_merge_owner_rollback_index = 11;
  bool has_dst_merge_owner_rollback_index() const;
  private:
  bool _internal_has_dst_merge_owner_rollback_index() const;
  public:
  void clear_dst_merge_owner_rollback_index();
  uint32_t dst_merge_owner_rollback_index() const;
  void set_dst_merge_owner_rollback_index(uint32_t value);
  private:
  uint32_t _internal_dst_merge_owner_rollback_index() const;
  void _internal_set_dst_merge_owner_rollback_index(uint32_t value);
  public:

  // optional .TST.TableDimensionArchive table_dimension = 5;
  bool has_table_dimension() const;
  private:
  bool _internal_has_table_dimension() const;
  public:
  void clear_table_dimension();
  ::TST::TableDimensionArchive table_dimension() const;
  void set_table_dimension(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_table_dimension() const;
  void _internal_set_table_dimension(::TST::TableDimensionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandMoveCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > formula_rewrite_commands_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > comment_storages_to_restore_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUIDPath* dst_table_info_id_path_;
    ::TSP::UUIDRectArchive* src_uid_range_;
    ::TSP::UUIDRectArchive* dst_uid_range_;
    ::TSP::Reference* src_cell_map_;
    ::TSP::Reference* dst_cell_map_;
    ::TSP::Reference* dst_cell_styles_container_;
    ::TSP::Reference* src_undo_cell_map_;
    ::TSP::Reference* dst_undo_cell_map_;
    ::TST::MergeOperationArchive* merge_action_to_restore_;
    ::TST::CellUIDListArchive* comment_cell_uids_to_restore_;
    uint32_t dst_merge_owner_rollback_index_;
    int table_dimension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnRowMetadataArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ColumnRowMetadataArchive) */ {
 public:
  inline ColumnRowMetadataArchive() : ColumnRowMetadataArchive(nullptr) {}
  ~ColumnRowMetadataArchive() override;
  explicit PROTOBUF_CONSTEXPR ColumnRowMetadataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnRowMetadataArchive(const ColumnRowMetadataArchive& from);
  ColumnRowMetadataArchive(ColumnRowMetadataArchive&& from) noexcept
    : ColumnRowMetadataArchive() {
    *this = ::std::move(from);
  }

  inline ColumnRowMetadataArchive& operator=(const ColumnRowMetadataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnRowMetadataArchive& operator=(ColumnRowMetadataArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnRowMetadataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnRowMetadataArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnRowMetadataArchive*>(
               &_ColumnRowMetadataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ColumnRowMetadataArchive& a, ColumnRowMetadataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnRowMetadataArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnRowMetadataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnRowMetadataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnRowMetadataArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnRowMetadataArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnRowMetadataArchive& from) {
    ColumnRowMetadataArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnRowMetadataArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ColumnRowMetadataArchive";
  }
  protected:
  explicit ColumnRowMetadataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellStyleFieldNumber = 3,
    kTextStyleFieldNumber = 4,
    kUuidFieldNumber = 5,
    kSizeFieldNumber = 1,
    kHidingActionFieldNumber = 2,
  };
  // optional .TSP.Reference cell_style = 3;
  bool has_cell_style() const;
  private:
  bool _internal_has_cell_style() const;
  public:
  void clear_cell_style();
  const ::TSP::Reference& cell_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_style();
  ::TSP::Reference* mutable_cell_style();
  void set_allocated_cell_style(::TSP::Reference* cell_style);
  private:
  const ::TSP::Reference& _internal_cell_style() const;
  ::TSP::Reference* _internal_mutable_cell_style();
  public:
  void unsafe_arena_set_allocated_cell_style(
      ::TSP::Reference* cell_style);
  ::TSP::Reference* unsafe_arena_release_cell_style();

  // optional .TSP.Reference text_style = 4;
  bool has_text_style() const;
  private:
  bool _internal_has_text_style() const;
  public:
  void clear_text_style();
  const ::TSP::Reference& text_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_text_style();
  ::TSP::Reference* mutable_text_style();
  void set_allocated_text_style(::TSP::Reference* text_style);
  private:
  const ::TSP::Reference& _internal_text_style() const;
  ::TSP::Reference* _internal_mutable_text_style();
  public:
  void unsafe_arena_set_allocated_text_style(
      ::TSP::Reference* text_style);
  ::TSP::Reference* unsafe_arena_release_text_style();

  // optional .TSP.UUID uuid = 5;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // required double size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // required uint32 hiding_action = 2;
  bool has_hiding_action() const;
  private:
  bool _internal_has_hiding_action() const;
  public:
  void clear_hiding_action();
  uint32_t hiding_action() const;
  void set_hiding_action(uint32_t value);
  private:
  uint32_t _internal_hiding_action() const;
  void _internal_set_hiding_action(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ColumnRowMetadataArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* cell_style_;
    ::TSP::Reference* text_style_;
    ::TSP::UUID* uuid_;
    double size_;
    uint32_t hiding_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInsertColumnsOrRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandInsertColumnsOrRowsArchive) */ {
 public:
  inline CommandInsertColumnsOrRowsArchive() : CommandInsertColumnsOrRowsArchive(nullptr) {}
  ~CommandInsertColumnsOrRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandInsertColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInsertColumnsOrRowsArchive(const CommandInsertColumnsOrRowsArchive& from);
  CommandInsertColumnsOrRowsArchive(CommandInsertColumnsOrRowsArchive&& from) noexcept
    : CommandInsertColumnsOrRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandInsertColumnsOrRowsArchive& operator=(const CommandInsertColumnsOrRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInsertColumnsOrRowsArchive& operator=(CommandInsertColumnsOrRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInsertColumnsOrRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInsertColumnsOrRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandInsertColumnsOrRowsArchive*>(
               &_CommandInsertColumnsOrRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandInsertColumnsOrRowsArchive& a, CommandInsertColumnsOrRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInsertColumnsOrRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInsertColumnsOrRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandInsertColumnsOrRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandInsertColumnsOrRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInsertColumnsOrRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandInsertColumnsOrRowsArchive& from) {
    CommandInsertColumnsOrRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInsertColumnsOrRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandInsertColumnsOrRowsArchive";
  }
  protected:
  explicit CommandInsertColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoOrderFieldNumber = 10,
    kSuperFieldNumber = 1,
    kBundleFieldNumber = 2,
    kUndoCommandsFieldNumber = 4,
    kSortOrderFieldNumber = 6,
    kFilterSetFieldNumber = 7,
    kSrcRowColumnUidFieldNumber = 11,
    kOppRowColumnUidFieldNumber = 12,
    kUndoBundleFieldNumber = 13,
    kGroupSortOrderFieldNumber = 14,
    kConcurrentCellMapFieldNumber = 15,
    kCategoriesCellMapFieldNumber = 16,
    kUndoConcurrentCellMapFieldNumber = 17,
    kUndoCategoriesCellMapFieldNumber = 18,
    kShouldEdgeExpandFormulaRangesFieldNumber = 8,
    kWasCategorizedFieldNumber = 9,
  };
  // repeated .TSP.UUID undo_order = 10;
  int undo_order_size() const;
  private:
  int _internal_undo_order_size() const;
  public:
  void clear_undo_order();
  ::TSP::UUID* mutable_undo_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_order();
  private:
  const ::TSP::UUID& _internal_undo_order(int index) const;
  ::TSP::UUID* _internal_add_undo_order();
  public:
  const ::TSP::UUID& undo_order(int index) const;
  ::TSP::UUID* add_undo_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_order() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.ColumnRowBundleArchive bundle = 2;
  bool has_bundle() const;
  private:
  bool _internal_has_bundle() const;
  public:
  void clear_bundle();
  const ::TST::ColumnRowBundleArchive& bundle() const;
  PROTOBUF_NODISCARD ::TST::ColumnRowBundleArchive* release_bundle();
  ::TST::ColumnRowBundleArchive* mutable_bundle();
  void set_allocated_bundle(::TST::ColumnRowBundleArchive* bundle);
  private:
  const ::TST::ColumnRowBundleArchive& _internal_bundle() const;
  ::TST::ColumnRowBundleArchive* _internal_mutable_bundle();
  public:
  void unsafe_arena_set_allocated_bundle(
      ::TST::ColumnRowBundleArchive* bundle);
  ::TST::ColumnRowBundleArchive* unsafe_arena_release_bundle();

  // optional .TSP.Reference undo_commands = 4;
  bool has_undo_commands() const;
  private:
  bool _internal_has_undo_commands() const;
  public:
  void clear_undo_commands();
  const ::TSP::Reference& undo_commands() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_commands();
  ::TSP::Reference* mutable_undo_commands();
  void set_allocated_undo_commands(::TSP::Reference* undo_commands);
  private:
  const ::TSP::Reference& _internal_undo_commands() const;
  ::TSP::Reference* _internal_mutable_undo_commands();
  public:
  void unsafe_arena_set_allocated_undo_commands(
      ::TSP::Reference* undo_commands);
  ::TSP::Reference* unsafe_arena_release_undo_commands();

  // optional .TST.TableSortOrderUIDArchive sort_order = 6;
  bool has_sort_order() const;
  private:
  bool _internal_has_sort_order() const;
  public:
  void clear_sort_order();
  const ::TST::TableSortOrderUIDArchive& sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderUIDArchive* release_sort_order();
  ::TST::TableSortOrderUIDArchive* mutable_sort_order();
  void set_allocated_sort_order(::TST::TableSortOrderUIDArchive* sort_order);
  private:
  const ::TST::TableSortOrderUIDArchive& _internal_sort_order() const;
  ::TST::TableSortOrderUIDArchive* _internal_mutable_sort_order();
  public:
  void unsafe_arena_set_allocated_sort_order(
      ::TST::TableSortOrderUIDArchive* sort_order);
  ::TST::TableSortOrderUIDArchive* unsafe_arena_release_sort_order();

  // optional .TSP.Reference filter_set = 7;
  bool has_filter_set() const;
  private:
  bool _internal_has_filter_set() const;
  public:
  void clear_filter_set();
  const ::TSP::Reference& filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_filter_set();
  ::TSP::Reference* mutable_filter_set();
  void set_allocated_filter_set(::TSP::Reference* filter_set);
  private:
  const ::TSP::Reference& _internal_filter_set() const;
  ::TSP::Reference* _internal_mutable_filter_set();
  public:
  void unsafe_arena_set_allocated_filter_set(
      ::TSP::Reference* filter_set);
  ::TSP::Reference* unsafe_arena_release_filter_set();

  // required .TSP.UUID src_row_column_uid = 11;
  bool has_src_row_column_uid() const;
  private:
  bool _internal_has_src_row_column_uid() const;
  public:
  void clear_src_row_column_uid();
  const ::TSP::UUID& src_row_column_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_src_row_column_uid();
  ::TSP::UUID* mutable_src_row_column_uid();
  void set_allocated_src_row_column_uid(::TSP::UUID* src_row_column_uid);
  private:
  const ::TSP::UUID& _internal_src_row_column_uid() const;
  ::TSP::UUID* _internal_mutable_src_row_column_uid();
  public:
  void unsafe_arena_set_allocated_src_row_column_uid(
      ::TSP::UUID* src_row_column_uid);
  ::TSP::UUID* unsafe_arena_release_src_row_column_uid();

  // required .TSP.UUID opp_row_column_uid = 12;
  bool has_opp_row_column_uid() const;
  private:
  bool _internal_has_opp_row_column_uid() const;
  public:
  void clear_opp_row_column_uid();
  const ::TSP::UUID& opp_row_column_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_opp_row_column_uid();
  ::TSP::UUID* mutable_opp_row_column_uid();
  void set_allocated_opp_row_column_uid(::TSP::UUID* opp_row_column_uid);
  private:
  const ::TSP::UUID& _internal_opp_row_column_uid() const;
  ::TSP::UUID* _internal_mutable_opp_row_column_uid();
  public:
  void unsafe_arena_set_allocated_opp_row_column_uid(
      ::TSP::UUID* opp_row_column_uid);
  ::TSP::UUID* unsafe_arena_release_opp_row_column_uid();

  // optional .TST.ColumnRowBundleArchive undo_bundle = 13;
  bool has_undo_bundle() const;
  private:
  bool _internal_has_undo_bundle() const;
  public:
  void clear_undo_bundle();
  const ::TST::ColumnRowBundleArchive& undo_bundle() const;
  PROTOBUF_NODISCARD ::TST::ColumnRowBundleArchive* release_undo_bundle();
  ::TST::ColumnRowBundleArchive* mutable_undo_bundle();
  void set_allocated_undo_bundle(::TST::ColumnRowBundleArchive* undo_bundle);
  private:
  const ::TST::ColumnRowBundleArchive& _internal_undo_bundle() const;
  ::TST::ColumnRowBundleArchive* _internal_mutable_undo_bundle();
  public:
  void unsafe_arena_set_allocated_undo_bundle(
      ::TST::ColumnRowBundleArchive* undo_bundle);
  ::TST::ColumnRowBundleArchive* unsafe_arena_release_undo_bundle();

  // optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 14;
  bool has_group_sort_order() const;
  private:
  bool _internal_has_group_sort_order() const;
  public:
  void clear_group_sort_order();
  const ::TST::TableGroupSortOrderUIDArchive& group_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableGroupSortOrderUIDArchive* release_group_sort_order();
  ::TST::TableGroupSortOrderUIDArchive* mutable_group_sort_order();
  void set_allocated_group_sort_order(::TST::TableGroupSortOrderUIDArchive* group_sort_order);
  private:
  const ::TST::TableGroupSortOrderUIDArchive& _internal_group_sort_order() const;
  ::TST::TableGroupSortOrderUIDArchive* _internal_mutable_group_sort_order();
  public:
  void unsafe_arena_set_allocated_group_sort_order(
      ::TST::TableGroupSortOrderUIDArchive* group_sort_order);
  ::TST::TableGroupSortOrderUIDArchive* unsafe_arena_release_group_sort_order();

  // required .TSP.Reference concurrent_cell_map = 15;
  bool has_concurrent_cell_map() const;
  private:
  bool _internal_has_concurrent_cell_map() const;
  public:
  void clear_concurrent_cell_map();
  const ::TSP::Reference& concurrent_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_concurrent_cell_map();
  ::TSP::Reference* mutable_concurrent_cell_map();
  void set_allocated_concurrent_cell_map(::TSP::Reference* concurrent_cell_map);
  private:
  const ::TSP::Reference& _internal_concurrent_cell_map() const;
  ::TSP::Reference* _internal_mutable_concurrent_cell_map();
  public:
  void unsafe_arena_set_allocated_concurrent_cell_map(
      ::TSP::Reference* concurrent_cell_map);
  ::TSP::Reference* unsafe_arena_release_concurrent_cell_map();

  // required .TSP.Reference categories_cell_map = 16;
  bool has_categories_cell_map() const;
  private:
  bool _internal_has_categories_cell_map() const;
  public:
  void clear_categories_cell_map();
  const ::TSP::Reference& categories_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_categories_cell_map();
  ::TSP::Reference* mutable_categories_cell_map();
  void set_allocated_categories_cell_map(::TSP::Reference* categories_cell_map);
  private:
  const ::TSP::Reference& _internal_categories_cell_map() const;
  ::TSP::Reference* _internal_mutable_categories_cell_map();
  public:
  void unsafe_arena_set_allocated_categories_cell_map(
      ::TSP::Reference* categories_cell_map);
  ::TSP::Reference* unsafe_arena_release_categories_cell_map();

  // optional .TSP.Reference undo_concurrent_cell_map = 17;
  bool has_undo_concurrent_cell_map() const;
  private:
  bool _internal_has_undo_concurrent_cell_map() const;
  public:
  void clear_undo_concurrent_cell_map();
  const ::TSP::Reference& undo_concurrent_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_concurrent_cell_map();
  ::TSP::Reference* mutable_undo_concurrent_cell_map();
  void set_allocated_undo_concurrent_cell_map(::TSP::Reference* undo_concurrent_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_concurrent_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_concurrent_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_concurrent_cell_map(
      ::TSP::Reference* undo_concurrent_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_concurrent_cell_map();

  // optional .TSP.Reference undo_categories_cell_map = 18;
  bool has_undo_categories_cell_map() const;
  private:
  bool _internal_has_undo_categories_cell_map() const;
  public:
  void clear_undo_categories_cell_map();
  const ::TSP::Reference& undo_categories_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_categories_cell_map();
  ::TSP::Reference* mutable_undo_categories_cell_map();
  void set_allocated_undo_categories_cell_map(::TSP::Reference* undo_categories_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_categories_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_categories_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_categories_cell_map(
      ::TSP::Reference* undo_categories_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_categories_cell_map();

  // optional bool should_edge_expand_formula_ranges = 8;
  bool has_should_edge_expand_formula_ranges() const;
  private:
  bool _internal_has_should_edge_expand_formula_ranges() const;
  public:
  void clear_should_edge_expand_formula_ranges();
  bool should_edge_expand_formula_ranges() const;
  void set_should_edge_expand_formula_ranges(bool value);
  private:
  bool _internal_should_edge_expand_formula_ranges() const;
  void _internal_set_should_edge_expand_formula_ranges(bool value);
  public:

  // optional bool was_categorized = 9;
  bool has_was_categorized() const;
  private:
  bool _internal_has_was_categorized() const;
  public:
  void clear_was_categorized();
  bool was_categorized() const;
  void set_was_categorized(bool value);
  private:
  bool _internal_was_categorized() const;
  void _internal_set_was_categorized(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandInsertColumnsOrRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_order_;
    ::TST::TableCommandArchive* super_;
    ::TST::ColumnRowBundleArchive* bundle_;
    ::TSP::Reference* undo_commands_;
    ::TST::TableSortOrderUIDArchive* sort_order_;
    ::TSP::Reference* filter_set_;
    ::TSP::UUID* src_row_column_uid_;
    ::TSP::UUID* opp_row_column_uid_;
    ::TST::ColumnRowBundleArchive* undo_bundle_;
    ::TST::TableGroupSortOrderUIDArchive* group_sort_order_;
    ::TSP::Reference* concurrent_cell_map_;
    ::TSP::Reference* categories_cell_map_;
    ::TSP::Reference* undo_concurrent_cell_map_;
    ::TSP::Reference* undo_categories_cell_map_;
    bool should_edge_expand_formula_ranges_;
    bool was_categorized_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnRowBundleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ColumnRowBundleArchive) */ {
 public:
  inline ColumnRowBundleArchive() : ColumnRowBundleArchive(nullptr) {}
  ~ColumnRowBundleArchive() override;
  explicit PROTOBUF_CONSTEXPR ColumnRowBundleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnRowBundleArchive(const ColumnRowBundleArchive& from);
  ColumnRowBundleArchive(ColumnRowBundleArchive&& from) noexcept
    : ColumnRowBundleArchive() {
    *this = ::std::move(from);
  }

  inline ColumnRowBundleArchive& operator=(const ColumnRowBundleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnRowBundleArchive& operator=(ColumnRowBundleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnRowBundleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnRowBundleArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnRowBundleArchive*>(
               &_ColumnRowBundleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ColumnRowBundleArchive& a, ColumnRowBundleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnRowBundleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnRowBundleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnRowBundleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnRowBundleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnRowBundleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnRowBundleArchive& from) {
    ColumnRowBundleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnRowBundleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ColumnRowBundleArchive";
  }
  protected:
  explicit ColumnRowBundleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewUidListFieldNumber = 2,
    kViewTypeListFieldNumber = 3,
    kBaseUidListFieldNumber = 4,
    kBaseTypeListFieldNumber = 5,
    kCategoryOrderUidListFieldNumber = 6,
    kCategoryOrderTypeListFieldNumber = 7,
    kMetadataListFieldNumber = 8,
    kIsRowFieldNumber = 1,
  };
  // repeated .TSP.UUID view_uid_list = 2;
  int view_uid_list_size() const;
  private:
  int _internal_view_uid_list_size() const;
  public:
  void clear_view_uid_list();
  ::TSP::UUID* mutable_view_uid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_view_uid_list();
  private:
  const ::TSP::UUID& _internal_view_uid_list(int index) const;
  ::TSP::UUID* _internal_add_view_uid_list();
  public:
  const ::TSP::UUID& view_uid_list(int index) const;
  ::TSP::UUID* add_view_uid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      view_uid_list() const;

  // repeated .TST.ColumnRowBundleItemTypeEnum view_type_list = 3;
  int view_type_list_size() const;
  private:
  int _internal_view_type_list_size() const;
  public:
  void clear_view_type_list();
  private:
  ::TST::ColumnRowBundleItemTypeEnum _internal_view_type_list(int index) const;
  void _internal_add_view_type_list(::TST::ColumnRowBundleItemTypeEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_view_type_list();
  public:
  ::TST::ColumnRowBundleItemTypeEnum view_type_list(int index) const;
  void set_view_type_list(int index, ::TST::ColumnRowBundleItemTypeEnum value);
  void add_view_type_list(::TST::ColumnRowBundleItemTypeEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& view_type_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_view_type_list();

  // repeated .TSP.UUID base_uid_list = 4;
  int base_uid_list_size() const;
  private:
  int _internal_base_uid_list_size() const;
  public:
  void clear_base_uid_list();
  ::TSP::UUID* mutable_base_uid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_base_uid_list();
  private:
  const ::TSP::UUID& _internal_base_uid_list(int index) const;
  ::TSP::UUID* _internal_add_base_uid_list();
  public:
  const ::TSP::UUID& base_uid_list(int index) const;
  ::TSP::UUID* add_base_uid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      base_uid_list() const;

  // repeated .TST.ColumnRowBundleItemTypeEnum base_type_list = 5;
  int base_type_list_size() const;
  private:
  int _internal_base_type_list_size() const;
  public:
  void clear_base_type_list();
  private:
  ::TST::ColumnRowBundleItemTypeEnum _internal_base_type_list(int index) const;
  void _internal_add_base_type_list(::TST::ColumnRowBundleItemTypeEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_base_type_list();
  public:
  ::TST::ColumnRowBundleItemTypeEnum base_type_list(int index) const;
  void set_base_type_list(int index, ::TST::ColumnRowBundleItemTypeEnum value);
  void add_base_type_list(::TST::ColumnRowBundleItemTypeEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& base_type_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_base_type_list();

  // repeated .TSP.UUID category_order_uid_list = 6;
  int category_order_uid_list_size() const;
  private:
  int _internal_category_order_uid_list_size() const;
  public:
  void clear_category_order_uid_list();
  ::TSP::UUID* mutable_category_order_uid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_category_order_uid_list();
  private:
  const ::TSP::UUID& _internal_category_order_uid_list(int index) const;
  ::TSP::UUID* _internal_add_category_order_uid_list();
  public:
  const ::TSP::UUID& category_order_uid_list(int index) const;
  ::TSP::UUID* add_category_order_uid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      category_order_uid_list() const;

  // repeated .TST.ColumnRowBundleItemTypeEnum category_order_type_list = 7;
  int category_order_type_list_size() const;
  private:
  int _internal_category_order_type_list_size() const;
  public:
  void clear_category_order_type_list();
  private:
  ::TST::ColumnRowBundleItemTypeEnum _internal_category_order_type_list(int index) const;
  void _internal_add_category_order_type_list(::TST::ColumnRowBundleItemTypeEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_category_order_type_list();
  public:
  ::TST::ColumnRowBundleItemTypeEnum category_order_type_list(int index) const;
  void set_category_order_type_list(int index, ::TST::ColumnRowBundleItemTypeEnum value);
  void add_category_order_type_list(::TST::ColumnRowBundleItemTypeEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& category_order_type_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_category_order_type_list();

  // repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
  int metadata_list_size() const;
  private:
  int _internal_metadata_list_size() const;
  public:
  void clear_metadata_list();
  ::TST::ColumnRowMetadataArchive* mutable_metadata_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
      mutable_metadata_list();
  private:
  const ::TST::ColumnRowMetadataArchive& _internal_metadata_list(int index) const;
  ::TST::ColumnRowMetadataArchive* _internal_add_metadata_list();
  public:
  const ::TST::ColumnRowMetadataArchive& metadata_list(int index) const;
  ::TST::ColumnRowMetadataArchive* add_metadata_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
      metadata_list() const;

  // required bool is_row = 1;
  bool has_is_row() const;
  private:
  bool _internal_has_is_row() const;
  public:
  void clear_is_row();
  bool is_row() const;
  void set_is_row(bool value);
  private:
  bool _internal_is_row() const;
  void _internal_set_is_row(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ColumnRowBundleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > view_uid_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> view_type_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > base_uid_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> base_type_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > category_order_uid_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> category_order_type_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive > metadata_list_;
    bool is_row_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRemoveColumnsOrRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRemoveColumnsOrRowsArchive) */ {
 public:
  inline CommandRemoveColumnsOrRowsArchive() : CommandRemoveColumnsOrRowsArchive(nullptr) {}
  ~CommandRemoveColumnsOrRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRemoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRemoveColumnsOrRowsArchive(const CommandRemoveColumnsOrRowsArchive& from);
  CommandRemoveColumnsOrRowsArchive(CommandRemoveColumnsOrRowsArchive&& from) noexcept
    : CommandRemoveColumnsOrRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandRemoveColumnsOrRowsArchive& operator=(const CommandRemoveColumnsOrRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRemoveColumnsOrRowsArchive& operator=(CommandRemoveColumnsOrRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRemoveColumnsOrRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRemoveColumnsOrRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRemoveColumnsOrRowsArchive*>(
               &_CommandRemoveColumnsOrRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandRemoveColumnsOrRowsArchive& a, CommandRemoveColumnsOrRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRemoveColumnsOrRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRemoveColumnsOrRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRemoveColumnsOrRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRemoveColumnsOrRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRemoveColumnsOrRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRemoveColumnsOrRowsArchive& from) {
    CommandRemoveColumnsOrRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRemoveColumnsOrRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRemoveColumnsOrRowsArchive";
  }
  protected:
  explicit CommandRemoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoOrderFieldNumber = 9,
    kSuperFieldNumber = 1,
    kBundleFieldNumber = 2,
    kUndoFilterSetFieldNumber = 5,
    kUndoSortOrderFieldNumber = 6,
    kFormulaRewriteCommandForUndoFieldNumber = 7,
    kUndoGroupSortOrderFieldNumber = 10,
    kConcurrentCellMapFieldNumber = 11,
    kCategoriesCellMapFieldNumber = 12,
    kUndoConcurrentCellMapFieldNumber = 13,
    kUndoCategoriesCellMapFieldNumber = 14,
    kInverseShouldEdgeExpandFormulaRangesFieldNumber = 8,
  };
  // repeated .TSP.UUID undo_order = 9;
  int undo_order_size() const;
  private:
  int _internal_undo_order_size() const;
  public:
  void clear_undo_order();
  ::TSP::UUID* mutable_undo_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_order();
  private:
  const ::TSP::UUID& _internal_undo_order(int index) const;
  ::TSP::UUID* _internal_add_undo_order();
  public:
  const ::TSP::UUID& undo_order(int index) const;
  ::TSP::UUID* add_undo_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_order() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.ColumnRowBundleArchive bundle = 2;
  bool has_bundle() const;
  private:
  bool _internal_has_bundle() const;
  public:
  void clear_bundle();
  const ::TST::ColumnRowBundleArchive& bundle() const;
  PROTOBUF_NODISCARD ::TST::ColumnRowBundleArchive* release_bundle();
  ::TST::ColumnRowBundleArchive* mutable_bundle();
  void set_allocated_bundle(::TST::ColumnRowBundleArchive* bundle);
  private:
  const ::TST::ColumnRowBundleArchive& _internal_bundle() const;
  ::TST::ColumnRowBundleArchive* _internal_mutable_bundle();
  public:
  void unsafe_arena_set_allocated_bundle(
      ::TST::ColumnRowBundleArchive* bundle);
  ::TST::ColumnRowBundleArchive* unsafe_arena_release_bundle();

  // optional .TSP.Reference undo_filter_set = 5;
  bool has_undo_filter_set() const;
  private:
  bool _internal_has_undo_filter_set() const;
  public:
  void clear_undo_filter_set();
  const ::TSP::Reference& undo_filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_filter_set();
  ::TSP::Reference* mutable_undo_filter_set();
  void set_allocated_undo_filter_set(::TSP::Reference* undo_filter_set);
  private:
  const ::TSP::Reference& _internal_undo_filter_set() const;
  ::TSP::Reference* _internal_mutable_undo_filter_set();
  public:
  void unsafe_arena_set_allocated_undo_filter_set(
      ::TSP::Reference* undo_filter_set);
  ::TSP::Reference* unsafe_arena_release_undo_filter_set();

  // optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
  bool has_undo_sort_order() const;
  private:
  bool _internal_has_undo_sort_order() const;
  public:
  void clear_undo_sort_order();
  const ::TST::TableSortOrderUIDArchive& undo_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderUIDArchive* release_undo_sort_order();
  ::TST::TableSortOrderUIDArchive* mutable_undo_sort_order();
  void set_allocated_undo_sort_order(::TST::TableSortOrderUIDArchive* undo_sort_order);
  private:
  const ::TST::TableSortOrderUIDArchive& _internal_undo_sort_order() const;
  ::TST::TableSortOrderUIDArchive* _internal_mutable_undo_sort_order();
  public:
  void unsafe_arena_set_allocated_undo_sort_order(
      ::TST::TableSortOrderUIDArchive* undo_sort_order);
  ::TST::TableSortOrderUIDArchive* unsafe_arena_release_undo_sort_order();

  // optional .TSP.Reference formula_rewrite_command_for_undo = 7;
  bool has_formula_rewrite_command_for_undo() const;
  private:
  bool _internal_has_formula_rewrite_command_for_undo() const;
  public:
  void clear_formula_rewrite_command_for_undo();
  const ::TSP::Reference& formula_rewrite_command_for_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command_for_undo();
  ::TSP::Reference* mutable_formula_rewrite_command_for_undo();
  void set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command_for_undo() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command_for_undo();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
      ::TSP::Reference* formula_rewrite_command_for_undo);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command_for_undo();

  // optional .TST.TableGroupSortOrderUIDArchive undo_group_sort_order = 10;
  bool has_undo_group_sort_order() const;
  private:
  bool _internal_has_undo_group_sort_order() const;
  public:
  void clear_undo_group_sort_order();
  const ::TST::TableGroupSortOrderUIDArchive& undo_group_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableGroupSortOrderUIDArchive* release_undo_group_sort_order();
  ::TST::TableGroupSortOrderUIDArchive* mutable_undo_group_sort_order();
  void set_allocated_undo_group_sort_order(::TST::TableGroupSortOrderUIDArchive* undo_group_sort_order);
  private:
  const ::TST::TableGroupSortOrderUIDArchive& _internal_undo_group_sort_order() const;
  ::TST::TableGroupSortOrderUIDArchive* _internal_mutable_undo_group_sort_order();
  public:
  void unsafe_arena_set_allocated_undo_group_sort_order(
      ::TST::TableGroupSortOrderUIDArchive* undo_group_sort_order);
  ::TST::TableGroupSortOrderUIDArchive* unsafe_arena_release_undo_group_sort_order();

  // optional .TSP.Reference concurrent_cell_map = 11;
  bool has_concurrent_cell_map() const;
  private:
  bool _internal_has_concurrent_cell_map() const;
  public:
  void clear_concurrent_cell_map();
  const ::TSP::Reference& concurrent_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_concurrent_cell_map();
  ::TSP::Reference* mutable_concurrent_cell_map();
  void set_allocated_concurrent_cell_map(::TSP::Reference* concurrent_cell_map);
  private:
  const ::TSP::Reference& _internal_concurrent_cell_map() const;
  ::TSP::Reference* _internal_mutable_concurrent_cell_map();
  public:
  void unsafe_arena_set_allocated_concurrent_cell_map(
      ::TSP::Reference* concurrent_cell_map);
  ::TSP::Reference* unsafe_arena_release_concurrent_cell_map();

  // optional .TSP.Reference categories_cell_map = 12;
  bool has_categories_cell_map() const;
  private:
  bool _internal_has_categories_cell_map() const;
  public:
  void clear_categories_cell_map();
  const ::TSP::Reference& categories_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_categories_cell_map();
  ::TSP::Reference* mutable_categories_cell_map();
  void set_allocated_categories_cell_map(::TSP::Reference* categories_cell_map);
  private:
  const ::TSP::Reference& _internal_categories_cell_map() const;
  ::TSP::Reference* _internal_mutable_categories_cell_map();
  public:
  void unsafe_arena_set_allocated_categories_cell_map(
      ::TSP::Reference* categories_cell_map);
  ::TSP::Reference* unsafe_arena_release_categories_cell_map();

  // optional .TSP.Reference undo_concurrent_cell_map = 13;
  bool has_undo_concurrent_cell_map() const;
  private:
  bool _internal_has_undo_concurrent_cell_map() const;
  public:
  void clear_undo_concurrent_cell_map();
  const ::TSP::Reference& undo_concurrent_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_concurrent_cell_map();
  ::TSP::Reference* mutable_undo_concurrent_cell_map();
  void set_allocated_undo_concurrent_cell_map(::TSP::Reference* undo_concurrent_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_concurrent_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_concurrent_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_concurrent_cell_map(
      ::TSP::Reference* undo_concurrent_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_concurrent_cell_map();

  // optional .TSP.Reference undo_categories_cell_map = 14;
  bool has_undo_categories_cell_map() const;
  private:
  bool _internal_has_undo_categories_cell_map() const;
  public:
  void clear_undo_categories_cell_map();
  const ::TSP::Reference& undo_categories_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_categories_cell_map();
  ::TSP::Reference* mutable_undo_categories_cell_map();
  void set_allocated_undo_categories_cell_map(::TSP::Reference* undo_categories_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_categories_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_categories_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_categories_cell_map(
      ::TSP::Reference* undo_categories_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_categories_cell_map();

  // optional bool inverse_should_edge_expand_formula_ranges = 8;
  bool has_inverse_should_edge_expand_formula_ranges() const;
  private:
  bool _internal_has_inverse_should_edge_expand_formula_ranges() const;
  public:
  void clear_inverse_should_edge_expand_formula_ranges();
  bool inverse_should_edge_expand_formula_ranges() const;
  void set_inverse_should_edge_expand_formula_ranges(bool value);
  private:
  bool _internal_inverse_should_edge_expand_formula_ranges() const;
  void _internal_set_inverse_should_edge_expand_formula_ranges(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandRemoveColumnsOrRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_order_;
    ::TST::TableCommandArchive* super_;
    ::TST::ColumnRowBundleArchive* bundle_;
    ::TSP::Reference* undo_filter_set_;
    ::TST::TableSortOrderUIDArchive* undo_sort_order_;
    ::TSP::Reference* formula_rewrite_command_for_undo_;
    ::TST::TableGroupSortOrderUIDArchive* undo_group_sort_order_;
    ::TSP::Reference* concurrent_cell_map_;
    ::TSP::Reference* categories_cell_map_;
    ::TSP::Reference* undo_concurrent_cell_map_;
    ::TSP::Reference* undo_categories_cell_map_;
    bool inverse_should_edge_expand_formula_ranges_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRowColumnRangeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRowColumnRangeArchive) */ {
 public:
  inline CommandRowColumnRangeArchive() : CommandRowColumnRangeArchive(nullptr) {}
  ~CommandRowColumnRangeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRowColumnRangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRowColumnRangeArchive(const CommandRowColumnRangeArchive& from);
  CommandRowColumnRangeArchive(CommandRowColumnRangeArchive&& from) noexcept
    : CommandRowColumnRangeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRowColumnRangeArchive& operator=(const CommandRowColumnRangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRowColumnRangeArchive& operator=(CommandRowColumnRangeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRowColumnRangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRowColumnRangeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRowColumnRangeArchive*>(
               &_CommandRowColumnRangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandRowColumnRangeArchive& a, CommandRowColumnRangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRowColumnRangeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRowColumnRangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRowColumnRangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRowColumnRangeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRowColumnRangeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRowColumnRangeArchive& from) {
    CommandRowColumnRangeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRowColumnRangeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRowColumnRangeArchive";
  }
  protected:
  explicit CommandRowColumnRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 2,
    kSuperFieldNumber = 1,
    kIsRowFieldNumber = 3,
  };
  // repeated .TSP.UUID uids = 2;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  ::TSP::UUID* mutable_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uids();
  private:
  const ::TSP::UUID& _internal_uids(int index) const;
  ::TSP::UUID* _internal_add_uids();
  public:
  const ::TSP::UUID& uids(int index) const;
  ::TSP::UUID* add_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uids() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool is_row = 3;
  bool has_is_row() const;
  private:
  bool _internal_has_is_row() const;
  public:
  void clear_is_row();
  bool is_row() const;
  void set_is_row(bool value);
  private:
  bool _internal_is_row() const;
  void _internal_set_is_row(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandRowColumnRangeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uids_;
    ::TST::TableCommandArchive* super_;
    bool is_row_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandResizeColumnOrRowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandResizeColumnOrRowArchive) */ {
 public:
  inline CommandResizeColumnOrRowArchive() : CommandResizeColumnOrRowArchive(nullptr) {}
  ~CommandResizeColumnOrRowArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResizeColumnOrRowArchive(const CommandResizeColumnOrRowArchive& from);
  CommandResizeColumnOrRowArchive(CommandResizeColumnOrRowArchive&& from) noexcept
    : CommandResizeColumnOrRowArchive() {
    *this = ::std::move(from);
  }

  inline CommandResizeColumnOrRowArchive& operator=(const CommandResizeColumnOrRowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResizeColumnOrRowArchive& operator=(CommandResizeColumnOrRowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResizeColumnOrRowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResizeColumnOrRowArchive* internal_default_instance() {
    return reinterpret_cast<const CommandResizeColumnOrRowArchive*>(
               &_CommandResizeColumnOrRowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandResizeColumnOrRowArchive& a, CommandResizeColumnOrRowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResizeColumnOrRowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResizeColumnOrRowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResizeColumnOrRowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandResizeColumnOrRowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResizeColumnOrRowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandResizeColumnOrRowArchive& from) {
    CommandResizeColumnOrRowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResizeColumnOrRowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandResizeColumnOrRowArchive";
  }
  protected:
  explicit CommandResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizesFieldNumber = 2,
    kSizesForUndoFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // repeated float sizes = 2;
  int sizes_size() const;
  private:
  int _internal_sizes_size() const;
  public:
  void clear_sizes();
  private:
  float _internal_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sizes() const;
  void _internal_add_sizes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sizes();
  public:
  float sizes(int index) const;
  void set_sizes(int index, float value);
  void add_sizes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sizes();

  // repeated float sizes_for_undo = 3;
  int sizes_for_undo_size() const;
  private:
  int _internal_sizes_for_undo_size() const;
  public:
  void clear_sizes_for_undo();
  private:
  float _internal_sizes_for_undo(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sizes_for_undo() const;
  void _internal_add_sizes_for_undo(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sizes_for_undo();
  public:
  float sizes_for_undo(int index) const;
  void set_sizes_for_undo(int index, float value);
  void add_sizes_for_undo(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sizes_for_undo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sizes_for_undo();

  // required .TST.CommandRowColumnRangeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandRowColumnRangeArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandRowColumnRangeArchive* release_super();
  ::TST::CommandRowColumnRangeArchive* mutable_super();
  void set_allocated_super(::TST::CommandRowColumnRangeArchive* super);
  private:
  const ::TST::CommandRowColumnRangeArchive& _internal_super() const;
  ::TST::CommandRowColumnRangeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandRowColumnRangeArchive* super);
  ::TST::CommandRowColumnRangeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandResizeColumnOrRowArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sizes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sizes_for_undo_;
    ::TST::CommandRowColumnRangeArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCategoryResizeColumnOrRowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCategoryResizeColumnOrRowArchive) */ {
 public:
  inline CommandCategoryResizeColumnOrRowArchive() : CommandCategoryResizeColumnOrRowArchive(nullptr) {}
  ~CommandCategoryResizeColumnOrRowArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandCategoryResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCategoryResizeColumnOrRowArchive(const CommandCategoryResizeColumnOrRowArchive& from);
  CommandCategoryResizeColumnOrRowArchive(CommandCategoryResizeColumnOrRowArchive&& from) noexcept
    : CommandCategoryResizeColumnOrRowArchive() {
    *this = ::std::move(from);
  }

  inline CommandCategoryResizeColumnOrRowArchive& operator=(const CommandCategoryResizeColumnOrRowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCategoryResizeColumnOrRowArchive& operator=(CommandCategoryResizeColumnOrRowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCategoryResizeColumnOrRowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCategoryResizeColumnOrRowArchive* internal_default_instance() {
    return reinterpret_cast<const CommandCategoryResizeColumnOrRowArchive*>(
               &_CommandCategoryResizeColumnOrRowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandCategoryResizeColumnOrRowArchive& a, CommandCategoryResizeColumnOrRowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCategoryResizeColumnOrRowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCategoryResizeColumnOrRowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCategoryResizeColumnOrRowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCategoryResizeColumnOrRowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCategoryResizeColumnOrRowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCategoryResizeColumnOrRowArchive& from) {
    CommandCategoryResizeColumnOrRowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCategoryResizeColumnOrRowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCategoryResizeColumnOrRowArchive";
  }
  protected:
  explicit CommandCategoryResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryRowSizesFieldNumber = 2,
    kCategoryRowSizesForUndoFieldNumber = 3,
    kCategoryLabelRowSizesFieldNumber = 4,
    kCategoryLabelRowSizesForUndoFieldNumber = 5,
    kSuperFieldNumber = 1,
    kCategoryColumnSizeFieldNumber = 6,
    kCategoryColumnSizeForUndoFieldNumber = 7,
  };
  // repeated float category_row_sizes = 2;
  int category_row_sizes_size() const;
  private:
  int _internal_category_row_sizes_size() const;
  public:
  void clear_category_row_sizes();
  private:
  float _internal_category_row_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_category_row_sizes() const;
  void _internal_add_category_row_sizes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_category_row_sizes();
  public:
  float category_row_sizes(int index) const;
  void set_category_row_sizes(int index, float value);
  void add_category_row_sizes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      category_row_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_category_row_sizes();

  // repeated float category_row_sizes_for_undo = 3;
  int category_row_sizes_for_undo_size() const;
  private:
  int _internal_category_row_sizes_for_undo_size() const;
  public:
  void clear_category_row_sizes_for_undo();
  private:
  float _internal_category_row_sizes_for_undo(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_category_row_sizes_for_undo() const;
  void _internal_add_category_row_sizes_for_undo(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_category_row_sizes_for_undo();
  public:
  float category_row_sizes_for_undo(int index) const;
  void set_category_row_sizes_for_undo(int index, float value);
  void add_category_row_sizes_for_undo(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      category_row_sizes_for_undo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_category_row_sizes_for_undo();

  // repeated float category_label_row_sizes = 4;
  int category_label_row_sizes_size() const;
  private:
  int _internal_category_label_row_sizes_size() const;
  public:
  void clear_category_label_row_sizes();
  private:
  float _internal_category_label_row_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_category_label_row_sizes() const;
  void _internal_add_category_label_row_sizes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_category_label_row_sizes();
  public:
  float category_label_row_sizes(int index) const;
  void set_category_label_row_sizes(int index, float value);
  void add_category_label_row_sizes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      category_label_row_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_category_label_row_sizes();

  // repeated float category_label_row_sizes_for_undo = 5;
  int category_label_row_sizes_for_undo_size() const;
  private:
  int _internal_category_label_row_sizes_for_undo_size() const;
  public:
  void clear_category_label_row_sizes_for_undo();
  private:
  float _internal_category_label_row_sizes_for_undo(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_category_label_row_sizes_for_undo() const;
  void _internal_add_category_label_row_sizes_for_undo(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_category_label_row_sizes_for_undo();
  public:
  float category_label_row_sizes_for_undo(int index) const;
  void set_category_label_row_sizes_for_undo(int index, float value);
  void add_category_label_row_sizes_for_undo(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      category_label_row_sizes_for_undo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_category_label_row_sizes_for_undo();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional double category_column_size = 6;
  bool has_category_column_size() const;
  private:
  bool _internal_has_category_column_size() const;
  public:
  void clear_category_column_size();
  double category_column_size() const;
  void set_category_column_size(double value);
  private:
  double _internal_category_column_size() const;
  void _internal_set_category_column_size(double value);
  public:

  // optional double category_column_size_for_undo = 7;
  bool has_category_column_size_for_undo() const;
  private:
  bool _internal_has_category_column_size_for_undo() const;
  public:
  void clear_category_column_size_for_undo();
  double category_column_size_for_undo() const;
  void set_category_column_size_for_undo(double value);
  private:
  double _internal_category_column_size_for_undo() const;
  void _internal_set_category_column_size_for_undo(double value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandCategoryResizeColumnOrRowArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > category_row_sizes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > category_row_sizes_for_undo_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > category_label_row_sizes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > category_label_row_sizes_for_undo_;
    ::TST::TableCommandArchive* super_;
    double category_column_size_;
    double category_column_size_for_undo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandHideShowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandHideShowArchive) */ {
 public:
  inline CommandHideShowArchive() : CommandHideShowArchive(nullptr) {}
  ~CommandHideShowArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandHideShowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandHideShowArchive(const CommandHideShowArchive& from);
  CommandHideShowArchive(CommandHideShowArchive&& from) noexcept
    : CommandHideShowArchive() {
    *this = ::std::move(from);
  }

  inline CommandHideShowArchive& operator=(const CommandHideShowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandHideShowArchive& operator=(CommandHideShowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandHideShowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandHideShowArchive* internal_default_instance() {
    return reinterpret_cast<const CommandHideShowArchive*>(
               &_CommandHideShowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandHideShowArchive& a, CommandHideShowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandHideShowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandHideShowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandHideShowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandHideShowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandHideShowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandHideShowArchive& from) {
    CommandHideShowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandHideShowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandHideShowArchive";
  }
  protected:
  explicit CommandHideShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHideShowActionForUndoFieldNumber = 4,
    kSuperFieldNumber = 1,
    kHideShowActionFieldNumber = 2,
    kHidingActionFieldNumber = 3,
  };
  // repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
  int hide_show_action_for_undo_size() const;
  private:
  int _internal_hide_show_action_for_undo_size() const;
  public:
  void clear_hide_show_action_for_undo();
  private:
  ::TST::HideShowActionArchive _internal_hide_show_action_for_undo(int index) const;
  void _internal_add_hide_show_action_for_undo(::TST::HideShowActionArchive value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_hide_show_action_for_undo();
  public:
  ::TST::HideShowActionArchive hide_show_action_for_undo(int index) const;
  void set_hide_show_action_for_undo(int index, ::TST::HideShowActionArchive value);
  void add_hide_show_action_for_undo(::TST::HideShowActionArchive value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& hide_show_action_for_undo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_hide_show_action_for_undo();

  // required .TST.CommandRowColumnRangeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandRowColumnRangeArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandRowColumnRangeArchive* release_super();
  ::TST::CommandRowColumnRangeArchive* mutable_super();
  void set_allocated_super(::TST::CommandRowColumnRangeArchive* super);
  private:
  const ::TST::CommandRowColumnRangeArchive& _internal_super() const;
  ::TST::CommandRowColumnRangeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandRowColumnRangeArchive* super);
  ::TST::CommandRowColumnRangeArchive* unsafe_arena_release_super();

  // required .TST.HideShowActionArchive hide_show_action = 2;
  bool has_hide_show_action() const;
  private:
  bool _internal_has_hide_show_action() const;
  public:
  void clear_hide_show_action();
  ::TST::HideShowActionArchive hide_show_action() const;
  void set_hide_show_action(::TST::HideShowActionArchive value);
  private:
  ::TST::HideShowActionArchive _internal_hide_show_action() const;
  void _internal_set_hide_show_action(::TST::HideShowActionArchive value);
  public:

  // required uint32 hiding_action = 3;
  bool has_hiding_action() const;
  private:
  bool _internal_has_hiding_action() const;
  public:
  void clear_hiding_action();
  uint32_t hiding_action() const;
  void set_hiding_action(uint32_t value);
  private:
  uint32_t _internal_hiding_action() const;
  void _internal_set_hiding_action(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandHideShowArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> hide_show_action_for_undo_;
    ::TST::CommandRowColumnRangeArchive* super_;
    int hide_show_action_;
    uint32_t hiding_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTextPreflightInsertCellArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandTextPreflightInsertCellArchive) */ {
 public:
  inline CommandTextPreflightInsertCellArchive() : CommandTextPreflightInsertCellArchive(nullptr) {}
  ~CommandTextPreflightInsertCellArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandTextPreflightInsertCellArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTextPreflightInsertCellArchive(const CommandTextPreflightInsertCellArchive& from);
  CommandTextPreflightInsertCellArchive(CommandTextPreflightInsertCellArchive&& from) noexcept
    : CommandTextPreflightInsertCellArchive() {
    *this = ::std::move(from);
  }

  inline CommandTextPreflightInsertCellArchive& operator=(const CommandTextPreflightInsertCellArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTextPreflightInsertCellArchive& operator=(CommandTextPreflightInsertCellArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTextPreflightInsertCellArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTextPreflightInsertCellArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTextPreflightInsertCellArchive*>(
               &_CommandTextPreflightInsertCellArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CommandTextPreflightInsertCellArchive& a, CommandTextPreflightInsertCellArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTextPreflightInsertCellArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTextPreflightInsertCellArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandTextPreflightInsertCellArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandTextPreflightInsertCellArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTextPreflightInsertCellArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandTextPreflightInsertCellArchive& from) {
    CommandTextPreflightInsertCellArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTextPreflightInsertCellArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandTextPreflightInsertCellArchive";
  }
  protected:
  explicit CommandTextPreflightInsertCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 3,
    kCoalescedTextcommandFieldNumber = 6,
    kPostflightcommandFieldNumber = 8,
    kEditingCellFieldNumber = 10,
    kEditingStorageFieldNumber = 11,
    kCellUidFieldNumber = 13,
    kArchivedInitialSelectionPathFieldNumber = 14,
    kGroupedWithPostflightFieldNumber = 9,
    kLastColumnHitByTapFieldNumber = 12,
  };
  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference coalesced_textcommand = 6;
  bool has_coalesced_textcommand() const;
  private:
  bool _internal_has_coalesced_textcommand() const;
  public:
  void clear_coalesced_textcommand();
  const ::TSP::Reference& coalesced_textcommand() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_coalesced_textcommand();
  ::TSP::Reference* mutable_coalesced_textcommand();
  void set_allocated_coalesced_textcommand(::TSP::Reference* coalesced_textcommand);
  private:
  const ::TSP::Reference& _internal_coalesced_textcommand() const;
  ::TSP::Reference* _internal_mutable_coalesced_textcommand();
  public:
  void unsafe_arena_set_allocated_coalesced_textcommand(
      ::TSP::Reference* coalesced_textcommand);
  ::TSP::Reference* unsafe_arena_release_coalesced_textcommand();

  // optional .TSP.Reference postflightcommand = 8;
  bool has_postflightcommand() const;
  private:
  bool _internal_has_postflightcommand() const;
  public:
  void clear_postflightcommand();
  const ::TSP::Reference& postflightcommand() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_postflightcommand();
  ::TSP::Reference* mutable_postflightcommand();
  void set_allocated_postflightcommand(::TSP::Reference* postflightcommand);
  private:
  const ::TSP::Reference& _internal_postflightcommand() const;
  ::TSP::Reference* _internal_mutable_postflightcommand();
  public:
  void unsafe_arena_set_allocated_postflightcommand(
      ::TSP::Reference* postflightcommand);
  ::TSP::Reference* unsafe_arena_release_postflightcommand();

  // required .TST.Cell editing_cell = 10;
  bool has_editing_cell() const;
  private:
  bool _internal_has_editing_cell() const;
  public:
  void clear_editing_cell();
  const ::TST::Cell& editing_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_editing_cell();
  ::TST::Cell* mutable_editing_cell();
  void set_allocated_editing_cell(::TST::Cell* editing_cell);
  private:
  const ::TST::Cell& _internal_editing_cell() const;
  ::TST::Cell* _internal_mutable_editing_cell();
  public:
  void unsafe_arena_set_allocated_editing_cell(
      ::TST::Cell* editing_cell);
  ::TST::Cell* unsafe_arena_release_editing_cell();

  // required .TSP.Reference editing_storage = 11;
  bool has_editing_storage() const;
  private:
  bool _internal_has_editing_storage() const;
  public:
  void clear_editing_storage();
  const ::TSP::Reference& editing_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_editing_storage();
  ::TSP::Reference* mutable_editing_storage();
  void set_allocated_editing_storage(::TSP::Reference* editing_storage);
  private:
  const ::TSP::Reference& _internal_editing_storage() const;
  ::TSP::Reference* _internal_mutable_editing_storage();
  public:
  void unsafe_arena_set_allocated_editing_storage(
      ::TSP::Reference* editing_storage);
  ::TSP::Reference* unsafe_arena_release_editing_storage();

  // required .TSP.UUIDCoordArchive cell_uid = 13;
  bool has_cell_uid() const;
  private:
  bool _internal_has_cell_uid() const;
  public:
  void clear_cell_uid();
  const ::TSP::UUIDCoordArchive& cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_cell_uid();
  void set_allocated_cell_uid(::TSP::UUIDCoordArchive* cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_cell_uid();
  public:
  void unsafe_arena_set_allocated_cell_uid(
      ::TSP::UUIDCoordArchive* cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_cell_uid();

  // optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
  bool has_archived_initial_selection_path() const;
  private:
  bool _internal_has_archived_initial_selection_path() const;
  public:
  void clear_archived_initial_selection_path();
  const ::TSK::SelectionPathArchive& archived_initial_selection_path() const;
  PROTOBUF_NODISCARD ::TSK::SelectionPathArchive* release_archived_initial_selection_path();
  ::TSK::SelectionPathArchive* mutable_archived_initial_selection_path();
  void set_allocated_archived_initial_selection_path(::TSK::SelectionPathArchive* archived_initial_selection_path);
  private:
  const ::TSK::SelectionPathArchive& _internal_archived_initial_selection_path() const;
  ::TSK::SelectionPathArchive* _internal_mutable_archived_initial_selection_path();
  public:
  void unsafe_arena_set_allocated_archived_initial_selection_path(
      ::TSK::SelectionPathArchive* archived_initial_selection_path);
  ::TSK::SelectionPathArchive* unsafe_arena_release_archived_initial_selection_path();

  // optional bool grouped_with_postflight = 9;
  bool has_grouped_with_postflight() const;
  private:
  bool _internal_has_grouped_with_postflight() const;
  public:
  void clear_grouped_with_postflight();
  bool grouped_with_postflight() const;
  void set_grouped_with_postflight(bool value);
  private:
  bool _internal_grouped_with_postflight() const;
  void _internal_set_grouped_with_postflight(bool value);
  public:

  // optional uint32 last_column_hit_by_tap = 12;
  bool has_last_column_hit_by_tap() const;
  private:
  bool _internal_has_last_column_hit_by_tap() const;
  public:
  void clear_last_column_hit_by_tap();
  uint32_t last_column_hit_by_tap() const;
  void set_last_column_hit_by_tap(uint32_t value);
  private:
  uint32_t _internal_last_column_hit_by_tap() const;
  void _internal_set_last_column_hit_by_tap(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandTextPreflightInsertCellArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* coalesced_textcommand_;
    ::TSP::Reference* postflightcommand_;
    ::TST::Cell* editing_cell_;
    ::TSP::Reference* editing_storage_;
    ::TSP::UUIDCoordArchive* cell_uid_;
    ::TSK::SelectionPathArchive* archived_initial_selection_path_;
    bool grouped_with_postflight_;
    uint32_t last_column_hit_by_tap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPostflightSetCellArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandPostflightSetCellArchive) */ {
 public:
  inline CommandPostflightSetCellArchive() : CommandPostflightSetCellArchive(nullptr) {}
  ~CommandPostflightSetCellArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPostflightSetCellArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPostflightSetCellArchive(const CommandPostflightSetCellArchive& from);
  CommandPostflightSetCellArchive(CommandPostflightSetCellArchive&& from) noexcept
    : CommandPostflightSetCellArchive() {
    *this = ::std::move(from);
  }

  inline CommandPostflightSetCellArchive& operator=(const CommandPostflightSetCellArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPostflightSetCellArchive& operator=(CommandPostflightSetCellArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPostflightSetCellArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPostflightSetCellArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPostflightSetCellArchive*>(
               &_CommandPostflightSetCellArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CommandPostflightSetCellArchive& a, CommandPostflightSetCellArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPostflightSetCellArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPostflightSetCellArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPostflightSetCellArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPostflightSetCellArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPostflightSetCellArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPostflightSetCellArchive& from) {
    CommandPostflightSetCellArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPostflightSetCellArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandPostflightSetCellArchive";
  }
  protected:
  explicit CommandPostflightSetCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 3,
    kChildcommandundoFieldNumber = 4,
    kEditingCellFieldNumber = 6,
    kNewCellFieldNumber = 7,
    kEditingStorageFieldNumber = 8,
    kCellUidFieldNumber = 10,
    kLastColumnHitByTapFieldNumber = 9,
  };
  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference childcommandundo = 4;
  bool has_childcommandundo() const;
  private:
  bool _internal_has_childcommandundo() const;
  public:
  void clear_childcommandundo();
  const ::TSP::Reference& childcommandundo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_childcommandundo();
  ::TSP::Reference* mutable_childcommandundo();
  void set_allocated_childcommandundo(::TSP::Reference* childcommandundo);
  private:
  const ::TSP::Reference& _internal_childcommandundo() const;
  ::TSP::Reference* _internal_mutable_childcommandundo();
  public:
  void unsafe_arena_set_allocated_childcommandundo(
      ::TSP::Reference* childcommandundo);
  ::TSP::Reference* unsafe_arena_release_childcommandundo();

  // required .TST.Cell editing_cell = 6;
  bool has_editing_cell() const;
  private:
  bool _internal_has_editing_cell() const;
  public:
  void clear_editing_cell();
  const ::TST::Cell& editing_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_editing_cell();
  ::TST::Cell* mutable_editing_cell();
  void set_allocated_editing_cell(::TST::Cell* editing_cell);
  private:
  const ::TST::Cell& _internal_editing_cell() const;
  ::TST::Cell* _internal_mutable_editing_cell();
  public:
  void unsafe_arena_set_allocated_editing_cell(
      ::TST::Cell* editing_cell);
  ::TST::Cell* unsafe_arena_release_editing_cell();

  // required .TST.Cell new_cell = 7;
  bool has_new_cell() const;
  private:
  bool _internal_has_new_cell() const;
  public:
  void clear_new_cell();
  const ::TST::Cell& new_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_new_cell();
  ::TST::Cell* mutable_new_cell();
  void set_allocated_new_cell(::TST::Cell* new_cell);
  private:
  const ::TST::Cell& _internal_new_cell() const;
  ::TST::Cell* _internal_mutable_new_cell();
  public:
  void unsafe_arena_set_allocated_new_cell(
      ::TST::Cell* new_cell);
  ::TST::Cell* unsafe_arena_release_new_cell();

  // required .TSP.Reference editing_storage = 8;
  bool has_editing_storage() const;
  private:
  bool _internal_has_editing_storage() const;
  public:
  void clear_editing_storage();
  const ::TSP::Reference& editing_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_editing_storage();
  ::TSP::Reference* mutable_editing_storage();
  void set_allocated_editing_storage(::TSP::Reference* editing_storage);
  private:
  const ::TSP::Reference& _internal_editing_storage() const;
  ::TSP::Reference* _internal_mutable_editing_storage();
  public:
  void unsafe_arena_set_allocated_editing_storage(
      ::TSP::Reference* editing_storage);
  ::TSP::Reference* unsafe_arena_release_editing_storage();

  // required .TSP.UUIDCoordArchive cell_uid = 10;
  bool has_cell_uid() const;
  private:
  bool _internal_has_cell_uid() const;
  public:
  void clear_cell_uid();
  const ::TSP::UUIDCoordArchive& cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_cell_uid();
  void set_allocated_cell_uid(::TSP::UUIDCoordArchive* cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_cell_uid();
  public:
  void unsafe_arena_set_allocated_cell_uid(
      ::TSP::UUIDCoordArchive* cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_cell_uid();

  // optional uint32 last_column_hit_by_tap = 9;
  bool has_last_column_hit_by_tap() const;
  private:
  bool _internal_has_last_column_hit_by_tap() const;
  public:
  void clear_last_column_hit_by_tap();
  uint32_t last_column_hit_by_tap() const;
  void set_last_column_hit_by_tap(uint32_t value);
  private:
  uint32_t _internal_last_column_hit_by_tap() const;
  void _internal_set_last_column_hit_by_tap(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandPostflightSetCellArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* childcommandundo_;
    ::TST::Cell* editing_cell_;
    ::TST::Cell* new_cell_;
    ::TSP::Reference* editing_storage_;
    ::TSP::UUIDCoordArchive* cell_uid_;
    uint32_t last_column_hit_by_tap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChangeTableAreaForColumnOrRowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandChangeTableAreaForColumnOrRowArchive) */ {
 public:
  inline CommandChangeTableAreaForColumnOrRowArchive() : CommandChangeTableAreaForColumnOrRowArchive(nullptr) {}
  ~CommandChangeTableAreaForColumnOrRowArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandChangeTableAreaForColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChangeTableAreaForColumnOrRowArchive(const CommandChangeTableAreaForColumnOrRowArchive& from);
  CommandChangeTableAreaForColumnOrRowArchive(CommandChangeTableAreaForColumnOrRowArchive&& from) noexcept
    : CommandChangeTableAreaForColumnOrRowArchive() {
    *this = ::std::move(from);
  }

  inline CommandChangeTableAreaForColumnOrRowArchive& operator=(const CommandChangeTableAreaForColumnOrRowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChangeTableAreaForColumnOrRowArchive& operator=(CommandChangeTableAreaForColumnOrRowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChangeTableAreaForColumnOrRowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChangeTableAreaForColumnOrRowArchive* internal_default_instance() {
    return reinterpret_cast<const CommandChangeTableAreaForColumnOrRowArchive*>(
               &_CommandChangeTableAreaForColumnOrRowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandChangeTableAreaForColumnOrRowArchive& a, CommandChangeTableAreaForColumnOrRowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChangeTableAreaForColumnOrRowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChangeTableAreaForColumnOrRowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChangeTableAreaForColumnOrRowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChangeTableAreaForColumnOrRowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChangeTableAreaForColumnOrRowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChangeTableAreaForColumnOrRowArchive& from) {
    CommandChangeTableAreaForColumnOrRowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChangeTableAreaForColumnOrRowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandChangeTableAreaForColumnOrRowArchive";
  }
  protected:
  explicit CommandChangeTableAreaForColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionStringFieldNumber = 6,
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 3,
    kUndoCellDiffMapFieldNumber = 4,
    kUndoCommandsFieldNumber = 5,
    kTableAreaTransitionFieldNumber = 2,
  };
  // optional string action_string = 6;
  bool has_action_string() const;
  private:
  bool _internal_has_action_string() const;
  public:
  void clear_action_string();
  const std::string& action_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_string();
  PROTOBUF_NODISCARD std::string* release_action_string();
  void set_allocated_action_string(std::string* action_string);
  private:
  const std::string& _internal_action_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_string(const std::string& value);
  std::string* _internal_mutable_action_string();
  public:

  // required .TST.CommandRowColumnRangeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandRowColumnRangeArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandRowColumnRangeArchive* release_super();
  ::TST::CommandRowColumnRangeArchive* mutable_super();
  void set_allocated_super(::TST::CommandRowColumnRangeArchive* super);
  private:
  const ::TST::CommandRowColumnRangeArchive& _internal_super() const;
  ::TST::CommandRowColumnRangeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandRowColumnRangeArchive* super);
  ::TST::CommandRowColumnRangeArchive* unsafe_arena_release_super();

  // optional .TSP.Reference cell_diff_map = 3;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference undo_cell_diff_map = 4;
  bool has_undo_cell_diff_map() const;
  private:
  bool _internal_has_undo_cell_diff_map() const;
  public:
  void clear_undo_cell_diff_map();
  const ::TSP::Reference& undo_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_diff_map();
  ::TSP::Reference* mutable_undo_cell_diff_map();
  void set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_diff_map(
      ::TSP::Reference* undo_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_diff_map();

  // optional .TSP.Reference undo_commands = 5;
  bool has_undo_commands() const;
  private:
  bool _internal_has_undo_commands() const;
  public:
  void clear_undo_commands();
  const ::TSP::Reference& undo_commands() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_commands();
  ::TSP::Reference* mutable_undo_commands();
  void set_allocated_undo_commands(::TSP::Reference* undo_commands);
  private:
  const ::TSP::Reference& _internal_undo_commands() const;
  ::TSP::Reference* _internal_mutable_undo_commands();
  public:
  void unsafe_arena_set_allocated_undo_commands(
      ::TSP::Reference* undo_commands);
  ::TSP::Reference* unsafe_arena_release_undo_commands();

  // required .TST.TableAreaTransition table_area_transition = 2;
  bool has_table_area_transition() const;
  private:
  bool _internal_has_table_area_transition() const;
  public:
  void clear_table_area_transition();
  ::TST::TableAreaTransition table_area_transition() const;
  void set_table_area_transition(::TST::TableAreaTransition value);
  private:
  ::TST::TableAreaTransition _internal_table_area_transition() const;
  void _internal_set_table_area_transition(::TST::TableAreaTransition value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandChangeTableAreaForColumnOrRowArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_string_;
    ::TST::CommandRowColumnRangeArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* undo_cell_diff_map_;
    ::TSP::Reference* undo_commands_;
    int table_area_transition_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPencilAnnotationsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetPencilAnnotationsArchive) */ {
 public:
  inline CommandSetPencilAnnotationsArchive() : CommandSetPencilAnnotationsArchive(nullptr) {}
  ~CommandSetPencilAnnotationsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetPencilAnnotationsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPencilAnnotationsArchive(const CommandSetPencilAnnotationsArchive& from);
  CommandSetPencilAnnotationsArchive(CommandSetPencilAnnotationsArchive&& from) noexcept
    : CommandSetPencilAnnotationsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetPencilAnnotationsArchive& operator=(const CommandSetPencilAnnotationsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPencilAnnotationsArchive& operator=(CommandSetPencilAnnotationsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPencilAnnotationsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPencilAnnotationsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetPencilAnnotationsArchive*>(
               &_CommandSetPencilAnnotationsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CommandSetPencilAnnotationsArchive& a, CommandSetPencilAnnotationsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPencilAnnotationsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPencilAnnotationsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetPencilAnnotationsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetPencilAnnotationsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetPencilAnnotationsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetPencilAnnotationsArchive& from) {
    CommandSetPencilAnnotationsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPencilAnnotationsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetPencilAnnotationsArchive";
  }
  protected:
  explicit CommandSetPencilAnnotationsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kFormulasFieldNumber = 3,
    kFormulaIndexesFieldNumber = 4,
    kInverseFormulasFieldNumber = 5,
    kInverseFormulaIndexesFieldNumber = 6,
    kSuperFieldNumber = 1,
    kRollbackIndexFieldNumber = 7,
  };
  // repeated .TSP.Reference annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::TSP::Reference* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_annotations();
  private:
  const ::TSP::Reference& _internal_annotations(int index) const;
  ::TSP::Reference* _internal_add_annotations();
  public:
  const ::TSP::Reference& annotations(int index) const;
  ::TSP::Reference* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      annotations() const;

  // repeated .TSCE.FormulaArchive formulas = 3;
  int formulas_size() const;
  private:
  int _internal_formulas_size() const;
  public:
  void clear_formulas();
  ::TSCE::FormulaArchive* mutable_formulas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_formulas();
  private:
  const ::TSCE::FormulaArchive& _internal_formulas(int index) const;
  ::TSCE::FormulaArchive* _internal_add_formulas();
  public:
  const ::TSCE::FormulaArchive& formulas(int index) const;
  ::TSCE::FormulaArchive* add_formulas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      formulas() const;

  // repeated uint64 formula_indexes = 4;
  int formula_indexes_size() const;
  private:
  int _internal_formula_indexes_size() const;
  public:
  void clear_formula_indexes();
  private:
  uint64_t _internal_formula_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_formula_indexes() const;
  void _internal_add_formula_indexes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_formula_indexes();
  public:
  uint64_t formula_indexes(int index) const;
  void set_formula_indexes(int index, uint64_t value);
  void add_formula_indexes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      formula_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_formula_indexes();

  // repeated .TSCE.FormulaArchive inverse_formulas = 5;
  int inverse_formulas_size() const;
  private:
  int _internal_inverse_formulas_size() const;
  public:
  void clear_inverse_formulas();
  ::TSCE::FormulaArchive* mutable_inverse_formulas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_inverse_formulas();
  private:
  const ::TSCE::FormulaArchive& _internal_inverse_formulas(int index) const;
  ::TSCE::FormulaArchive* _internal_add_inverse_formulas();
  public:
  const ::TSCE::FormulaArchive& inverse_formulas(int index) const;
  ::TSCE::FormulaArchive* add_inverse_formulas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      inverse_formulas() const;

  // repeated uint64 inverse_formula_indexes = 6;
  int inverse_formula_indexes_size() const;
  private:
  int _internal_inverse_formula_indexes_size() const;
  public:
  void clear_inverse_formula_indexes();
  private:
  uint64_t _internal_inverse_formula_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_inverse_formula_indexes() const;
  void _internal_add_inverse_formula_indexes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_inverse_formula_indexes();
  public:
  uint64_t inverse_formula_indexes(int index) const;
  void set_inverse_formula_indexes(int index, uint64_t value);
  void add_inverse_formula_indexes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      inverse_formula_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_inverse_formula_indexes();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional uint64 rollback_index = 7;
  bool has_rollback_index() const;
  private:
  bool _internal_has_rollback_index() const;
  public:
  void clear_rollback_index();
  uint64_t rollback_index() const;
  void set_rollback_index(uint64_t value);
  private:
  uint64_t _internal_rollback_index() const;
  void _internal_set_rollback_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetPencilAnnotationsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > annotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > formulas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > formula_indexes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > inverse_formulas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > inverse_formula_indexes_;
    ::TST::TableCommandArchive* super_;
    uint64_t rollback_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableNameArchive) */ {
 public:
  inline CommandSetTableNameArchive() : CommandSetTableNameArchive(nullptr) {}
  ~CommandSetTableNameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableNameArchive(const CommandSetTableNameArchive& from);
  CommandSetTableNameArchive(CommandSetTableNameArchive&& from) noexcept
    : CommandSetTableNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableNameArchive& operator=(const CommandSetTableNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableNameArchive& operator=(CommandSetTableNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableNameArchive*>(
               &_CommandSetTableNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CommandSetTableNameArchive& a, CommandSetTableNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableNameArchive& from) {
    CommandSetTableNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableNameArchive";
  }
  protected:
  explicit CommandSetTableNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewtablenameFieldNumber = 1,
    kOldtablenameFieldNumber = 2,
    kNewstyleFieldNumber = 3,
    kOldstyleFieldNumber = 4,
    kSuperFieldNumber = 5,
    kOldShapeStyleFieldNumber = 6,
    kNewShapeStyleFieldNumber = 7,
    kOldTableNameBorderEnabledFieldNumber = 8,
    kNewTableNameBorderEnabledFieldNumber = 9,
  };
  // required string newtablename = 1;
  bool has_newtablename() const;
  private:
  bool _internal_has_newtablename() const;
  public:
  void clear_newtablename();
  const std::string& newtablename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newtablename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newtablename();
  PROTOBUF_NODISCARD std::string* release_newtablename();
  void set_allocated_newtablename(std::string* newtablename);
  private:
  const std::string& _internal_newtablename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newtablename(const std::string& value);
  std::string* _internal_mutable_newtablename();
  public:

  // optional string oldtablename = 2;
  bool has_oldtablename() const;
  private:
  bool _internal_has_oldtablename() const;
  public:
  void clear_oldtablename();
  const std::string& oldtablename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldtablename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldtablename();
  PROTOBUF_NODISCARD std::string* release_oldtablename();
  void set_allocated_oldtablename(std::string* oldtablename);
  private:
  const std::string& _internal_oldtablename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldtablename(const std::string& value);
  std::string* _internal_mutable_oldtablename();
  public:

  // optional .TSP.Reference newstyle = 3;
  bool has_newstyle() const;
  private:
  bool _internal_has_newstyle() const;
  public:
  void clear_newstyle();
  const ::TSP::Reference& newstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_newstyle();
  ::TSP::Reference* mutable_newstyle();
  void set_allocated_newstyle(::TSP::Reference* newstyle);
  private:
  const ::TSP::Reference& _internal_newstyle() const;
  ::TSP::Reference* _internal_mutable_newstyle();
  public:
  void unsafe_arena_set_allocated_newstyle(
      ::TSP::Reference* newstyle);
  ::TSP::Reference* unsafe_arena_release_newstyle();

  // optional .TSP.Reference oldstyle = 4;
  bool has_oldstyle() const;
  private:
  bool _internal_has_oldstyle() const;
  public:
  void clear_oldstyle();
  const ::TSP::Reference& oldstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_oldstyle();
  ::TSP::Reference* mutable_oldstyle();
  void set_allocated_oldstyle(::TSP::Reference* oldstyle);
  private:
  const ::TSP::Reference& _internal_oldstyle() const;
  ::TSP::Reference* _internal_mutable_oldstyle();
  public:
  void unsafe_arena_set_allocated_oldstyle(
      ::TSP::Reference* oldstyle);
  ::TSP::Reference* unsafe_arena_release_oldstyle();

  // required .TST.TableCommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference old_shape_style = 6;
  bool has_old_shape_style() const;
  private:
  bool _internal_has_old_shape_style() const;
  public:
  void clear_old_shape_style();
  const ::TSP::Reference& old_shape_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_shape_style();
  ::TSP::Reference* mutable_old_shape_style();
  void set_allocated_old_shape_style(::TSP::Reference* old_shape_style);
  private:
  const ::TSP::Reference& _internal_old_shape_style() const;
  ::TSP::Reference* _internal_mutable_old_shape_style();
  public:
  void unsafe_arena_set_allocated_old_shape_style(
      ::TSP::Reference* old_shape_style);
  ::TSP::Reference* unsafe_arena_release_old_shape_style();

  // optional .TSP.Reference new_shape_style = 7;
  bool has_new_shape_style() const;
  private:
  bool _internal_has_new_shape_style() const;
  public:
  void clear_new_shape_style();
  const ::TSP::Reference& new_shape_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_shape_style();
  ::TSP::Reference* mutable_new_shape_style();
  void set_allocated_new_shape_style(::TSP::Reference* new_shape_style);
  private:
  const ::TSP::Reference& _internal_new_shape_style() const;
  ::TSP::Reference* _internal_mutable_new_shape_style();
  public:
  void unsafe_arena_set_allocated_new_shape_style(
      ::TSP::Reference* new_shape_style);
  ::TSP::Reference* unsafe_arena_release_new_shape_style();

  // optional bool old_table_name_border_enabled = 8;
  bool has_old_table_name_border_enabled() const;
  private:
  bool _internal_has_old_table_name_border_enabled() const;
  public:
  void clear_old_table_name_border_enabled();
  bool old_table_name_border_enabled() const;
  void set_old_table_name_border_enabled(bool value);
  private:
  bool _internal_old_table_name_border_enabled() const;
  void _internal_set_old_table_name_border_enabled(bool value);
  public:

  // optional bool new_table_name_border_enabled = 9;
  bool has_new_table_name_border_enabled() const;
  private:
  bool _internal_has_new_table_name_border_enabled() const;
  public:
  void clear_new_table_name_border_enabled();
  bool new_table_name_border_enabled() const;
  void set_new_table_name_border_enabled(bool value);
  private:
  bool _internal_new_table_name_border_enabled() const;
  void _internal_set_new_table_name_border_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newtablename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldtablename_;
    ::TSP::Reference* newstyle_;
    ::TSP::Reference* oldstyle_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* old_shape_style_;
    ::TSP::Reference* new_shape_style_;
    bool old_table_name_border_enabled_;
    bool new_table_name_border_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableNameEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableNameEnabledArchive) */ {
 public:
  inline CommandSetTableNameEnabledArchive() : CommandSetTableNameEnabledArchive(nullptr) {}
  ~CommandSetTableNameEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableNameEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableNameEnabledArchive(const CommandSetTableNameEnabledArchive& from);
  CommandSetTableNameEnabledArchive(CommandSetTableNameEnabledArchive&& from) noexcept
    : CommandSetTableNameEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableNameEnabledArchive& operator=(const CommandSetTableNameEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableNameEnabledArchive& operator=(CommandSetTableNameEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableNameEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableNameEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableNameEnabledArchive*>(
               &_CommandSetTableNameEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CommandSetTableNameEnabledArchive& a, CommandSetTableNameEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableNameEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableNameEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableNameEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableNameEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableNameEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableNameEnabledArchive& from) {
    CommandSetTableNameEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableNameEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableNameEnabledArchive";
  }
  protected:
  explicit CommandSetTableNameEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTableNameEnabledFieldNumber = 2,
    kPrevTableNameEnabledFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool table_name_enabled = 2;
  bool has_table_name_enabled() const;
  private:
  bool _internal_has_table_name_enabled() const;
  public:
  void clear_table_name_enabled();
  bool table_name_enabled() const;
  void set_table_name_enabled(bool value);
  private:
  bool _internal_table_name_enabled() const;
  void _internal_set_table_name_enabled(bool value);
  public:

  // optional bool prev_table_name_enabled = 3;
  bool has_prev_table_name_enabled() const;
  private:
  bool _internal_has_prev_table_name_enabled() const;
  public:
  void clear_prev_table_name_enabled();
  bool prev_table_name_enabled() const;
  void set_prev_table_name_enabled(bool value);
  private:
  bool _internal_prev_table_name_enabled() const;
  void _internal_set_prev_table_name_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableNameEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool table_name_enabled_;
    bool prev_table_name_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableFontSizeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableFontSizeArchive) */ {
 public:
  inline CommandSetTableFontSizeArchive() : CommandSetTableFontSizeArchive(nullptr) {}
  ~CommandSetTableFontSizeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableFontSizeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableFontSizeArchive(const CommandSetTableFontSizeArchive& from);
  CommandSetTableFontSizeArchive(CommandSetTableFontSizeArchive&& from) noexcept
    : CommandSetTableFontSizeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableFontSizeArchive& operator=(const CommandSetTableFontSizeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableFontSizeArchive& operator=(CommandSetTableFontSizeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableFontSizeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableFontSizeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableFontSizeArchive*>(
               &_CommandSetTableFontSizeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandSetTableFontSizeArchive& a, CommandSetTableFontSizeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableFontSizeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableFontSizeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableFontSizeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableFontSizeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableFontSizeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableFontSizeArchive& from) {
    CommandSetTableFontSizeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableFontSizeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableFontSizeArchive";
  }
  protected:
  explicit CommandSetTableFontSizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontSizeListFieldNumber = 4,
    kInverseFontSizeListFieldNumber = 5,
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 6,
    kInverseCellDiffMapFieldNumber = 7,
    kFontSizeDiffFieldNumber = 3,
    kIsIncreaseFieldNumber = 2,
    kStylesContainerRefreshDoneFieldNumber = 8,
  };
  // repeated double font_size_list = 4;
  int font_size_list_size() const;
  private:
  int _internal_font_size_list_size() const;
  public:
  void clear_font_size_list();
  private:
  double _internal_font_size_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_font_size_list() const;
  void _internal_add_font_size_list(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_font_size_list();
  public:
  double font_size_list(int index) const;
  void set_font_size_list(int index, double value);
  void add_font_size_list(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      font_size_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_font_size_list();

  // repeated double inverse_font_size_list = 5;
  int inverse_font_size_list_size() const;
  private:
  int _internal_inverse_font_size_list_size() const;
  public:
  void clear_inverse_font_size_list();
  private:
  double _internal_inverse_font_size_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_inverse_font_size_list() const;
  void _internal_add_inverse_font_size_list(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_inverse_font_size_list();
  public:
  double inverse_font_size_list(int index) const;
  void set_inverse_font_size_list(int index, double value);
  void add_inverse_font_size_list(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      inverse_font_size_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_inverse_font_size_list();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference cell_diff_map = 6;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference inverse_cell_diff_map = 7;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // required int32 font_size_diff = 3;
  bool has_font_size_diff() const;
  private:
  bool _internal_has_font_size_diff() const;
  public:
  void clear_font_size_diff();
  int32_t font_size_diff() const;
  void set_font_size_diff(int32_t value);
  private:
  int32_t _internal_font_size_diff() const;
  void _internal_set_font_size_diff(int32_t value);
  public:

  // required bool is_increase = 2;
  bool has_is_increase() const;
  private:
  bool _internal_has_is_increase() const;
  public:
  void clear_is_increase();
  bool is_increase() const;
  void set_is_increase(bool value);
  private:
  bool _internal_is_increase() const;
  void _internal_set_is_increase(bool value);
  public:

  // required bool styles_container_refresh_done = 8;
  bool has_styles_container_refresh_done() const;
  private:
  bool _internal_has_styles_container_refresh_done() const;
  public:
  void clear_styles_container_refresh_done();
  bool styles_container_refresh_done() const;
  void set_styles_container_refresh_done(bool value);
  private:
  bool _internal_styles_container_refresh_done() const;
  void _internal_set_styles_container_refresh_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableFontSizeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > font_size_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > inverse_font_size_list_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* inverse_cell_diff_map_;
    int32_t font_size_diff_;
    bool is_increase_;
    bool styles_container_refresh_done_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableFontNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableFontNameArchive) */ {
 public:
  inline CommandSetTableFontNameArchive() : CommandSetTableFontNameArchive(nullptr) {}
  ~CommandSetTableFontNameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableFontNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableFontNameArchive(const CommandSetTableFontNameArchive& from);
  CommandSetTableFontNameArchive(CommandSetTableFontNameArchive&& from) noexcept
    : CommandSetTableFontNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableFontNameArchive& operator=(const CommandSetTableFontNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableFontNameArchive& operator=(CommandSetTableFontNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableFontNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableFontNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableFontNameArchive*>(
               &_CommandSetTableFontNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandSetTableFontNameArchive& a, CommandSetTableFontNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableFontNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableFontNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableFontNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableFontNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableFontNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableFontNameArchive& from) {
    CommandSetTableFontNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableFontNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableFontNameArchive";
  }
  protected:
  explicit CommandSetTableFontNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousTextStylesFieldNumber = 6,
    kFontNameFieldNumber = 2,
    kPreviousFontNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kPreviousTableStyleFieldNumber = 5,
    kCellDiffMapFieldNumber = 7,
    kInverseCellDiffMapFieldNumber = 8,
    kPreserveFaceFieldNumber = 3,
  };
  // repeated .TSP.Reference previous_text_styles = 6;
  int previous_text_styles_size() const;
  private:
  int _internal_previous_text_styles_size() const;
  public:
  void clear_previous_text_styles();
  ::TSP::Reference* mutable_previous_text_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_previous_text_styles();
  private:
  const ::TSP::Reference& _internal_previous_text_styles(int index) const;
  ::TSP::Reference* _internal_add_previous_text_styles();
  public:
  const ::TSP::Reference& previous_text_styles(int index) const;
  ::TSP::Reference* add_previous_text_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      previous_text_styles() const;

  // required string font_name = 2;
  bool has_font_name() const;
  private:
  bool _internal_has_font_name() const;
  public:
  void clear_font_name();
  const std::string& font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font_name();
  PROTOBUF_NODISCARD std::string* release_font_name();
  void set_allocated_font_name(std::string* font_name);
  private:
  const std::string& _internal_font_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font_name(const std::string& value);
  std::string* _internal_mutable_font_name();
  public:

  // optional string previous_font_name = 4;
  bool has_previous_font_name() const;
  private:
  bool _internal_has_previous_font_name() const;
  public:
  void clear_previous_font_name();
  const std::string& previous_font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_font_name();
  PROTOBUF_NODISCARD std::string* release_previous_font_name();
  void set_allocated_previous_font_name(std::string* previous_font_name);
  private:
  const std::string& _internal_previous_font_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_font_name(const std::string& value);
  std::string* _internal_mutable_previous_font_name();
  public:

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference previous_table_style = 5;
  bool has_previous_table_style() const;
  private:
  bool _internal_has_previous_table_style() const;
  public:
  void clear_previous_table_style();
  const ::TSP::Reference& previous_table_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_previous_table_style();
  ::TSP::Reference* mutable_previous_table_style();
  void set_allocated_previous_table_style(::TSP::Reference* previous_table_style);
  private:
  const ::TSP::Reference& _internal_previous_table_style() const;
  ::TSP::Reference* _internal_mutable_previous_table_style();
  public:
  void unsafe_arena_set_allocated_previous_table_style(
      ::TSP::Reference* previous_table_style);
  ::TSP::Reference* unsafe_arena_release_previous_table_style();

  // required .TSP.Reference cell_diff_map = 7;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference inverse_cell_diff_map = 8;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // required bool preserve_face = 3;
  bool has_preserve_face() const;
  private:
  bool _internal_has_preserve_face() const;
  public:
  void clear_preserve_face();
  bool preserve_face() const;
  void set_preserve_face(bool value);
  private:
  bool _internal_preserve_face() const;
  void _internal_set_preserve_face(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableFontNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > previous_text_styles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_font_name_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* previous_table_style_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* inverse_cell_diff_map_;
    bool preserve_face_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableNameHeightArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableNameHeightArchive) */ {
 public:
  inline CommandSetTableNameHeightArchive() : CommandSetTableNameHeightArchive(nullptr) {}
  ~CommandSetTableNameHeightArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableNameHeightArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableNameHeightArchive(const CommandSetTableNameHeightArchive& from);
  CommandSetTableNameHeightArchive(CommandSetTableNameHeightArchive&& from) noexcept
    : CommandSetTableNameHeightArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableNameHeightArchive& operator=(const CommandSetTableNameHeightArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableNameHeightArchive& operator=(CommandSetTableNameHeightArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableNameHeightArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableNameHeightArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableNameHeightArchive*>(
               &_CommandSetTableNameHeightArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CommandSetTableNameHeightArchive& a, CommandSetTableNameHeightArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableNameHeightArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableNameHeightArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableNameHeightArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableNameHeightArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableNameHeightArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableNameHeightArchive& from) {
    CommandSetTableNameHeightArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableNameHeightArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableNameHeightArchive";
  }
  protected:
  explicit CommandSetTableNameHeightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldTableNameHeightFieldNumber = 2,
    kNewTableNameHeightFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required double old_table_name_height = 2;
  bool has_old_table_name_height() const;
  private:
  bool _internal_has_old_table_name_height() const;
  public:
  void clear_old_table_name_height();
  double old_table_name_height() const;
  void set_old_table_name_height(double value);
  private:
  double _internal_old_table_name_height() const;
  void _internal_set_old_table_name_height(double value);
  public:

  // required double new_table_name_height = 3;
  bool has_new_table_name_height() const;
  private:
  bool _internal_has_new_table_name_height() const;
  public:
  void clear_new_table_name_height();
  double new_table_name_height() const;
  void set_new_table_name_height(double value);
  private:
  double _internal_new_table_name_height() const;
  void _internal_set_new_table_name_height(double value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableNameHeightArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    double old_table_name_height_;
    double new_table_name_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetNowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetNowArchive) */ {
 public:
  inline CommandSetNowArchive() : CommandSetNowArchive(nullptr) {}
  ~CommandSetNowArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetNowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetNowArchive(const CommandSetNowArchive& from);
  CommandSetNowArchive(CommandSetNowArchive&& from) noexcept
    : CommandSetNowArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetNowArchive& operator=(const CommandSetNowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetNowArchive& operator=(CommandSetNowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetNowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetNowArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetNowArchive*>(
               &_CommandSetNowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CommandSetNowArchive& a, CommandSetNowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetNowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetNowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetNowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetNowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetNowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetNowArchive& from) {
    CommandSetNowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetNowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetNowArchive";
  }
  protected:
  explicit CommandSetNowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetNowArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetWasCutArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetWasCutArchive) */ {
 public:
  inline CommandSetWasCutArchive() : CommandSetWasCutArchive(nullptr) {}
  ~CommandSetWasCutArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetWasCutArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetWasCutArchive(const CommandSetWasCutArchive& from);
  CommandSetWasCutArchive(CommandSetWasCutArchive&& from) noexcept
    : CommandSetWasCutArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetWasCutArchive& operator=(const CommandSetWasCutArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetWasCutArchive& operator=(CommandSetWasCutArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetWasCutArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetWasCutArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetWasCutArchive*>(
               &_CommandSetWasCutArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CommandSetWasCutArchive& a, CommandSetWasCutArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetWasCutArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetWasCutArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetWasCutArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetWasCutArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetWasCutArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetWasCutArchive& from) {
    CommandSetWasCutArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetWasCutArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetWasCutArchive";
  }
  protected:
  explicit CommandSetWasCutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFromTableUidFieldNumber = 2,
    kPrevFromTableUidFieldNumber = 3,
    kFromGroupByUidFieldNumber = 6,
    kPrevFromGroupByUidFieldNumber = 7,
    kWasCutFieldNumber = 4,
    kPrevWasCutFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID from_table_uid = 2;
  bool has_from_table_uid() const;
  private:
  bool _internal_has_from_table_uid() const;
  public:
  void clear_from_table_uid();
  const ::TSP::UUID& from_table_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_from_table_uid();
  ::TSP::UUID* mutable_from_table_uid();
  void set_allocated_from_table_uid(::TSP::UUID* from_table_uid);
  private:
  const ::TSP::UUID& _internal_from_table_uid() const;
  ::TSP::UUID* _internal_mutable_from_table_uid();
  public:
  void unsafe_arena_set_allocated_from_table_uid(
      ::TSP::UUID* from_table_uid);
  ::TSP::UUID* unsafe_arena_release_from_table_uid();

  // required .TSP.UUID prev_from_table_uid = 3;
  bool has_prev_from_table_uid() const;
  private:
  bool _internal_has_prev_from_table_uid() const;
  public:
  void clear_prev_from_table_uid();
  const ::TSP::UUID& prev_from_table_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_prev_from_table_uid();
  ::TSP::UUID* mutable_prev_from_table_uid();
  void set_allocated_prev_from_table_uid(::TSP::UUID* prev_from_table_uid);
  private:
  const ::TSP::UUID& _internal_prev_from_table_uid() const;
  ::TSP::UUID* _internal_mutable_prev_from_table_uid();
  public:
  void unsafe_arena_set_allocated_prev_from_table_uid(
      ::TSP::UUID* prev_from_table_uid);
  ::TSP::UUID* unsafe_arena_release_prev_from_table_uid();

  // required .TSP.UUID from_group_by_uid = 6;
  bool has_from_group_by_uid() const;
  private:
  bool _internal_has_from_group_by_uid() const;
  public:
  void clear_from_group_by_uid();
  const ::TSP::UUID& from_group_by_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_from_group_by_uid();
  ::TSP::UUID* mutable_from_group_by_uid();
  void set_allocated_from_group_by_uid(::TSP::UUID* from_group_by_uid);
  private:
  const ::TSP::UUID& _internal_from_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_from_group_by_uid();
  public:
  void unsafe_arena_set_allocated_from_group_by_uid(
      ::TSP::UUID* from_group_by_uid);
  ::TSP::UUID* unsafe_arena_release_from_group_by_uid();

  // required .TSP.UUID prev_from_group_by_uid = 7;
  bool has_prev_from_group_by_uid() const;
  private:
  bool _internal_has_prev_from_group_by_uid() const;
  public:
  void clear_prev_from_group_by_uid();
  const ::TSP::UUID& prev_from_group_by_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_prev_from_group_by_uid();
  ::TSP::UUID* mutable_prev_from_group_by_uid();
  void set_allocated_prev_from_group_by_uid(::TSP::UUID* prev_from_group_by_uid);
  private:
  const ::TSP::UUID& _internal_prev_from_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_prev_from_group_by_uid();
  public:
  void unsafe_arena_set_allocated_prev_from_group_by_uid(
      ::TSP::UUID* prev_from_group_by_uid);
  ::TSP::UUID* unsafe_arena_release_prev_from_group_by_uid();

  // required bool was_cut = 4;
  bool has_was_cut() const;
  private:
  bool _internal_has_was_cut() const;
  public:
  void clear_was_cut();
  bool was_cut() const;
  void set_was_cut(bool value);
  private:
  bool _internal_was_cut() const;
  void _internal_set_was_cut(bool value);
  public:

  // required bool prev_was_cut = 5;
  bool has_prev_was_cut() const;
  private:
  bool _internal_has_prev_was_cut() const;
  public:
  void clear_prev_was_cut();
  bool prev_was_cut() const;
  void set_prev_was_cut(bool value);
  private:
  bool _internal_prev_was_cut() const;
  void _internal_set_prev_was_cut(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetWasCutArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUID* from_table_uid_;
    ::TSP::UUID* prev_from_table_uid_;
    ::TSP::UUID* from_group_by_uid_;
    ::TSP::UUID* prev_from_group_by_uid_;
    bool was_cut_;
    bool prev_was_cut_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandStyleCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandStyleCellsArchive) */ {
 public:
  inline CommandStyleCellsArchive() : CommandStyleCellsArchive(nullptr) {}
  ~CommandStyleCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandStyleCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandStyleCellsArchive(const CommandStyleCellsArchive& from);
  CommandStyleCellsArchive(CommandStyleCellsArchive&& from) noexcept
    : CommandStyleCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandStyleCellsArchive& operator=(const CommandStyleCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStyleCellsArchive& operator=(CommandStyleCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandStyleCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandStyleCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandStyleCellsArchive*>(
               &_CommandStyleCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CommandStyleCellsArchive& a, CommandStyleCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStyleCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStyleCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandStyleCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandStyleCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandStyleCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandStyleCellsArchive& from) {
    CommandStyleCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStyleCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandStyleCellsArchive";
  }
  protected:
  explicit CommandStyleCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormatPropertiesFieldNumber = 2,
    kSelectionFieldNumber = 3,
    kUndoCellMapFieldNumber = 4,
    kRedoCellMapFieldNumber = 5,
    kTextUndoFieldNumber = 6,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.ReferenceDictionary format_properties = 2;
  bool has_format_properties() const;
  private:
  bool _internal_has_format_properties() const;
  public:
  void clear_format_properties();
  const ::TSP::ReferenceDictionary& format_properties() const;
  PROTOBUF_NODISCARD ::TSP::ReferenceDictionary* release_format_properties();
  ::TSP::ReferenceDictionary* mutable_format_properties();
  void set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties);
  private:
  const ::TSP::ReferenceDictionary& _internal_format_properties() const;
  ::TSP::ReferenceDictionary* _internal_mutable_format_properties();
  public:
  void unsafe_arena_set_allocated_format_properties(
      ::TSP::ReferenceDictionary* format_properties);
  ::TSP::ReferenceDictionary* unsafe_arena_release_format_properties();

  // required .TST.SelectionArchive selection = 3;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TSP.Reference undo_cell_map = 4;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TSP::Reference& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_map();
  ::TSP::Reference* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TSP::Reference* undo_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_map();

  // required .TSP.Reference redo_cell_map = 5;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TSP::Reference& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_redo_cell_map();
  ::TSP::Reference* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TSP::Reference* redo_cell_map);
  private:
  const ::TSP::Reference& _internal_redo_cell_map() const;
  ::TSP::Reference* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TSP::Reference* redo_cell_map);
  ::TSP::Reference* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference text_undo = 6;
  bool has_text_undo() const;
  private:
  bool _internal_has_text_undo() const;
  public:
  void clear_text_undo();
  const ::TSP::Reference& text_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_text_undo();
  ::TSP::Reference* mutable_text_undo();
  void set_allocated_text_undo(::TSP::Reference* text_undo);
  private:
  const ::TSP::Reference& _internal_text_undo() const;
  ::TSP::Reference* _internal_mutable_text_undo();
  public:
  void unsafe_arena_set_allocated_text_undo(
      ::TSP::Reference* text_undo);
  ::TSP::Reference* unsafe_arena_release_text_undo();

  // @@protoc_insertion_point(class_scope:TST.CommandStyleCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::ReferenceDictionary* format_properties_;
    ::TST::SelectionArchive* selection_;
    ::TSP::Reference* undo_cell_map_;
    ::TSP::Reference* redo_cell_map_;
    ::TSP::Reference* text_undo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandStyleTableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandStyleTableArchive) */ {
 public:
  inline CommandStyleTableArchive() : CommandStyleTableArchive(nullptr) {}
  ~CommandStyleTableArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandStyleTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandStyleTableArchive(const CommandStyleTableArchive& from);
  CommandStyleTableArchive(CommandStyleTableArchive&& from) noexcept
    : CommandStyleTableArchive() {
    *this = ::std::move(from);
  }

  inline CommandStyleTableArchive& operator=(const CommandStyleTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStyleTableArchive& operator=(CommandStyleTableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandStyleTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandStyleTableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandStyleTableArchive*>(
               &_CommandStyleTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CommandStyleTableArchive& a, CommandStyleTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStyleTableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStyleTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandStyleTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandStyleTableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandStyleTableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandStyleTableArchive& from) {
    CommandStyleTableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStyleTableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandStyleTableArchive";
  }
  protected:
  explicit CommandStyleTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormatPropertiesFieldNumber = 2,
    kOldStyleFieldNumber = 3,
    kNewStyleFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.ReferenceDictionary format_properties = 2;
  bool has_format_properties() const;
  private:
  bool _internal_has_format_properties() const;
  public:
  void clear_format_properties();
  const ::TSP::ReferenceDictionary& format_properties() const;
  PROTOBUF_NODISCARD ::TSP::ReferenceDictionary* release_format_properties();
  ::TSP::ReferenceDictionary* mutable_format_properties();
  void set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties);
  private:
  const ::TSP::ReferenceDictionary& _internal_format_properties() const;
  ::TSP::ReferenceDictionary* _internal_mutable_format_properties();
  public:
  void unsafe_arena_set_allocated_format_properties(
      ::TSP::ReferenceDictionary* format_properties);
  ::TSP::ReferenceDictionary* unsafe_arena_release_format_properties();

  // optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
  bool has_old_style() const;
  private:
  bool _internal_has_old_style() const;
  public:
  void clear_old_style();
  const ::TSTSOS::TableStylePropertyChangeSetArchive& old_style() const;
  PROTOBUF_NODISCARD ::TSTSOS::TableStylePropertyChangeSetArchive* release_old_style();
  ::TSTSOS::TableStylePropertyChangeSetArchive* mutable_old_style();
  void set_allocated_old_style(::TSTSOS::TableStylePropertyChangeSetArchive* old_style);
  private:
  const ::TSTSOS::TableStylePropertyChangeSetArchive& _internal_old_style() const;
  ::TSTSOS::TableStylePropertyChangeSetArchive* _internal_mutable_old_style();
  public:
  void unsafe_arena_set_allocated_old_style(
      ::TSTSOS::TableStylePropertyChangeSetArchive* old_style);
  ::TSTSOS::TableStylePropertyChangeSetArchive* unsafe_arena_release_old_style();

  // optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSTSOS::TableStylePropertyChangeSetArchive& new_style() const;
  PROTOBUF_NODISCARD ::TSTSOS::TableStylePropertyChangeSetArchive* release_new_style();
  ::TSTSOS::TableStylePropertyChangeSetArchive* mutable_new_style();
  void set_allocated_new_style(::TSTSOS::TableStylePropertyChangeSetArchive* new_style);
  private:
  const ::TSTSOS::TableStylePropertyChangeSetArchive& _internal_new_style() const;
  ::TSTSOS::TableStylePropertyChangeSetArchive* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSTSOS::TableStylePropertyChangeSetArchive* new_style);
  ::TSTSOS::TableStylePropertyChangeSetArchive* unsafe_arena_release_new_style();

  // @@protoc_insertion_point(class_scope:TST.CommandStyleTableArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::ReferenceDictionary* format_properties_;
    ::TSTSOS::TableStylePropertyChangeSetArchive* old_style_;
    ::TSTSOS::TableStylePropertyChangeSetArchive* new_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetRepeatingHeaderEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetRepeatingHeaderEnabledArchive) */ {
 public:
  inline CommandSetRepeatingHeaderEnabledArchive() : CommandSetRepeatingHeaderEnabledArchive(nullptr) {}
  ~CommandSetRepeatingHeaderEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetRepeatingHeaderEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetRepeatingHeaderEnabledArchive(const CommandSetRepeatingHeaderEnabledArchive& from);
  CommandSetRepeatingHeaderEnabledArchive(CommandSetRepeatingHeaderEnabledArchive&& from) noexcept
    : CommandSetRepeatingHeaderEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetRepeatingHeaderEnabledArchive& operator=(const CommandSetRepeatingHeaderEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetRepeatingHeaderEnabledArchive& operator=(CommandSetRepeatingHeaderEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetRepeatingHeaderEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetRepeatingHeaderEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetRepeatingHeaderEnabledArchive*>(
               &_CommandSetRepeatingHeaderEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CommandSetRepeatingHeaderEnabledArchive& a, CommandSetRepeatingHeaderEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetRepeatingHeaderEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetRepeatingHeaderEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetRepeatingHeaderEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetRepeatingHeaderEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetRepeatingHeaderEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetRepeatingHeaderEnabledArchive& from) {
    CommandSetRepeatingHeaderEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetRepeatingHeaderEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetRepeatingHeaderEnabledArchive";
  }
  protected:
  explicit CommandSetRepeatingHeaderEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 3,
    kRepeatingHeaderEnabledFieldNumber = 1,
    kPrevRepeatingHeaderEnabledFieldNumber = 4,
    kDirectionFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool repeating_header_enabled = 1;
  bool has_repeating_header_enabled() const;
  private:
  bool _internal_has_repeating_header_enabled() const;
  public:
  void clear_repeating_header_enabled();
  bool repeating_header_enabled() const;
  void set_repeating_header_enabled(bool value);
  private:
  bool _internal_repeating_header_enabled() const;
  void _internal_set_repeating_header_enabled(bool value);
  public:

  // optional bool prev_repeating_header_enabled = 4;
  bool has_prev_repeating_header_enabled() const;
  private:
  bool _internal_has_prev_repeating_header_enabled() const;
  public:
  void clear_prev_repeating_header_enabled();
  bool prev_repeating_header_enabled() const;
  void set_prev_repeating_header_enabled(bool value);
  private:
  bool _internal_prev_repeating_header_enabled() const;
  void _internal_set_prev_repeating_header_enabled(bool value);
  public:

  // required .TST.TableDimensionArchive direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::TableDimensionArchive direction() const;
  void set_direction(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_direction() const;
  void _internal_set_direction(::TST::TableDimensionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetRepeatingHeaderEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool repeating_header_enabled_;
    bool prev_repeating_header_enabled_;
    int direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFiltersEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFiltersEnabledArchive) */ {
 public:
  inline CommandSetFiltersEnabledArchive() : CommandSetFiltersEnabledArchive(nullptr) {}
  ~CommandSetFiltersEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFiltersEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFiltersEnabledArchive(const CommandSetFiltersEnabledArchive& from);
  CommandSetFiltersEnabledArchive(CommandSetFiltersEnabledArchive&& from) noexcept
    : CommandSetFiltersEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFiltersEnabledArchive& operator=(const CommandSetFiltersEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFiltersEnabledArchive& operator=(CommandSetFiltersEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFiltersEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFiltersEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFiltersEnabledArchive*>(
               &_CommandSetFiltersEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CommandSetFiltersEnabledArchive& a, CommandSetFiltersEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFiltersEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFiltersEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFiltersEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFiltersEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFiltersEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFiltersEnabledArchive& from) {
    CommandSetFiltersEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFiltersEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFiltersEnabledArchive";
  }
  protected:
  explicit CommandSetFiltersEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollbackUidListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kNewFiltersEnabledFieldNumber = 2,
    kOldFiltersEnabledFieldNumber = 3,
  };
  // repeated .TSP.UUID rollback_uid_list = 4;
  int rollback_uid_list_size() const;
  private:
  int _internal_rollback_uid_list_size() const;
  public:
  void clear_rollback_uid_list();
  ::TSP::UUID* mutable_rollback_uid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_rollback_uid_list();
  private:
  const ::TSP::UUID& _internal_rollback_uid_list(int index) const;
  ::TSP::UUID* _internal_add_rollback_uid_list();
  public:
  const ::TSP::UUID& rollback_uid_list(int index) const;
  ::TSP::UUID* add_rollback_uid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      rollback_uid_list() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool new_filters_enabled = 2;
  bool has_new_filters_enabled() const;
  private:
  bool _internal_has_new_filters_enabled() const;
  public:
  void clear_new_filters_enabled();
  bool new_filters_enabled() const;
  void set_new_filters_enabled(bool value);
  private:
  bool _internal_new_filters_enabled() const;
  void _internal_set_new_filters_enabled(bool value);
  public:

  // optional bool old_filters_enabled = 3;
  bool has_old_filters_enabled() const;
  private:
  bool _internal_has_old_filters_enabled() const;
  public:
  void clear_old_filters_enabled();
  bool old_filters_enabled() const;
  void set_old_filters_enabled(bool value);
  private:
  bool _internal_old_filters_enabled() const;
  void _internal_set_old_filters_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFiltersEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > rollback_uid_list_;
    ::TST::TableCommandArchive* super_;
    bool new_filters_enabled_;
    bool old_filters_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAddTableStylePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandAddTableStylePresetArchive) */ {
 public:
  inline CommandAddTableStylePresetArchive() : CommandAddTableStylePresetArchive(nullptr) {}
  ~CommandAddTableStylePresetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandAddTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAddTableStylePresetArchive(const CommandAddTableStylePresetArchive& from);
  CommandAddTableStylePresetArchive(CommandAddTableStylePresetArchive&& from) noexcept
    : CommandAddTableStylePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandAddTableStylePresetArchive& operator=(const CommandAddTableStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAddTableStylePresetArchive& operator=(CommandAddTableStylePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAddTableStylePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAddTableStylePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAddTableStylePresetArchive*>(
               &_CommandAddTableStylePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CommandAddTableStylePresetArchive& a, CommandAddTableStylePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAddTableStylePresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAddTableStylePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandAddTableStylePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandAddTableStylePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAddTableStylePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandAddTableStylePresetArchive& from) {
    CommandAddTableStylePresetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAddTableStylePresetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandAddTableStylePresetArchive";
  }
  protected:
  explicit CommandAddTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTableStylesFieldNumber = 3,
    kPresetIndexFieldNumber = 2,
    kSendNotificationFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference table_styles = 3;
  bool has_table_styles() const;
  private:
  bool _internal_has_table_styles() const;
  public:
  void clear_table_styles();
  const ::TSP::Reference& table_styles() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_table_styles();
  ::TSP::Reference* mutable_table_styles();
  void set_allocated_table_styles(::TSP::Reference* table_styles);
  private:
  const ::TSP::Reference& _internal_table_styles() const;
  ::TSP::Reference* _internal_mutable_table_styles();
  public:
  void unsafe_arena_set_allocated_table_styles(
      ::TSP::Reference* table_styles);
  ::TSP::Reference* unsafe_arena_release_table_styles();

  // required int32 preset_index = 2;
  bool has_preset_index() const;
  private:
  bool _internal_has_preset_index() const;
  public:
  void clear_preset_index();
  int32_t preset_index() const;
  void set_preset_index(int32_t value);
  private:
  int32_t _internal_preset_index() const;
  void _internal_set_preset_index(int32_t value);
  public:

  // required bool send_notification = 4;
  bool has_send_notification() const;
  private:
  bool _internal_has_send_notification() const;
  public:
  void clear_send_notification();
  bool send_notification() const;
  void set_send_notification(bool value);
  private:
  bool _internal_send_notification() const;
  void _internal_set_send_notification(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandAddTableStylePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* table_styles_;
    int32_t preset_index_;
    bool send_notification_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRemoveTableStylePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRemoveTableStylePresetArchive) */ {
 public:
  inline CommandRemoveTableStylePresetArchive() : CommandRemoveTableStylePresetArchive(nullptr) {}
  ~CommandRemoveTableStylePresetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRemoveTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRemoveTableStylePresetArchive(const CommandRemoveTableStylePresetArchive& from);
  CommandRemoveTableStylePresetArchive(CommandRemoveTableStylePresetArchive&& from) noexcept
    : CommandRemoveTableStylePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandRemoveTableStylePresetArchive& operator=(const CommandRemoveTableStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRemoveTableStylePresetArchive& operator=(CommandRemoveTableStylePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRemoveTableStylePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRemoveTableStylePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRemoveTableStylePresetArchive*>(
               &_CommandRemoveTableStylePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CommandRemoveTableStylePresetArchive& a, CommandRemoveTableStylePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRemoveTableStylePresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRemoveTableStylePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRemoveTableStylePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRemoveTableStylePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRemoveTableStylePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRemoveTableStylePresetArchive& from) {
    CommandRemoveTableStylePresetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRemoveTableStylePresetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRemoveTableStylePresetArchive";
  }
  protected:
  explicit CommandRemoveTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kRemovedTableStylesFieldNumber = 3,
    kPresetIdFieldNumber = 4,
    kPresetIndexInThemeFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Reference removed_table_styles = 3;
  bool has_removed_table_styles() const;
  private:
  bool _internal_has_removed_table_styles() const;
  public:
  void clear_removed_table_styles();
  const ::TSP::Reference& removed_table_styles() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_removed_table_styles();
  ::TSP::Reference* mutable_removed_table_styles();
  void set_allocated_removed_table_styles(::TSP::Reference* removed_table_styles);
  private:
  const ::TSP::Reference& _internal_removed_table_styles() const;
  ::TSP::Reference* _internal_mutable_removed_table_styles();
  public:
  void unsafe_arena_set_allocated_removed_table_styles(
      ::TSP::Reference* removed_table_styles);
  ::TSP::Reference* unsafe_arena_release_removed_table_styles();

  // required int32 preset_id = 4;
  bool has_preset_id() const;
  private:
  bool _internal_has_preset_id() const;
  public:
  void clear_preset_id();
  int32_t preset_id() const;
  void set_preset_id(int32_t value);
  private:
  int32_t _internal_preset_id() const;
  void _internal_set_preset_id(int32_t value);
  public:

  // required int32 preset_index_in_theme = 5;
  bool has_preset_index_in_theme() const;
  private:
  bool _internal_has_preset_index_in_theme() const;
  public:
  void clear_preset_index_in_theme();
  int32_t preset_index_in_theme() const;
  void set_preset_index_in_theme(int32_t value);
  private:
  int32_t _internal_preset_index_in_theme() const;
  void _internal_set_preset_index_in_theme(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandRemoveTableStylePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* theme_;
    ::TSP::Reference* removed_table_styles_;
    int32_t preset_id_;
    int32_t preset_index_in_theme_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceTableStylePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandReplaceTableStylePresetArchive) */ {
 public:
  inline CommandReplaceTableStylePresetArchive() : CommandReplaceTableStylePresetArchive(nullptr) {}
  ~CommandReplaceTableStylePresetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceTableStylePresetArchive(const CommandReplaceTableStylePresetArchive& from);
  CommandReplaceTableStylePresetArchive(CommandReplaceTableStylePresetArchive&& from) noexcept
    : CommandReplaceTableStylePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceTableStylePresetArchive& operator=(const CommandReplaceTableStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceTableStylePresetArchive& operator=(CommandReplaceTableStylePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceTableStylePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceTableStylePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceTableStylePresetArchive*>(
               &_CommandReplaceTableStylePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CommandReplaceTableStylePresetArchive& a, CommandReplaceTableStylePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceTableStylePresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceTableStylePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceTableStylePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceTableStylePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceTableStylePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceTableStylePresetArchive& from) {
    CommandReplaceTableStylePresetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceTableStylePresetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandReplaceTableStylePresetArchive";
  }
  protected:
  explicit CommandReplaceTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kOldTableStylesFieldNumber = 3,
    kNewTableStylesFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Reference old_table_styles = 3;
  bool has_old_table_styles() const;
  private:
  bool _internal_has_old_table_styles() const;
  public:
  void clear_old_table_styles();
  const ::TSP::Reference& old_table_styles() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_table_styles();
  ::TSP::Reference* mutable_old_table_styles();
  void set_allocated_old_table_styles(::TSP::Reference* old_table_styles);
  private:
  const ::TSP::Reference& _internal_old_table_styles() const;
  ::TSP::Reference* _internal_mutable_old_table_styles();
  public:
  void unsafe_arena_set_allocated_old_table_styles(
      ::TSP::Reference* old_table_styles);
  ::TSP::Reference* unsafe_arena_release_old_table_styles();

  // required .TSP.Reference new_table_styles = 4;
  bool has_new_table_styles() const;
  private:
  bool _internal_has_new_table_styles() const;
  public:
  void clear_new_table_styles();
  const ::TSP::Reference& new_table_styles() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_table_styles();
  ::TSP::Reference* mutable_new_table_styles();
  void set_allocated_new_table_styles(::TSP::Reference* new_table_styles);
  private:
  const ::TSP::Reference& _internal_new_table_styles() const;
  ::TSP::Reference* _internal_mutable_new_table_styles();
  public:
  void unsafe_arena_set_allocated_new_table_styles(
      ::TSP::Reference* new_table_styles);
  ::TSP::Reference* unsafe_arena_release_new_table_styles();

  // @@protoc_insertion_point(class_scope:TST.CommandReplaceTableStylePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* theme_;
    ::TSP::Reference* old_table_styles_;
    ::TSP::Reference* new_table_styles_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyTableStylePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyTableStylePresetArchive) */ {
 public:
  inline CommandApplyTableStylePresetArchive() : CommandApplyTableStylePresetArchive(nullptr) {}
  ~CommandApplyTableStylePresetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyTableStylePresetArchive(const CommandApplyTableStylePresetArchive& from);
  CommandApplyTableStylePresetArchive(CommandApplyTableStylePresetArchive&& from) noexcept
    : CommandApplyTableStylePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyTableStylePresetArchive& operator=(const CommandApplyTableStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyTableStylePresetArchive& operator=(CommandApplyTableStylePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyTableStylePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyTableStylePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyTableStylePresetArchive*>(
               &_CommandApplyTableStylePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CommandApplyTableStylePresetArchive& a, CommandApplyTableStylePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyTableStylePresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyTableStylePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyTableStylePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyTableStylePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyTableStylePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyTableStylePresetArchive& from) {
    CommandApplyTableStylePresetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyTableStylePresetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyTableStylePresetArchive";
  }
  protected:
  explicit CommandApplyTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowColStylesFieldNumber = 13,
    kUndoRowColStylesFieldNumber = 14,
    kSuperFieldNumber = 1,
    kPresetFieldNumber = 2,
    kStylesFieldNumber = 3,
    kUndoPresetFieldNumber = 4,
    kUndoStylesFieldNumber = 5,
    kCellDiffMapFieldNumber = 6,
    kUndoCellDiffMapFieldNumber = 7,
    kChangePropMapWrapperFieldNumber = 15,
    kApplyPresetOptionFieldNumber = 8,
    kTableClearsAllFlagFieldNumber = 11,
    kUndoTableClearsAllFlagFieldNumber = 12,
  };
  // repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
  int row_col_styles_size() const;
  private:
  int _internal_row_col_styles_size() const;
  public:
  void clear_row_col_styles();
  ::TST::ColumnRowMetadataArchive* mutable_row_col_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
      mutable_row_col_styles();
  private:
  const ::TST::ColumnRowMetadataArchive& _internal_row_col_styles(int index) const;
  ::TST::ColumnRowMetadataArchive* _internal_add_row_col_styles();
  public:
  const ::TST::ColumnRowMetadataArchive& row_col_styles(int index) const;
  ::TST::ColumnRowMetadataArchive* add_row_col_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
      row_col_styles() const;

  // repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
  int undo_row_col_styles_size() const;
  private:
  int _internal_undo_row_col_styles_size() const;
  public:
  void clear_undo_row_col_styles();
  ::TST::ColumnRowMetadataArchive* mutable_undo_row_col_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
      mutable_undo_row_col_styles();
  private:
  const ::TST::ColumnRowMetadataArchive& _internal_undo_row_col_styles(int index) const;
  ::TST::ColumnRowMetadataArchive* _internal_add_undo_row_col_styles();
  public:
  const ::TST::ColumnRowMetadataArchive& undo_row_col_styles(int index) const;
  ::TST::ColumnRowMetadataArchive* add_undo_row_col_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
      undo_row_col_styles() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference preset = 2;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional .TSP.Reference styles = 3;
  bool has_styles() const;
  private:
  bool _internal_has_styles() const;
  public:
  void clear_styles();
  const ::TSP::Reference& styles() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_styles();
  ::TSP::Reference* mutable_styles();
  void set_allocated_styles(::TSP::Reference* styles);
  private:
  const ::TSP::Reference& _internal_styles() const;
  ::TSP::Reference* _internal_mutable_styles();
  public:
  void unsafe_arena_set_allocated_styles(
      ::TSP::Reference* styles);
  ::TSP::Reference* unsafe_arena_release_styles();

  // optional .TSP.Reference undo_preset = 4;
  bool has_undo_preset() const;
  private:
  bool _internal_has_undo_preset() const;
  public:
  void clear_undo_preset();
  const ::TSP::Reference& undo_preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_preset();
  ::TSP::Reference* mutable_undo_preset();
  void set_allocated_undo_preset(::TSP::Reference* undo_preset);
  private:
  const ::TSP::Reference& _internal_undo_preset() const;
  ::TSP::Reference* _internal_mutable_undo_preset();
  public:
  void unsafe_arena_set_allocated_undo_preset(
      ::TSP::Reference* undo_preset);
  ::TSP::Reference* unsafe_arena_release_undo_preset();

  // optional .TSP.Reference undo_styles = 5;
  bool has_undo_styles() const;
  private:
  bool _internal_has_undo_styles() const;
  public:
  void clear_undo_styles();
  const ::TSP::Reference& undo_styles() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_styles();
  ::TSP::Reference* mutable_undo_styles();
  void set_allocated_undo_styles(::TSP::Reference* undo_styles);
  private:
  const ::TSP::Reference& _internal_undo_styles() const;
  ::TSP::Reference* _internal_mutable_undo_styles();
  public:
  void unsafe_arena_set_allocated_undo_styles(
      ::TSP::Reference* undo_styles);
  ::TSP::Reference* unsafe_arena_release_undo_styles();

  // optional .TSP.Reference cell_diff_map = 6;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference undo_cell_diff_map = 7;
  bool has_undo_cell_diff_map() const;
  private:
  bool _internal_has_undo_cell_diff_map() const;
  public:
  void clear_undo_cell_diff_map();
  const ::TSP::Reference& undo_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_diff_map();
  ::TSP::Reference* mutable_undo_cell_diff_map();
  void set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_diff_map(
      ::TSP::Reference* undo_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_diff_map();

  // optional .TSP.Reference change_prop_map_wrapper = 15;
  bool has_change_prop_map_wrapper() const;
  private:
  bool _internal_has_change_prop_map_wrapper() const;
  public:
  void clear_change_prop_map_wrapper();
  const ::TSP::Reference& change_prop_map_wrapper() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_change_prop_map_wrapper();
  ::TSP::Reference* mutable_change_prop_map_wrapper();
  void set_allocated_change_prop_map_wrapper(::TSP::Reference* change_prop_map_wrapper);
  private:
  const ::TSP::Reference& _internal_change_prop_map_wrapper() const;
  ::TSP::Reference* _internal_mutable_change_prop_map_wrapper();
  public:
  void unsafe_arena_set_allocated_change_prop_map_wrapper(
      ::TSP::Reference* change_prop_map_wrapper);
  ::TSP::Reference* unsafe_arena_release_change_prop_map_wrapper();

  // required int32 apply_preset_option = 8;
  bool has_apply_preset_option() const;
  private:
  bool _internal_has_apply_preset_option() const;
  public:
  void clear_apply_preset_option();
  int32_t apply_preset_option() const;
  void set_apply_preset_option(int32_t value);
  private:
  int32_t _internal_apply_preset_option() const;
  void _internal_set_apply_preset_option(int32_t value);
  public:

  // required bool table_clears_all_flag = 11;
  bool has_table_clears_all_flag() const;
  private:
  bool _internal_has_table_clears_all_flag() const;
  public:
  void clear_table_clears_all_flag();
  bool table_clears_all_flag() const;
  void set_table_clears_all_flag(bool value);
  private:
  bool _internal_table_clears_all_flag() const;
  void _internal_set_table_clears_all_flag(bool value);
  public:

  // required bool undo_table_clears_all_flag = 12;
  bool has_undo_table_clears_all_flag() const;
  private:
  bool _internal_has_undo_table_clears_all_flag() const;
  public:
  void clear_undo_table_clears_all_flag();
  bool undo_table_clears_all_flag() const;
  void set_undo_table_clears_all_flag(bool value);
  private:
  bool _internal_undo_table_clears_all_flag() const;
  void _internal_set_undo_table_clears_all_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyTableStylePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive > row_col_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive > undo_row_col_styles_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* preset_;
    ::TSP::Reference* styles_;
    ::TSP::Reference* undo_preset_;
    ::TSP::Reference* undo_styles_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* undo_cell_diff_map_;
    ::TSP::Reference* change_prop_map_wrapper_;
    int32_t apply_preset_option_;
    bool table_clears_all_flag_;
    bool undo_table_clears_all_flag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetBaseArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetBaseArchive) */ {
 public:
  inline CommandSetBaseArchive() : CommandSetBaseArchive(nullptr) {}
  ~CommandSetBaseArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetBaseArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetBaseArchive(const CommandSetBaseArchive& from);
  CommandSetBaseArchive(CommandSetBaseArchive&& from) noexcept
    : CommandSetBaseArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetBaseArchive& operator=(const CommandSetBaseArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetBaseArchive& operator=(CommandSetBaseArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetBaseArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetBaseArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetBaseArchive*>(
               &_CommandSetBaseArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CommandSetBaseArchive& a, CommandSetBaseArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetBaseArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetBaseArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetBaseArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetBaseArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetBaseArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetBaseArchive& from) {
    CommandSetBaseArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetBaseArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetBaseArchive";
  }
  protected:
  explicit CommandSetBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kBaseFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required uint32 base = 2;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  uint32_t base() const;
  void set_base(uint32_t value);
  private:
  uint32_t _internal_base() const;
  void _internal_set_base(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetBaseArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    uint32_t base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetBasePlacesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetBasePlacesArchive) */ {
 public:
  inline CommandSetBasePlacesArchive() : CommandSetBasePlacesArchive(nullptr) {}
  ~CommandSetBasePlacesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetBasePlacesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetBasePlacesArchive(const CommandSetBasePlacesArchive& from);
  CommandSetBasePlacesArchive(CommandSetBasePlacesArchive&& from) noexcept
    : CommandSetBasePlacesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetBasePlacesArchive& operator=(const CommandSetBasePlacesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetBasePlacesArchive& operator=(CommandSetBasePlacesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetBasePlacesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetBasePlacesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetBasePlacesArchive*>(
               &_CommandSetBasePlacesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CommandSetBasePlacesArchive& a, CommandSetBasePlacesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetBasePlacesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetBasePlacesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetBasePlacesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetBasePlacesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetBasePlacesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetBasePlacesArchive& from) {
    CommandSetBasePlacesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetBasePlacesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetBasePlacesArchive";
  }
  protected:
  explicit CommandSetBasePlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kBasePlacesFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required uint32 base_places = 2;
  bool has_base_places() const;
  private:
  bool _internal_has_base_places() const;
  public:
  void clear_base_places();
  uint32_t base_places() const;
  void set_base_places(uint32_t value);
  private:
  uint32_t _internal_base_places() const;
  void _internal_set_base_places(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetBasePlacesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    uint32_t base_places_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetBaseUseMinusSignArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetBaseUseMinusSignArchive) */ {
 public:
  inline CommandSetBaseUseMinusSignArchive() : CommandSetBaseUseMinusSignArchive(nullptr) {}
  ~CommandSetBaseUseMinusSignArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetBaseUseMinusSignArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetBaseUseMinusSignArchive(const CommandSetBaseUseMinusSignArchive& from);
  CommandSetBaseUseMinusSignArchive(CommandSetBaseUseMinusSignArchive&& from) noexcept
    : CommandSetBaseUseMinusSignArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetBaseUseMinusSignArchive& operator=(const CommandSetBaseUseMinusSignArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetBaseUseMinusSignArchive& operator=(CommandSetBaseUseMinusSignArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetBaseUseMinusSignArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetBaseUseMinusSignArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetBaseUseMinusSignArchive*>(
               &_CommandSetBaseUseMinusSignArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CommandSetBaseUseMinusSignArchive& a, CommandSetBaseUseMinusSignArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetBaseUseMinusSignArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetBaseUseMinusSignArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetBaseUseMinusSignArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetBaseUseMinusSignArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetBaseUseMinusSignArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetBaseUseMinusSignArchive& from) {
    CommandSetBaseUseMinusSignArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetBaseUseMinusSignArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetBaseUseMinusSignArchive";
  }
  protected:
  explicit CommandSetBaseUseMinusSignArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kBaseUseMinusSignFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required bool base_use_minus_sign = 2;
  bool has_base_use_minus_sign() const;
  private:
  bool _internal_has_base_use_minus_sign() const;
  public:
  void clear_base_use_minus_sign();
  bool base_use_minus_sign() const;
  void set_base_use_minus_sign(bool value);
  private:
  bool _internal_base_use_minus_sign() const;
  void _internal_set_base_use_minus_sign(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetBaseUseMinusSignArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    bool base_use_minus_sign_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetCurrencyCodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetCurrencyCodeArchive) */ {
 public:
  inline CommandSetCurrencyCodeArchive() : CommandSetCurrencyCodeArchive(nullptr) {}
  ~CommandSetCurrencyCodeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetCurrencyCodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetCurrencyCodeArchive(const CommandSetCurrencyCodeArchive& from);
  CommandSetCurrencyCodeArchive(CommandSetCurrencyCodeArchive&& from) noexcept
    : CommandSetCurrencyCodeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetCurrencyCodeArchive& operator=(const CommandSetCurrencyCodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetCurrencyCodeArchive& operator=(CommandSetCurrencyCodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetCurrencyCodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetCurrencyCodeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetCurrencyCodeArchive*>(
               &_CommandSetCurrencyCodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CommandSetCurrencyCodeArchive& a, CommandSetCurrencyCodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetCurrencyCodeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetCurrencyCodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetCurrencyCodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetCurrencyCodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetCurrencyCodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetCurrencyCodeArchive& from) {
    CommandSetCurrencyCodeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetCurrencyCodeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetCurrencyCodeArchive";
  }
  protected:
  explicit CommandSetCurrencyCodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // required string currency_code = 2;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  PROTOBUF_NODISCARD std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetCurrencyCodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
    ::TST::CommandMutateCellFormatArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFractionAccuracyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFractionAccuracyArchive) */ {
 public:
  inline CommandSetFractionAccuracyArchive() : CommandSetFractionAccuracyArchive(nullptr) {}
  ~CommandSetFractionAccuracyArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFractionAccuracyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFractionAccuracyArchive(const CommandSetFractionAccuracyArchive& from);
  CommandSetFractionAccuracyArchive(CommandSetFractionAccuracyArchive&& from) noexcept
    : CommandSetFractionAccuracyArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFractionAccuracyArchive& operator=(const CommandSetFractionAccuracyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFractionAccuracyArchive& operator=(CommandSetFractionAccuracyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFractionAccuracyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFractionAccuracyArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFractionAccuracyArchive*>(
               &_CommandSetFractionAccuracyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CommandSetFractionAccuracyArchive& a, CommandSetFractionAccuracyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFractionAccuracyArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFractionAccuracyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFractionAccuracyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFractionAccuracyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFractionAccuracyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFractionAccuracyArchive& from) {
    CommandSetFractionAccuracyArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFractionAccuracyArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFractionAccuracyArchive";
  }
  protected:
  explicit CommandSetFractionAccuracyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFractionAccuracyFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required uint32 fraction_accuracy = 2;
  bool has_fraction_accuracy() const;
  private:
  bool _internal_has_fraction_accuracy() const;
  public:
  void clear_fraction_accuracy();
  uint32_t fraction_accuracy() const;
  void set_fraction_accuracy(uint32_t value);
  private:
  uint32_t _internal_fraction_accuracy() const;
  void _internal_set_fraction_accuracy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFractionAccuracyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    uint32_t fraction_accuracy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetNegativeNumberStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetNegativeNumberStyleArchive) */ {
 public:
  inline CommandSetNegativeNumberStyleArchive() : CommandSetNegativeNumberStyleArchive(nullptr) {}
  ~CommandSetNegativeNumberStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetNegativeNumberStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetNegativeNumberStyleArchive(const CommandSetNegativeNumberStyleArchive& from);
  CommandSetNegativeNumberStyleArchive(CommandSetNegativeNumberStyleArchive&& from) noexcept
    : CommandSetNegativeNumberStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetNegativeNumberStyleArchive& operator=(const CommandSetNegativeNumberStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetNegativeNumberStyleArchive& operator=(CommandSetNegativeNumberStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetNegativeNumberStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetNegativeNumberStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetNegativeNumberStyleArchive*>(
               &_CommandSetNegativeNumberStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CommandSetNegativeNumberStyleArchive& a, CommandSetNegativeNumberStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetNegativeNumberStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetNegativeNumberStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetNegativeNumberStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetNegativeNumberStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetNegativeNumberStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetNegativeNumberStyleArchive& from) {
    CommandSetNegativeNumberStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetNegativeNumberStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetNegativeNumberStyleArchive";
  }
  protected:
  explicit CommandSetNegativeNumberStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNegativeNumberStyleFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required uint32 negative_number_style = 2;
  bool has_negative_number_style() const;
  private:
  bool _internal_has_negative_number_style() const;
  public:
  void clear_negative_number_style();
  uint32_t negative_number_style() const;
  void set_negative_number_style(uint32_t value);
  private:
  uint32_t _internal_negative_number_style() const;
  void _internal_set_negative_number_style(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetNegativeNumberStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    uint32_t negative_number_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetNumberOfDecimalPlacesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetNumberOfDecimalPlacesArchive) */ {
 public:
  inline CommandSetNumberOfDecimalPlacesArchive() : CommandSetNumberOfDecimalPlacesArchive(nullptr) {}
  ~CommandSetNumberOfDecimalPlacesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetNumberOfDecimalPlacesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetNumberOfDecimalPlacesArchive(const CommandSetNumberOfDecimalPlacesArchive& from);
  CommandSetNumberOfDecimalPlacesArchive(CommandSetNumberOfDecimalPlacesArchive&& from) noexcept
    : CommandSetNumberOfDecimalPlacesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetNumberOfDecimalPlacesArchive& operator=(const CommandSetNumberOfDecimalPlacesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetNumberOfDecimalPlacesArchive& operator=(CommandSetNumberOfDecimalPlacesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetNumberOfDecimalPlacesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetNumberOfDecimalPlacesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetNumberOfDecimalPlacesArchive*>(
               &_CommandSetNumberOfDecimalPlacesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CommandSetNumberOfDecimalPlacesArchive& a, CommandSetNumberOfDecimalPlacesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetNumberOfDecimalPlacesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetNumberOfDecimalPlacesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetNumberOfDecimalPlacesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetNumberOfDecimalPlacesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetNumberOfDecimalPlacesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetNumberOfDecimalPlacesArchive& from) {
    CommandSetNumberOfDecimalPlacesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetNumberOfDecimalPlacesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetNumberOfDecimalPlacesArchive";
  }
  protected:
  explicit CommandSetNumberOfDecimalPlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDecimalPlacesFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required uint32 decimal_places = 2;
  bool has_decimal_places() const;
  private:
  bool _internal_has_decimal_places() const;
  public:
  void clear_decimal_places();
  uint32_t decimal_places() const;
  void set_decimal_places(uint32_t value);
  private:
  uint32_t _internal_decimal_places() const;
  void _internal_set_decimal_places(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetNumberOfDecimalPlacesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    uint32_t decimal_places_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetDateTimeFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetDateTimeFormatArchive) */ {
 public:
  inline CommandSetDateTimeFormatArchive() : CommandSetDateTimeFormatArchive(nullptr) {}
  ~CommandSetDateTimeFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetDateTimeFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetDateTimeFormatArchive(const CommandSetDateTimeFormatArchive& from);
  CommandSetDateTimeFormatArchive(CommandSetDateTimeFormatArchive&& from) noexcept
    : CommandSetDateTimeFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetDateTimeFormatArchive& operator=(const CommandSetDateTimeFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetDateTimeFormatArchive& operator=(CommandSetDateTimeFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetDateTimeFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetDateTimeFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetDateTimeFormatArchive*>(
               &_CommandSetDateTimeFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CommandSetDateTimeFormatArchive& a, CommandSetDateTimeFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetDateTimeFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetDateTimeFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetDateTimeFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetDateTimeFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetDateTimeFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetDateTimeFormatArchive& from) {
    CommandSetDateTimeFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetDateTimeFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetDateTimeFormatArchive";
  }
  protected:
  explicit CommandSetDateTimeFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFormatStringFieldNumber = 2,
    kTimeFormatStringFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // optional string date_format_string = 2;
  bool has_date_format_string() const;
  private:
  bool _internal_has_date_format_string() const;
  public:
  void clear_date_format_string();
  const std::string& date_format_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_format_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_format_string();
  PROTOBUF_NODISCARD std::string* release_date_format_string();
  void set_allocated_date_format_string(std::string* date_format_string);
  private:
  const std::string& _internal_date_format_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_format_string(const std::string& value);
  std::string* _internal_mutable_date_format_string();
  public:

  // optional string time_format_string = 3;
  bool has_time_format_string() const;
  private:
  bool _internal_has_time_format_string() const;
  public:
  void clear_time_format_string();
  const std::string& time_format_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_format_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_format_string();
  PROTOBUF_NODISCARD std::string* release_time_format_string();
  void set_allocated_time_format_string(std::string* time_format_string);
  private:
  const std::string& _internal_time_format_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_format_string(const std::string& value);
  std::string* _internal_mutable_time_format_string();
  public:

  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetDateTimeFormatArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_format_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_format_string_;
    ::TST::CommandMutateCellFormatArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetShowThousandsSeparatorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetShowThousandsSeparatorArchive) */ {
 public:
  inline CommandSetShowThousandsSeparatorArchive() : CommandSetShowThousandsSeparatorArchive(nullptr) {}
  ~CommandSetShowThousandsSeparatorArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetShowThousandsSeparatorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetShowThousandsSeparatorArchive(const CommandSetShowThousandsSeparatorArchive& from);
  CommandSetShowThousandsSeparatorArchive(CommandSetShowThousandsSeparatorArchive&& from) noexcept
    : CommandSetShowThousandsSeparatorArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetShowThousandsSeparatorArchive& operator=(const CommandSetShowThousandsSeparatorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetShowThousandsSeparatorArchive& operator=(CommandSetShowThousandsSeparatorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetShowThousandsSeparatorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetShowThousandsSeparatorArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetShowThousandsSeparatorArchive*>(
               &_CommandSetShowThousandsSeparatorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CommandSetShowThousandsSeparatorArchive& a, CommandSetShowThousandsSeparatorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetShowThousandsSeparatorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetShowThousandsSeparatorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetShowThousandsSeparatorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetShowThousandsSeparatorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetShowThousandsSeparatorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetShowThousandsSeparatorArchive& from) {
    CommandSetShowThousandsSeparatorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetShowThousandsSeparatorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetShowThousandsSeparatorArchive";
  }
  protected:
  explicit CommandSetShowThousandsSeparatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowThousandsSeparatorFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required bool show_thousands_separator = 2;
  bool has_show_thousands_separator() const;
  private:
  bool _internal_has_show_thousands_separator() const;
  public:
  void clear_show_thousands_separator();
  bool show_thousands_separator() const;
  void set_show_thousands_separator(bool value);
  private:
  bool _internal_show_thousands_separator() const;
  void _internal_set_show_thousands_separator(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetShowThousandsSeparatorArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    bool show_thousands_separator_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetUseAccountingStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetUseAccountingStyleArchive) */ {
 public:
  inline CommandSetUseAccountingStyleArchive() : CommandSetUseAccountingStyleArchive(nullptr) {}
  ~CommandSetUseAccountingStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetUseAccountingStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetUseAccountingStyleArchive(const CommandSetUseAccountingStyleArchive& from);
  CommandSetUseAccountingStyleArchive(CommandSetUseAccountingStyleArchive&& from) noexcept
    : CommandSetUseAccountingStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetUseAccountingStyleArchive& operator=(const CommandSetUseAccountingStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetUseAccountingStyleArchive& operator=(CommandSetUseAccountingStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetUseAccountingStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetUseAccountingStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetUseAccountingStyleArchive*>(
               &_CommandSetUseAccountingStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CommandSetUseAccountingStyleArchive& a, CommandSetUseAccountingStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetUseAccountingStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetUseAccountingStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetUseAccountingStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetUseAccountingStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetUseAccountingStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetUseAccountingStyleArchive& from) {
    CommandSetUseAccountingStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetUseAccountingStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetUseAccountingStyleArchive";
  }
  protected:
  explicit CommandSetUseAccountingStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUseAccountingStyleFieldNumber = 2,
  };
  // required .TST.CommandMutateCellFormatArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandMutateCellFormatArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandMutateCellFormatArchive* release_super();
  ::TST::CommandMutateCellFormatArchive* mutable_super();
  void set_allocated_super(::TST::CommandMutateCellFormatArchive* super);
  private:
  const ::TST::CommandMutateCellFormatArchive& _internal_super() const;
  ::TST::CommandMutateCellFormatArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandMutateCellFormatArchive* super);
  ::TST::CommandMutateCellFormatArchive* unsafe_arena_release_super();

  // required bool use_accounting_style = 2;
  bool has_use_accounting_style() const;
  private:
  bool _internal_has_use_accounting_style() const;
  public:
  void clear_use_accounting_style();
  bool use_accounting_style() const;
  void set_use_accounting_style(bool value);
  private:
  bool _internal_use_accounting_style() const;
  void _internal_set_use_accounting_style(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetUseAccountingStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandMutateCellFormatArchive* super_;
    bool use_accounting_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetRangeControlMinMaxIncArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetRangeControlMinMaxIncArchive) */ {
 public:
  inline CommandSetRangeControlMinMaxIncArchive() : CommandSetRangeControlMinMaxIncArchive(nullptr) {}
  ~CommandSetRangeControlMinMaxIncArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetRangeControlMinMaxIncArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetRangeControlMinMaxIncArchive(const CommandSetRangeControlMinMaxIncArchive& from);
  CommandSetRangeControlMinMaxIncArchive(CommandSetRangeControlMinMaxIncArchive&& from) noexcept
    : CommandSetRangeControlMinMaxIncArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetRangeControlMinMaxIncArchive& operator=(const CommandSetRangeControlMinMaxIncArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetRangeControlMinMaxIncArchive& operator=(CommandSetRangeControlMinMaxIncArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetRangeControlMinMaxIncArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetRangeControlMinMaxIncArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetRangeControlMinMaxIncArchive*>(
               &_CommandSetRangeControlMinMaxIncArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CommandSetRangeControlMinMaxIncArchive& a, CommandSetRangeControlMinMaxIncArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetRangeControlMinMaxIncArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetRangeControlMinMaxIncArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetRangeControlMinMaxIncArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetRangeControlMinMaxIncArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetRangeControlMinMaxIncArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetRangeControlMinMaxIncArchive& from) {
    CommandSetRangeControlMinMaxIncArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetRangeControlMinMaxIncArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetRangeControlMinMaxIncArchive";
  }
  protected:
  explicit CommandSetRangeControlMinMaxIncArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 5,
    kCellUidListFieldNumber = 6,
    kInverseCellDiffMapFieldNumber = 7,
    kMinimumFieldNumber = 2,
    kMaximumFieldNumber = 3,
    kIncrementFieldNumber = 4,
    kIsFirstCommitFieldNumber = 8,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference cell_diff_map = 5;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TST.CellUIDListArchive cell_uid_list = 6;
  bool has_cell_uid_list() const;
  private:
  bool _internal_has_cell_uid_list() const;
  public:
  void clear_cell_uid_list();
  const ::TST::CellUIDListArchive& cell_uid_list() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_cell_uid_list();
  ::TST::CellUIDListArchive* mutable_cell_uid_list();
  void set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uid_list() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uid_list();
  public:
  void unsafe_arena_set_allocated_cell_uid_list(
      ::TST::CellUIDListArchive* cell_uid_list);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uid_list();

  // optional .TSP.Reference inverse_cell_diff_map = 7;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // optional double minimum = 2;
  bool has_minimum() const;
  private:
  bool _internal_has_minimum() const;
  public:
  void clear_minimum();
  double minimum() const;
  void set_minimum(double value);
  private:
  double _internal_minimum() const;
  void _internal_set_minimum(double value);
  public:

  // optional double maximum = 3;
  bool has_maximum() const;
  private:
  bool _internal_has_maximum() const;
  public:
  void clear_maximum();
  double maximum() const;
  void set_maximum(double value);
  private:
  double _internal_maximum() const;
  void _internal_set_maximum(double value);
  public:

  // optional double increment = 4;
  bool has_increment() const;
  private:
  bool _internal_has_increment() const;
  public:
  void clear_increment();
  double increment() const;
  void set_increment(double value);
  private:
  double _internal_increment() const;
  void _internal_set_increment(double value);
  public:

  // required bool is_first_commit = 8;
  bool has_is_first_commit() const;
  private:
  bool _internal_has_is_first_commit() const;
  public:
  void clear_is_first_commit();
  bool is_first_commit() const;
  void set_is_first_commit(bool value);
  private:
  bool _internal_is_first_commit() const;
  void _internal_set_is_first_commit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetRangeControlMinMaxIncArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TST::CellUIDListArchive* cell_uid_list_;
    ::TSP::Reference* inverse_cell_diff_map_;
    double minimum_;
    double maximum_;
    double increment_;
    bool is_first_commit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveColumnsOrRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMoveColumnsOrRowsArchive) */ {
 public:
  inline CommandMoveColumnsOrRowsArchive() : CommandMoveColumnsOrRowsArchive(nullptr) {}
  ~CommandMoveColumnsOrRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveColumnsOrRowsArchive(const CommandMoveColumnsOrRowsArchive& from);
  CommandMoveColumnsOrRowsArchive(CommandMoveColumnsOrRowsArchive&& from) noexcept
    : CommandMoveColumnsOrRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveColumnsOrRowsArchive& operator=(const CommandMoveColumnsOrRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveColumnsOrRowsArchive& operator=(CommandMoveColumnsOrRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveColumnsOrRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveColumnsOrRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveColumnsOrRowsArchive*>(
               &_CommandMoveColumnsOrRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CommandMoveColumnsOrRowsArchive& a, CommandMoveColumnsOrRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveColumnsOrRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveColumnsOrRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMoveColumnsOrRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMoveColumnsOrRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveColumnsOrRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMoveColumnsOrRowsArchive& from) {
    CommandMoveColumnsOrRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveColumnsOrRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMoveColumnsOrRowsArchive";
  }
  protected:
  explicit CommandMoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 6,
    kSuperFieldNumber = 1,
    kDestUidFieldNumber = 2,
    kUndoDestUidFieldNumber = 4,
    kFormulaRewriteCommandFieldNumber = 8,
    kBeforeFieldNumber = 3,
    kUndoBeforeFieldNumber = 5,
    kDirectionFieldNumber = 7,
  };
  // repeated .TSP.UUID uids = 6;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  ::TSP::UUID* mutable_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uids();
  private:
  const ::TSP::UUID& _internal_uids(int index) const;
  ::TSP::UUID* _internal_add_uids();
  public:
  const ::TSP::UUID& uids(int index) const;
  ::TSP::UUID* add_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uids() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID dest_uid = 2;
  bool has_dest_uid() const;
  private:
  bool _internal_has_dest_uid() const;
  public:
  void clear_dest_uid();
  const ::TSP::UUID& dest_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_dest_uid();
  ::TSP::UUID* mutable_dest_uid();
  void set_allocated_dest_uid(::TSP::UUID* dest_uid);
  private:
  const ::TSP::UUID& _internal_dest_uid() const;
  ::TSP::UUID* _internal_mutable_dest_uid();
  public:
  void unsafe_arena_set_allocated_dest_uid(
      ::TSP::UUID* dest_uid);
  ::TSP::UUID* unsafe_arena_release_dest_uid();

  // required .TSP.UUID undo_dest_uid = 4;
  bool has_undo_dest_uid() const;
  private:
  bool _internal_has_undo_dest_uid() const;
  public:
  void clear_undo_dest_uid();
  const ::TSP::UUID& undo_dest_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_undo_dest_uid();
  ::TSP::UUID* mutable_undo_dest_uid();
  void set_allocated_undo_dest_uid(::TSP::UUID* undo_dest_uid);
  private:
  const ::TSP::UUID& _internal_undo_dest_uid() const;
  ::TSP::UUID* _internal_mutable_undo_dest_uid();
  public:
  void unsafe_arena_set_allocated_undo_dest_uid(
      ::TSP::UUID* undo_dest_uid);
  ::TSP::UUID* unsafe_arena_release_undo_dest_uid();

  // optional .TSP.Reference formula_rewrite_command = 8;
  bool has_formula_rewrite_command() const;
  private:
  bool _internal_has_formula_rewrite_command() const;
  public:
  void clear_formula_rewrite_command();
  const ::TSP::Reference& formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command();
  ::TSP::Reference* mutable_formula_rewrite_command();
  void set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command(
      ::TSP::Reference* formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command();

  // required bool before = 3;
  bool has_before() const;
  private:
  bool _internal_has_before() const;
  public:
  void clear_before();
  bool before() const;
  void set_before(bool value);
  private:
  bool _internal_before() const;
  void _internal_set_before(bool value);
  public:

  // required bool undo_before = 5;
  bool has_undo_before() const;
  private:
  bool _internal_has_undo_before() const;
  public:
  void clear_undo_before();
  bool undo_before() const;
  void set_undo_before(bool value);
  private:
  bool _internal_undo_before() const;
  void _internal_set_undo_before(bool value);
  public:

  // required .TST.TableDimensionArchive direction = 7;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::TableDimensionArchive direction() const;
  void set_direction(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_direction() const;
  void _internal_set_direction(::TST::TableDimensionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandMoveColumnsOrRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uids_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUID* dest_uid_;
    ::TSP::UUID* undo_dest_uid_;
    ::TSP::Reference* formula_rewrite_command_;
    bool before_;
    bool undo_before_;
    int direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSortArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSortArchive) */ {
 public:
  inline CommandSortArchive() : CommandSortArchive(nullptr) {}
  ~CommandSortArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSortArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSortArchive(const CommandSortArchive& from);
  CommandSortArchive(CommandSortArchive&& from) noexcept
    : CommandSortArchive() {
    *this = ::std::move(from);
  }

  inline CommandSortArchive& operator=(const CommandSortArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSortArchive& operator=(CommandSortArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSortArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSortArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSortArchive*>(
               &_CommandSortArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CommandSortArchive& a, CommandSortArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSortArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSortArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSortArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSortArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSortArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSortArchive& from) {
    CommandSortArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSortArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSortArchive";
  }
  protected:
  explicit CommandSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromRowUidsFieldNumber = 2,
    kToRowUidsFieldNumber = 3,
    kSuperFieldNumber = 1,
    kFormulaRewriteCommandFieldNumber = 4,
  };
  // repeated .TSP.UUID from_row_uids = 2;
  int from_row_uids_size() const;
  private:
  int _internal_from_row_uids_size() const;
  public:
  void clear_from_row_uids();
  ::TSP::UUID* mutable_from_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_from_row_uids();
  private:
  const ::TSP::UUID& _internal_from_row_uids(int index) const;
  ::TSP::UUID* _internal_add_from_row_uids();
  public:
  const ::TSP::UUID& from_row_uids(int index) const;
  ::TSP::UUID* add_from_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      from_row_uids() const;

  // repeated .TSP.UUID to_row_uids = 3;
  int to_row_uids_size() const;
  private:
  int _internal_to_row_uids_size() const;
  public:
  void clear_to_row_uids();
  ::TSP::UUID* mutable_to_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_to_row_uids();
  private:
  const ::TSP::UUID& _internal_to_row_uids(int index) const;
  ::TSP::UUID* _internal_add_to_row_uids();
  public:
  const ::TSP::UUID& to_row_uids(int index) const;
  ::TSP::UUID* add_to_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      to_row_uids() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference formula_rewrite_command = 4;
  bool has_formula_rewrite_command() const;
  private:
  bool _internal_has_formula_rewrite_command() const;
  public:
  void clear_formula_rewrite_command();
  const ::TSP::Reference& formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command();
  ::TSP::Reference* mutable_formula_rewrite_command();
  void set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command(
      ::TSP::Reference* formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command();

  // @@protoc_insertion_point(class_scope:TST.CommandSortArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > from_row_uids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > to_row_uids_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* formula_rewrite_command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaRewriteSpecArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaRewriteSpecArchive) */ {
 public:
  inline FormulaRewriteSpecArchive() : FormulaRewriteSpecArchive(nullptr) {}
  ~FormulaRewriteSpecArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaRewriteSpecArchive(const FormulaRewriteSpecArchive& from);
  FormulaRewriteSpecArchive(FormulaRewriteSpecArchive&& from) noexcept
    : FormulaRewriteSpecArchive() {
    *this = ::std::move(from);
  }

  inline FormulaRewriteSpecArchive& operator=(const FormulaRewriteSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaRewriteSpecArchive& operator=(FormulaRewriteSpecArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaRewriteSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaRewriteSpecArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaRewriteSpecArchive*>(
               &_FormulaRewriteSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(FormulaRewriteSpecArchive& a, FormulaRewriteSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaRewriteSpecArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaRewriteSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaRewriteSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaRewriteSpecArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaRewriteSpecArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaRewriteSpecArchive& from) {
    FormulaRewriteSpecArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaRewriteSpecArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaRewriteSpecArchive";
  }
  protected:
  explicit FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableUidFieldNumber = 2,
    kCondStyleOwnerUidFieldNumber = 3,
    kGroupByUidFieldNumber = 4,
    kColumnOrRowUuidsInfoFieldNumber = 6,
    kAuxColumnOrRowUuidsInfoFieldNumber = 7,
    kRegionMovedInfoFieldNumber = 8,
    kRegionInfoFieldNumber = 9,
    kRewriteTableIdInfoFieldNumber = 10,
    kTransposedTableInfoFieldNumber = 11,
    kMergeOriginMovedInfoFieldNumber = 12,
    kMergeSourceFieldNumber = 13,
    kGroupNodeInfoFieldNumber = 14,
    kGroupbyChangeFieldNumber = 15,
    kRewriteTypeFieldNumber = 1,
    kIsInverseFieldNumber = 5,
  };
  // optional .TSP.UUID table_uid = 2;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // optional .TSP.UUID cond_style_owner_uid = 3;
  bool has_cond_style_owner_uid() const;
  private:
  bool _internal_has_cond_style_owner_uid() const;
  public:
  void clear_cond_style_owner_uid();
  const ::TSP::UUID& cond_style_owner_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_cond_style_owner_uid();
  ::TSP::UUID* mutable_cond_style_owner_uid();
  void set_allocated_cond_style_owner_uid(::TSP::UUID* cond_style_owner_uid);
  private:
  const ::TSP::UUID& _internal_cond_style_owner_uid() const;
  ::TSP::UUID* _internal_mutable_cond_style_owner_uid();
  public:
  void unsafe_arena_set_allocated_cond_style_owner_uid(
      ::TSP::UUID* cond_style_owner_uid);
  ::TSP::UUID* unsafe_arena_release_cond_style_owner_uid();

  // optional .TSP.UUID group_by_uid = 4;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 6;
  bool has_column_or_row_uuids_info() const;
  private:
  bool _internal_has_column_or_row_uuids_info() const;
  public:
  void clear_column_or_row_uuids_info();
  const ::TSCE::ColumnOrRowUuidsInfoArchive& column_or_row_uuids_info() const;
  PROTOBUF_NODISCARD ::TSCE::ColumnOrRowUuidsInfoArchive* release_column_or_row_uuids_info();
  ::TSCE::ColumnOrRowUuidsInfoArchive* mutable_column_or_row_uuids_info();
  void set_allocated_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info);
  private:
  const ::TSCE::ColumnOrRowUuidsInfoArchive& _internal_column_or_row_uuids_info() const;
  ::TSCE::ColumnOrRowUuidsInfoArchive* _internal_mutable_column_or_row_uuids_info();
  public:
  void unsafe_arena_set_allocated_column_or_row_uuids_info(
      ::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info);
  ::TSCE::ColumnOrRowUuidsInfoArchive* unsafe_arena_release_column_or_row_uuids_info();

  // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 7;
  bool has_aux_column_or_row_uuids_info() const;
  private:
  bool _internal_has_aux_column_or_row_uuids_info() const;
  public:
  void clear_aux_column_or_row_uuids_info();
  const ::TSCE::ColumnOrRowUuidsInfoArchive& aux_column_or_row_uuids_info() const;
  PROTOBUF_NODISCARD ::TSCE::ColumnOrRowUuidsInfoArchive* release_aux_column_or_row_uuids_info();
  ::TSCE::ColumnOrRowUuidsInfoArchive* mutable_aux_column_or_row_uuids_info();
  void set_allocated_aux_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info);
  private:
  const ::TSCE::ColumnOrRowUuidsInfoArchive& _internal_aux_column_or_row_uuids_info() const;
  ::TSCE::ColumnOrRowUuidsInfoArchive* _internal_mutable_aux_column_or_row_uuids_info();
  public:
  void unsafe_arena_set_allocated_aux_column_or_row_uuids_info(
      ::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info);
  ::TSCE::ColumnOrRowUuidsInfoArchive* unsafe_arena_release_aux_column_or_row_uuids_info();

  // optional .TSCE.RegionMovedInfoArchive region_moved_info = 8;
  bool has_region_moved_info() const;
  private:
  bool _internal_has_region_moved_info() const;
  public:
  void clear_region_moved_info();
  const ::TSCE::RegionMovedInfoArchive& region_moved_info() const;
  PROTOBUF_NODISCARD ::TSCE::RegionMovedInfoArchive* release_region_moved_info();
  ::TSCE::RegionMovedInfoArchive* mutable_region_moved_info();
  void set_allocated_region_moved_info(::TSCE::RegionMovedInfoArchive* region_moved_info);
  private:
  const ::TSCE::RegionMovedInfoArchive& _internal_region_moved_info() const;
  ::TSCE::RegionMovedInfoArchive* _internal_mutable_region_moved_info();
  public:
  void unsafe_arena_set_allocated_region_moved_info(
      ::TSCE::RegionMovedInfoArchive* region_moved_info);
  ::TSCE::RegionMovedInfoArchive* unsafe_arena_release_region_moved_info();

  // optional .TSCE.RegionInfoArchive region_info = 9;
  bool has_region_info() const;
  private:
  bool _internal_has_region_info() const;
  public:
  void clear_region_info();
  const ::TSCE::RegionInfoArchive& region_info() const;
  PROTOBUF_NODISCARD ::TSCE::RegionInfoArchive* release_region_info();
  ::TSCE::RegionInfoArchive* mutable_region_info();
  void set_allocated_region_info(::TSCE::RegionInfoArchive* region_info);
  private:
  const ::TSCE::RegionInfoArchive& _internal_region_info() const;
  ::TSCE::RegionInfoArchive* _internal_mutable_region_info();
  public:
  void unsafe_arena_set_allocated_region_info(
      ::TSCE::RegionInfoArchive* region_info);
  ::TSCE::RegionInfoArchive* unsafe_arena_release_region_info();

  // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 10;
  bool has_rewrite_table_id_info() const;
  private:
  bool _internal_has_rewrite_table_id_info() const;
  public:
  void clear_rewrite_table_id_info();
  const ::TSCE::RewriteTableUIDInfoArchive& rewrite_table_id_info() const;
  PROTOBUF_NODISCARD ::TSCE::RewriteTableUIDInfoArchive* release_rewrite_table_id_info();
  ::TSCE::RewriteTableUIDInfoArchive* mutable_rewrite_table_id_info();
  void set_allocated_rewrite_table_id_info(::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info);
  private:
  const ::TSCE::RewriteTableUIDInfoArchive& _internal_rewrite_table_id_info() const;
  ::TSCE::RewriteTableUIDInfoArchive* _internal_mutable_rewrite_table_id_info();
  public:
  void unsafe_arena_set_allocated_rewrite_table_id_info(
      ::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info);
  ::TSCE::RewriteTableUIDInfoArchive* unsafe_arena_release_rewrite_table_id_info();

  // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 11;
  bool has_transposed_table_info() const;
  private:
  bool _internal_has_transposed_table_info() const;
  public:
  void clear_transposed_table_info();
  const ::TSCE::TableTransposeInfoArchive& transposed_table_info() const;
  PROTOBUF_NODISCARD ::TSCE::TableTransposeInfoArchive* release_transposed_table_info();
  ::TSCE::TableTransposeInfoArchive* mutable_transposed_table_info();
  void set_allocated_transposed_table_info(::TSCE::TableTransposeInfoArchive* transposed_table_info);
  private:
  const ::TSCE::TableTransposeInfoArchive& _internal_transposed_table_info() const;
  ::TSCE::TableTransposeInfoArchive* _internal_mutable_transposed_table_info();
  public:
  void unsafe_arena_set_allocated_transposed_table_info(
      ::TSCE::TableTransposeInfoArchive* transposed_table_info);
  ::TSCE::TableTransposeInfoArchive* unsafe_arena_release_transposed_table_info();

  // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 12;
  bool has_merge_origin_moved_info() const;
  private:
  bool _internal_has_merge_origin_moved_info() const;
  public:
  void clear_merge_origin_moved_info();
  const ::TSCE::MergeOriginMovedArchive& merge_origin_moved_info() const;
  PROTOBUF_NODISCARD ::TSCE::MergeOriginMovedArchive* release_merge_origin_moved_info();
  ::TSCE::MergeOriginMovedArchive* mutable_merge_origin_moved_info();
  void set_allocated_merge_origin_moved_info(::TSCE::MergeOriginMovedArchive* merge_origin_moved_info);
  private:
  const ::TSCE::MergeOriginMovedArchive& _internal_merge_origin_moved_info() const;
  ::TSCE::MergeOriginMovedArchive* _internal_mutable_merge_origin_moved_info();
  public:
  void unsafe_arena_set_allocated_merge_origin_moved_info(
      ::TSCE::MergeOriginMovedArchive* merge_origin_moved_info);
  ::TSCE::MergeOriginMovedArchive* unsafe_arena_release_merge_origin_moved_info();

  // optional .TSCE.MergeSourceArchive merge_source = 13;
  bool has_merge_source() const;
  private:
  bool _internal_has_merge_source() const;
  public:
  void clear_merge_source();
  const ::TSCE::MergeSourceArchive& merge_source() const;
  PROTOBUF_NODISCARD ::TSCE::MergeSourceArchive* release_merge_source();
  ::TSCE::MergeSourceArchive* mutable_merge_source();
  void set_allocated_merge_source(::TSCE::MergeSourceArchive* merge_source);
  private:
  const ::TSCE::MergeSourceArchive& _internal_merge_source() const;
  ::TSCE::MergeSourceArchive* _internal_mutable_merge_source();
  public:
  void unsafe_arena_set_allocated_merge_source(
      ::TSCE::MergeSourceArchive* merge_source);
  ::TSCE::MergeSourceArchive* unsafe_arena_release_merge_source();

  // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 14;
  bool has_group_node_info() const;
  private:
  bool _internal_has_group_node_info() const;
  public:
  void clear_group_node_info();
  const ::TSCE::RewriteGroupNodeUIDInfoArchive& group_node_info() const;
  PROTOBUF_NODISCARD ::TSCE::RewriteGroupNodeUIDInfoArchive* release_group_node_info();
  ::TSCE::RewriteGroupNodeUIDInfoArchive* mutable_group_node_info();
  void set_allocated_group_node_info(::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info);
  private:
  const ::TSCE::RewriteGroupNodeUIDInfoArchive& _internal_group_node_info() const;
  ::TSCE::RewriteGroupNodeUIDInfoArchive* _internal_mutable_group_node_info();
  public:
  void unsafe_arena_set_allocated_group_node_info(
      ::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info);
  ::TSCE::RewriteGroupNodeUIDInfoArchive* unsafe_arena_release_group_node_info();

  // optional .TSCE.GroupByChangeArchive groupby_change = 15;
  bool has_groupby_change() const;
  private:
  bool _internal_has_groupby_change() const;
  public:
  void clear_groupby_change();
  const ::TSCE::GroupByChangeArchive& groupby_change() const;
  PROTOBUF_NODISCARD ::TSCE::GroupByChangeArchive* release_groupby_change();
  ::TSCE::GroupByChangeArchive* mutable_groupby_change();
  void set_allocated_groupby_change(::TSCE::GroupByChangeArchive* groupby_change);
  private:
  const ::TSCE::GroupByChangeArchive& _internal_groupby_change() const;
  ::TSCE::GroupByChangeArchive* _internal_mutable_groupby_change();
  public:
  void unsafe_arena_set_allocated_groupby_change(
      ::TSCE::GroupByChangeArchive* groupby_change);
  ::TSCE::GroupByChangeArchive* unsafe_arena_release_groupby_change();

  // required uint32 rewrite_type = 1;
  bool has_rewrite_type() const;
  private:
  bool _internal_has_rewrite_type() const;
  public:
  void clear_rewrite_type();
  uint32_t rewrite_type() const;
  void set_rewrite_type(uint32_t value);
  private:
  uint32_t _internal_rewrite_type() const;
  void _internal_set_rewrite_type(uint32_t value);
  public:

  // optional bool is_inverse = 5;
  bool has_is_inverse() const;
  private:
  bool _internal_has_is_inverse() const;
  public:
  void clear_is_inverse();
  bool is_inverse() const;
  void set_is_inverse(bool value);
  private:
  bool _internal_is_inverse() const;
  void _internal_set_is_inverse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaRewriteSpecArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::UUID* table_uid_;
    ::TSP::UUID* cond_style_owner_uid_;
    ::TSP::UUID* group_by_uid_;
    ::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info_;
    ::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info_;
    ::TSCE::RegionMovedInfoArchive* region_moved_info_;
    ::TSCE::RegionInfoArchive* region_info_;
    ::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info_;
    ::TSCE::TableTransposeInfoArchive* transposed_table_info_;
    ::TSCE::MergeOriginMovedArchive* merge_origin_moved_info_;
    ::TSCE::MergeSourceArchive* merge_source_;
    ::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info_;
    ::TSCE::GroupByChangeArchive* groupby_change_;
    uint32_t rewrite_type_;
    bool is_inverse_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFormulasForTransposeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFormulasForTransposeArchive) */ {
 public:
  inline CommandRewriteFormulasForTransposeArchive() : CommandRewriteFormulasForTransposeArchive(nullptr) {}
  ~CommandRewriteFormulasForTransposeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFormulasForTransposeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFormulasForTransposeArchive(const CommandRewriteFormulasForTransposeArchive& from);
  CommandRewriteFormulasForTransposeArchive(CommandRewriteFormulasForTransposeArchive&& from) noexcept
    : CommandRewriteFormulasForTransposeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFormulasForTransposeArchive& operator=(const CommandRewriteFormulasForTransposeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFormulasForTransposeArchive& operator=(CommandRewriteFormulasForTransposeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFormulasForTransposeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFormulasForTransposeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFormulasForTransposeArchive*>(
               &_CommandRewriteFormulasForTransposeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CommandRewriteFormulasForTransposeArchive& a, CommandRewriteFormulasForTransposeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFormulasForTransposeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFormulasForTransposeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFormulasForTransposeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFormulasForTransposeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFormulasForTransposeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFormulasForTransposeArchive& from) {
    CommandRewriteFormulasForTransposeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFormulasForTransposeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFormulasForTransposeArchive";
  }
  protected:
  explicit CommandRewriteFormulasForTransposeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kFormulasToRewriteFieldNumber = 3,
    kWarningsetMapFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  bool has_formulas_to_rewrite() const;
  private:
  bool _internal_has_formulas_to_rewrite() const;
  public:
  void clear_formulas_to_rewrite();
  const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::FormulasForUndoArchive* release_formulas_to_rewrite();
  ::TSCE::FormulasForUndoArchive* mutable_formulas_to_rewrite();
  void set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  private:
  const ::TSCE::FormulasForUndoArchive& _internal_formulas_to_rewrite() const;
  ::TSCE::FormulasForUndoArchive* _internal_mutable_formulas_to_rewrite();
  public:
  void unsafe_arena_set_allocated_formulas_to_rewrite(
      ::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  ::TSCE::FormulasForUndoArchive* unsafe_arena_release_formulas_to_rewrite();

  // optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
  bool has_warningset_map() const;
  private:
  bool _internal_has_warningset_map() const;
  public:
  void clear_warningset_map();
  const ::TST::ImportWarningSetByCellRefArchive& warningset_map() const;
  PROTOBUF_NODISCARD ::TST::ImportWarningSetByCellRefArchive* release_warningset_map();
  ::TST::ImportWarningSetByCellRefArchive* mutable_warningset_map();
  void set_allocated_warningset_map(::TST::ImportWarningSetByCellRefArchive* warningset_map);
  private:
  const ::TST::ImportWarningSetByCellRefArchive& _internal_warningset_map() const;
  ::TST::ImportWarningSetByCellRefArchive* _internal_mutable_warningset_map();
  public:
  void unsafe_arena_set_allocated_warningset_map(
      ::TST::ImportWarningSetByCellRefArchive* warningset_map);
  ::TST::ImportWarningSetByCellRefArchive* unsafe_arena_release_warningset_map();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFormulasForTransposeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite_;
    ::TST::ImportWarningSetByCellRefArchive* warningset_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteTableFormulasForRewriteSpecArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteTableFormulasForRewriteSpecArchive) */ {
 public:
  inline CommandRewriteTableFormulasForRewriteSpecArchive() : CommandRewriteTableFormulasForRewriteSpecArchive(nullptr) {}
  ~CommandRewriteTableFormulasForRewriteSpecArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteTableFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteTableFormulasForRewriteSpecArchive(const CommandRewriteTableFormulasForRewriteSpecArchive& from);
  CommandRewriteTableFormulasForRewriteSpecArchive(CommandRewriteTableFormulasForRewriteSpecArchive&& from) noexcept
    : CommandRewriteTableFormulasForRewriteSpecArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteTableFormulasForRewriteSpecArchive& operator=(const CommandRewriteTableFormulasForRewriteSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteTableFormulasForRewriteSpecArchive& operator=(CommandRewriteTableFormulasForRewriteSpecArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteTableFormulasForRewriteSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteTableFormulasForRewriteSpecArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteTableFormulasForRewriteSpecArchive*>(
               &_CommandRewriteTableFormulasForRewriteSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CommandRewriteTableFormulasForRewriteSpecArchive& a, CommandRewriteTableFormulasForRewriteSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteTableFormulasForRewriteSpecArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteTableFormulasForRewriteSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteTableFormulasForRewriteSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteTableFormulasForRewriteSpecArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteTableFormulasForRewriteSpecArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteTableFormulasForRewriteSpecArchive& from) {
    CommandRewriteTableFormulasForRewriteSpecArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteTableFormulasForRewriteSpecArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteTableFormulasForRewriteSpecArchive";
  }
  protected:
  explicit CommandRewriteTableFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kFormulasToRewriteFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  bool has_formulas_to_rewrite() const;
  private:
  bool _internal_has_formulas_to_rewrite() const;
  public:
  void clear_formulas_to_rewrite();
  const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::FormulasForUndoArchive* release_formulas_to_rewrite();
  ::TSCE::FormulasForUndoArchive* mutable_formulas_to_rewrite();
  void set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  private:
  const ::TSCE::FormulasForUndoArchive& _internal_formulas_to_rewrite() const;
  ::TSCE::FormulasForUndoArchive* _internal_mutable_formulas_to_rewrite();
  public:
  void unsafe_arena_set_allocated_formulas_to_rewrite(
      ::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  ::TSCE::FormulasForUndoArchive* unsafe_arena_release_formulas_to_rewrite();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteMergeFormulasArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteMergeFormulasArchive) */ {
 public:
  inline CommandRewriteMergeFormulasArchive() : CommandRewriteMergeFormulasArchive(nullptr) {}
  ~CommandRewriteMergeFormulasArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteMergeFormulasArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteMergeFormulasArchive(const CommandRewriteMergeFormulasArchive& from);
  CommandRewriteMergeFormulasArchive(CommandRewriteMergeFormulasArchive&& from) noexcept
    : CommandRewriteMergeFormulasArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteMergeFormulasArchive& operator=(const CommandRewriteMergeFormulasArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteMergeFormulasArchive& operator=(CommandRewriteMergeFormulasArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteMergeFormulasArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteMergeFormulasArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteMergeFormulasArchive*>(
               &_CommandRewriteMergeFormulasArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CommandRewriteMergeFormulasArchive& a, CommandRewriteMergeFormulasArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteMergeFormulasArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteMergeFormulasArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteMergeFormulasArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteMergeFormulasArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteMergeFormulasArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteMergeFormulasArchive& from) {
    CommandRewriteMergeFormulasArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteMergeFormulasArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteMergeFormulasArchive";
  }
  protected:
  explicit CommandRewriteMergeFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kFormulasToRewriteFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  bool has_formulas_to_rewrite() const;
  private:
  bool _internal_has_formulas_to_rewrite() const;
  public:
  void clear_formulas_to_rewrite();
  const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::FormulasForUndoArchive* release_formulas_to_rewrite();
  ::TSCE::FormulasForUndoArchive* mutable_formulas_to_rewrite();
  void set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  private:
  const ::TSCE::FormulasForUndoArchive& _internal_formulas_to_rewrite() const;
  ::TSCE::FormulasForUndoArchive* _internal_mutable_formulas_to_rewrite();
  public:
  void unsafe_arena_set_allocated_formulas_to_rewrite(
      ::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  ::TSCE::FormulasForUndoArchive* unsafe_arena_release_formulas_to_rewrite();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteMergeFormulasArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteCategoryFormulasArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteCategoryFormulasArchive) */ {
 public:
  inline CommandRewriteCategoryFormulasArchive() : CommandRewriteCategoryFormulasArchive(nullptr) {}
  ~CommandRewriteCategoryFormulasArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteCategoryFormulasArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteCategoryFormulasArchive(const CommandRewriteCategoryFormulasArchive& from);
  CommandRewriteCategoryFormulasArchive(CommandRewriteCategoryFormulasArchive&& from) noexcept
    : CommandRewriteCategoryFormulasArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteCategoryFormulasArchive& operator=(const CommandRewriteCategoryFormulasArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteCategoryFormulasArchive& operator=(CommandRewriteCategoryFormulasArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteCategoryFormulasArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteCategoryFormulasArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteCategoryFormulasArchive*>(
               &_CommandRewriteCategoryFormulasArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CommandRewriteCategoryFormulasArchive& a, CommandRewriteCategoryFormulasArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteCategoryFormulasArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteCategoryFormulasArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteCategoryFormulasArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteCategoryFormulasArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteCategoryFormulasArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteCategoryFormulasArchive& from) {
    CommandRewriteCategoryFormulasArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteCategoryFormulasArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteCategoryFormulasArchive";
  }
  protected:
  explicit CommandRewriteCategoryFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kFormulasToRewriteFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  bool has_formulas_to_rewrite() const;
  private:
  bool _internal_has_formulas_to_rewrite() const;
  public:
  void clear_formulas_to_rewrite();
  const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::FormulasForUndoArchive* release_formulas_to_rewrite();
  ::TSCE::FormulasForUndoArchive* mutable_formulas_to_rewrite();
  void set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  private:
  const ::TSCE::FormulasForUndoArchive& _internal_formulas_to_rewrite() const;
  ::TSCE::FormulasForUndoArchive* _internal_mutable_formulas_to_rewrite();
  public:
  void unsafe_arena_set_allocated_formulas_to_rewrite(
      ::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  ::TSCE::FormulasForUndoArchive* unsafe_arena_release_formulas_to_rewrite();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteCategoryFormulasArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFilterFormulasForTableResizeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFilterFormulasForTableResizeArchive) */ {
 public:
  inline CommandRewriteFilterFormulasForTableResizeArchive() : CommandRewriteFilterFormulasForTableResizeArchive(nullptr) {}
  ~CommandRewriteFilterFormulasForTableResizeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFilterFormulasForTableResizeArchive(const CommandRewriteFilterFormulasForTableResizeArchive& from);
  CommandRewriteFilterFormulasForTableResizeArchive(CommandRewriteFilterFormulasForTableResizeArchive&& from) noexcept
    : CommandRewriteFilterFormulasForTableResizeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFilterFormulasForTableResizeArchive& operator=(const CommandRewriteFilterFormulasForTableResizeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFilterFormulasForTableResizeArchive& operator=(CommandRewriteFilterFormulasForTableResizeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFilterFormulasForTableResizeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFilterFormulasForTableResizeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFilterFormulasForTableResizeArchive*>(
               &_CommandRewriteFilterFormulasForTableResizeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CommandRewriteFilterFormulasForTableResizeArchive& a, CommandRewriteFilterFormulasForTableResizeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFilterFormulasForTableResizeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFilterFormulasForTableResizeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFilterFormulasForTableResizeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFilterFormulasForTableResizeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFilterFormulasForTableResizeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFilterFormulasForTableResizeArchive& from) {
    CommandRewriteFilterFormulasForTableResizeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFilterFormulasForTableResizeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFilterFormulasForTableResizeArchive";
  }
  protected:
  explicit CommandRewriteFilterFormulasForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFilterFormulasForTableResizeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFilterFormulasForRewriteSpecArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFilterFormulasForRewriteSpecArchive) */ {
 public:
  inline CommandRewriteFilterFormulasForRewriteSpecArchive() : CommandRewriteFilterFormulasForRewriteSpecArchive(nullptr) {}
  ~CommandRewriteFilterFormulasForRewriteSpecArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFilterFormulasForRewriteSpecArchive(const CommandRewriteFilterFormulasForRewriteSpecArchive& from);
  CommandRewriteFilterFormulasForRewriteSpecArchive(CommandRewriteFilterFormulasForRewriteSpecArchive&& from) noexcept
    : CommandRewriteFilterFormulasForRewriteSpecArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFilterFormulasForRewriteSpecArchive& operator=(const CommandRewriteFilterFormulasForRewriteSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFilterFormulasForRewriteSpecArchive& operator=(CommandRewriteFilterFormulasForRewriteSpecArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFilterFormulasForRewriteSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFilterFormulasForRewriteSpecArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFilterFormulasForRewriteSpecArchive*>(
               &_CommandRewriteFilterFormulasForRewriteSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CommandRewriteFilterFormulasForRewriteSpecArchive& a, CommandRewriteFilterFormulasForRewriteSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFilterFormulasForRewriteSpecArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFilterFormulasForRewriteSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFilterFormulasForRewriteSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFilterFormulasForRewriteSpecArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFilterFormulasForRewriteSpecArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFilterFormulasForRewriteSpecArchive& from) {
    CommandRewriteFilterFormulasForRewriteSpecArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFilterFormulasForRewriteSpecArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFilterFormulasForRewriteSpecArchive";
  }
  protected:
  explicit CommandRewriteFilterFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFilterSetFieldNumber = 2,
    kRewriteSpecFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference filter_set = 2;
  bool has_filter_set() const;
  private:
  bool _internal_has_filter_set() const;
  public:
  void clear_filter_set();
  const ::TSP::Reference& filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_filter_set();
  ::TSP::Reference* mutable_filter_set();
  void set_allocated_filter_set(::TSP::Reference* filter_set);
  private:
  const ::TSP::Reference& _internal_filter_set() const;
  ::TSP::Reference* _internal_mutable_filter_set();
  public:
  void unsafe_arena_set_allocated_filter_set(
      ::TSP::Reference* filter_set);
  ::TSP::Reference* unsafe_arena_release_filter_set();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 3;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* filter_set_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteConditionalStylesForRewriteSpecArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteConditionalStylesForRewriteSpecArchive) */ {
 public:
  inline CommandRewriteConditionalStylesForRewriteSpecArchive() : CommandRewriteConditionalStylesForRewriteSpecArchive(nullptr) {}
  ~CommandRewriteConditionalStylesForRewriteSpecArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteConditionalStylesForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteConditionalStylesForRewriteSpecArchive(const CommandRewriteConditionalStylesForRewriteSpecArchive& from);
  CommandRewriteConditionalStylesForRewriteSpecArchive(CommandRewriteConditionalStylesForRewriteSpecArchive&& from) noexcept
    : CommandRewriteConditionalStylesForRewriteSpecArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteConditionalStylesForRewriteSpecArchive& operator=(const CommandRewriteConditionalStylesForRewriteSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteConditionalStylesForRewriteSpecArchive& operator=(CommandRewriteConditionalStylesForRewriteSpecArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteConditionalStylesForRewriteSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteConditionalStylesForRewriteSpecArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteConditionalStylesForRewriteSpecArchive*>(
               &_CommandRewriteConditionalStylesForRewriteSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CommandRewriteConditionalStylesForRewriteSpecArchive& a, CommandRewriteConditionalStylesForRewriteSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteConditionalStylesForRewriteSpecArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteConditionalStylesForRewriteSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteConditionalStylesForRewriteSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteConditionalStylesForRewriteSpecArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteConditionalStylesForRewriteSpecArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteConditionalStylesForRewriteSpecArchive& from) {
    CommandRewriteConditionalStylesForRewriteSpecArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteConditionalStylesForRewriteSpecArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteConditionalStylesForRewriteSpecArchive";
  }
  protected:
  explicit CommandRewriteConditionalStylesForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kFormulasToRewriteFieldNumber = 3,
    kConditionalStyleSetsFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  bool has_formulas_to_rewrite() const;
  private:
  bool _internal_has_formulas_to_rewrite() const;
  public:
  void clear_formulas_to_rewrite();
  const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::FormulasForUndoArchive* release_formulas_to_rewrite();
  ::TSCE::FormulasForUndoArchive* mutable_formulas_to_rewrite();
  void set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  private:
  const ::TSCE::FormulasForUndoArchive& _internal_formulas_to_rewrite() const;
  ::TSCE::FormulasForUndoArchive* _internal_mutable_formulas_to_rewrite();
  public:
  void unsafe_arena_set_allocated_formulas_to_rewrite(
      ::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  ::TSCE::FormulasForUndoArchive* unsafe_arena_release_formulas_to_rewrite();

  // optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
  bool has_conditional_style_sets() const;
  private:
  bool _internal_has_conditional_style_sets() const;
  public:
  void clear_conditional_style_sets();
  const ::TSCE::ExpandedCellRefObjectMapArchive& conditional_style_sets() const;
  PROTOBUF_NODISCARD ::TSCE::ExpandedCellRefObjectMapArchive* release_conditional_style_sets();
  ::TSCE::ExpandedCellRefObjectMapArchive* mutable_conditional_style_sets();
  void set_allocated_conditional_style_sets(::TSCE::ExpandedCellRefObjectMapArchive* conditional_style_sets);
  private:
  const ::TSCE::ExpandedCellRefObjectMapArchive& _internal_conditional_style_sets() const;
  ::TSCE::ExpandedCellRefObjectMapArchive* _internal_mutable_conditional_style_sets();
  public:
  void unsafe_arena_set_allocated_conditional_style_sets(
      ::TSCE::ExpandedCellRefObjectMapArchive* conditional_style_sets);
  ::TSCE::ExpandedCellRefObjectMapArchive* unsafe_arena_release_conditional_style_sets();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite_;
    ::TSCE::ExpandedCellRefObjectMapArchive* conditional_style_sets_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewritePivotOwnerFormulasArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewritePivotOwnerFormulasArchive) */ {
 public:
  inline CommandRewritePivotOwnerFormulasArchive() : CommandRewritePivotOwnerFormulasArchive(nullptr) {}
  ~CommandRewritePivotOwnerFormulasArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewritePivotOwnerFormulasArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewritePivotOwnerFormulasArchive(const CommandRewritePivotOwnerFormulasArchive& from);
  CommandRewritePivotOwnerFormulasArchive(CommandRewritePivotOwnerFormulasArchive&& from) noexcept
    : CommandRewritePivotOwnerFormulasArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewritePivotOwnerFormulasArchive& operator=(const CommandRewritePivotOwnerFormulasArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewritePivotOwnerFormulasArchive& operator=(CommandRewritePivotOwnerFormulasArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewritePivotOwnerFormulasArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewritePivotOwnerFormulasArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewritePivotOwnerFormulasArchive*>(
               &_CommandRewritePivotOwnerFormulasArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CommandRewritePivotOwnerFormulasArchive& a, CommandRewritePivotOwnerFormulasArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewritePivotOwnerFormulasArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewritePivotOwnerFormulasArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewritePivotOwnerFormulasArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewritePivotOwnerFormulasArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewritePivotOwnerFormulasArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewritePivotOwnerFormulasArchive& from) {
    CommandRewritePivotOwnerFormulasArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewritePivotOwnerFormulasArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewritePivotOwnerFormulasArchive";
  }
  protected:
  explicit CommandRewritePivotOwnerFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kFormulasToRewriteFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  bool has_formulas_to_rewrite() const;
  private:
  bool _internal_has_formulas_to_rewrite() const;
  public:
  void clear_formulas_to_rewrite();
  const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::FormulasForUndoArchive* release_formulas_to_rewrite();
  ::TSCE::FormulasForUndoArchive* mutable_formulas_to_rewrite();
  void set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  private:
  const ::TSCE::FormulasForUndoArchive& _internal_formulas_to_rewrite() const;
  ::TSCE::FormulasForUndoArchive* _internal_mutable_formulas_to_rewrite();
  public:
  void unsafe_arena_set_allocated_formulas_to_rewrite(
      ::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  ::TSCE::FormulasForUndoArchive* unsafe_arena_release_formulas_to_rewrite();

  // @@protoc_insertion_point(class_scope:TST.CommandRewritePivotOwnerFormulasArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMergeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMergeArchive) */ {
 public:
  inline CommandMergeArchive() : CommandMergeArchive(nullptr) {}
  ~CommandMergeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMergeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMergeArchive(const CommandMergeArchive& from);
  CommandMergeArchive(CommandMergeArchive&& from) noexcept
    : CommandMergeArchive() {
    *this = ::std::move(from);
  }

  inline CommandMergeArchive& operator=(const CommandMergeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMergeArchive& operator=(CommandMergeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMergeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMergeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMergeArchive*>(
               &_CommandMergeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CommandMergeArchive& a, CommandMergeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMergeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMergeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMergeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMergeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMergeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMergeArchive& from) {
    CommandMergeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMergeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMergeArchive";
  }
  protected:
  explicit CommandMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidListFieldNumber = 2,
    kUndoCellMapFieldNumber = 3,
    kUndoFormulaRewriteCommandFieldNumber = 4,
    kCommitCellMapFieldNumber = 6,
    kMergeOwnerRollbackFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellUIDListArchive cell_uid_list = 2;
  bool has_cell_uid_list() const;
  private:
  bool _internal_has_cell_uid_list() const;
  public:
  void clear_cell_uid_list();
  const ::TST::CellUIDListArchive& cell_uid_list() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_cell_uid_list();
  ::TST::CellUIDListArchive* mutable_cell_uid_list();
  void set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uid_list() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uid_list();
  public:
  void unsafe_arena_set_allocated_cell_uid_list(
      ::TST::CellUIDListArchive* cell_uid_list);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uid_list();

  // optional .TSP.Reference undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TSP::Reference& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_map();
  ::TSP::Reference* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TSP::Reference* undo_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_map();

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  bool has_undo_formula_rewrite_command() const;
  private:
  bool _internal_has_undo_formula_rewrite_command() const;
  public:
  void clear_undo_formula_rewrite_command();
  const ::TSP::Reference& undo_formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_formula_rewrite_command();
  ::TSP::Reference* mutable_undo_formula_rewrite_command();
  void set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_formula_rewrite_command(
      ::TSP::Reference* undo_formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_formula_rewrite_command();

  // optional .TSP.Reference commit_cell_map = 6;
  bool has_commit_cell_map() const;
  private:
  bool _internal_has_commit_cell_map() const;
  public:
  void clear_commit_cell_map();
  const ::TSP::Reference& commit_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_commit_cell_map();
  ::TSP::Reference* mutable_commit_cell_map();
  void set_allocated_commit_cell_map(::TSP::Reference* commit_cell_map);
  private:
  const ::TSP::Reference& _internal_commit_cell_map() const;
  ::TSP::Reference* _internal_mutable_commit_cell_map();
  public:
  void unsafe_arena_set_allocated_commit_cell_map(
      ::TSP::Reference* commit_cell_map);
  ::TSP::Reference* unsafe_arena_release_commit_cell_map();

  // optional uint32 merge_owner_rollback = 5;
  bool has_merge_owner_rollback() const;
  private:
  bool _internal_has_merge_owner_rollback() const;
  public:
  void clear_merge_owner_rollback();
  uint32_t merge_owner_rollback() const;
  void set_merge_owner_rollback(uint32_t value);
  private:
  uint32_t _internal_merge_owner_rollback() const;
  void _internal_set_merge_owner_rollback(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandMergeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellUIDListArchive* cell_uid_list_;
    ::TSP::Reference* undo_cell_map_;
    ::TSP::Reference* undo_formula_rewrite_command_;
    ::TSP::Reference* commit_cell_map_;
    uint32_t merge_owner_rollback_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInverseMergeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandInverseMergeArchive) */ {
 public:
  inline CommandInverseMergeArchive() : CommandInverseMergeArchive(nullptr) {}
  ~CommandInverseMergeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandInverseMergeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInverseMergeArchive(const CommandInverseMergeArchive& from);
  CommandInverseMergeArchive(CommandInverseMergeArchive&& from) noexcept
    : CommandInverseMergeArchive() {
    *this = ::std::move(from);
  }

  inline CommandInverseMergeArchive& operator=(const CommandInverseMergeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInverseMergeArchive& operator=(CommandInverseMergeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInverseMergeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInverseMergeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandInverseMergeArchive*>(
               &_CommandInverseMergeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CommandInverseMergeArchive& a, CommandInverseMergeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInverseMergeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInverseMergeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandInverseMergeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandInverseMergeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInverseMergeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandInverseMergeArchive& from) {
    CommandInverseMergeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInverseMergeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandInverseMergeArchive";
  }
  protected:
  explicit CommandInverseMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMergeSourceCellUidFieldNumber = 2,
  };
  // required .TST.CommandApplyCellMapArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandApplyCellMapArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandApplyCellMapArchive* release_super();
  ::TST::CommandApplyCellMapArchive* mutable_super();
  void set_allocated_super(::TST::CommandApplyCellMapArchive* super);
  private:
  const ::TST::CommandApplyCellMapArchive& _internal_super() const;
  ::TST::CommandApplyCellMapArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandApplyCellMapArchive* super);
  ::TST::CommandApplyCellMapArchive* unsafe_arena_release_super();

  // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
  bool has_merge_source_cell_uid() const;
  private:
  bool _internal_has_merge_source_cell_uid() const;
  public:
  void clear_merge_source_cell_uid();
  const ::TSP::UUIDCoordArchive& merge_source_cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_merge_source_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_merge_source_cell_uid();
  void set_allocated_merge_source_cell_uid(::TSP::UUIDCoordArchive* merge_source_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_merge_source_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_merge_source_cell_uid();
  public:
  void unsafe_arena_set_allocated_merge_source_cell_uid(
      ::TSP::UUIDCoordArchive* merge_source_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_merge_source_cell_uid();

  // @@protoc_insertion_point(class_scope:TST.CommandInverseMergeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandApplyCellMapArchive* super_;
    ::TSP::UUIDCoordArchive* merge_source_cell_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandUnmergeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandUnmergeArchive) */ {
 public:
  inline CommandUnmergeArchive() : CommandUnmergeArchive(nullptr) {}
  ~CommandUnmergeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandUnmergeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandUnmergeArchive(const CommandUnmergeArchive& from);
  CommandUnmergeArchive(CommandUnmergeArchive&& from) noexcept
    : CommandUnmergeArchive() {
    *this = ::std::move(from);
  }

  inline CommandUnmergeArchive& operator=(const CommandUnmergeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandUnmergeArchive& operator=(CommandUnmergeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandUnmergeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandUnmergeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandUnmergeArchive*>(
               &_CommandUnmergeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CommandUnmergeArchive& a, CommandUnmergeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandUnmergeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandUnmergeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandUnmergeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandUnmergeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandUnmergeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandUnmergeArchive& from) {
    CommandUnmergeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandUnmergeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandUnmergeArchive";
  }
  protected:
  explicit CommandUnmergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnmergeUidRangesFieldNumber = 2,
    kSuperFieldNumber = 1,
    kUndoCellMapFieldNumber = 3,
    kUndoFormulaRewriteCommandFieldNumber = 4,
  };
  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
  int unmerge_uid_ranges_size() const;
  private:
  int _internal_unmerge_uid_ranges_size() const;
  public:
  void clear_unmerge_uid_ranges();
  ::TSP::UUIDRectArchive* mutable_unmerge_uid_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
      mutable_unmerge_uid_ranges();
  private:
  const ::TSP::UUIDRectArchive& _internal_unmerge_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* _internal_add_unmerge_uid_ranges();
  public:
  const ::TSP::UUIDRectArchive& unmerge_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* add_unmerge_uid_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
      unmerge_uid_ranges() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TSP::Reference& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_map();
  ::TSP::Reference* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TSP::Reference* undo_cell_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_map();

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  bool has_undo_formula_rewrite_command() const;
  private:
  bool _internal_has_undo_formula_rewrite_command() const;
  public:
  void clear_undo_formula_rewrite_command();
  const ::TSP::Reference& undo_formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_formula_rewrite_command();
  ::TSP::Reference* mutable_undo_formula_rewrite_command();
  void set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_formula_rewrite_command(
      ::TSP::Reference* undo_formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_formula_rewrite_command();

  // @@protoc_insertion_point(class_scope:TST.CommandUnmergeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive > unmerge_uid_ranges_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* undo_cell_map_;
    ::TSP::Reference* undo_formula_rewrite_command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChooseTableIdRemapperArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandChooseTableIdRemapperArchive) */ {
 public:
  inline CommandChooseTableIdRemapperArchive() : CommandChooseTableIdRemapperArchive(nullptr) {}
  ~CommandChooseTableIdRemapperArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandChooseTableIdRemapperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChooseTableIdRemapperArchive(const CommandChooseTableIdRemapperArchive& from);
  CommandChooseTableIdRemapperArchive(CommandChooseTableIdRemapperArchive&& from) noexcept
    : CommandChooseTableIdRemapperArchive() {
    *this = ::std::move(from);
  }

  inline CommandChooseTableIdRemapperArchive& operator=(const CommandChooseTableIdRemapperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChooseTableIdRemapperArchive& operator=(CommandChooseTableIdRemapperArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChooseTableIdRemapperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChooseTableIdRemapperArchive* internal_default_instance() {
    return reinterpret_cast<const CommandChooseTableIdRemapperArchive*>(
               &_CommandChooseTableIdRemapperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CommandChooseTableIdRemapperArchive& a, CommandChooseTableIdRemapperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChooseTableIdRemapperArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChooseTableIdRemapperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChooseTableIdRemapperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChooseTableIdRemapperArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChooseTableIdRemapperArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChooseTableIdRemapperArchive& from) {
    CommandChooseTableIdRemapperArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChooseTableIdRemapperArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandChooseTableIdRemapperArchive";
  }
  protected:
  explicit CommandChooseTableIdRemapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTableIdMapperFieldNumber = 2,
    kFormulaRewriteCommandForUndoFieldNumber = 3,
    kApplyAndClearFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
  bool has_table_id_mapper() const;
  private:
  bool _internal_has_table_id_mapper() const;
  public:
  void clear_table_id_mapper();
  const ::TST::MultiTableRemapperArchive& table_id_mapper() const;
  PROTOBUF_NODISCARD ::TST::MultiTableRemapperArchive* release_table_id_mapper();
  ::TST::MultiTableRemapperArchive* mutable_table_id_mapper();
  void set_allocated_table_id_mapper(::TST::MultiTableRemapperArchive* table_id_mapper);
  private:
  const ::TST::MultiTableRemapperArchive& _internal_table_id_mapper() const;
  ::TST::MultiTableRemapperArchive* _internal_mutable_table_id_mapper();
  public:
  void unsafe_arena_set_allocated_table_id_mapper(
      ::TST::MultiTableRemapperArchive* table_id_mapper);
  ::TST::MultiTableRemapperArchive* unsafe_arena_release_table_id_mapper();

  // optional .TSP.Reference formula_rewrite_command_for_undo = 3;
  bool has_formula_rewrite_command_for_undo() const;
  private:
  bool _internal_has_formula_rewrite_command_for_undo() const;
  public:
  void clear_formula_rewrite_command_for_undo();
  const ::TSP::Reference& formula_rewrite_command_for_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command_for_undo();
  ::TSP::Reference* mutable_formula_rewrite_command_for_undo();
  void set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command_for_undo() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command_for_undo();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
      ::TSP::Reference* formula_rewrite_command_for_undo);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command_for_undo();

  // required bool apply_and_clear = 4;
  bool has_apply_and_clear() const;
  private:
  bool _internal_has_apply_and_clear() const;
  public:
  void clear_apply_and_clear();
  bool apply_and_clear() const;
  void set_apply_and_clear(bool value);
  private:
  bool _internal_apply_and_clear() const;
  void _internal_set_apply_and_clear(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandChooseTableIdRemapperArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TST::MultiTableRemapperArchive* table_id_mapper_;
    ::TSP::Reference* formula_rewrite_command_for_undo_;
    bool apply_and_clear_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCategorySetGroupingColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCategorySetGroupingColumnsArchive) */ {
 public:
  inline CommandCategorySetGroupingColumnsArchive() : CommandCategorySetGroupingColumnsArchive(nullptr) {}
  ~CommandCategorySetGroupingColumnsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandCategorySetGroupingColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCategorySetGroupingColumnsArchive(const CommandCategorySetGroupingColumnsArchive& from);
  CommandCategorySetGroupingColumnsArchive(CommandCategorySetGroupingColumnsArchive&& from) noexcept
    : CommandCategorySetGroupingColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandCategorySetGroupingColumnsArchive& operator=(const CommandCategorySetGroupingColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCategorySetGroupingColumnsArchive& operator=(CommandCategorySetGroupingColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCategorySetGroupingColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCategorySetGroupingColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandCategorySetGroupingColumnsArchive*>(
               &_CommandCategorySetGroupingColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CommandCategorySetGroupingColumnsArchive& a, CommandCategorySetGroupingColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCategorySetGroupingColumnsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCategorySetGroupingColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCategorySetGroupingColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCategorySetGroupingColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCategorySetGroupingColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCategorySetGroupingColumnsArchive& from) {
    CommandCategorySetGroupingColumnsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCategorySetGroupingColumnsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCategorySetGroupingColumnsArchive";
  }
  protected:
  explicit CommandCategorySetGroupingColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseRowOrderFieldNumber = 7,
    kUndoBaseRowOrderFieldNumber = 9,
    kViewRowOrderFieldNumber = 11,
    kUndoViewRowOrderFieldNumber = 13,
    kCollapseStateFieldNumber = 14,
    kUndoCollapseStateFieldNumber = 15,
    kSuperFieldNumber = 1,
    kNewGroupingColumnsFieldNumber = 4,
    kOldGroupingColumnsFieldNumber = 5,
    kSummaryChangeStateFieldNumber = 16,
    kUndoSummaryChangeStateFieldNumber = 17,
    kNewColumnAggregatesFieldNumber = 18,
    kOldColumnAggregatesFieldNumber = 19,
    kUndoSetEnabledRewriteCommandFieldNumber = 20,
    kUndoSetColumnsRewriteCommandFieldNumber = 21,
    kCellDiffMapFieldNumber = 23,
    kUndoCellDiffMapFieldNumber = 24,
    kUndoSetGroupSortOrderCommandFieldNumber = 25,
    kNewEnabledChangingFieldNumber = 2,
    kOldEnabledChangingFieldNumber = 3,
    kRestoreBaseOrderFieldNumber = 6,
    kUndoRestoreBaseOrderFieldNumber = 8,
    kRestoreViewOrderFieldNumber = 10,
    kUndoRestoreViewOrderFieldNumber = 12,
    kForceRestoreAllStatesFieldNumber = 22,
  };
  // repeated .TSP.UUID base_row_order = 7;
  int base_row_order_size() const;
  private:
  int _internal_base_row_order_size() const;
  public:
  void clear_base_row_order();
  ::TSP::UUID* mutable_base_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_base_row_order();
  private:
  const ::TSP::UUID& _internal_base_row_order(int index) const;
  ::TSP::UUID* _internal_add_base_row_order();
  public:
  const ::TSP::UUID& base_row_order(int index) const;
  ::TSP::UUID* add_base_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      base_row_order() const;

  // repeated .TSP.UUID undo_base_row_order = 9;
  int undo_base_row_order_size() const;
  private:
  int _internal_undo_base_row_order_size() const;
  public:
  void clear_undo_base_row_order();
  ::TSP::UUID* mutable_undo_base_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_base_row_order();
  private:
  const ::TSP::UUID& _internal_undo_base_row_order(int index) const;
  ::TSP::UUID* _internal_add_undo_base_row_order();
  public:
  const ::TSP::UUID& undo_base_row_order(int index) const;
  ::TSP::UUID* add_undo_base_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_base_row_order() const;

  // repeated .TSP.UUID view_row_order = 11;
  int view_row_order_size() const;
  private:
  int _internal_view_row_order_size() const;
  public:
  void clear_view_row_order();
  ::TSP::UUID* mutable_view_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_view_row_order();
  private:
  const ::TSP::UUID& _internal_view_row_order(int index) const;
  ::TSP::UUID* _internal_add_view_row_order();
  public:
  const ::TSP::UUID& view_row_order(int index) const;
  ::TSP::UUID* add_view_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      view_row_order() const;

  // repeated .TSP.UUID undo_view_row_order = 13;
  int undo_view_row_order_size() const;
  private:
  int _internal_undo_view_row_order_size() const;
  public:
  void clear_undo_view_row_order();
  ::TSP::UUID* mutable_undo_view_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_view_row_order();
  private:
  const ::TSP::UUID& _internal_undo_view_row_order(int index) const;
  ::TSP::UUID* _internal_add_undo_view_row_order();
  public:
  const ::TSP::UUID& undo_view_row_order(int index) const;
  ::TSP::UUID* add_undo_view_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_view_row_order() const;

  // repeated .TSP.UUID collapse_state = 14;
  int collapse_state_size() const;
  private:
  int _internal_collapse_state_size() const;
  public:
  void clear_collapse_state();
  ::TSP::UUID* mutable_collapse_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_collapse_state();
  private:
  const ::TSP::UUID& _internal_collapse_state(int index) const;
  ::TSP::UUID* _internal_add_collapse_state();
  public:
  const ::TSP::UUID& collapse_state(int index) const;
  ::TSP::UUID* add_collapse_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      collapse_state() const;

  // repeated .TSP.UUID undo_collapse_state = 15;
  int undo_collapse_state_size() const;
  private:
  int _internal_undo_collapse_state_size() const;
  public:
  void clear_undo_collapse_state();
  ::TSP::UUID* mutable_undo_collapse_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_collapse_state();
  private:
  const ::TSP::UUID& _internal_undo_collapse_state(int index) const;
  ::TSP::UUID* _internal_add_undo_collapse_state();
  public:
  const ::TSP::UUID& undo_collapse_state(int index) const;
  ::TSP::UUID* add_undo_collapse_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_collapse_state() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.GroupColumnListArchive new_grouping_columns = 4;
  bool has_new_grouping_columns() const;
  private:
  bool _internal_has_new_grouping_columns() const;
  public:
  void clear_new_grouping_columns();
  const ::TST::GroupColumnListArchive& new_grouping_columns() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_new_grouping_columns();
  ::TST::GroupColumnListArchive* mutable_new_grouping_columns();
  void set_allocated_new_grouping_columns(::TST::GroupColumnListArchive* new_grouping_columns);
  private:
  const ::TST::GroupColumnListArchive& _internal_new_grouping_columns() const;
  ::TST::GroupColumnListArchive* _internal_mutable_new_grouping_columns();
  public:
  void unsafe_arena_set_allocated_new_grouping_columns(
      ::TST::GroupColumnListArchive* new_grouping_columns);
  ::TST::GroupColumnListArchive* unsafe_arena_release_new_grouping_columns();

  // optional .TST.GroupColumnListArchive old_grouping_columns = 5;
  bool has_old_grouping_columns() const;
  private:
  bool _internal_has_old_grouping_columns() const;
  public:
  void clear_old_grouping_columns();
  const ::TST::GroupColumnListArchive& old_grouping_columns() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_old_grouping_columns();
  ::TST::GroupColumnListArchive* mutable_old_grouping_columns();
  void set_allocated_old_grouping_columns(::TST::GroupColumnListArchive* old_grouping_columns);
  private:
  const ::TST::GroupColumnListArchive& _internal_old_grouping_columns() const;
  ::TST::GroupColumnListArchive* _internal_mutable_old_grouping_columns();
  public:
  void unsafe_arena_set_allocated_old_grouping_columns(
      ::TST::GroupColumnListArchive* old_grouping_columns);
  ::TST::GroupColumnListArchive* unsafe_arena_release_old_grouping_columns();

  // optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
  bool has_summary_change_state() const;
  private:
  bool _internal_has_summary_change_state() const;
  public:
  void clear_summary_change_state();
  const ::TST::SummaryModelGroupByChangeStateArchive& summary_change_state() const;
  PROTOBUF_NODISCARD ::TST::SummaryModelGroupByChangeStateArchive* release_summary_change_state();
  ::TST::SummaryModelGroupByChangeStateArchive* mutable_summary_change_state();
  void set_allocated_summary_change_state(::TST::SummaryModelGroupByChangeStateArchive* summary_change_state);
  private:
  const ::TST::SummaryModelGroupByChangeStateArchive& _internal_summary_change_state() const;
  ::TST::SummaryModelGroupByChangeStateArchive* _internal_mutable_summary_change_state();
  public:
  void unsafe_arena_set_allocated_summary_change_state(
      ::TST::SummaryModelGroupByChangeStateArchive* summary_change_state);
  ::TST::SummaryModelGroupByChangeStateArchive* unsafe_arena_release_summary_change_state();

  // optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
  bool has_undo_summary_change_state() const;
  private:
  bool _internal_has_undo_summary_change_state() const;
  public:
  void clear_undo_summary_change_state();
  const ::TST::SummaryModelGroupByChangeStateArchive& undo_summary_change_state() const;
  PROTOBUF_NODISCARD ::TST::SummaryModelGroupByChangeStateArchive* release_undo_summary_change_state();
  ::TST::SummaryModelGroupByChangeStateArchive* mutable_undo_summary_change_state();
  void set_allocated_undo_summary_change_state(::TST::SummaryModelGroupByChangeStateArchive* undo_summary_change_state);
  private:
  const ::TST::SummaryModelGroupByChangeStateArchive& _internal_undo_summary_change_state() const;
  ::TST::SummaryModelGroupByChangeStateArchive* _internal_mutable_undo_summary_change_state();
  public:
  void unsafe_arena_set_allocated_undo_summary_change_state(
      ::TST::SummaryModelGroupByChangeStateArchive* undo_summary_change_state);
  ::TST::SummaryModelGroupByChangeStateArchive* unsafe_arena_release_undo_summary_change_state();

  // optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
  bool has_new_column_aggregates() const;
  private:
  bool _internal_has_new_column_aggregates() const;
  public:
  void clear_new_column_aggregates();
  const ::TST::ColumnAggregateListArchive& new_column_aggregates() const;
  PROTOBUF_NODISCARD ::TST::ColumnAggregateListArchive* release_new_column_aggregates();
  ::TST::ColumnAggregateListArchive* mutable_new_column_aggregates();
  void set_allocated_new_column_aggregates(::TST::ColumnAggregateListArchive* new_column_aggregates);
  private:
  const ::TST::ColumnAggregateListArchive& _internal_new_column_aggregates() const;
  ::TST::ColumnAggregateListArchive* _internal_mutable_new_column_aggregates();
  public:
  void unsafe_arena_set_allocated_new_column_aggregates(
      ::TST::ColumnAggregateListArchive* new_column_aggregates);
  ::TST::ColumnAggregateListArchive* unsafe_arena_release_new_column_aggregates();

  // optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
  bool has_old_column_aggregates() const;
  private:
  bool _internal_has_old_column_aggregates() const;
  public:
  void clear_old_column_aggregates();
  const ::TST::ColumnAggregateListArchive& old_column_aggregates() const;
  PROTOBUF_NODISCARD ::TST::ColumnAggregateListArchive* release_old_column_aggregates();
  ::TST::ColumnAggregateListArchive* mutable_old_column_aggregates();
  void set_allocated_old_column_aggregates(::TST::ColumnAggregateListArchive* old_column_aggregates);
  private:
  const ::TST::ColumnAggregateListArchive& _internal_old_column_aggregates() const;
  ::TST::ColumnAggregateListArchive* _internal_mutable_old_column_aggregates();
  public:
  void unsafe_arena_set_allocated_old_column_aggregates(
      ::TST::ColumnAggregateListArchive* old_column_aggregates);
  ::TST::ColumnAggregateListArchive* unsafe_arena_release_old_column_aggregates();

  // optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
  bool has_undo_set_enabled_rewrite_command() const;
  private:
  bool _internal_has_undo_set_enabled_rewrite_command() const;
  public:
  void clear_undo_set_enabled_rewrite_command();
  const ::TSP::Reference& undo_set_enabled_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_set_enabled_rewrite_command();
  ::TSP::Reference* mutable_undo_set_enabled_rewrite_command();
  void set_allocated_undo_set_enabled_rewrite_command(::TSP::Reference* undo_set_enabled_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_set_enabled_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_set_enabled_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_set_enabled_rewrite_command(
      ::TSP::Reference* undo_set_enabled_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_set_enabled_rewrite_command();

  // optional .TSP.Reference undo_set_columns_rewrite_command = 21;
  bool has_undo_set_columns_rewrite_command() const;
  private:
  bool _internal_has_undo_set_columns_rewrite_command() const;
  public:
  void clear_undo_set_columns_rewrite_command();
  const ::TSP::Reference& undo_set_columns_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_set_columns_rewrite_command();
  ::TSP::Reference* mutable_undo_set_columns_rewrite_command();
  void set_allocated_undo_set_columns_rewrite_command(::TSP::Reference* undo_set_columns_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_set_columns_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_set_columns_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_set_columns_rewrite_command(
      ::TSP::Reference* undo_set_columns_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_set_columns_rewrite_command();

  // optional .TSP.Reference cell_diff_map = 23;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference undo_cell_diff_map = 24;
  bool has_undo_cell_diff_map() const;
  private:
  bool _internal_has_undo_cell_diff_map() const;
  public:
  void clear_undo_cell_diff_map();
  const ::TSP::Reference& undo_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_diff_map();
  ::TSP::Reference* mutable_undo_cell_diff_map();
  void set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_diff_map(
      ::TSP::Reference* undo_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_diff_map();

  // optional .TSP.Reference undo_set_group_sort_order_command = 25;
  bool has_undo_set_group_sort_order_command() const;
  private:
  bool _internal_has_undo_set_group_sort_order_command() const;
  public:
  void clear_undo_set_group_sort_order_command();
  const ::TSP::Reference& undo_set_group_sort_order_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_set_group_sort_order_command();
  ::TSP::Reference* mutable_undo_set_group_sort_order_command();
  void set_allocated_undo_set_group_sort_order_command(::TSP::Reference* undo_set_group_sort_order_command);
  private:
  const ::TSP::Reference& _internal_undo_set_group_sort_order_command() const;
  ::TSP::Reference* _internal_mutable_undo_set_group_sort_order_command();
  public:
  void unsafe_arena_set_allocated_undo_set_group_sort_order_command(
      ::TSP::Reference* undo_set_group_sort_order_command);
  ::TSP::Reference* unsafe_arena_release_undo_set_group_sort_order_command();

  // required int32 new_enabled_changing = 2;
  bool has_new_enabled_changing() const;
  private:
  bool _internal_has_new_enabled_changing() const;
  public:
  void clear_new_enabled_changing();
  int32_t new_enabled_changing() const;
  void set_new_enabled_changing(int32_t value);
  private:
  int32_t _internal_new_enabled_changing() const;
  void _internal_set_new_enabled_changing(int32_t value);
  public:

  // required int32 old_enabled_changing = 3;
  bool has_old_enabled_changing() const;
  private:
  bool _internal_has_old_enabled_changing() const;
  public:
  void clear_old_enabled_changing();
  int32_t old_enabled_changing() const;
  void set_old_enabled_changing(int32_t value);
  private:
  int32_t _internal_old_enabled_changing() const;
  void _internal_set_old_enabled_changing(int32_t value);
  public:

  // required bool restore_base_order = 6;
  bool has_restore_base_order() const;
  private:
  bool _internal_has_restore_base_order() const;
  public:
  void clear_restore_base_order();
  bool restore_base_order() const;
  void set_restore_base_order(bool value);
  private:
  bool _internal_restore_base_order() const;
  void _internal_set_restore_base_order(bool value);
  public:

  // required bool undo_restore_base_order = 8;
  bool has_undo_restore_base_order() const;
  private:
  bool _internal_has_undo_restore_base_order() const;
  public:
  void clear_undo_restore_base_order();
  bool undo_restore_base_order() const;
  void set_undo_restore_base_order(bool value);
  private:
  bool _internal_undo_restore_base_order() const;
  void _internal_set_undo_restore_base_order(bool value);
  public:

  // required bool restore_view_order = 10;
  bool has_restore_view_order() const;
  private:
  bool _internal_has_restore_view_order() const;
  public:
  void clear_restore_view_order();
  bool restore_view_order() const;
  void set_restore_view_order(bool value);
  private:
  bool _internal_restore_view_order() const;
  void _internal_set_restore_view_order(bool value);
  public:

  // required bool undo_restore_view_order = 12;
  bool has_undo_restore_view_order() const;
  private:
  bool _internal_has_undo_restore_view_order() const;
  public:
  void clear_undo_restore_view_order();
  bool undo_restore_view_order() const;
  void set_undo_restore_view_order(bool value);
  private:
  bool _internal_undo_restore_view_order() const;
  void _internal_set_undo_restore_view_order(bool value);
  public:

  // required bool force_restore_all_states = 22;
  bool has_force_restore_all_states() const;
  private:
  bool _internal_has_force_restore_all_states() const;
  public:
  void clear_force_restore_all_states();
  bool force_restore_all_states() const;
  void set_force_restore_all_states(bool value);
  private:
  bool _internal_force_restore_all_states() const;
  void _internal_set_force_restore_all_states(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandCategorySetGroupingColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > base_row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_base_row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > view_row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_view_row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > collapse_state_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_collapse_state_;
    ::TST::TableCommandArchive* super_;
    ::TST::GroupColumnListArchive* new_grouping_columns_;
    ::TST::GroupColumnListArchive* old_grouping_columns_;
    ::TST::SummaryModelGroupByChangeStateArchive* summary_change_state_;
    ::TST::SummaryModelGroupByChangeStateArchive* undo_summary_change_state_;
    ::TST::ColumnAggregateListArchive* new_column_aggregates_;
    ::TST::ColumnAggregateListArchive* old_column_aggregates_;
    ::TSP::Reference* undo_set_enabled_rewrite_command_;
    ::TSP::Reference* undo_set_columns_rewrite_command_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* undo_cell_diff_map_;
    ::TSP::Reference* undo_set_group_sort_order_command_;
    int32_t new_enabled_changing_;
    int32_t old_enabled_changing_;
    bool restore_base_order_;
    bool undo_restore_base_order_;
    bool restore_view_order_;
    bool undo_restore_view_order_;
    bool force_restore_all_states_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaEditingCommandGroupArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaEditingCommandGroupArchive) */ {
 public:
  inline FormulaEditingCommandGroupArchive() : FormulaEditingCommandGroupArchive(nullptr) {}
  ~FormulaEditingCommandGroupArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaEditingCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaEditingCommandGroupArchive(const FormulaEditingCommandGroupArchive& from);
  FormulaEditingCommandGroupArchive(FormulaEditingCommandGroupArchive&& from) noexcept
    : FormulaEditingCommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline FormulaEditingCommandGroupArchive& operator=(const FormulaEditingCommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaEditingCommandGroupArchive& operator=(FormulaEditingCommandGroupArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaEditingCommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaEditingCommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaEditingCommandGroupArchive*>(
               &_FormulaEditingCommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(FormulaEditingCommandGroupArchive& a, FormulaEditingCommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaEditingCommandGroupArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaEditingCommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaEditingCommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaEditingCommandGroupArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaEditingCommandGroupArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaEditingCommandGroupArchive& from) {
    FormulaEditingCommandGroupArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaEditingCommandGroupArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaEditingCommandGroupArchive";
  }
  protected:
  explicit FormulaEditingCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoSelectionStartFieldNumber = 3,
    kUndoSelectionLengthFieldNumber = 4,
    kUndoSelectionValidFieldNumber = 2,
    kRedoSelectionValidFieldNumber = 6,
    kUndoActiveTokenFieldNumber = 5,
    kRedoSelectionStartFieldNumber = 7,
    kRedoSelectionLengthFieldNumber = 8,
    kRedoActiveTokenFieldNumber = 9,
  };
  // required .TSK.ProgressiveCommandGroupArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::ProgressiveCommandGroupArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::ProgressiveCommandGroupArchive* release_super();
  ::TSK::ProgressiveCommandGroupArchive* mutable_super();
  void set_allocated_super(::TSK::ProgressiveCommandGroupArchive* super);
  private:
  const ::TSK::ProgressiveCommandGroupArchive& _internal_super() const;
  ::TSK::ProgressiveCommandGroupArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::ProgressiveCommandGroupArchive* super);
  ::TSK::ProgressiveCommandGroupArchive* unsafe_arena_release_super();

  // required uint32 undoSelectionStart = 3;
  bool has_undoselectionstart() const;
  private:
  bool _internal_has_undoselectionstart() const;
  public:
  void clear_undoselectionstart();
  uint32_t undoselectionstart() const;
  void set_undoselectionstart(uint32_t value);
  private:
  uint32_t _internal_undoselectionstart() const;
  void _internal_set_undoselectionstart(uint32_t value);
  public:

  // required uint32 undoSelectionLength = 4;
  bool has_undoselectionlength() const;
  private:
  bool _internal_has_undoselectionlength() const;
  public:
  void clear_undoselectionlength();
  uint32_t undoselectionlength() const;
  void set_undoselectionlength(uint32_t value);
  private:
  uint32_t _internal_undoselectionlength() const;
  void _internal_set_undoselectionlength(uint32_t value);
  public:

  // required bool undoSelectionValid = 2;
  bool has_undoselectionvalid() const;
  private:
  bool _internal_has_undoselectionvalid() const;
  public:
  void clear_undoselectionvalid();
  bool undoselectionvalid() const;
  void set_undoselectionvalid(bool value);
  private:
  bool _internal_undoselectionvalid() const;
  void _internal_set_undoselectionvalid(bool value);
  public:

  // required bool redoSelectionValid = 6;
  bool has_redoselectionvalid() const;
  private:
  bool _internal_has_redoselectionvalid() const;
  public:
  void clear_redoselectionvalid();
  bool redoselectionvalid() const;
  void set_redoselectionvalid(bool value);
  private:
  bool _internal_redoselectionvalid() const;
  void _internal_set_redoselectionvalid(bool value);
  public:

  // required uint32 undoActiveToken = 5;
  bool has_undoactivetoken() const;
  private:
  bool _internal_has_undoactivetoken() const;
  public:
  void clear_undoactivetoken();
  uint32_t undoactivetoken() const;
  void set_undoactivetoken(uint32_t value);
  private:
  uint32_t _internal_undoactivetoken() const;
  void _internal_set_undoactivetoken(uint32_t value);
  public:

  // required uint32 redoSelectionStart = 7;
  bool has_redoselectionstart() const;
  private:
  bool _internal_has_redoselectionstart() const;
  public:
  void clear_redoselectionstart();
  uint32_t redoselectionstart() const;
  void set_redoselectionstart(uint32_t value);
  private:
  uint32_t _internal_redoselectionstart() const;
  void _internal_set_redoselectionstart(uint32_t value);
  public:

  // required uint32 redoSelectionLength = 8;
  bool has_redoselectionlength() const;
  private:
  bool _internal_has_redoselectionlength() const;
  public:
  void clear_redoselectionlength();
  uint32_t redoselectionlength() const;
  void set_redoselectionlength(uint32_t value);
  private:
  uint32_t _internal_redoselectionlength() const;
  void _internal_set_redoselectionlength(uint32_t value);
  public:

  // required uint32 redoActiveToken = 9;
  bool has_redoactivetoken() const;
  private:
  bool _internal_has_redoactivetoken() const;
  public:
  void clear_redoactivetoken();
  uint32_t redoactivetoken() const;
  void set_redoactivetoken(uint32_t value);
  private:
  uint32_t _internal_redoactivetoken() const;
  void _internal_set_redoactivetoken(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaEditingCommandGroupArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::ProgressiveCommandGroupArchive* super_;
    uint32_t undoselectionstart_;
    uint32_t undoselectionlength_;
    bool undoselectionvalid_;
    bool redoselectionvalid_;
    uint32_t undoactivetoken_;
    uint32_t redoselectionstart_;
    uint32_t redoselectionlength_;
    uint32_t redoactivetoken_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaEditingCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaEditingCommandSelectionBehaviorArchive) */ {
 public:
  inline FormulaEditingCommandSelectionBehaviorArchive() : FormulaEditingCommandSelectionBehaviorArchive(nullptr) {}
  ~FormulaEditingCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaEditingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaEditingCommandSelectionBehaviorArchive(const FormulaEditingCommandSelectionBehaviorArchive& from);
  FormulaEditingCommandSelectionBehaviorArchive(FormulaEditingCommandSelectionBehaviorArchive&& from) noexcept
    : FormulaEditingCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline FormulaEditingCommandSelectionBehaviorArchive& operator=(const FormulaEditingCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaEditingCommandSelectionBehaviorArchive& operator=(FormulaEditingCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaEditingCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaEditingCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaEditingCommandSelectionBehaviorArchive*>(
               &_FormulaEditingCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(FormulaEditingCommandSelectionBehaviorArchive& a, FormulaEditingCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaEditingCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaEditingCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaEditingCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaEditingCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaEditingCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaEditingCommandSelectionBehaviorArchive& from) {
    FormulaEditingCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaEditingCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaEditingCommandSelectionBehaviorArchive";
  }
  protected:
  explicit FormulaEditingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoActiveTokenFieldNumber = 2,
    kRedoActiveTokenFieldNumber = 3,
  };
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandSelectionBehaviorArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandSelectionBehaviorArchive* release_super();
  ::TSK::CommandSelectionBehaviorArchive* mutable_super();
  void set_allocated_super(::TSK::CommandSelectionBehaviorArchive* super);
  private:
  const ::TSK::CommandSelectionBehaviorArchive& _internal_super() const;
  ::TSK::CommandSelectionBehaviorArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandSelectionBehaviorArchive* super);
  ::TSK::CommandSelectionBehaviorArchive* unsafe_arena_release_super();

  // optional uint32 undoActiveToken = 2;
  bool has_undoactivetoken() const;
  private:
  bool _internal_has_undoactivetoken() const;
  public:
  void clear_undoactivetoken();
  uint32_t undoactivetoken() const;
  void set_undoactivetoken(uint32_t value);
  private:
  uint32_t _internal_undoactivetoken() const;
  void _internal_set_undoactivetoken(uint32_t value);
  public:

  // optional uint32 redoActiveToken = 3;
  bool has_redoactivetoken() const;
  private:
  bool _internal_has_redoactivetoken() const;
  public:
  void clear_redoactivetoken();
  uint32_t redoactivetoken() const;
  void set_redoactivetoken(uint32_t value);
  private:
  uint32_t _internal_redoactivetoken() const;
  void _internal_set_redoactivetoken(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaEditingCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandSelectionBehaviorArchive* super_;
    uint32_t undoactivetoken_;
    uint32_t redoactivetoken_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TableCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableCommandSelectionBehaviorArchive) */ {
 public:
  inline TableCommandSelectionBehaviorArchive() : TableCommandSelectionBehaviorArchive(nullptr) {}
  ~TableCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR TableCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableCommandSelectionBehaviorArchive(const TableCommandSelectionBehaviorArchive& from);
  TableCommandSelectionBehaviorArchive(TableCommandSelectionBehaviorArchive&& from) noexcept
    : TableCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline TableCommandSelectionBehaviorArchive& operator=(const TableCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCommandSelectionBehaviorArchive& operator=(TableCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const TableCommandSelectionBehaviorArchive*>(
               &_TableCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(TableCommandSelectionBehaviorArchive& a, TableCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableCommandSelectionBehaviorArchive& from) {
    TableCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableCommandSelectionBehaviorArchive";
  }
  protected:
  explicit TableCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTableInfoFieldNumber = 2,
    kLastColumnUidHitByTapFieldNumber = 3,
    kInvalidateCommentsFieldNumber = 4,
  };
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandSelectionBehaviorArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandSelectionBehaviorArchive* release_super();
  ::TSK::CommandSelectionBehaviorArchive* mutable_super();
  void set_allocated_super(::TSK::CommandSelectionBehaviorArchive* super);
  private:
  const ::TSK::CommandSelectionBehaviorArchive& _internal_super() const;
  ::TSK::CommandSelectionBehaviorArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandSelectionBehaviorArchive* super);
  ::TSK::CommandSelectionBehaviorArchive* unsafe_arena_release_super();

  // optional .TSP.Reference table_info = 2;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional .TSP.UUID last_column_uid_hit_by_tap = 3;
  bool has_last_column_uid_hit_by_tap() const;
  private:
  bool _internal_has_last_column_uid_hit_by_tap() const;
  public:
  void clear_last_column_uid_hit_by_tap();
  const ::TSP::UUID& last_column_uid_hit_by_tap() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_last_column_uid_hit_by_tap();
  ::TSP::UUID* mutable_last_column_uid_hit_by_tap();
  void set_allocated_last_column_uid_hit_by_tap(::TSP::UUID* last_column_uid_hit_by_tap);
  private:
  const ::TSP::UUID& _internal_last_column_uid_hit_by_tap() const;
  ::TSP::UUID* _internal_mutable_last_column_uid_hit_by_tap();
  public:
  void unsafe_arena_set_allocated_last_column_uid_hit_by_tap(
      ::TSP::UUID* last_column_uid_hit_by_tap);
  ::TSP::UUID* unsafe_arena_release_last_column_uid_hit_by_tap();

  // optional uint32 invalidate_comments = 4;
  bool has_invalidate_comments() const;
  private:
  bool _internal_has_invalidate_comments() const;
  public:
  void clear_invalidate_comments();
  uint32_t invalidate_comments() const;
  void set_invalidate_comments(uint32_t value);
  private:
  uint32_t _internal_invalidate_comments() const;
  void _internal_set_invalidate_comments(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandSelectionBehaviorArchive* super_;
    ::TSP::Reference* table_info_;
    ::TSP::UUID* last_column_uid_hit_by_tap_;
    uint32_t invalidate_comments_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyCellCommentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyCellCommentArchive) */ {
 public:
  inline CommandApplyCellCommentArchive() : CommandApplyCellCommentArchive(nullptr) {}
  ~CommandApplyCellCommentArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyCellCommentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyCellCommentArchive(const CommandApplyCellCommentArchive& from);
  CommandApplyCellCommentArchive(CommandApplyCellCommentArchive&& from) noexcept
    : CommandApplyCellCommentArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyCellCommentArchive& operator=(const CommandApplyCellCommentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyCellCommentArchive& operator=(CommandApplyCellCommentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyCellCommentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyCellCommentArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyCellCommentArchive*>(
               &_CommandApplyCellCommentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CommandApplyCellCommentArchive& a, CommandApplyCellCommentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyCellCommentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyCellCommentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyCellCommentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyCellCommentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyCellCommentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyCellCommentArchive& from) {
    CommandApplyCellCommentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyCellCommentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyCellCommentArchive";
  }
  protected:
  explicit CommandApplyCellCommentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidFieldNumber = 2,
    kOldCommentStorageFieldNumber = 3,
    kNewCommentStorageFieldNumber = 4,
    kForwardVariantFieldNumber = 5,
    kInverseVariantFieldNumber = 6,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDCoordArchive cell_uid = 2;
  bool has_cell_uid() const;
  private:
  bool _internal_has_cell_uid() const;
  public:
  void clear_cell_uid();
  const ::TSP::UUIDCoordArchive& cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_cell_uid();
  void set_allocated_cell_uid(::TSP::UUIDCoordArchive* cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_cell_uid();
  public:
  void unsafe_arena_set_allocated_cell_uid(
      ::TSP::UUIDCoordArchive* cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_cell_uid();

  // optional .TSP.Reference old_comment_storage = 3;
  bool has_old_comment_storage() const;
  private:
  bool _internal_has_old_comment_storage() const;
  public:
  void clear_old_comment_storage();
  const ::TSP::Reference& old_comment_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_comment_storage();
  ::TSP::Reference* mutable_old_comment_storage();
  void set_allocated_old_comment_storage(::TSP::Reference* old_comment_storage);
  private:
  const ::TSP::Reference& _internal_old_comment_storage() const;
  ::TSP::Reference* _internal_mutable_old_comment_storage();
  public:
  void unsafe_arena_set_allocated_old_comment_storage(
      ::TSP::Reference* old_comment_storage);
  ::TSP::Reference* unsafe_arena_release_old_comment_storage();

  // optional .TSP.Reference new_comment_storage = 4;
  bool has_new_comment_storage() const;
  private:
  bool _internal_has_new_comment_storage() const;
  public:
  void clear_new_comment_storage();
  const ::TSP::Reference& new_comment_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_comment_storage();
  ::TSP::Reference* mutable_new_comment_storage();
  void set_allocated_new_comment_storage(::TSP::Reference* new_comment_storage);
  private:
  const ::TSP::Reference& _internal_new_comment_storage() const;
  ::TSP::Reference* _internal_mutable_new_comment_storage();
  public:
  void unsafe_arena_set_allocated_new_comment_storage(
      ::TSP::Reference* new_comment_storage);
  ::TSP::Reference* unsafe_arena_release_new_comment_storage();

  // optional .TSD.CommentCommandVariant forward_variant = 5;
  bool has_forward_variant() const;
  private:
  bool _internal_has_forward_variant() const;
  public:
  void clear_forward_variant();
  ::TSD::CommentCommandVariant forward_variant() const;
  void set_forward_variant(::TSD::CommentCommandVariant value);
  private:
  ::TSD::CommentCommandVariant _internal_forward_variant() const;
  void _internal_set_forward_variant(::TSD::CommentCommandVariant value);
  public:

  // optional .TSD.CommentCommandVariant inverse_variant = 6;
  bool has_inverse_variant() const;
  private:
  bool _internal_has_inverse_variant() const;
  public:
  void clear_inverse_variant();
  ::TSD::CommentCommandVariant inverse_variant() const;
  void set_inverse_variant(::TSD::CommentCommandVariant value);
  private:
  ::TSD::CommentCommandVariant _internal_inverse_variant() const;
  void _internal_set_inverse_variant(::TSD::CommentCommandVariant value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyCellCommentArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUIDCoordArchive* cell_uid_;
    ::TSP::Reference* old_comment_storage_;
    ::TSP::Reference* new_comment_storage_;
    int forward_variant_;
    int inverse_variant_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFormulaTokenizationArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFormulaTokenizationArchive) */ {
 public:
  inline CommandSetFormulaTokenizationArchive() : CommandSetFormulaTokenizationArchive(nullptr) {}
  ~CommandSetFormulaTokenizationArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFormulaTokenizationArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFormulaTokenizationArchive(const CommandSetFormulaTokenizationArchive& from);
  CommandSetFormulaTokenizationArchive(CommandSetFormulaTokenizationArchive&& from) noexcept
    : CommandSetFormulaTokenizationArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFormulaTokenizationArchive& operator=(const CommandSetFormulaTokenizationArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFormulaTokenizationArchive& operator=(CommandSetFormulaTokenizationArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFormulaTokenizationArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFormulaTokenizationArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFormulaTokenizationArchive*>(
               &_CommandSetFormulaTokenizationArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CommandSetFormulaTokenizationArchive& a, CommandSetFormulaTokenizationArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFormulaTokenizationArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFormulaTokenizationArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFormulaTokenizationArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFormulaTokenizationArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFormulaTokenizationArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFormulaTokenizationArchive& from) {
    CommandSetFormulaTokenizationArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFormulaTokenizationArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFormulaTokenizationArchive";
  }
  protected:
  explicit CommandSetFormulaTokenizationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTokenizationFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool tokenization = 2;
  bool has_tokenization() const;
  private:
  bool _internal_has_tokenization() const;
  public:
  void clear_tokenization();
  bool tokenization() const;
  void set_tokenization(bool value);
  private:
  bool _internal_tokenization() const;
  void _internal_set_tokenization(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFormulaTokenizationArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    bool tokenization_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFilterSetTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFilterSetTypeArchive) */ {
 public:
  inline CommandSetFilterSetTypeArchive() : CommandSetFilterSetTypeArchive(nullptr) {}
  ~CommandSetFilterSetTypeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFilterSetTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFilterSetTypeArchive(const CommandSetFilterSetTypeArchive& from);
  CommandSetFilterSetTypeArchive(CommandSetFilterSetTypeArchive&& from) noexcept
    : CommandSetFilterSetTypeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFilterSetTypeArchive& operator=(const CommandSetFilterSetTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFilterSetTypeArchive& operator=(CommandSetFilterSetTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFilterSetTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFilterSetTypeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFilterSetTypeArchive*>(
               &_CommandSetFilterSetTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CommandSetFilterSetTypeArchive& a, CommandSetFilterSetTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFilterSetTypeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFilterSetTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFilterSetTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFilterSetTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFilterSetTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFilterSetTypeArchive& from) {
    CommandSetFilterSetTypeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFilterSetTypeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFilterSetTypeArchive";
  }
  protected:
  explicit CommandSetFilterSetTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollbackUidListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kOldFilterSetTypeFieldNumber = 2,
    kNewFilterSetTypeFieldNumber = 3,
  };
  // repeated .TSP.UUID rollback_uid_list = 4;
  int rollback_uid_list_size() const;
  private:
  int _internal_rollback_uid_list_size() const;
  public:
  void clear_rollback_uid_list();
  ::TSP::UUID* mutable_rollback_uid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_rollback_uid_list();
  private:
  const ::TSP::UUID& _internal_rollback_uid_list(int index) const;
  ::TSP::UUID* _internal_add_rollback_uid_list();
  public:
  const ::TSP::UUID& rollback_uid_list(int index) const;
  ::TSP::UUID* add_rollback_uid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      rollback_uid_list() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  bool has_old_filter_set_type() const;
  private:
  bool _internal_has_old_filter_set_type() const;
  public:
  void clear_old_filter_set_type();
  ::TST::FilterSetArchive_FilterSetType old_filter_set_type() const;
  void set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  private:
  ::TST::FilterSetArchive_FilterSetType _internal_old_filter_set_type() const;
  void _internal_set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  public:

  // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
  bool has_new_filter_set_type() const;
  private:
  bool _internal_has_new_filter_set_type() const;
  public:
  void clear_new_filter_set_type();
  ::TST::FilterSetArchive_FilterSetType new_filter_set_type() const;
  void set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  private:
  ::TST::FilterSetArchive_FilterSetType _internal_new_filter_set_type() const;
  void _internal_set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFilterSetTypeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > rollback_uid_list_;
    ::TST::TableCommandArchive* super_;
    int old_filter_set_type_;
    int new_filter_set_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTextStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTextStyleArchive) */ {
 public:
  inline CommandSetTextStyleArchive() : CommandSetTextStyleArchive(nullptr) {}
  ~CommandSetTextStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTextStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTextStyleArchive(const CommandSetTextStyleArchive& from);
  CommandSetTextStyleArchive(CommandSetTextStyleArchive&& from) noexcept
    : CommandSetTextStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTextStyleArchive& operator=(const CommandSetTextStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTextStyleArchive& operator=(CommandSetTextStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTextStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTextStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTextStyleArchive*>(
               &_CommandSetTextStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CommandSetTextStyleArchive& a, CommandSetTextStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTextStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTextStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTextStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTextStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTextStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTextStyleArchive& from) {
    CommandSetTextStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTextStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTextStyleArchive";
  }
  protected:
  explicit CommandSetTextStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 2,
    kInverseCellDiffMapFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference cell_diff_map = 2;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // @@protoc_insertion_point(class_scope:TST.CommandSetTextStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* inverse_cell_diff_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTextStylePropertiesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTextStylePropertiesArchive) */ {
 public:
  inline CommandSetTextStylePropertiesArchive() : CommandSetTextStylePropertiesArchive(nullptr) {}
  ~CommandSetTextStylePropertiesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTextStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTextStylePropertiesArchive(const CommandSetTextStylePropertiesArchive& from);
  CommandSetTextStylePropertiesArchive(CommandSetTextStylePropertiesArchive&& from) noexcept
    : CommandSetTextStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTextStylePropertiesArchive& operator=(const CommandSetTextStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTextStylePropertiesArchive& operator=(CommandSetTextStylePropertiesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTextStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTextStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTextStylePropertiesArchive*>(
               &_CommandSetTextStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CommandSetTextStylePropertiesArchive& a, CommandSetTextStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTextStylePropertiesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTextStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTextStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTextStylePropertiesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTextStylePropertiesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTextStylePropertiesArchive& from) {
    CommandSetTextStylePropertiesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTextStylePropertiesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTextStylePropertiesArchive";
  }
  protected:
  explicit CommandSetTextStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellWasRichTextFieldNumber = 3,
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 2,
    kInverseCellDiffMapFieldNumber = 4,
  };
  // repeated bool cell_was_rich_text = 3;
  int cell_was_rich_text_size() const;
  private:
  int _internal_cell_was_rich_text_size() const;
  public:
  void clear_cell_was_rich_text();
  private:
  bool _internal_cell_was_rich_text(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_cell_was_rich_text() const;
  void _internal_add_cell_was_rich_text(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_cell_was_rich_text();
  public:
  bool cell_was_rich_text(int index) const;
  void set_cell_was_rich_text(int index, bool value);
  void add_cell_was_rich_text(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      cell_was_rich_text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_cell_was_rich_text();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference cell_diff_map = 2;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  bool has_inverse_cell_diff_map() const;
  private:
  bool _internal_has_inverse_cell_diff_map() const;
  public:
  void clear_inverse_cell_diff_map();
  const ::TSP::Reference& inverse_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_inverse_cell_diff_map();
  ::TSP::Reference* mutable_inverse_cell_diff_map();
  void set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_inverse_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_inverse_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_inverse_cell_diff_map(
      ::TSP::Reference* inverse_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_inverse_cell_diff_map();

  // @@protoc_insertion_point(class_scope:TST.CommandSetTextStylePropertiesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > cell_was_rich_text_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* inverse_cell_diff_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandJustForNotifyingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandJustForNotifyingArchive) */ {
 public:
  inline CommandJustForNotifyingArchive() : CommandJustForNotifyingArchive(nullptr) {}
  ~CommandJustForNotifyingArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandJustForNotifyingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandJustForNotifyingArchive(const CommandJustForNotifyingArchive& from);
  CommandJustForNotifyingArchive(CommandJustForNotifyingArchive&& from) noexcept
    : CommandJustForNotifyingArchive() {
    *this = ::std::move(from);
  }

  inline CommandJustForNotifyingArchive& operator=(const CommandJustForNotifyingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandJustForNotifyingArchive& operator=(CommandJustForNotifyingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandJustForNotifyingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandJustForNotifyingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandJustForNotifyingArchive*>(
               &_CommandJustForNotifyingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CommandJustForNotifyingArchive& a, CommandJustForNotifyingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandJustForNotifyingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandJustForNotifyingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandJustForNotifyingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandJustForNotifyingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandJustForNotifyingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandJustForNotifyingArchive& from) {
    CommandJustForNotifyingArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandJustForNotifyingArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandJustForNotifyingArchive";
  }
  protected:
  explicit CommandJustForNotifyingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kChangeDescriptorTypeFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required uint32 change_descriptor_type = 2;
  bool has_change_descriptor_type() const;
  private:
  bool _internal_has_change_descriptor_type() const;
  public:
  void clear_change_descriptor_type();
  uint32_t change_descriptor_type() const;
  void set_change_descriptor_type(uint32_t value);
  private:
  uint32_t _internal_change_descriptor_type() const;
  void _internal_set_change_descriptor_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandJustForNotifyingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    uint32_t change_descriptor_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetStorageLanguageArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetStorageLanguageArchive) */ {
 public:
  inline CommandSetStorageLanguageArchive() : CommandSetStorageLanguageArchive(nullptr) {}
  ~CommandSetStorageLanguageArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetStorageLanguageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetStorageLanguageArchive(const CommandSetStorageLanguageArchive& from);
  CommandSetStorageLanguageArchive(CommandSetStorageLanguageArchive&& from) noexcept
    : CommandSetStorageLanguageArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetStorageLanguageArchive& operator=(const CommandSetStorageLanguageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetStorageLanguageArchive& operator=(CommandSetStorageLanguageArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetStorageLanguageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetStorageLanguageArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetStorageLanguageArchive*>(
               &_CommandSetStorageLanguageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CommandSetStorageLanguageArchive& a, CommandSetStorageLanguageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetStorageLanguageArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetStorageLanguageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetStorageLanguageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetStorageLanguageArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetStorageLanguageArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetStorageLanguageArchive& from) {
    CommandSetStorageLanguageArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetStorageLanguageArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetStorageLanguageArchive";
  }
  protected:
  explicit CommandSetStorageLanguageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 3,
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 6,
    kRangeLocationFieldNumber = 4,
    kRangeLengthFieldNumber = 5,
  };
  // required string language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_NODISCARD ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // required uint32 range_location = 4;
  bool has_range_location() const;
  private:
  bool _internal_has_range_location() const;
  public:
  void clear_range_location();
  uint32_t range_location() const;
  void set_range_location(uint32_t value);
  private:
  uint32_t _internal_range_location() const;
  void _internal_set_range_location(uint32_t value);
  public:

  // required uint32 range_length = 5;
  bool has_range_length() const;
  private:
  bool _internal_has_range_length() const;
  public:
  void clear_range_length();
  uint32_t range_length() const;
  void set_range_length(uint32_t value);
  private:
  uint32_t _internal_range_length() const;
  void _internal_set_range_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetStorageLanguageArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* storage_;
    ::TSWP::UndoTransaction* undo_transaction_;
    uint32_t range_location_;
    uint32_t range_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSortOrderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetSortOrderArchive) */ {
 public:
  inline CommandSetSortOrderArchive() : CommandSetSortOrderArchive(nullptr) {}
  ~CommandSetSortOrderArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetSortOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSortOrderArchive(const CommandSetSortOrderArchive& from);
  CommandSetSortOrderArchive(CommandSetSortOrderArchive&& from) noexcept
    : CommandSetSortOrderArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSortOrderArchive& operator=(const CommandSetSortOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSortOrderArchive& operator=(CommandSetSortOrderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSortOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSortOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSortOrderArchive*>(
               &_CommandSetSortOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CommandSetSortOrderArchive& a, CommandSetSortOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSortOrderArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSortOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetSortOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetSortOrderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetSortOrderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetSortOrderArchive& from) {
    CommandSetSortOrderArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSortOrderArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetSortOrderArchive";
  }
  protected:
  explicit CommandSetSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldSortOrderFieldNumber = 2,
    kNewSortOrderFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  bool has_old_sort_order() const;
  private:
  bool _internal_has_old_sort_order() const;
  public:
  void clear_old_sort_order();
  const ::TST::TableSortOrderArchive& old_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderArchive* release_old_sort_order();
  ::TST::TableSortOrderArchive* mutable_old_sort_order();
  void set_allocated_old_sort_order(::TST::TableSortOrderArchive* old_sort_order);
  private:
  const ::TST::TableSortOrderArchive& _internal_old_sort_order() const;
  ::TST::TableSortOrderArchive* _internal_mutable_old_sort_order();
  public:
  void unsafe_arena_set_allocated_old_sort_order(
      ::TST::TableSortOrderArchive* old_sort_order);
  ::TST::TableSortOrderArchive* unsafe_arena_release_old_sort_order();

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  bool has_new_sort_order() const;
  private:
  bool _internal_has_new_sort_order() const;
  public:
  void clear_new_sort_order();
  const ::TST::TableSortOrderArchive& new_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderArchive* release_new_sort_order();
  ::TST::TableSortOrderArchive* mutable_new_sort_order();
  void set_allocated_new_sort_order(::TST::TableSortOrderArchive* new_sort_order);
  private:
  const ::TST::TableSortOrderArchive& _internal_new_sort_order() const;
  ::TST::TableSortOrderArchive* _internal_mutable_new_sort_order();
  public:
  void unsafe_arena_set_allocated_new_sort_order(
      ::TST::TableSortOrderArchive* new_sort_order);
  ::TST::TableSortOrderArchive* unsafe_arena_release_new_sort_order();

  // @@protoc_insertion_point(class_scope:TST.CommandSetSortOrderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::TableSortOrderArchive* old_sort_order_;
    ::TST::TableSortOrderArchive* new_sort_order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetGroupSortOrderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetGroupSortOrderArchive) */ {
 public:
  inline CommandSetGroupSortOrderArchive() : CommandSetGroupSortOrderArchive(nullptr) {}
  ~CommandSetGroupSortOrderArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetGroupSortOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetGroupSortOrderArchive(const CommandSetGroupSortOrderArchive& from);
  CommandSetGroupSortOrderArchive(CommandSetGroupSortOrderArchive&& from) noexcept
    : CommandSetGroupSortOrderArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetGroupSortOrderArchive& operator=(const CommandSetGroupSortOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetGroupSortOrderArchive& operator=(CommandSetGroupSortOrderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetGroupSortOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetGroupSortOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetGroupSortOrderArchive*>(
               &_CommandSetGroupSortOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CommandSetGroupSortOrderArchive& a, CommandSetGroupSortOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetGroupSortOrderArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetGroupSortOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetGroupSortOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetGroupSortOrderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetGroupSortOrderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetGroupSortOrderArchive& from) {
    CommandSetGroupSortOrderArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetGroupSortOrderArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetGroupSortOrderArchive";
  }
  protected:
  explicit CommandSetGroupSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldGroupSortOrderFieldNumber = 2,
    kNewGroupSortOrderFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.TableGroupSortOrderUIDArchive old_group_sort_order = 2;
  bool has_old_group_sort_order() const;
  private:
  bool _internal_has_old_group_sort_order() const;
  public:
  void clear_old_group_sort_order();
  const ::TST::TableGroupSortOrderUIDArchive& old_group_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableGroupSortOrderUIDArchive* release_old_group_sort_order();
  ::TST::TableGroupSortOrderUIDArchive* mutable_old_group_sort_order();
  void set_allocated_old_group_sort_order(::TST::TableGroupSortOrderUIDArchive* old_group_sort_order);
  private:
  const ::TST::TableGroupSortOrderUIDArchive& _internal_old_group_sort_order() const;
  ::TST::TableGroupSortOrderUIDArchive* _internal_mutable_old_group_sort_order();
  public:
  void unsafe_arena_set_allocated_old_group_sort_order(
      ::TST::TableGroupSortOrderUIDArchive* old_group_sort_order);
  ::TST::TableGroupSortOrderUIDArchive* unsafe_arena_release_old_group_sort_order();

  // optional .TST.TableGroupSortOrderUIDArchive new_group_sort_order = 3;
  bool has_new_group_sort_order() const;
  private:
  bool _internal_has_new_group_sort_order() const;
  public:
  void clear_new_group_sort_order();
  const ::TST::TableGroupSortOrderUIDArchive& new_group_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableGroupSortOrderUIDArchive* release_new_group_sort_order();
  ::TST::TableGroupSortOrderUIDArchive* mutable_new_group_sort_order();
  void set_allocated_new_group_sort_order(::TST::TableGroupSortOrderUIDArchive* new_group_sort_order);
  private:
  const ::TST::TableGroupSortOrderUIDArchive& _internal_new_group_sort_order() const;
  ::TST::TableGroupSortOrderUIDArchive* _internal_mutable_new_group_sort_order();
  public:
  void unsafe_arena_set_allocated_new_group_sort_order(
      ::TST::TableGroupSortOrderUIDArchive* new_group_sort_order);
  ::TST::TableGroupSortOrderUIDArchive* unsafe_arena_release_new_group_sort_order();

  // @@protoc_insertion_point(class_scope:TST.CommandSetGroupSortOrderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::TableGroupSortOrderUIDArchive* old_group_sort_order_;
    ::TST::TableGroupSortOrderUIDArchive* new_group_sort_order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteSortOrderForTableResizeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteSortOrderForTableResizeArchive) */ {
 public:
  inline CommandRewriteSortOrderForTableResizeArchive() : CommandRewriteSortOrderForTableResizeArchive(nullptr) {}
  ~CommandRewriteSortOrderForTableResizeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteSortOrderForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteSortOrderForTableResizeArchive(const CommandRewriteSortOrderForTableResizeArchive& from);
  CommandRewriteSortOrderForTableResizeArchive(CommandRewriteSortOrderForTableResizeArchive&& from) noexcept
    : CommandRewriteSortOrderForTableResizeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteSortOrderForTableResizeArchive& operator=(const CommandRewriteSortOrderForTableResizeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteSortOrderForTableResizeArchive& operator=(CommandRewriteSortOrderForTableResizeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteSortOrderForTableResizeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteSortOrderForTableResizeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteSortOrderForTableResizeArchive*>(
               &_CommandRewriteSortOrderForTableResizeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CommandRewriteSortOrderForTableResizeArchive& a, CommandRewriteSortOrderForTableResizeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteSortOrderForTableResizeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteSortOrderForTableResizeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteSortOrderForTableResizeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteSortOrderForTableResizeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteSortOrderForTableResizeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteSortOrderForTableResizeArchive& from) {
    CommandRewriteSortOrderForTableResizeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteSortOrderForTableResizeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteSortOrderForTableResizeArchive";
  }
  protected:
  explicit CommandRewriteSortOrderForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldSortOrderFieldNumber = 2,
    kNewSortOrderFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  bool has_old_sort_order() const;
  private:
  bool _internal_has_old_sort_order() const;
  public:
  void clear_old_sort_order();
  const ::TST::TableSortOrderArchive& old_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderArchive* release_old_sort_order();
  ::TST::TableSortOrderArchive* mutable_old_sort_order();
  void set_allocated_old_sort_order(::TST::TableSortOrderArchive* old_sort_order);
  private:
  const ::TST::TableSortOrderArchive& _internal_old_sort_order() const;
  ::TST::TableSortOrderArchive* _internal_mutable_old_sort_order();
  public:
  void unsafe_arena_set_allocated_old_sort_order(
      ::TST::TableSortOrderArchive* old_sort_order);
  ::TST::TableSortOrderArchive* unsafe_arena_release_old_sort_order();

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  bool has_new_sort_order() const;
  private:
  bool _internal_has_new_sort_order() const;
  public:
  void clear_new_sort_order();
  const ::TST::TableSortOrderArchive& new_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderArchive* release_new_sort_order();
  ::TST::TableSortOrderArchive* mutable_new_sort_order();
  void set_allocated_new_sort_order(::TST::TableSortOrderArchive* new_sort_order);
  private:
  const ::TST::TableSortOrderArchive& _internal_new_sort_order() const;
  ::TST::TableSortOrderArchive* _internal_mutable_new_sort_order();
  public:
  void unsafe_arena_set_allocated_new_sort_order(
      ::TST::TableSortOrderArchive* new_sort_order);
  ::TST::TableSortOrderArchive* unsafe_arena_release_new_sort_order();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteSortOrderForTableResizeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::TableSortOrderArchive* old_sort_order_;
    ::TST::TableSortOrderArchive* new_sort_order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteSortOrderForRewriteSpecArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteSortOrderForRewriteSpecArchive) */ {
 public:
  inline CommandRewriteSortOrderForRewriteSpecArchive() : CommandRewriteSortOrderForRewriteSpecArchive(nullptr) {}
  ~CommandRewriteSortOrderForRewriteSpecArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteSortOrderForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteSortOrderForRewriteSpecArchive(const CommandRewriteSortOrderForRewriteSpecArchive& from);
  CommandRewriteSortOrderForRewriteSpecArchive(CommandRewriteSortOrderForRewriteSpecArchive&& from) noexcept
    : CommandRewriteSortOrderForRewriteSpecArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteSortOrderForRewriteSpecArchive& operator=(const CommandRewriteSortOrderForRewriteSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteSortOrderForRewriteSpecArchive& operator=(CommandRewriteSortOrderForRewriteSpecArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteSortOrderForRewriteSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteSortOrderForRewriteSpecArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteSortOrderForRewriteSpecArchive*>(
               &_CommandRewriteSortOrderForRewriteSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CommandRewriteSortOrderForRewriteSpecArchive& a, CommandRewriteSortOrderForRewriteSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteSortOrderForRewriteSpecArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteSortOrderForRewriteSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteSortOrderForRewriteSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteSortOrderForRewriteSpecArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteSortOrderForRewriteSpecArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteSortOrderForRewriteSpecArchive& from) {
    CommandRewriteSortOrderForRewriteSpecArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteSortOrderForRewriteSpecArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteSortOrderForRewriteSpecArchive";
  }
  protected:
  explicit CommandRewriteSortOrderForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kOldSortOrderFieldNumber = 3,
    kNewSortOrderFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // optional .TST.TableSortOrderArchive old_sort_order = 3;
  bool has_old_sort_order() const;
  private:
  bool _internal_has_old_sort_order() const;
  public:
  void clear_old_sort_order();
  const ::TST::TableSortOrderArchive& old_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderArchive* release_old_sort_order();
  ::TST::TableSortOrderArchive* mutable_old_sort_order();
  void set_allocated_old_sort_order(::TST::TableSortOrderArchive* old_sort_order);
  private:
  const ::TST::TableSortOrderArchive& _internal_old_sort_order() const;
  ::TST::TableSortOrderArchive* _internal_mutable_old_sort_order();
  public:
  void unsafe_arena_set_allocated_old_sort_order(
      ::TST::TableSortOrderArchive* old_sort_order);
  ::TST::TableSortOrderArchive* unsafe_arena_release_old_sort_order();

  // optional .TST.TableSortOrderArchive new_sort_order = 4;
  bool has_new_sort_order() const;
  private:
  bool _internal_has_new_sort_order() const;
  public:
  void clear_new_sort_order();
  const ::TST::TableSortOrderArchive& new_sort_order() const;
  PROTOBUF_NODISCARD ::TST::TableSortOrderArchive* release_new_sort_order();
  ::TST::TableSortOrderArchive* mutable_new_sort_order();
  void set_allocated_new_sort_order(::TST::TableSortOrderArchive* new_sort_order);
  private:
  const ::TST::TableSortOrderArchive& _internal_new_sort_order() const;
  ::TST::TableSortOrderArchive* _internal_mutable_new_sort_order();
  public:
  void unsafe_arena_set_allocated_new_sort_order(
      ::TST::TableSortOrderArchive* new_sort_order);
  ::TST::TableSortOrderArchive* unsafe_arena_release_new_sort_order();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteSortOrderForRewriteSpecArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TST::TableSortOrderArchive* old_sort_order_;
    ::TST::TableSortOrderArchive* new_sort_order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFilterSetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFilterSetArchive) */ {
 public:
  inline CommandSetFilterSetArchive() : CommandSetFilterSetArchive(nullptr) {}
  ~CommandSetFilterSetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFilterSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFilterSetArchive(const CommandSetFilterSetArchive& from);
  CommandSetFilterSetArchive(CommandSetFilterSetArchive&& from) noexcept
    : CommandSetFilterSetArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFilterSetArchive& operator=(const CommandSetFilterSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFilterSetArchive& operator=(CommandSetFilterSetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFilterSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFilterSetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFilterSetArchive*>(
               &_CommandSetFilterSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CommandSetFilterSetArchive& a, CommandSetFilterSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFilterSetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFilterSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFilterSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFilterSetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFilterSetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFilterSetArchive& from) {
    CommandSetFilterSetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFilterSetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFilterSetArchive";
  }
  protected:
  explicit CommandSetFilterSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollbackUidListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kNewFilterSetFieldNumber = 2,
    kOldFilterSetFieldNumber = 3,
  };
  // repeated .TSP.UUID rollback_uid_list = 4;
  int rollback_uid_list_size() const;
  private:
  int _internal_rollback_uid_list_size() const;
  public:
  void clear_rollback_uid_list();
  ::TSP::UUID* mutable_rollback_uid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_rollback_uid_list();
  private:
  const ::TSP::UUID& _internal_rollback_uid_list(int index) const;
  ::TSP::UUID* _internal_add_rollback_uid_list();
  public:
  const ::TSP::UUID& rollback_uid_list(int index) const;
  ::TSP::UUID* add_rollback_uid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      rollback_uid_list() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference new_filter_set = 2;
  bool has_new_filter_set() const;
  private:
  bool _internal_has_new_filter_set() const;
  public:
  void clear_new_filter_set();
  const ::TSP::Reference& new_filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_filter_set();
  ::TSP::Reference* mutable_new_filter_set();
  void set_allocated_new_filter_set(::TSP::Reference* new_filter_set);
  private:
  const ::TSP::Reference& _internal_new_filter_set() const;
  ::TSP::Reference* _internal_mutable_new_filter_set();
  public:
  void unsafe_arena_set_allocated_new_filter_set(
      ::TSP::Reference* new_filter_set);
  ::TSP::Reference* unsafe_arena_release_new_filter_set();

  // optional .TSP.Reference old_filter_set = 3;
  bool has_old_filter_set() const;
  private:
  bool _internal_has_old_filter_set() const;
  public:
  void clear_old_filter_set();
  const ::TSP::Reference& old_filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_filter_set();
  ::TSP::Reference* mutable_old_filter_set();
  void set_allocated_old_filter_set(::TSP::Reference* old_filter_set);
  private:
  const ::TSP::Reference& _internal_old_filter_set() const;
  ::TSP::Reference* _internal_mutable_old_filter_set();
  public:
  void unsafe_arena_set_allocated_old_filter_set(
      ::TSP::Reference* old_filter_set);
  ::TSP::Reference* unsafe_arena_release_old_filter_set();

  // @@protoc_insertion_point(class_scope:TST.CommandSetFilterSetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > rollback_uid_list_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* new_filter_set_;
    ::TSP::Reference* old_filter_set_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnRowRestoreDataArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ColumnRowRestoreDataArchive) */ {
 public:
  inline ColumnRowRestoreDataArchive() : ColumnRowRestoreDataArchive(nullptr) {}
  ~ColumnRowRestoreDataArchive() override;
  explicit PROTOBUF_CONSTEXPR ColumnRowRestoreDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnRowRestoreDataArchive(const ColumnRowRestoreDataArchive& from);
  ColumnRowRestoreDataArchive(ColumnRowRestoreDataArchive&& from) noexcept
    : ColumnRowRestoreDataArchive() {
    *this = ::std::move(from);
  }

  inline ColumnRowRestoreDataArchive& operator=(const ColumnRowRestoreDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnRowRestoreDataArchive& operator=(ColumnRowRestoreDataArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnRowRestoreDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnRowRestoreDataArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnRowRestoreDataArchive*>(
               &_ColumnRowRestoreDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(ColumnRowRestoreDataArchive& a, ColumnRowRestoreDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnRowRestoreDataArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnRowRestoreDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnRowRestoreDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnRowRestoreDataArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnRowRestoreDataArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnRowRestoreDataArchive& from) {
    ColumnRowRestoreDataArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnRowRestoreDataArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ColumnRowRestoreDataArchive";
  }
  protected:
  explicit ColumnRowRestoreDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidListFieldNumber = 1,
    kMetadatasFieldNumber = 2,
  };
  // repeated .TSP.UUID uid_list = 1;
  int uid_list_size() const;
  private:
  int _internal_uid_list_size() const;
  public:
  void clear_uid_list();
  ::TSP::UUID* mutable_uid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uid_list();
  private:
  const ::TSP::UUID& _internal_uid_list(int index) const;
  ::TSP::UUID* _internal_add_uid_list();
  public:
  const ::TSP::UUID& uid_list(int index) const;
  ::TSP::UUID* add_uid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uid_list() const;

  // repeated .TST.ColumnRowMetadataArchive metadatas = 2;
  int metadatas_size() const;
  private:
  int _internal_metadatas_size() const;
  public:
  void clear_metadatas();
  ::TST::ColumnRowMetadataArchive* mutable_metadatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
      mutable_metadatas();
  private:
  const ::TST::ColumnRowMetadataArchive& _internal_metadatas(int index) const;
  ::TST::ColumnRowMetadataArchive* _internal_add_metadatas();
  public:
  const ::TST::ColumnRowMetadataArchive& metadatas(int index) const;
  ::TST::ColumnRowMetadataArchive* add_metadatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
      metadatas() const;

  // @@protoc_insertion_point(class_scope:TST.ColumnRowRestoreDataArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uid_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive > metadatas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTransposeTableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandTransposeTableArchive) */ {
 public:
  inline CommandTransposeTableArchive() : CommandTransposeTableArchive(nullptr) {}
  ~CommandTransposeTableArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandTransposeTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTransposeTableArchive(const CommandTransposeTableArchive& from);
  CommandTransposeTableArchive(CommandTransposeTableArchive&& from) noexcept
    : CommandTransposeTableArchive() {
    *this = ::std::move(from);
  }

  inline CommandTransposeTableArchive& operator=(const CommandTransposeTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTransposeTableArchive& operator=(CommandTransposeTableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTransposeTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTransposeTableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTransposeTableArchive*>(
               &_CommandTransposeTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CommandTransposeTableArchive& a, CommandTransposeTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTransposeTableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTransposeTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandTransposeTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandTransposeTableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTransposeTableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandTransposeTableArchive& from) {
    CommandTransposeTableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTransposeTableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandTransposeTableArchive";
  }
  protected:
  explicit CommandTransposeTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalColumnWidthsFieldNumber = 5,
    kOriginalRowHeightsFieldNumber = 6,
    kIneligibleMergeListFieldNumber = 7,
    kSuperFieldNumber = 1,
    kOriginalTableRangeFieldNumber = 2,
    kOriginalCellMapFieldNumber = 3,
    kTransposedCellMapFieldNumber = 8,
    kUndoFormulaRewriteCommandFieldNumber = 9,
    kRichTextSubcommandsFieldNumber = 10,
    kColumnRestoreDataFieldNumber = 11,
    kRowRestoreDataFieldNumber = 12,
    kOriginalFooterRowCountFieldNumber = 4,
  };
  // repeated float original_column_widths = 5;
  int original_column_widths_size() const;
  private:
  int _internal_original_column_widths_size() const;
  public:
  void clear_original_column_widths();
  private:
  float _internal_original_column_widths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_original_column_widths() const;
  void _internal_add_original_column_widths(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_original_column_widths();
  public:
  float original_column_widths(int index) const;
  void set_original_column_widths(int index, float value);
  void add_original_column_widths(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      original_column_widths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_original_column_widths();

  // repeated float original_row_heights = 6;
  int original_row_heights_size() const;
  private:
  int _internal_original_row_heights_size() const;
  public:
  void clear_original_row_heights();
  private:
  float _internal_original_row_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_original_row_heights() const;
  void _internal_add_original_row_heights(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_original_row_heights();
  public:
  float original_row_heights(int index) const;
  void set_original_row_heights(int index, float value);
  void add_original_row_heights(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      original_row_heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_original_row_heights();

  // repeated .TST.CellRange ineligible_merge_list = 7;
  int ineligible_merge_list_size() const;
  private:
  int _internal_ineligible_merge_list_size() const;
  public:
  void clear_ineligible_merge_list();
  ::TST::CellRange* mutable_ineligible_merge_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
      mutable_ineligible_merge_list();
  private:
  const ::TST::CellRange& _internal_ineligible_merge_list(int index) const;
  ::TST::CellRange* _internal_add_ineligible_merge_list();
  public:
  const ::TST::CellRange& ineligible_merge_list(int index) const;
  ::TST::CellRange* add_ineligible_merge_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
      ineligible_merge_list() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.ExpandedCellRange original_table_range = 2;
  bool has_original_table_range() const;
  private:
  bool _internal_has_original_table_range() const;
  public:
  void clear_original_table_range();
  const ::TST::ExpandedCellRange& original_table_range() const;
  PROTOBUF_NODISCARD ::TST::ExpandedCellRange* release_original_table_range();
  ::TST::ExpandedCellRange* mutable_original_table_range();
  void set_allocated_original_table_range(::TST::ExpandedCellRange* original_table_range);
  private:
  const ::TST::ExpandedCellRange& _internal_original_table_range() const;
  ::TST::ExpandedCellRange* _internal_mutable_original_table_range();
  public:
  void unsafe_arena_set_allocated_original_table_range(
      ::TST::ExpandedCellRange* original_table_range);
  ::TST::ExpandedCellRange* unsafe_arena_release_original_table_range();

  // required .TSP.Reference original_cell_map = 3;
  bool has_original_cell_map() const;
  private:
  bool _internal_has_original_cell_map() const;
  public:
  void clear_original_cell_map();
  const ::TSP::Reference& original_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_original_cell_map();
  ::TSP::Reference* mutable_original_cell_map();
  void set_allocated_original_cell_map(::TSP::Reference* original_cell_map);
  private:
  const ::TSP::Reference& _internal_original_cell_map() const;
  ::TSP::Reference* _internal_mutable_original_cell_map();
  public:
  void unsafe_arena_set_allocated_original_cell_map(
      ::TSP::Reference* original_cell_map);
  ::TSP::Reference* unsafe_arena_release_original_cell_map();

  // required .TSP.Reference transposed_cell_map = 8;
  bool has_transposed_cell_map() const;
  private:
  bool _internal_has_transposed_cell_map() const;
  public:
  void clear_transposed_cell_map();
  const ::TSP::Reference& transposed_cell_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_transposed_cell_map();
  ::TSP::Reference* mutable_transposed_cell_map();
  void set_allocated_transposed_cell_map(::TSP::Reference* transposed_cell_map);
  private:
  const ::TSP::Reference& _internal_transposed_cell_map() const;
  ::TSP::Reference* _internal_mutable_transposed_cell_map();
  public:
  void unsafe_arena_set_allocated_transposed_cell_map(
      ::TSP::Reference* transposed_cell_map);
  ::TSP::Reference* unsafe_arena_release_transposed_cell_map();

  // optional .TSP.Reference undo_formula_rewrite_command = 9;
  bool has_undo_formula_rewrite_command() const;
  private:
  bool _internal_has_undo_formula_rewrite_command() const;
  public:
  void clear_undo_formula_rewrite_command();
  const ::TSP::Reference& undo_formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_formula_rewrite_command();
  ::TSP::Reference* mutable_undo_formula_rewrite_command();
  void set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_formula_rewrite_command(
      ::TSP::Reference* undo_formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_formula_rewrite_command();

  // optional .TSP.Reference rich_text_subcommands = 10;
  bool has_rich_text_subcommands() const;
  private:
  bool _internal_has_rich_text_subcommands() const;
  public:
  void clear_rich_text_subcommands();
  const ::TSP::Reference& rich_text_subcommands() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_rich_text_subcommands();
  ::TSP::Reference* mutable_rich_text_subcommands();
  void set_allocated_rich_text_subcommands(::TSP::Reference* rich_text_subcommands);
  private:
  const ::TSP::Reference& _internal_rich_text_subcommands() const;
  ::TSP::Reference* _internal_mutable_rich_text_subcommands();
  public:
  void unsafe_arena_set_allocated_rich_text_subcommands(
      ::TSP::Reference* rich_text_subcommands);
  ::TSP::Reference* unsafe_arena_release_rich_text_subcommands();

  // optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
  bool has_column_restore_data() const;
  private:
  bool _internal_has_column_restore_data() const;
  public:
  void clear_column_restore_data();
  const ::TST::ColumnRowRestoreDataArchive& column_restore_data() const;
  PROTOBUF_NODISCARD ::TST::ColumnRowRestoreDataArchive* release_column_restore_data();
  ::TST::ColumnRowRestoreDataArchive* mutable_column_restore_data();
  void set_allocated_column_restore_data(::TST::ColumnRowRestoreDataArchive* column_restore_data);
  private:
  const ::TST::ColumnRowRestoreDataArchive& _internal_column_restore_data() const;
  ::TST::ColumnRowRestoreDataArchive* _internal_mutable_column_restore_data();
  public:
  void unsafe_arena_set_allocated_column_restore_data(
      ::TST::ColumnRowRestoreDataArchive* column_restore_data);
  ::TST::ColumnRowRestoreDataArchive* unsafe_arena_release_column_restore_data();

  // optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
  bool has_row_restore_data() const;
  private:
  bool _internal_has_row_restore_data() const;
  public:
  void clear_row_restore_data();
  const ::TST::ColumnRowRestoreDataArchive& row_restore_data() const;
  PROTOBUF_NODISCARD ::TST::ColumnRowRestoreDataArchive* release_row_restore_data();
  ::TST::ColumnRowRestoreDataArchive* mutable_row_restore_data();
  void set_allocated_row_restore_data(::TST::ColumnRowRestoreDataArchive* row_restore_data);
  private:
  const ::TST::ColumnRowRestoreDataArchive& _internal_row_restore_data() const;
  ::TST::ColumnRowRestoreDataArchive* _internal_mutable_row_restore_data();
  public:
  void unsafe_arena_set_allocated_row_restore_data(
      ::TST::ColumnRowRestoreDataArchive* row_restore_data);
  ::TST::ColumnRowRestoreDataArchive* unsafe_arena_release_row_restore_data();

  // required uint32 original_footer_row_count = 4;
  bool has_original_footer_row_count() const;
  private:
  bool _internal_has_original_footer_row_count() const;
  public:
  void clear_original_footer_row_count();
  uint32_t original_footer_row_count() const;
  void set_original_footer_row_count(uint32_t value);
  private:
  uint32_t _internal_original_footer_row_count() const;
  void _internal_set_original_footer_row_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandTransposeTableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > original_column_widths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > original_row_heights_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange > ineligible_merge_list_;
    ::TST::TableCommandArchive* super_;
    ::TST::ExpandedCellRange* original_table_range_;
    ::TSP::Reference* original_cell_map_;
    ::TSP::Reference* transposed_cell_map_;
    ::TSP::Reference* undo_formula_rewrite_command_;
    ::TSP::Reference* rich_text_subcommands_;
    ::TST::ColumnRowRestoreDataArchive* column_restore_data_;
    ::TST::ColumnRowRestoreDataArchive* row_restore_data_;
    uint32_t original_footer_row_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetStructuredTextImportRecordArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetStructuredTextImportRecordArchive) */ {
 public:
  inline CommandSetStructuredTextImportRecordArchive() : CommandSetStructuredTextImportRecordArchive(nullptr) {}
  ~CommandSetStructuredTextImportRecordArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetStructuredTextImportRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetStructuredTextImportRecordArchive(const CommandSetStructuredTextImportRecordArchive& from);
  CommandSetStructuredTextImportRecordArchive(CommandSetStructuredTextImportRecordArchive&& from) noexcept
    : CommandSetStructuredTextImportRecordArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetStructuredTextImportRecordArchive& operator=(const CommandSetStructuredTextImportRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetStructuredTextImportRecordArchive& operator=(CommandSetStructuredTextImportRecordArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetStructuredTextImportRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetStructuredTextImportRecordArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetStructuredTextImportRecordArchive*>(
               &_CommandSetStructuredTextImportRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CommandSetStructuredTextImportRecordArchive& a, CommandSetStructuredTextImportRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetStructuredTextImportRecordArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetStructuredTextImportRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetStructuredTextImportRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetStructuredTextImportRecordArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetStructuredTextImportRecordArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetStructuredTextImportRecordArchive& from) {
    CommandSetStructuredTextImportRecordArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetStructuredTextImportRecordArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetStructuredTextImportRecordArchive";
  }
  protected:
  explicit CommandSetStructuredTextImportRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewImportRecordFieldNumber = 2,
    kOldImportRecordFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.StructuredTextImportRecord new_import_record = 2;
  bool has_new_import_record() const;
  private:
  bool _internal_has_new_import_record() const;
  public:
  void clear_new_import_record();
  const ::TST::StructuredTextImportRecord& new_import_record() const;
  PROTOBUF_NODISCARD ::TST::StructuredTextImportRecord* release_new_import_record();
  ::TST::StructuredTextImportRecord* mutable_new_import_record();
  void set_allocated_new_import_record(::TST::StructuredTextImportRecord* new_import_record);
  private:
  const ::TST::StructuredTextImportRecord& _internal_new_import_record() const;
  ::TST::StructuredTextImportRecord* _internal_mutable_new_import_record();
  public:
  void unsafe_arena_set_allocated_new_import_record(
      ::TST::StructuredTextImportRecord* new_import_record);
  ::TST::StructuredTextImportRecord* unsafe_arena_release_new_import_record();

  // optional .TST.StructuredTextImportRecord old_import_record = 3;
  bool has_old_import_record() const;
  private:
  bool _internal_has_old_import_record() const;
  public:
  void clear_old_import_record();
  const ::TST::StructuredTextImportRecord& old_import_record() const;
  PROTOBUF_NODISCARD ::TST::StructuredTextImportRecord* release_old_import_record();
  ::TST::StructuredTextImportRecord* mutable_old_import_record();
  void set_allocated_old_import_record(::TST::StructuredTextImportRecord* old_import_record);
  private:
  const ::TST::StructuredTextImportRecord& _internal_old_import_record() const;
  ::TST::StructuredTextImportRecord* _internal_mutable_old_import_record();
  public:
  void unsafe_arena_set_allocated_old_import_record(
      ::TST::StructuredTextImportRecord* old_import_record);
  ::TST::StructuredTextImportRecord* unsafe_arena_release_old_import_record();

  // @@protoc_insertion_point(class_scope:TST.CommandSetStructuredTextImportRecordArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::StructuredTextImportRecord* new_import_record_;
    ::TST::StructuredTextImportRecord* old_import_record_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCategoryCollapseExpandGroupArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCategoryCollapseExpandGroupArchive) */ {
 public:
  inline CommandCategoryCollapseExpandGroupArchive() : CommandCategoryCollapseExpandGroupArchive(nullptr) {}
  ~CommandCategoryCollapseExpandGroupArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandCategoryCollapseExpandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCategoryCollapseExpandGroupArchive(const CommandCategoryCollapseExpandGroupArchive& from);
  CommandCategoryCollapseExpandGroupArchive(CommandCategoryCollapseExpandGroupArchive&& from) noexcept
    : CommandCategoryCollapseExpandGroupArchive() {
    *this = ::std::move(from);
  }

  inline CommandCategoryCollapseExpandGroupArchive& operator=(const CommandCategoryCollapseExpandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCategoryCollapseExpandGroupArchive& operator=(CommandCategoryCollapseExpandGroupArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCategoryCollapseExpandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCategoryCollapseExpandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const CommandCategoryCollapseExpandGroupArchive*>(
               &_CommandCategoryCollapseExpandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CommandCategoryCollapseExpandGroupArchive& a, CommandCategoryCollapseExpandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCategoryCollapseExpandGroupArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCategoryCollapseExpandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCategoryCollapseExpandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCategoryCollapseExpandGroupArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCategoryCollapseExpandGroupArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCategoryCollapseExpandGroupArchive& from) {
    CommandCategoryCollapseExpandGroupArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCategoryCollapseExpandGroupArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCategoryCollapseExpandGroupArchive";
  }
  protected:
  explicit CommandCategoryCollapseExpandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kGroupingColumnsFieldNumber = 3,
    kCollapseStateFieldNumber = 4,
    kUndoCollapseStateFieldNumber = 5,
    kIsCollapsingFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.GroupColumnListArchive grouping_columns = 3;
  bool has_grouping_columns() const;
  private:
  bool _internal_has_grouping_columns() const;
  public:
  void clear_grouping_columns();
  const ::TST::GroupColumnListArchive& grouping_columns() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_grouping_columns();
  ::TST::GroupColumnListArchive* mutable_grouping_columns();
  void set_allocated_grouping_columns(::TST::GroupColumnListArchive* grouping_columns);
  private:
  const ::TST::GroupColumnListArchive& _internal_grouping_columns() const;
  ::TST::GroupColumnListArchive* _internal_mutable_grouping_columns();
  public:
  void unsafe_arena_set_allocated_grouping_columns(
      ::TST::GroupColumnListArchive* grouping_columns);
  ::TST::GroupColumnListArchive* unsafe_arena_release_grouping_columns();

  // required .TST.ExpandCollapseStateArchive collapse_state = 4;
  bool has_collapse_state() const;
  private:
  bool _internal_has_collapse_state() const;
  public:
  void clear_collapse_state();
  const ::TST::ExpandCollapseStateArchive& collapse_state() const;
  PROTOBUF_NODISCARD ::TST::ExpandCollapseStateArchive* release_collapse_state();
  ::TST::ExpandCollapseStateArchive* mutable_collapse_state();
  void set_allocated_collapse_state(::TST::ExpandCollapseStateArchive* collapse_state);
  private:
  const ::TST::ExpandCollapseStateArchive& _internal_collapse_state() const;
  ::TST::ExpandCollapseStateArchive* _internal_mutable_collapse_state();
  public:
  void unsafe_arena_set_allocated_collapse_state(
      ::TST::ExpandCollapseStateArchive* collapse_state);
  ::TST::ExpandCollapseStateArchive* unsafe_arena_release_collapse_state();

  // optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
  bool has_undo_collapse_state() const;
  private:
  bool _internal_has_undo_collapse_state() const;
  public:
  void clear_undo_collapse_state();
  const ::TST::ExpandCollapseStateArchive& undo_collapse_state() const;
  PROTOBUF_NODISCARD ::TST::ExpandCollapseStateArchive* release_undo_collapse_state();
  ::TST::ExpandCollapseStateArchive* mutable_undo_collapse_state();
  void set_allocated_undo_collapse_state(::TST::ExpandCollapseStateArchive* undo_collapse_state);
  private:
  const ::TST::ExpandCollapseStateArchive& _internal_undo_collapse_state() const;
  ::TST::ExpandCollapseStateArchive* _internal_mutable_undo_collapse_state();
  public:
  void unsafe_arena_set_allocated_undo_collapse_state(
      ::TST::ExpandCollapseStateArchive* undo_collapse_state);
  ::TST::ExpandCollapseStateArchive* unsafe_arena_release_undo_collapse_state();

  // required bool is_collapsing = 2;
  bool has_is_collapsing() const;
  private:
  bool _internal_has_is_collapsing() const;
  public:
  void clear_is_collapsing();
  bool is_collapsing() const;
  void set_is_collapsing(bool value);
  private:
  bool _internal_is_collapsing() const;
  void _internal_set_is_collapsing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandCategoryCollapseExpandGroupArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::GroupColumnListArchive* grouping_columns_;
    ::TST::ExpandCollapseStateArchive* collapse_state_;
    ::TST::ExpandCollapseStateArchive* undo_collapse_state_;
    bool is_collapsing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCategoryChangeSummaryAggregateType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCategoryChangeSummaryAggregateType) */ {
 public:
  inline CommandCategoryChangeSummaryAggregateType() : CommandCategoryChangeSummaryAggregateType(nullptr) {}
  ~CommandCategoryChangeSummaryAggregateType() override;
  explicit PROTOBUF_CONSTEXPR CommandCategoryChangeSummaryAggregateType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCategoryChangeSummaryAggregateType(const CommandCategoryChangeSummaryAggregateType& from);
  CommandCategoryChangeSummaryAggregateType(CommandCategoryChangeSummaryAggregateType&& from) noexcept
    : CommandCategoryChangeSummaryAggregateType() {
    *this = ::std::move(from);
  }

  inline CommandCategoryChangeSummaryAggregateType& operator=(const CommandCategoryChangeSummaryAggregateType& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCategoryChangeSummaryAggregateType& operator=(CommandCategoryChangeSummaryAggregateType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCategoryChangeSummaryAggregateType& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCategoryChangeSummaryAggregateType* internal_default_instance() {
    return reinterpret_cast<const CommandCategoryChangeSummaryAggregateType*>(
               &_CommandCategoryChangeSummaryAggregateType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CommandCategoryChangeSummaryAggregateType& a, CommandCategoryChangeSummaryAggregateType& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCategoryChangeSummaryAggregateType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCategoryChangeSummaryAggregateType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCategoryChangeSummaryAggregateType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCategoryChangeSummaryAggregateType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCategoryChangeSummaryAggregateType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCategoryChangeSummaryAggregateType& from) {
    CommandCategoryChangeSummaryAggregateType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCategoryChangeSummaryAggregateType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCategoryChangeSummaryAggregateType";
  }
  protected:
  explicit CommandCategoryChangeSummaryAggregateType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kColumnUidFieldNumber = 4,
    kAggregateTypeFieldNumber = 2,
    kUndoAggregateTypeFieldNumber = 3,
    kGroupLevelFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID column_uid = 4;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // required uint32 aggregate_type = 2;
  bool has_aggregate_type() const;
  private:
  bool _internal_has_aggregate_type() const;
  public:
  void clear_aggregate_type();
  uint32_t aggregate_type() const;
  void set_aggregate_type(uint32_t value);
  private:
  uint32_t _internal_aggregate_type() const;
  void _internal_set_aggregate_type(uint32_t value);
  public:

  // required uint32 undo_aggregate_type = 3;
  bool has_undo_aggregate_type() const;
  private:
  bool _internal_has_undo_aggregate_type() const;
  public:
  void clear_undo_aggregate_type();
  uint32_t undo_aggregate_type() const;
  void set_undo_aggregate_type(uint32_t value);
  private:
  uint32_t _internal_undo_aggregate_type() const;
  void _internal_set_undo_aggregate_type(uint32_t value);
  public:

  // required sint32 group_level = 5;
  bool has_group_level() const;
  private:
  bool _internal_has_group_level() const;
  public:
  void clear_group_level();
  int32_t group_level() const;
  void set_group_level(int32_t value);
  private:
  int32_t _internal_group_level() const;
  void _internal_set_group_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandCategoryChangeSummaryAggregateType)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUID* column_uid_;
    uint32_t aggregate_type_;
    uint32_t undo_aggregate_type_;
    int32_t group_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCategorySetLabelRowVisibility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCategorySetLabelRowVisibility) */ {
 public:
  inline CommandCategorySetLabelRowVisibility() : CommandCategorySetLabelRowVisibility(nullptr) {}
  ~CommandCategorySetLabelRowVisibility() override;
  explicit PROTOBUF_CONSTEXPR CommandCategorySetLabelRowVisibility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCategorySetLabelRowVisibility(const CommandCategorySetLabelRowVisibility& from);
  CommandCategorySetLabelRowVisibility(CommandCategorySetLabelRowVisibility&& from) noexcept
    : CommandCategorySetLabelRowVisibility() {
    *this = ::std::move(from);
  }

  inline CommandCategorySetLabelRowVisibility& operator=(const CommandCategorySetLabelRowVisibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCategorySetLabelRowVisibility& operator=(CommandCategorySetLabelRowVisibility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCategorySetLabelRowVisibility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCategorySetLabelRowVisibility* internal_default_instance() {
    return reinterpret_cast<const CommandCategorySetLabelRowVisibility*>(
               &_CommandCategorySetLabelRowVisibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CommandCategorySetLabelRowVisibility& a, CommandCategorySetLabelRowVisibility& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCategorySetLabelRowVisibility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCategorySetLabelRowVisibility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCategorySetLabelRowVisibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCategorySetLabelRowVisibility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCategorySetLabelRowVisibility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCategorySetLabelRowVisibility& from) {
    CommandCategorySetLabelRowVisibility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCategorySetLabelRowVisibility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCategorySetLabelRowVisibility";
  }
  protected:
  explicit CommandCategorySetLabelRowVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kGroupLevelFieldNumber = 2,
    kLabelRowVisibilityFieldNumber = 3,
    kUndoLabelRowVisibilityFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required uint32 group_level = 2;
  bool has_group_level() const;
  private:
  bool _internal_has_group_level() const;
  public:
  void clear_group_level();
  uint32_t group_level() const;
  void set_group_level(uint32_t value);
  private:
  uint32_t _internal_group_level() const;
  void _internal_set_group_level(uint32_t value);
  public:

  // required uint32 label_row_visibility = 3;
  bool has_label_row_visibility() const;
  private:
  bool _internal_has_label_row_visibility() const;
  public:
  void clear_label_row_visibility();
  uint32_t label_row_visibility() const;
  void set_label_row_visibility(uint32_t value);
  private:
  uint32_t _internal_label_row_visibility() const;
  void _internal_set_label_row_visibility(uint32_t value);
  public:

  // required uint32 undo_label_row_visibility = 4;
  bool has_undo_label_row_visibility() const;
  private:
  bool _internal_has_undo_label_row_visibility() const;
  public:
  void clear_undo_label_row_visibility();
  uint32_t undo_label_row_visibility() const;
  void set_undo_label_row_visibility(uint32_t value);
  private:
  uint32_t _internal_undo_label_row_visibility() const;
  void _internal_set_undo_label_row_visibility(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandCategorySetLabelRowVisibility)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    uint32_t group_level_;
    uint32_t label_row_visibility_;
    uint32_t undo_label_row_visibility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCategoryWillChangeGroupValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCategoryWillChangeGroupValue) */ {
 public:
  inline CommandCategoryWillChangeGroupValue() : CommandCategoryWillChangeGroupValue(nullptr) {}
  ~CommandCategoryWillChangeGroupValue() override;
  explicit PROTOBUF_CONSTEXPR CommandCategoryWillChangeGroupValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCategoryWillChangeGroupValue(const CommandCategoryWillChangeGroupValue& from);
  CommandCategoryWillChangeGroupValue(CommandCategoryWillChangeGroupValue&& from) noexcept
    : CommandCategoryWillChangeGroupValue() {
    *this = ::std::move(from);
  }

  inline CommandCategoryWillChangeGroupValue& operator=(const CommandCategoryWillChangeGroupValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCategoryWillChangeGroupValue& operator=(CommandCategoryWillChangeGroupValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCategoryWillChangeGroupValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCategoryWillChangeGroupValue* internal_default_instance() {
    return reinterpret_cast<const CommandCategoryWillChangeGroupValue*>(
               &_CommandCategoryWillChangeGroupValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CommandCategoryWillChangeGroupValue& a, CommandCategoryWillChangeGroupValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCategoryWillChangeGroupValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCategoryWillChangeGroupValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCategoryWillChangeGroupValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCategoryWillChangeGroupValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCategoryWillChangeGroupValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCategoryWillChangeGroupValue& from) {
    CommandCategoryWillChangeGroupValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCategoryWillChangeGroupValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCategoryWillChangeGroupValue";
  }
  protected:
  explicit CommandCategoryWillChangeGroupValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kGroupNodeUidFieldNumber = 2,
    kUndoGroupNodeUidFieldNumber = 3,
    kGroupValueFieldNumber = 4,
    kUndoGroupValueFieldNumber = 5,
    kRewriteCommandForUndoFieldNumber = 6,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID group_node_uid = 2;
  bool has_group_node_uid() const;
  private:
  bool _internal_has_group_node_uid() const;
  public:
  void clear_group_node_uid();
  const ::TSP::UUID& group_node_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_group_node_uid();
  ::TSP::UUID* mutable_group_node_uid();
  void set_allocated_group_node_uid(::TSP::UUID* group_node_uid);
  private:
  const ::TSP::UUID& _internal_group_node_uid() const;
  ::TSP::UUID* _internal_mutable_group_node_uid();
  public:
  void unsafe_arena_set_allocated_group_node_uid(
      ::TSP::UUID* group_node_uid);
  ::TSP::UUID* unsafe_arena_release_group_node_uid();

  // optional .TSP.UUID undo_group_node_uid = 3;
  bool has_undo_group_node_uid() const;
  private:
  bool _internal_has_undo_group_node_uid() const;
  public:
  void clear_undo_group_node_uid();
  const ::TSP::UUID& undo_group_node_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_undo_group_node_uid();
  ::TSP::UUID* mutable_undo_group_node_uid();
  void set_allocated_undo_group_node_uid(::TSP::UUID* undo_group_node_uid);
  private:
  const ::TSP::UUID& _internal_undo_group_node_uid() const;
  ::TSP::UUID* _internal_mutable_undo_group_node_uid();
  public:
  void unsafe_arena_set_allocated_undo_group_node_uid(
      ::TSP::UUID* undo_group_node_uid);
  ::TSP::UUID* unsafe_arena_release_undo_group_node_uid();

  // optional .TSCE.CellValueArchive group_value = 4;
  bool has_group_value() const;
  private:
  bool _internal_has_group_value() const;
  public:
  void clear_group_value();
  const ::TSCE::CellValueArchive& group_value() const;
  PROTOBUF_NODISCARD ::TSCE::CellValueArchive* release_group_value();
  ::TSCE::CellValueArchive* mutable_group_value();
  void set_allocated_group_value(::TSCE::CellValueArchive* group_value);
  private:
  const ::TSCE::CellValueArchive& _internal_group_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_group_value();
  public:
  void unsafe_arena_set_allocated_group_value(
      ::TSCE::CellValueArchive* group_value);
  ::TSCE::CellValueArchive* unsafe_arena_release_group_value();

  // optional .TSCE.CellValueArchive undo_group_value = 5;
  bool has_undo_group_value() const;
  private:
  bool _internal_has_undo_group_value() const;
  public:
  void clear_undo_group_value();
  const ::TSCE::CellValueArchive& undo_group_value() const;
  PROTOBUF_NODISCARD ::TSCE::CellValueArchive* release_undo_group_value();
  ::TSCE::CellValueArchive* mutable_undo_group_value();
  void set_allocated_undo_group_value(::TSCE::CellValueArchive* undo_group_value);
  private:
  const ::TSCE::CellValueArchive& _internal_undo_group_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_undo_group_value();
  public:
  void unsafe_arena_set_allocated_undo_group_value(
      ::TSCE::CellValueArchive* undo_group_value);
  ::TSCE::CellValueArchive* unsafe_arena_release_undo_group_value();

  // optional .TSP.Reference rewrite_command_for_undo = 6;
  bool has_rewrite_command_for_undo() const;
  private:
  bool _internal_has_rewrite_command_for_undo() const;
  public:
  void clear_rewrite_command_for_undo();
  const ::TSP::Reference& rewrite_command_for_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_rewrite_command_for_undo();
  ::TSP::Reference* mutable_rewrite_command_for_undo();
  void set_allocated_rewrite_command_for_undo(::TSP::Reference* rewrite_command_for_undo);
  private:
  const ::TSP::Reference& _internal_rewrite_command_for_undo() const;
  ::TSP::Reference* _internal_mutable_rewrite_command_for_undo();
  public:
  void unsafe_arena_set_allocated_rewrite_command_for_undo(
      ::TSP::Reference* rewrite_command_for_undo);
  ::TSP::Reference* unsafe_arena_release_rewrite_command_for_undo();

  // @@protoc_insertion_point(class_scope:TST.CommandCategoryWillChangeGroupValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUID* group_node_uid_;
    ::TSP::UUID* undo_group_node_uid_;
    ::TSCE::CellValueArchive* group_value_;
    ::TSCE::CellValueArchive* undo_group_value_;
    ::TSP::Reference* rewrite_command_for_undo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class IdempotentSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.IdempotentSelectionTransformerArchive) */ {
 public:
  inline IdempotentSelectionTransformerArchive() : IdempotentSelectionTransformerArchive(nullptr) {}
  ~IdempotentSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR IdempotentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdempotentSelectionTransformerArchive(const IdempotentSelectionTransformerArchive& from);
  IdempotentSelectionTransformerArchive(IdempotentSelectionTransformerArchive&& from) noexcept
    : IdempotentSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline IdempotentSelectionTransformerArchive& operator=(const IdempotentSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdempotentSelectionTransformerArchive& operator=(IdempotentSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdempotentSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdempotentSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const IdempotentSelectionTransformerArchive*>(
               &_IdempotentSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(IdempotentSelectionTransformerArchive& a, IdempotentSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(IdempotentSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdempotentSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdempotentSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdempotentSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdempotentSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IdempotentSelectionTransformerArchive& from) {
    IdempotentSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdempotentSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.IdempotentSelectionTransformerArchive";
  }
  protected:
  explicit IdempotentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchivedSelectionFieldNumber = 1,
  };
  // required .TSP.Reference archived_selection = 1;
  bool has_archived_selection() const;
  private:
  bool _internal_has_archived_selection() const;
  public:
  void clear_archived_selection();
  const ::TSP::Reference& archived_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archived_selection();
  ::TSP::Reference* mutable_archived_selection();
  void set_allocated_archived_selection(::TSP::Reference* archived_selection);
  private:
  const ::TSP::Reference& _internal_archived_selection() const;
  ::TSP::Reference* _internal_mutable_archived_selection();
  public:
  void unsafe_arena_set_allocated_archived_selection(
      ::TSP::Reference* archived_selection);
  ::TSP::Reference* unsafe_arena_release_archived_selection();

  // @@protoc_insertion_point(class_scope:TST.IdempotentSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* archived_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class WPSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.WPSelectionTransformerArchive) */ {
 public:
  inline WPSelectionTransformerArchive() : WPSelectionTransformerArchive(nullptr) {}
  ~WPSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR WPSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WPSelectionTransformerArchive(const WPSelectionTransformerArchive& from);
  WPSelectionTransformerArchive(WPSelectionTransformerArchive&& from) noexcept
    : WPSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline WPSelectionTransformerArchive& operator=(const WPSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline WPSelectionTransformerArchive& operator=(WPSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WPSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const WPSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const WPSelectionTransformerArchive*>(
               &_WPSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(WPSelectionTransformerArchive& a, WPSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(WPSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WPSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WPSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WPSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WPSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WPSelectionTransformerArchive& from) {
    WPSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WPSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.WPSelectionTransformerArchive";
  }
  protected:
  explicit WPSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kArchivedSelectionFieldNumber = 2,
    kOriginCellUidFieldNumber = 3,
  };
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableSubSelectionTransformerBaseArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableSubSelectionTransformerBaseArchive* release_super();
  ::TST::TableSubSelectionTransformerBaseArchive* mutable_super();
  void set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super);
  private:
  const ::TST::TableSubSelectionTransformerBaseArchive& _internal_super() const;
  ::TST::TableSubSelectionTransformerBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableSubSelectionTransformerBaseArchive* super);
  ::TST::TableSubSelectionTransformerBaseArchive* unsafe_arena_release_super();

  // required .TSP.Reference archived_selection = 2;
  bool has_archived_selection() const;
  private:
  bool _internal_has_archived_selection() const;
  public:
  void clear_archived_selection();
  const ::TSP::Reference& archived_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archived_selection();
  ::TSP::Reference* mutable_archived_selection();
  void set_allocated_archived_selection(::TSP::Reference* archived_selection);
  private:
  const ::TSP::Reference& _internal_archived_selection() const;
  ::TSP::Reference* _internal_mutable_archived_selection();
  public:
  void unsafe_arena_set_allocated_archived_selection(
      ::TSP::Reference* archived_selection);
  ::TSP::Reference* unsafe_arena_release_archived_selection();

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  bool has_origin_cell_uid() const;
  private:
  bool _internal_has_origin_cell_uid() const;
  public:
  void clear_origin_cell_uid();
  const ::TSP::UUIDCoordArchive& origin_cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_origin_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_origin_cell_uid();
  void set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_origin_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_origin_cell_uid();
  public:
  void unsafe_arena_set_allocated_origin_cell_uid(
      ::TSP::UUIDCoordArchive* origin_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_origin_cell_uid();

  // @@protoc_insertion_point(class_scope:TST.WPSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableSubSelectionTransformerBaseArchive* super_;
    ::TSP::Reference* archived_selection_;
    ::TSP::UUIDCoordArchive* origin_cell_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TableSubSelectionTransformerBaseArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableSubSelectionTransformerBaseArchive) */ {
 public:
  inline TableSubSelectionTransformerBaseArchive() : TableSubSelectionTransformerBaseArchive(nullptr) {}
  ~TableSubSelectionTransformerBaseArchive() override;
  explicit PROTOBUF_CONSTEXPR TableSubSelectionTransformerBaseArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSubSelectionTransformerBaseArchive(const TableSubSelectionTransformerBaseArchive& from);
  TableSubSelectionTransformerBaseArchive(TableSubSelectionTransformerBaseArchive&& from) noexcept
    : TableSubSelectionTransformerBaseArchive() {
    *this = ::std::move(from);
  }

  inline TableSubSelectionTransformerBaseArchive& operator=(const TableSubSelectionTransformerBaseArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSubSelectionTransformerBaseArchive& operator=(TableSubSelectionTransformerBaseArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSubSelectionTransformerBaseArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSubSelectionTransformerBaseArchive* internal_default_instance() {
    return reinterpret_cast<const TableSubSelectionTransformerBaseArchive*>(
               &_TableSubSelectionTransformerBaseArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(TableSubSelectionTransformerBaseArchive& a, TableSubSelectionTransformerBaseArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSubSelectionTransformerBaseArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSubSelectionTransformerBaseArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableSubSelectionTransformerBaseArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableSubSelectionTransformerBaseArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableSubSelectionTransformerBaseArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableSubSelectionTransformerBaseArchive& from) {
    TableSubSelectionTransformerBaseArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSubSelectionTransformerBaseArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableSubSelectionTransformerBaseArchive";
  }
  protected:
  explicit TableSubSelectionTransformerBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableInfoIdPathFieldNumber = 1,
  };
  // required .TSP.UUIDPath table_info_id_path = 1;
  bool has_table_info_id_path() const;
  private:
  bool _internal_has_table_info_id_path() const;
  public:
  void clear_table_info_id_path();
  const ::TSP::UUIDPath& table_info_id_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_table_info_id_path();
  ::TSP::UUIDPath* mutable_table_info_id_path();
  void set_allocated_table_info_id_path(::TSP::UUIDPath* table_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_table_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_table_info_id_path();
  public:
  void unsafe_arena_set_allocated_table_info_id_path(
      ::TSP::UUIDPath* table_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_table_info_id_path();

  // @@protoc_insertion_point(class_scope:TST.TableSubSelectionTransformerBaseArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::UUIDPath* table_info_id_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TableNameSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableNameSelectionTransformerArchive) */ {
 public:
  inline TableNameSelectionTransformerArchive() : TableNameSelectionTransformerArchive(nullptr) {}
  ~TableNameSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR TableNameSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableNameSelectionTransformerArchive(const TableNameSelectionTransformerArchive& from);
  TableNameSelectionTransformerArchive(TableNameSelectionTransformerArchive&& from) noexcept
    : TableNameSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline TableNameSelectionTransformerArchive& operator=(const TableNameSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableNameSelectionTransformerArchive& operator=(TableNameSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableNameSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableNameSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const TableNameSelectionTransformerArchive*>(
               &_TableNameSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(TableNameSelectionTransformerArchive& a, TableNameSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableNameSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableNameSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableNameSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableNameSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableNameSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableNameSelectionTransformerArchive& from) {
    TableNameSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableNameSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableNameSelectionTransformerArchive";
  }
  protected:
  explicit TableNameSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableSubSelectionTransformerBaseArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableSubSelectionTransformerBaseArchive* release_super();
  ::TST::TableSubSelectionTransformerBaseArchive* mutable_super();
  void set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super);
  private:
  const ::TST::TableSubSelectionTransformerBaseArchive& _internal_super() const;
  ::TST::TableSubSelectionTransformerBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableSubSelectionTransformerBaseArchive* super);
  ::TST::TableSubSelectionTransformerBaseArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.TableNameSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableSubSelectionTransformerBaseArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ControlCellSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ControlCellSelectionTransformerArchive) */ {
 public:
  inline ControlCellSelectionTransformerArchive() : ControlCellSelectionTransformerArchive(nullptr) {}
  ~ControlCellSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR ControlCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlCellSelectionTransformerArchive(const ControlCellSelectionTransformerArchive& from);
  ControlCellSelectionTransformerArchive(ControlCellSelectionTransformerArchive&& from) noexcept
    : ControlCellSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline ControlCellSelectionTransformerArchive& operator=(const ControlCellSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCellSelectionTransformerArchive& operator=(ControlCellSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCellSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCellSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const ControlCellSelectionTransformerArchive*>(
               &_ControlCellSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(ControlCellSelectionTransformerArchive& a, ControlCellSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCellSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCellSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlCellSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlCellSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlCellSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlCellSelectionTransformerArchive& from) {
    ControlCellSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCellSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ControlCellSelectionTransformerArchive";
  }
  protected:
  explicit ControlCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidsFieldNumber = 2,
    kOriginCellUidFieldNumber = 3,
    kOriginCellIdFieldNumber = 4,
  };
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableSubSelectionTransformerBaseArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableSubSelectionTransformerBaseArchive* release_super();
  ::TST::TableSubSelectionTransformerBaseArchive* mutable_super();
  void set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super);
  private:
  const ::TST::TableSubSelectionTransformerBaseArchive& _internal_super() const;
  ::TST::TableSubSelectionTransformerBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableSubSelectionTransformerBaseArchive* super);
  ::TST::TableSubSelectionTransformerBaseArchive* unsafe_arena_release_super();

  // optional .TST.CellUIDListArchive cell_uids = 2;
  bool has_cell_uids() const;
  private:
  bool _internal_has_cell_uids() const;
  public:
  void clear_cell_uids();
  const ::TST::CellUIDListArchive& cell_uids() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_cell_uids();
  ::TST::CellUIDListArchive* mutable_cell_uids();
  void set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uids() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uids();
  public:
  void unsafe_arena_set_allocated_cell_uids(
      ::TST::CellUIDListArchive* cell_uids);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uids();

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  bool has_origin_cell_uid() const;
  private:
  bool _internal_has_origin_cell_uid() const;
  public:
  void clear_origin_cell_uid();
  const ::TSP::UUIDCoordArchive& origin_cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_origin_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_origin_cell_uid();
  void set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_origin_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_origin_cell_uid();
  public:
  void unsafe_arena_set_allocated_origin_cell_uid(
      ::TSP::UUIDCoordArchive* origin_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_origin_cell_uid();

  // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
  bool has_origin_cell_id() const;
  private:
  bool _internal_has_origin_cell_id() const;
  public:
  void clear_origin_cell_id();
  const ::TSCE::CellCoordinateArchive& origin_cell_id() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateArchive* release_origin_cell_id();
  ::TSCE::CellCoordinateArchive* mutable_origin_cell_id();
  void set_allocated_origin_cell_id(::TSCE::CellCoordinateArchive* origin_cell_id);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_origin_cell_id() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_origin_cell_id();
  public:
  void unsafe_arena_set_allocated_origin_cell_id(
      ::TSCE::CellCoordinateArchive* origin_cell_id);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_origin_cell_id();

  // @@protoc_insertion_point(class_scope:TST.ControlCellSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableSubSelectionTransformerBaseArchive* super_;
    ::TST::CellUIDListArchive* cell_uids_;
    ::TSP::UUIDCoordArchive* origin_cell_uid_;
    ::TSCE::CellCoordinateArchive* origin_cell_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StockCellSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StockCellSelectionTransformerArchive) */ {
 public:
  inline StockCellSelectionTransformerArchive() : StockCellSelectionTransformerArchive(nullptr) {}
  ~StockCellSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR StockCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StockCellSelectionTransformerArchive(const StockCellSelectionTransformerArchive& from);
  StockCellSelectionTransformerArchive(StockCellSelectionTransformerArchive&& from) noexcept
    : StockCellSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline StockCellSelectionTransformerArchive& operator=(const StockCellSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockCellSelectionTransformerArchive& operator=(StockCellSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockCellSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockCellSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const StockCellSelectionTransformerArchive*>(
               &_StockCellSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(StockCellSelectionTransformerArchive& a, StockCellSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StockCellSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockCellSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StockCellSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StockCellSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StockCellSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StockCellSelectionTransformerArchive& from) {
    StockCellSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockCellSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StockCellSelectionTransformerArchive";
  }
  protected:
  explicit StockCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidsFieldNumber = 2,
    kOriginCellUidFieldNumber = 3,
    kOriginCellIdFieldNumber = 4,
  };
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableSubSelectionTransformerBaseArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableSubSelectionTransformerBaseArchive* release_super();
  ::TST::TableSubSelectionTransformerBaseArchive* mutable_super();
  void set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super);
  private:
  const ::TST::TableSubSelectionTransformerBaseArchive& _internal_super() const;
  ::TST::TableSubSelectionTransformerBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableSubSelectionTransformerBaseArchive* super);
  ::TST::TableSubSelectionTransformerBaseArchive* unsafe_arena_release_super();

  // optional .TST.CellUIDListArchive cell_uids = 2;
  bool has_cell_uids() const;
  private:
  bool _internal_has_cell_uids() const;
  public:
  void clear_cell_uids();
  const ::TST::CellUIDListArchive& cell_uids() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_cell_uids();
  ::TST::CellUIDListArchive* mutable_cell_uids();
  void set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uids() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uids();
  public:
  void unsafe_arena_set_allocated_cell_uids(
      ::TST::CellUIDListArchive* cell_uids);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uids();

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  bool has_origin_cell_uid() const;
  private:
  bool _internal_has_origin_cell_uid() const;
  public:
  void clear_origin_cell_uid();
  const ::TSP::UUIDCoordArchive& origin_cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_origin_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_origin_cell_uid();
  void set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_origin_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_origin_cell_uid();
  public:
  void unsafe_arena_set_allocated_origin_cell_uid(
      ::TSP::UUIDCoordArchive* origin_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_origin_cell_uid();

  // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
  bool has_origin_cell_id() const;
  private:
  bool _internal_has_origin_cell_id() const;
  public:
  void clear_origin_cell_id();
  const ::TSCE::CellCoordinateArchive& origin_cell_id() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateArchive* release_origin_cell_id();
  ::TSCE::CellCoordinateArchive* mutable_origin_cell_id();
  void set_allocated_origin_cell_id(::TSCE::CellCoordinateArchive* origin_cell_id);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_origin_cell_id() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_origin_cell_id();
  public:
  void unsafe_arena_set_allocated_origin_cell_id(
      ::TSCE::CellCoordinateArchive* origin_cell_id);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_origin_cell_id();

  // @@protoc_insertion_point(class_scope:TST.StockCellSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableSubSelectionTransformerBaseArchive* super_;
    ::TST::CellUIDListArchive* cell_uids_;
    ::TSP::UUIDCoordArchive* origin_cell_uid_;
    ::TSCE::CellCoordinateArchive* origin_cell_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RegionSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.RegionSelectionTransformerArchive) */ {
 public:
  inline RegionSelectionTransformerArchive() : RegionSelectionTransformerArchive(nullptr) {}
  ~RegionSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR RegionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionSelectionTransformerArchive(const RegionSelectionTransformerArchive& from);
  RegionSelectionTransformerArchive(RegionSelectionTransformerArchive&& from) noexcept
    : RegionSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline RegionSelectionTransformerArchive& operator=(const RegionSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionSelectionTransformerArchive& operator=(RegionSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const RegionSelectionTransformerArchive*>(
               &_RegionSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(RegionSelectionTransformerArchive& a, RegionSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegionSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegionSelectionTransformerArchive& from) {
    RegionSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.RegionSelectionTransformerArchive";
  }
  protected:
  explicit RegionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellUidsFieldNumber = 2,
    kOriginCellUidFieldNumber = 3,
    kAnchorCellUidFieldNumber = 4,
    kCursorCellUidFieldNumber = 5,
  };
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableSubSelectionTransformerBaseArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableSubSelectionTransformerBaseArchive* release_super();
  ::TST::TableSubSelectionTransformerBaseArchive* mutable_super();
  void set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super);
  private:
  const ::TST::TableSubSelectionTransformerBaseArchive& _internal_super() const;
  ::TST::TableSubSelectionTransformerBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableSubSelectionTransformerBaseArchive* super);
  ::TST::TableSubSelectionTransformerBaseArchive* unsafe_arena_release_super();

  // optional .TST.CellUIDListArchive cell_uids = 2;
  bool has_cell_uids() const;
  private:
  bool _internal_has_cell_uids() const;
  public:
  void clear_cell_uids();
  const ::TST::CellUIDListArchive& cell_uids() const;
  PROTOBUF_NODISCARD ::TST::CellUIDListArchive* release_cell_uids();
  ::TST::CellUIDListArchive* mutable_cell_uids();
  void set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uids() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uids();
  public:
  void unsafe_arena_set_allocated_cell_uids(
      ::TST::CellUIDListArchive* cell_uids);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uids();

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  bool has_origin_cell_uid() const;
  private:
  bool _internal_has_origin_cell_uid() const;
  public:
  void clear_origin_cell_uid();
  const ::TSP::UUIDCoordArchive& origin_cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_origin_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_origin_cell_uid();
  void set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_origin_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_origin_cell_uid();
  public:
  void unsafe_arena_set_allocated_origin_cell_uid(
      ::TSP::UUIDCoordArchive* origin_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_origin_cell_uid();

  // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
  bool has_anchor_cell_uid() const;
  private:
  bool _internal_has_anchor_cell_uid() const;
  public:
  void clear_anchor_cell_uid();
  const ::TSP::UUIDCoordArchive& anchor_cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_anchor_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_anchor_cell_uid();
  void set_allocated_anchor_cell_uid(::TSP::UUIDCoordArchive* anchor_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_anchor_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_anchor_cell_uid();
  public:
  void unsafe_arena_set_allocated_anchor_cell_uid(
      ::TSP::UUIDCoordArchive* anchor_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_anchor_cell_uid();

  // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
  bool has_cursor_cell_uid() const;
  private:
  bool _internal_has_cursor_cell_uid() const;
  public:
  void clear_cursor_cell_uid();
  const ::TSP::UUIDCoordArchive& cursor_cell_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUIDCoordArchive* release_cursor_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_cursor_cell_uid();
  void set_allocated_cursor_cell_uid(::TSP::UUIDCoordArchive* cursor_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_cursor_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_cursor_cell_uid();
  public:
  void unsafe_arena_set_allocated_cursor_cell_uid(
      ::TSP::UUIDCoordArchive* cursor_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_cursor_cell_uid();

  // @@protoc_insertion_point(class_scope:TST.RegionSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableSubSelectionTransformerBaseArchive* super_;
    ::TST::CellUIDListArchive* cell_uids_;
    ::TSP::UUIDCoordArchive* origin_cell_uid_;
    ::TSP::UUIDCoordArchive* anchor_cell_uid_;
    ::TSP::UUIDCoordArchive* cursor_cell_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StrokeSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StrokeSelectionTransformerArchive) */ {
 public:
  inline StrokeSelectionTransformerArchive() : StrokeSelectionTransformerArchive(nullptr) {}
  ~StrokeSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR StrokeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrokeSelectionTransformerArchive(const StrokeSelectionTransformerArchive& from);
  StrokeSelectionTransformerArchive(StrokeSelectionTransformerArchive&& from) noexcept
    : StrokeSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline StrokeSelectionTransformerArchive& operator=(const StrokeSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrokeSelectionTransformerArchive& operator=(StrokeSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrokeSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrokeSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const StrokeSelectionTransformerArchive*>(
               &_StrokeSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(StrokeSelectionTransformerArchive& a, StrokeSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StrokeSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrokeSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrokeSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrokeSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StrokeSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StrokeSelectionTransformerArchive& from) {
    StrokeSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrokeSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StrokeSelectionTransformerArchive";
  }
  protected:
  explicit StrokeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kArchivedSelectionFieldNumber = 2,
  };
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableSubSelectionTransformerBaseArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableSubSelectionTransformerBaseArchive* release_super();
  ::TST::TableSubSelectionTransformerBaseArchive* mutable_super();
  void set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super);
  private:
  const ::TST::TableSubSelectionTransformerBaseArchive& _internal_super() const;
  ::TST::TableSubSelectionTransformerBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableSubSelectionTransformerBaseArchive* super);
  ::TST::TableSubSelectionTransformerBaseArchive* unsafe_arena_release_super();

  // required .TSP.Reference archived_selection = 2;
  bool has_archived_selection() const;
  private:
  bool _internal_has_archived_selection() const;
  public:
  void clear_archived_selection();
  const ::TSP::Reference& archived_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archived_selection();
  ::TSP::Reference* mutable_archived_selection();
  void set_allocated_archived_selection(::TSP::Reference* archived_selection);
  private:
  const ::TSP::Reference& _internal_archived_selection() const;
  ::TSP::Reference* _internal_mutable_archived_selection();
  public:
  void unsafe_arena_set_allocated_archived_selection(
      ::TSP::Reference* archived_selection);
  ::TSP::Reference* unsafe_arena_release_archived_selection();

  // @@protoc_insertion_point(class_scope:TST.StrokeSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableSubSelectionTransformerBaseArchive* super_;
    ::TSP::Reference* archived_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RowColumnSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.RowColumnSelectionTransformerArchive) */ {
 public:
  inline RowColumnSelectionTransformerArchive() : RowColumnSelectionTransformerArchive(nullptr) {}
  ~RowColumnSelectionTransformerArchive() override;
  explicit PROTOBUF_CONSTEXPR RowColumnSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RowColumnSelectionTransformerArchive(const RowColumnSelectionTransformerArchive& from);
  RowColumnSelectionTransformerArchive(RowColumnSelectionTransformerArchive&& from) noexcept
    : RowColumnSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline RowColumnSelectionTransformerArchive& operator=(const RowColumnSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowColumnSelectionTransformerArchive& operator=(RowColumnSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowColumnSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowColumnSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const RowColumnSelectionTransformerArchive*>(
               &_RowColumnSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(RowColumnSelectionTransformerArchive& a, RowColumnSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RowColumnSelectionTransformerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowColumnSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowColumnSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RowColumnSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RowColumnSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RowColumnSelectionTransformerArchive& from) {
    RowColumnSelectionTransformerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowColumnSelectionTransformerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.RowColumnSelectionTransformerArchive";
  }
  protected:
  explicit RowColumnSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowColUidsFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSelectionTypeFieldNumber = 2,
  };
  // repeated .TSP.UUID row_col_uids = 3;
  int row_col_uids_size() const;
  private:
  int _internal_row_col_uids_size() const;
  public:
  void clear_row_col_uids();
  ::TSP::UUID* mutable_row_col_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_col_uids();
  private:
  const ::TSP::UUID& _internal_row_col_uids(int index) const;
  ::TSP::UUID* _internal_add_row_col_uids();
  public:
  const ::TSP::UUID& row_col_uids(int index) const;
  ::TSP::UUID* add_row_col_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_col_uids() const;

  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableSubSelectionTransformerBaseArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableSubSelectionTransformerBaseArchive* release_super();
  ::TST::TableSubSelectionTransformerBaseArchive* mutable_super();
  void set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super);
  private:
  const ::TST::TableSubSelectionTransformerBaseArchive& _internal_super() const;
  ::TST::TableSubSelectionTransformerBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableSubSelectionTransformerBaseArchive* super);
  ::TST::TableSubSelectionTransformerBaseArchive* unsafe_arena_release_super();

  // required .TST.SelectionTypeArchive selection_type = 2;
  bool has_selection_type() const;
  private:
  bool _internal_has_selection_type() const;
  public:
  void clear_selection_type();
  ::TST::SelectionTypeArchive selection_type() const;
  void set_selection_type(::TST::SelectionTypeArchive value);
  private:
  ::TST::SelectionTypeArchive _internal_selection_type() const;
  void _internal_set_selection_type(::TST::SelectionTypeArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.RowColumnSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_col_uids_;
    ::TST::TableSubSelectionTransformerBaseArchive* super_;
    int selection_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCategoryMoveRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCategoryMoveRowsArchive) */ {
 public:
  inline CommandCategoryMoveRowsArchive() : CommandCategoryMoveRowsArchive(nullptr) {}
  ~CommandCategoryMoveRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandCategoryMoveRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCategoryMoveRowsArchive(const CommandCategoryMoveRowsArchive& from);
  CommandCategoryMoveRowsArchive(CommandCategoryMoveRowsArchive&& from) noexcept
    : CommandCategoryMoveRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandCategoryMoveRowsArchive& operator=(const CommandCategoryMoveRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCategoryMoveRowsArchive& operator=(CommandCategoryMoveRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCategoryMoveRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCategoryMoveRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandCategoryMoveRowsArchive*>(
               &_CommandCategoryMoveRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CommandCategoryMoveRowsArchive& a, CommandCategoryMoveRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCategoryMoveRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCategoryMoveRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCategoryMoveRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCategoryMoveRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCategoryMoveRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCategoryMoveRowsArchive& from) {
    CommandCategoryMoveRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCategoryMoveRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCategoryMoveRowsArchive";
  }
  protected:
  explicit CommandCategoryMoveRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryRowOrderFieldNumber = 3,
    kUndoCategoryRowOrderFieldNumber = 4,
    kSuperFieldNumber = 1,
    kCellDiffMapFieldNumber = 5,
    kUndoCellDiffMapFieldNumber = 6,
    kGroupingColumnsFieldNumber = 7,
    kActionTypeFieldNumber = 2,
  };
  // repeated .TSP.UUID category_row_order = 3;
  int category_row_order_size() const;
  private:
  int _internal_category_row_order_size() const;
  public:
  void clear_category_row_order();
  ::TSP::UUID* mutable_category_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_category_row_order();
  private:
  const ::TSP::UUID& _internal_category_row_order(int index) const;
  ::TSP::UUID* _internal_add_category_row_order();
  public:
  const ::TSP::UUID& category_row_order(int index) const;
  ::TSP::UUID* add_category_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      category_row_order() const;

  // repeated .TSP.UUID undo_category_row_order = 4;
  int undo_category_row_order_size() const;
  private:
  int _internal_undo_category_row_order_size() const;
  public:
  void clear_undo_category_row_order();
  ::TSP::UUID* mutable_undo_category_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_category_row_order();
  private:
  const ::TSP::UUID& _internal_undo_category_row_order(int index) const;
  ::TSP::UUID* _internal_add_undo_category_row_order();
  public:
  const ::TSP::UUID& undo_category_row_order(int index) const;
  ::TSP::UUID* add_undo_category_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_category_row_order() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference cell_diff_map = 5;
  bool has_cell_diff_map() const;
  private:
  bool _internal_has_cell_diff_map() const;
  public:
  void clear_cell_diff_map();
  const ::TSP::Reference& cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_diff_map();
  ::TSP::Reference* mutable_cell_diff_map();
  void set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map);
  private:
  const ::TSP::Reference& _internal_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_cell_diff_map(
      ::TSP::Reference* cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_cell_diff_map();

  // optional .TSP.Reference undo_cell_diff_map = 6;
  bool has_undo_cell_diff_map() const;
  private:
  bool _internal_has_undo_cell_diff_map() const;
  public:
  void clear_undo_cell_diff_map();
  const ::TSP::Reference& undo_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_cell_diff_map();
  ::TSP::Reference* mutable_undo_cell_diff_map();
  void set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map);
  private:
  const ::TSP::Reference& _internal_undo_cell_diff_map() const;
  ::TSP::Reference* _internal_mutable_undo_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_diff_map(
      ::TSP::Reference* undo_cell_diff_map);
  ::TSP::Reference* unsafe_arena_release_undo_cell_diff_map();

  // optional .TST.GroupColumnListArchive grouping_columns = 7;
  bool has_grouping_columns() const;
  private:
  bool _internal_has_grouping_columns() const;
  public:
  void clear_grouping_columns();
  const ::TST::GroupColumnListArchive& grouping_columns() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_grouping_columns();
  ::TST::GroupColumnListArchive* mutable_grouping_columns();
  void set_allocated_grouping_columns(::TST::GroupColumnListArchive* grouping_columns);
  private:
  const ::TST::GroupColumnListArchive& _internal_grouping_columns() const;
  ::TST::GroupColumnListArchive* _internal_mutable_grouping_columns();
  public:
  void unsafe_arena_set_allocated_grouping_columns(
      ::TST::GroupColumnListArchive* grouping_columns);
  ::TST::GroupColumnListArchive* unsafe_arena_release_grouping_columns();

  // required uint32 action_type = 2;
  bool has_action_type() const;
  private:
  bool _internal_has_action_type() const;
  public:
  void clear_action_type();
  uint32_t action_type() const;
  void set_action_type(uint32_t value);
  private:
  uint32_t _internal_action_type() const;
  void _internal_set_action_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandCategoryMoveRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > category_row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_category_row_order_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* cell_diff_map_;
    ::TSP::Reference* undo_cell_diff_map_;
    ::TST::GroupColumnListArchive* grouping_columns_;
    uint32_t action_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteHiddenStatesForGroupByChangeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteHiddenStatesForGroupByChangeArchive) */ {
 public:
  inline CommandRewriteHiddenStatesForGroupByChangeArchive() : CommandRewriteHiddenStatesForGroupByChangeArchive(nullptr) {}
  ~CommandRewriteHiddenStatesForGroupByChangeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteHiddenStatesForGroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteHiddenStatesForGroupByChangeArchive(const CommandRewriteHiddenStatesForGroupByChangeArchive& from);
  CommandRewriteHiddenStatesForGroupByChangeArchive(CommandRewriteHiddenStatesForGroupByChangeArchive&& from) noexcept
    : CommandRewriteHiddenStatesForGroupByChangeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteHiddenStatesForGroupByChangeArchive& operator=(const CommandRewriteHiddenStatesForGroupByChangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteHiddenStatesForGroupByChangeArchive& operator=(CommandRewriteHiddenStatesForGroupByChangeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteHiddenStatesForGroupByChangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteHiddenStatesForGroupByChangeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteHiddenStatesForGroupByChangeArchive*>(
               &_CommandRewriteHiddenStatesForGroupByChangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CommandRewriteHiddenStatesForGroupByChangeArchive& a, CommandRewriteHiddenStatesForGroupByChangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteHiddenStatesForGroupByChangeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteHiddenStatesForGroupByChangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteHiddenStatesForGroupByChangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteHiddenStatesForGroupByChangeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteHiddenStatesForGroupByChangeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteHiddenStatesForGroupByChangeArchive& from) {
    CommandRewriteHiddenStatesForGroupByChangeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteHiddenStatesForGroupByChangeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteHiddenStatesForGroupByChangeArchive";
  }
  protected:
  explicit CommandRewriteHiddenStatesForGroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kGroupByChangeFieldNumber = 2,
    kCollapsedStateFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSCE.GroupByChangeArchive group_by_change = 2;
  bool has_group_by_change() const;
  private:
  bool _internal_has_group_by_change() const;
  public:
  void clear_group_by_change();
  const ::TSCE::GroupByChangeArchive& group_by_change() const;
  PROTOBUF_NODISCARD ::TSCE::GroupByChangeArchive* release_group_by_change();
  ::TSCE::GroupByChangeArchive* mutable_group_by_change();
  void set_allocated_group_by_change(::TSCE::GroupByChangeArchive* group_by_change);
  private:
  const ::TSCE::GroupByChangeArchive& _internal_group_by_change() const;
  ::TSCE::GroupByChangeArchive* _internal_mutable_group_by_change();
  public:
  void unsafe_arena_set_allocated_group_by_change(
      ::TSCE::GroupByChangeArchive* group_by_change);
  ::TSCE::GroupByChangeArchive* unsafe_arena_release_group_by_change();

  // optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
  bool has_collapsed_state() const;
  private:
  bool _internal_has_collapsed_state() const;
  public:
  void clear_collapsed_state();
  const ::TST::ExpandCollapseStateArchive& collapsed_state() const;
  PROTOBUF_NODISCARD ::TST::ExpandCollapseStateArchive* release_collapsed_state();
  ::TST::ExpandCollapseStateArchive* mutable_collapsed_state();
  void set_allocated_collapsed_state(::TST::ExpandCollapseStateArchive* collapsed_state);
  private:
  const ::TST::ExpandCollapseStateArchive& _internal_collapsed_state() const;
  ::TST::ExpandCollapseStateArchive* _internal_mutable_collapsed_state();
  public:
  void unsafe_arena_set_allocated_collapsed_state(
      ::TST::ExpandCollapseStateArchive* collapsed_state);
  ::TST::ExpandCollapseStateArchive* unsafe_arena_release_collapsed_state();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::GroupByChangeArchive* group_by_change_;
    ::TST::ExpandCollapseStateArchive* collapsed_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewritePencilAnnotationFormulasArchive_AnnotationPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair) */ {
 public:
  inline CommandRewritePencilAnnotationFormulasArchive_AnnotationPair() : CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(nullptr) {}
  ~CommandRewritePencilAnnotationFormulasArchive_AnnotationPair() override;
  explicit PROTOBUF_CONSTEXPR CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from);
  CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair&& from) noexcept
    : CommandRewritePencilAnnotationFormulasArchive_AnnotationPair() {
    *this = ::std::move(from);
  }

  inline CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& operator=(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& operator=(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* internal_default_instance() {
    return reinterpret_cast<const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair*>(
               &_CommandRewritePencilAnnotationFormulasArchive_AnnotationPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& a, CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewritePencilAnnotationFormulasArchive_AnnotationPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from) {
    CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair";
  }
  protected:
  explicit CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // required .TSP.Reference annotation = 2;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::TSP::Reference& annotation() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_annotation();
  ::TSP::Reference* mutable_annotation();
  void set_allocated_annotation(::TSP::Reference* annotation);
  private:
  const ::TSP::Reference& _internal_annotation() const;
  ::TSP::Reference* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::TSP::Reference* annotation);
  ::TSP::Reference* unsafe_arena_release_annotation();

  // required uint64 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* annotation_;
    uint64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewritePencilAnnotationFormulasArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewritePencilAnnotationFormulasArchive) */ {
 public:
  inline CommandRewritePencilAnnotationFormulasArchive() : CommandRewritePencilAnnotationFormulasArchive(nullptr) {}
  ~CommandRewritePencilAnnotationFormulasArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewritePencilAnnotationFormulasArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewritePencilAnnotationFormulasArchive(const CommandRewritePencilAnnotationFormulasArchive& from);
  CommandRewritePencilAnnotationFormulasArchive(CommandRewritePencilAnnotationFormulasArchive&& from) noexcept
    : CommandRewritePencilAnnotationFormulasArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewritePencilAnnotationFormulasArchive& operator=(const CommandRewritePencilAnnotationFormulasArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewritePencilAnnotationFormulasArchive& operator=(CommandRewritePencilAnnotationFormulasArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewritePencilAnnotationFormulasArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewritePencilAnnotationFormulasArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewritePencilAnnotationFormulasArchive*>(
               &_CommandRewritePencilAnnotationFormulasArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CommandRewritePencilAnnotationFormulasArchive& a, CommandRewritePencilAnnotationFormulasArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewritePencilAnnotationFormulasArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewritePencilAnnotationFormulasArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewritePencilAnnotationFormulasArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewritePencilAnnotationFormulasArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewritePencilAnnotationFormulasArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewritePencilAnnotationFormulasArchive& from) {
    CommandRewritePencilAnnotationFormulasArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewritePencilAnnotationFormulasArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewritePencilAnnotationFormulasArchive";
  }
  protected:
  explicit CommandRewritePencilAnnotationFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandRewritePencilAnnotationFormulasArchive_AnnotationPair AnnotationPair;

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsForUndoFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kFormulasToRewriteFieldNumber = 3,
  };
  // repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
  int annotations_for_undo_size() const;
  private:
  int _internal_annotations_for_undo_size() const;
  public:
  void clear_annotations_for_undo();
  ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* mutable_annotations_for_undo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >*
      mutable_annotations_for_undo();
  private:
  const ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& _internal_annotations_for_undo(int index) const;
  ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* _internal_add_annotations_for_undo();
  public:
  const ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& annotations_for_undo(int index) const;
  ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* add_annotations_for_undo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >&
      annotations_for_undo() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  bool has_formulas_to_rewrite() const;
  private:
  bool _internal_has_formulas_to_rewrite() const;
  public:
  void clear_formulas_to_rewrite();
  const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::FormulasForUndoArchive* release_formulas_to_rewrite();
  ::TSCE::FormulasForUndoArchive* mutable_formulas_to_rewrite();
  void set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  private:
  const ::TSCE::FormulasForUndoArchive& _internal_formulas_to_rewrite() const;
  ::TSCE::FormulasForUndoArchive* _internal_mutable_formulas_to_rewrite();
  public:
  void unsafe_arena_set_allocated_formulas_to_rewrite(
      ::TSCE::FormulasForUndoArchive* formulas_to_rewrite);
  ::TSCE::FormulasForUndoArchive* unsafe_arena_release_formulas_to_rewrite();

  // @@protoc_insertion_point(class_scope:TST.CommandRewritePencilAnnotationFormulasArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair > annotations_for_undo_;
    ::TST::TableCommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPivotSetPivotRulesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandPivotSetPivotRulesArchive) */ {
 public:
  inline CommandPivotSetPivotRulesArchive() : CommandPivotSetPivotRulesArchive(nullptr) {}
  ~CommandPivotSetPivotRulesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPivotSetPivotRulesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPivotSetPivotRulesArchive(const CommandPivotSetPivotRulesArchive& from);
  CommandPivotSetPivotRulesArchive(CommandPivotSetPivotRulesArchive&& from) noexcept
    : CommandPivotSetPivotRulesArchive() {
    *this = ::std::move(from);
  }

  inline CommandPivotSetPivotRulesArchive& operator=(const CommandPivotSetPivotRulesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPivotSetPivotRulesArchive& operator=(CommandPivotSetPivotRulesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPivotSetPivotRulesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPivotSetPivotRulesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPivotSetPivotRulesArchive*>(
               &_CommandPivotSetPivotRulesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CommandPivotSetPivotRulesArchive& a, CommandPivotSetPivotRulesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPivotSetPivotRulesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPivotSetPivotRulesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPivotSetPivotRulesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPivotSetPivotRulesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPivotSetPivotRulesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPivotSetPivotRulesArchive& from) {
    CommandPivotSetPivotRulesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPivotSetPivotRulesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandPivotSetPivotRulesArchive";
  }
  protected:
  explicit CommandPivotSetPivotRulesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewViewRowOrderFieldNumber = 19,
    kOldViewRowOrderFieldNumber = 20,
    kNewViewColumnOrderFieldNumber = 21,
    kOldViewColumnOrderFieldNumber = 22,
    kNewCollapsedRowGroupsFieldNumber = 23,
    kOldCollapsedRowGroupsFieldNumber = 24,
    kNewCollapsedColumnGroupsFieldNumber = 25,
    kOldCollapsedColumnGroupsFieldNumber = 26,
    kSuperFieldNumber = 1,
    kNewTargetPivotRefreshUidFieldNumber = 2,
    kNewRowGroupingsFieldNumber = 3,
    kOldRowGroupingsFieldNumber = 4,
    kNewColumnGroupingsFieldNumber = 5,
    kOldColumnGroupingsFieldNumber = 6,
    kNewAggregatesFieldNumber = 7,
    kOldAggregatesFieldNumber = 8,
    kNewPivotDataModelFieldNumber = 11,
    kOldPivotDataModelFieldNumber = 12,
    kNewPivotRefreshUidFieldNumber = 13,
    kOldPivotRefreshUidFieldNumber = 14,
    kNewOptionsMapFieldNumber = 17,
    kOldOptionsMapFieldNumber = 18,
    kNewHierarchicalCellDiffMapFieldNumber = 27,
    kOldHierarchicalCellDiffMapFieldNumber = 28,
    kFormulaRewriteCommandForUndoFieldNumber = 29,
    kNewBodyUidTractFieldNumber = 30,
    kOldBodyUidTractFieldNumber = 31,
    kOldTargetPivotRefreshUidFieldNumber = 32,
    kNewTargetPivotRowColumnRuleChangeUidFieldNumber = 33,
    kOldTargetPivotRowColumnRuleChangeUidFieldNumber = 34,
    kNewTargetPivotAggregateRuleChangeUidFieldNumber = 35,
    kOldTargetPivotAggregateRuleChangeUidFieldNumber = 36,
    kNewFilterSetFieldNumber = 39,
    kOldFilterSetFieldNumber = 40,
    kNewPivotRefreshTimestampFieldNumber = 15,
    kOldPivotRefreshTimestampFieldNumber = 16,
    kIsOrderFinalizedFieldNumber = 37,
    kUseSmallTableLimitsFieldNumber = 41,
    kSettingFiltersEnabledFieldNumber = 42,
    kUndoSettingFiltersEnabledFieldNumber = 43,
    kNewFlatteningDimensionFieldNumber = 9,
    kOldFlatteningDimensionFieldNumber = 10,
  };
  // repeated .TSP.UUID new_view_row_order = 19;
  int new_view_row_order_size() const;
  private:
  int _internal_new_view_row_order_size() const;
  public:
  void clear_new_view_row_order();
  ::TSP::UUID* mutable_new_view_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_new_view_row_order();
  private:
  const ::TSP::UUID& _internal_new_view_row_order(int index) const;
  ::TSP::UUID* _internal_add_new_view_row_order();
  public:
  const ::TSP::UUID& new_view_row_order(int index) const;
  ::TSP::UUID* add_new_view_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      new_view_row_order() const;

  // repeated .TSP.UUID old_view_row_order = 20;
  int old_view_row_order_size() const;
  private:
  int _internal_old_view_row_order_size() const;
  public:
  void clear_old_view_row_order();
  ::TSP::UUID* mutable_old_view_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_old_view_row_order();
  private:
  const ::TSP::UUID& _internal_old_view_row_order(int index) const;
  ::TSP::UUID* _internal_add_old_view_row_order();
  public:
  const ::TSP::UUID& old_view_row_order(int index) const;
  ::TSP::UUID* add_old_view_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      old_view_row_order() const;

  // repeated .TSP.UUID new_view_column_order = 21;
  int new_view_column_order_size() const;
  private:
  int _internal_new_view_column_order_size() const;
  public:
  void clear_new_view_column_order();
  ::TSP::UUID* mutable_new_view_column_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_new_view_column_order();
  private:
  const ::TSP::UUID& _internal_new_view_column_order(int index) const;
  ::TSP::UUID* _internal_add_new_view_column_order();
  public:
  const ::TSP::UUID& new_view_column_order(int index) const;
  ::TSP::UUID* add_new_view_column_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      new_view_column_order() const;

  // repeated .TSP.UUID old_view_column_order = 22;
  int old_view_column_order_size() const;
  private:
  int _internal_old_view_column_order_size() const;
  public:
  void clear_old_view_column_order();
  ::TSP::UUID* mutable_old_view_column_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_old_view_column_order();
  private:
  const ::TSP::UUID& _internal_old_view_column_order(int index) const;
  ::TSP::UUID* _internal_add_old_view_column_order();
  public:
  const ::TSP::UUID& old_view_column_order(int index) const;
  ::TSP::UUID* add_old_view_column_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      old_view_column_order() const;

  // repeated .TSP.UUID new_collapsed_row_groups = 23;
  int new_collapsed_row_groups_size() const;
  private:
  int _internal_new_collapsed_row_groups_size() const;
  public:
  void clear_new_collapsed_row_groups();
  ::TSP::UUID* mutable_new_collapsed_row_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_new_collapsed_row_groups();
  private:
  const ::TSP::UUID& _internal_new_collapsed_row_groups(int index) const;
  ::TSP::UUID* _internal_add_new_collapsed_row_groups();
  public:
  const ::TSP::UUID& new_collapsed_row_groups(int index) const;
  ::TSP::UUID* add_new_collapsed_row_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      new_collapsed_row_groups() const;

  // repeated .TSP.UUID old_collapsed_row_groups = 24;
  int old_collapsed_row_groups_size() const;
  private:
  int _internal_old_collapsed_row_groups_size() const;
  public:
  void clear_old_collapsed_row_groups();
  ::TSP::UUID* mutable_old_collapsed_row_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_old_collapsed_row_groups();
  private:
  const ::TSP::UUID& _internal_old_collapsed_row_groups(int index) const;
  ::TSP::UUID* _internal_add_old_collapsed_row_groups();
  public:
  const ::TSP::UUID& old_collapsed_row_groups(int index) const;
  ::TSP::UUID* add_old_collapsed_row_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      old_collapsed_row_groups() const;

  // repeated .TSP.UUID new_collapsed_column_groups = 25;
  int new_collapsed_column_groups_size() const;
  private:
  int _internal_new_collapsed_column_groups_size() const;
  public:
  void clear_new_collapsed_column_groups();
  ::TSP::UUID* mutable_new_collapsed_column_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_new_collapsed_column_groups();
  private:
  const ::TSP::UUID& _internal_new_collapsed_column_groups(int index) const;
  ::TSP::UUID* _internal_add_new_collapsed_column_groups();
  public:
  const ::TSP::UUID& new_collapsed_column_groups(int index) const;
  ::TSP::UUID* add_new_collapsed_column_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      new_collapsed_column_groups() const;

  // repeated .TSP.UUID old_collapsed_column_groups = 26;
  int old_collapsed_column_groups_size() const;
  private:
  int _internal_old_collapsed_column_groups_size() const;
  public:
  void clear_old_collapsed_column_groups();
  ::TSP::UUID* mutable_old_collapsed_column_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_old_collapsed_column_groups();
  private:
  const ::TSP::UUID& _internal_old_collapsed_column_groups(int index) const;
  ::TSP::UUID* _internal_add_old_collapsed_column_groups();
  public:
  const ::TSP::UUID& old_collapsed_column_groups(int index) const;
  ::TSP::UUID* add_old_collapsed_column_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      old_collapsed_column_groups() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID new_target_pivot_refresh_uid = 2;
  bool has_new_target_pivot_refresh_uid() const;
  private:
  bool _internal_has_new_target_pivot_refresh_uid() const;
  public:
  void clear_new_target_pivot_refresh_uid();
  const ::TSP::UUID& new_target_pivot_refresh_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_new_target_pivot_refresh_uid();
  ::TSP::UUID* mutable_new_target_pivot_refresh_uid();
  void set_allocated_new_target_pivot_refresh_uid(::TSP::UUID* new_target_pivot_refresh_uid);
  private:
  const ::TSP::UUID& _internal_new_target_pivot_refresh_uid() const;
  ::TSP::UUID* _internal_mutable_new_target_pivot_refresh_uid();
  public:
  void unsafe_arena_set_allocated_new_target_pivot_refresh_uid(
      ::TSP::UUID* new_target_pivot_refresh_uid);
  ::TSP::UUID* unsafe_arena_release_new_target_pivot_refresh_uid();

  // optional .TST.GroupColumnListArchive new_row_groupings = 3;
  bool has_new_row_groupings() const;
  private:
  bool _internal_has_new_row_groupings() const;
  public:
  void clear_new_row_groupings();
  const ::TST::GroupColumnListArchive& new_row_groupings() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_new_row_groupings();
  ::TST::GroupColumnListArchive* mutable_new_row_groupings();
  void set_allocated_new_row_groupings(::TST::GroupColumnListArchive* new_row_groupings);
  private:
  const ::TST::GroupColumnListArchive& _internal_new_row_groupings() const;
  ::TST::GroupColumnListArchive* _internal_mutable_new_row_groupings();
  public:
  void unsafe_arena_set_allocated_new_row_groupings(
      ::TST::GroupColumnListArchive* new_row_groupings);
  ::TST::GroupColumnListArchive* unsafe_arena_release_new_row_groupings();

  // optional .TST.GroupColumnListArchive old_row_groupings = 4;
  bool has_old_row_groupings() const;
  private:
  bool _internal_has_old_row_groupings() const;
  public:
  void clear_old_row_groupings();
  const ::TST::GroupColumnListArchive& old_row_groupings() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_old_row_groupings();
  ::TST::GroupColumnListArchive* mutable_old_row_groupings();
  void set_allocated_old_row_groupings(::TST::GroupColumnListArchive* old_row_groupings);
  private:
  const ::TST::GroupColumnListArchive& _internal_old_row_groupings() const;
  ::TST::GroupColumnListArchive* _internal_mutable_old_row_groupings();
  public:
  void unsafe_arena_set_allocated_old_row_groupings(
      ::TST::GroupColumnListArchive* old_row_groupings);
  ::TST::GroupColumnListArchive* unsafe_arena_release_old_row_groupings();

  // optional .TST.GroupColumnListArchive new_column_groupings = 5;
  bool has_new_column_groupings() const;
  private:
  bool _internal_has_new_column_groupings() const;
  public:
  void clear_new_column_groupings();
  const ::TST::GroupColumnListArchive& new_column_groupings() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_new_column_groupings();
  ::TST::GroupColumnListArchive* mutable_new_column_groupings();
  void set_allocated_new_column_groupings(::TST::GroupColumnListArchive* new_column_groupings);
  private:
  const ::TST::GroupColumnListArchive& _internal_new_column_groupings() const;
  ::TST::GroupColumnListArchive* _internal_mutable_new_column_groupings();
  public:
  void unsafe_arena_set_allocated_new_column_groupings(
      ::TST::GroupColumnListArchive* new_column_groupings);
  ::TST::GroupColumnListArchive* unsafe_arena_release_new_column_groupings();

  // optional .TST.GroupColumnListArchive old_column_groupings = 6;
  bool has_old_column_groupings() const;
  private:
  bool _internal_has_old_column_groupings() const;
  public:
  void clear_old_column_groupings();
  const ::TST::GroupColumnListArchive& old_column_groupings() const;
  PROTOBUF_NODISCARD ::TST::GroupColumnListArchive* release_old_column_groupings();
  ::TST::GroupColumnListArchive* mutable_old_column_groupings();
  void set_allocated_old_column_groupings(::TST::GroupColumnListArchive* old_column_groupings);
  private:
  const ::TST::GroupColumnListArchive& _internal_old_column_groupings() const;
  ::TST::GroupColumnListArchive* _internal_mutable_old_column_groupings();
  public:
  void unsafe_arena_set_allocated_old_column_groupings(
      ::TST::GroupColumnListArchive* old_column_groupings);
  ::TST::GroupColumnListArchive* unsafe_arena_release_old_column_groupings();

  // optional .TST.ColumnAggregateListArchive new_aggregates = 7;
  bool has_new_aggregates() const;
  private:
  bool _internal_has_new_aggregates() const;
  public:
  void clear_new_aggregates();
  const ::TST::ColumnAggregateListArchive& new_aggregates() const;
  PROTOBUF_NODISCARD ::TST::ColumnAggregateListArchive* release_new_aggregates();
  ::TST::ColumnAggregateListArchive* mutable_new_aggregates();
  void set_allocated_new_aggregates(::TST::ColumnAggregateListArchive* new_aggregates);
  private:
  const ::TST::ColumnAggregateListArchive& _internal_new_aggregates() const;
  ::TST::ColumnAggregateListArchive* _internal_mutable_new_aggregates();
  public:
  void unsafe_arena_set_allocated_new_aggregates(
      ::TST::ColumnAggregateListArchive* new_aggregates);
  ::TST::ColumnAggregateListArchive* unsafe_arena_release_new_aggregates();

  // optional .TST.ColumnAggregateListArchive old_aggregates = 8;
  bool has_old_aggregates() const;
  private:
  bool _internal_has_old_aggregates() const;
  public:
  void clear_old_aggregates();
  const ::TST::ColumnAggregateListArchive& old_aggregates() const;
  PROTOBUF_NODISCARD ::TST::ColumnAggregateListArchive* release_old_aggregates();
  ::TST::ColumnAggregateListArchive* mutable_old_aggregates();
  void set_allocated_old_aggregates(::TST::ColumnAggregateListArchive* old_aggregates);
  private:
  const ::TST::ColumnAggregateListArchive& _internal_old_aggregates() const;
  ::TST::ColumnAggregateListArchive* _internal_mutable_old_aggregates();
  public:
  void unsafe_arena_set_allocated_old_aggregates(
      ::TST::ColumnAggregateListArchive* old_aggregates);
  ::TST::ColumnAggregateListArchive* unsafe_arena_release_old_aggregates();

  // optional .TSP.Reference new_pivot_data_model = 11;
  bool has_new_pivot_data_model() const;
  private:
  bool _internal_has_new_pivot_data_model() const;
  public:
  void clear_new_pivot_data_model();
  const ::TSP::Reference& new_pivot_data_model() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_pivot_data_model();
  ::TSP::Reference* mutable_new_pivot_data_model();
  void set_allocated_new_pivot_data_model(::TSP::Reference* new_pivot_data_model);
  private:
  const ::TSP::Reference& _internal_new_pivot_data_model() const;
  ::TSP::Reference* _internal_mutable_new_pivot_data_model();
  public:
  void unsafe_arena_set_allocated_new_pivot_data_model(
      ::TSP::Reference* new_pivot_data_model);
  ::TSP::Reference* unsafe_arena_release_new_pivot_data_model();

  // optional .TSP.Reference old_pivot_data_model = 12;
  bool has_old_pivot_data_model() const;
  private:
  bool _internal_has_old_pivot_data_model() const;
  public:
  void clear_old_pivot_data_model();
  const ::TSP::Reference& old_pivot_data_model() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_pivot_data_model();
  ::TSP::Reference* mutable_old_pivot_data_model();
  void set_allocated_old_pivot_data_model(::TSP::Reference* old_pivot_data_model);
  private:
  const ::TSP::Reference& _internal_old_pivot_data_model() const;
  ::TSP::Reference* _internal_mutable_old_pivot_data_model();
  public:
  void unsafe_arena_set_allocated_old_pivot_data_model(
      ::TSP::Reference* old_pivot_data_model);
  ::TSP::Reference* unsafe_arena_release_old_pivot_data_model();

  // optional .TSP.UUID new_pivot_refresh_uid = 13;
  bool has_new_pivot_refresh_uid() const;
  private:
  bool _internal_has_new_pivot_refresh_uid() const;
  public:
  void clear_new_pivot_refresh_uid();
  const ::TSP::UUID& new_pivot_refresh_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_new_pivot_refresh_uid();
  ::TSP::UUID* mutable_new_pivot_refresh_uid();
  void set_allocated_new_pivot_refresh_uid(::TSP::UUID* new_pivot_refresh_uid);
  private:
  const ::TSP::UUID& _internal_new_pivot_refresh_uid() const;
  ::TSP::UUID* _internal_mutable_new_pivot_refresh_uid();
  public:
  void unsafe_arena_set_allocated_new_pivot_refresh_uid(
      ::TSP::UUID* new_pivot_refresh_uid);
  ::TSP::UUID* unsafe_arena_release_new_pivot_refresh_uid();

  // optional .TSP.UUID old_pivot_refresh_uid = 14;
  bool has_old_pivot_refresh_uid() const;
  private:
  bool _internal_has_old_pivot_refresh_uid() const;
  public:
  void clear_old_pivot_refresh_uid();
  const ::TSP::UUID& old_pivot_refresh_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_old_pivot_refresh_uid();
  ::TSP::UUID* mutable_old_pivot_refresh_uid();
  void set_allocated_old_pivot_refresh_uid(::TSP::UUID* old_pivot_refresh_uid);
  private:
  const ::TSP::UUID& _internal_old_pivot_refresh_uid() const;
  ::TSP::UUID* _internal_mutable_old_pivot_refresh_uid();
  public:
  void unsafe_arena_set_allocated_old_pivot_refresh_uid(
      ::TSP::UUID* old_pivot_refresh_uid);
  ::TSP::UUID* unsafe_arena_release_old_pivot_refresh_uid();

  // optional .TSP.Reference new_options_map = 17;
  bool has_new_options_map() const;
  private:
  bool _internal_has_new_options_map() const;
  public:
  void clear_new_options_map();
  const ::TSP::Reference& new_options_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_options_map();
  ::TSP::Reference* mutable_new_options_map();
  void set_allocated_new_options_map(::TSP::Reference* new_options_map);
  private:
  const ::TSP::Reference& _internal_new_options_map() const;
  ::TSP::Reference* _internal_mutable_new_options_map();
  public:
  void unsafe_arena_set_allocated_new_options_map(
      ::TSP::Reference* new_options_map);
  ::TSP::Reference* unsafe_arena_release_new_options_map();

  // optional .TSP.Reference old_options_map = 18;
  bool has_old_options_map() const;
  private:
  bool _internal_has_old_options_map() const;
  public:
  void clear_old_options_map();
  const ::TSP::Reference& old_options_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_options_map();
  ::TSP::Reference* mutable_old_options_map();
  void set_allocated_old_options_map(::TSP::Reference* old_options_map);
  private:
  const ::TSP::Reference& _internal_old_options_map() const;
  ::TSP::Reference* _internal_mutable_old_options_map();
  public:
  void unsafe_arena_set_allocated_old_options_map(
      ::TSP::Reference* old_options_map);
  ::TSP::Reference* unsafe_arena_release_old_options_map();

  // optional .TST.HierarchicalCellDiffMapArchive new_hierarchical_cell_diff_map = 27;
  bool has_new_hierarchical_cell_diff_map() const;
  private:
  bool _internal_has_new_hierarchical_cell_diff_map() const;
  public:
  void clear_new_hierarchical_cell_diff_map();
  const ::TST::HierarchicalCellDiffMapArchive& new_hierarchical_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TST::HierarchicalCellDiffMapArchive* release_new_hierarchical_cell_diff_map();
  ::TST::HierarchicalCellDiffMapArchive* mutable_new_hierarchical_cell_diff_map();
  void set_allocated_new_hierarchical_cell_diff_map(::TST::HierarchicalCellDiffMapArchive* new_hierarchical_cell_diff_map);
  private:
  const ::TST::HierarchicalCellDiffMapArchive& _internal_new_hierarchical_cell_diff_map() const;
  ::TST::HierarchicalCellDiffMapArchive* _internal_mutable_new_hierarchical_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_new_hierarchical_cell_diff_map(
      ::TST::HierarchicalCellDiffMapArchive* new_hierarchical_cell_diff_map);
  ::TST::HierarchicalCellDiffMapArchive* unsafe_arena_release_new_hierarchical_cell_diff_map();

  // optional .TST.HierarchicalCellDiffMapArchive old_hierarchical_cell_diff_map = 28;
  bool has_old_hierarchical_cell_diff_map() const;
  private:
  bool _internal_has_old_hierarchical_cell_diff_map() const;
  public:
  void clear_old_hierarchical_cell_diff_map();
  const ::TST::HierarchicalCellDiffMapArchive& old_hierarchical_cell_diff_map() const;
  PROTOBUF_NODISCARD ::TST::HierarchicalCellDiffMapArchive* release_old_hierarchical_cell_diff_map();
  ::TST::HierarchicalCellDiffMapArchive* mutable_old_hierarchical_cell_diff_map();
  void set_allocated_old_hierarchical_cell_diff_map(::TST::HierarchicalCellDiffMapArchive* old_hierarchical_cell_diff_map);
  private:
  const ::TST::HierarchicalCellDiffMapArchive& _internal_old_hierarchical_cell_diff_map() const;
  ::TST::HierarchicalCellDiffMapArchive* _internal_mutable_old_hierarchical_cell_diff_map();
  public:
  void unsafe_arena_set_allocated_old_hierarchical_cell_diff_map(
      ::TST::HierarchicalCellDiffMapArchive* old_hierarchical_cell_diff_map);
  ::TST::HierarchicalCellDiffMapArchive* unsafe_arena_release_old_hierarchical_cell_diff_map();

  // optional .TSP.Reference formula_rewrite_command_for_undo = 29;
  bool has_formula_rewrite_command_for_undo() const;
  private:
  bool _internal_has_formula_rewrite_command_for_undo() const;
  public:
  void clear_formula_rewrite_command_for_undo();
  const ::TSP::Reference& formula_rewrite_command_for_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command_for_undo();
  ::TSP::Reference* mutable_formula_rewrite_command_for_undo();
  void set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command_for_undo() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command_for_undo();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
      ::TSP::Reference* formula_rewrite_command_for_undo);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command_for_undo();

  // optional .TSP.UUIDRectArchive new_body_uid_tract = 30;
  bool has_new_body_uid_tract() const;
  private:
  bool _internal_has_new_body_uid_tract() const;
  public:
  void clear_new_body_uid_tract();
  const ::TSP::UUIDRectArchive& new_body_uid_tract() const;
  PROTOBUF_NODISCARD ::TSP::UUIDRectArchive* release_new_body_uid_tract();
  ::TSP::UUIDRectArchive* mutable_new_body_uid_tract();
  void set_allocated_new_body_uid_tract(::TSP::UUIDRectArchive* new_body_uid_tract);
  private:
  const ::TSP::UUIDRectArchive& _internal_new_body_uid_tract() const;
  ::TSP::UUIDRectArchive* _internal_mutable_new_body_uid_tract();
  public:
  void unsafe_arena_set_allocated_new_body_uid_tract(
      ::TSP::UUIDRectArchive* new_body_uid_tract);
  ::TSP::UUIDRectArchive* unsafe_arena_release_new_body_uid_tract();

  // optional .TSP.UUIDRectArchive old_body_uid_tract = 31;
  bool has_old_body_uid_tract() const;
  private:
  bool _internal_has_old_body_uid_tract() const;
  public:
  void clear_old_body_uid_tract();
  const ::TSP::UUIDRectArchive& old_body_uid_tract() const;
  PROTOBUF_NODISCARD ::TSP::UUIDRectArchive* release_old_body_uid_tract();
  ::TSP::UUIDRectArchive* mutable_old_body_uid_tract();
  void set_allocated_old_body_uid_tract(::TSP::UUIDRectArchive* old_body_uid_tract);
  private:
  const ::TSP::UUIDRectArchive& _internal_old_body_uid_tract() const;
  ::TSP::UUIDRectArchive* _internal_mutable_old_body_uid_tract();
  public:
  void unsafe_arena_set_allocated_old_body_uid_tract(
      ::TSP::UUIDRectArchive* old_body_uid_tract);
  ::TSP::UUIDRectArchive* unsafe_arena_release_old_body_uid_tract();

  // optional .TSP.UUID old_target_pivot_refresh_uid = 32;
  bool has_old_target_pivot_refresh_uid() const;
  private:
  bool _internal_has_old_target_pivot_refresh_uid() const;
  public:
  void clear_old_target_pivot_refresh_uid();
  const ::TSP::UUID& old_target_pivot_refresh_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_old_target_pivot_refresh_uid();
  ::TSP::UUID* mutable_old_target_pivot_refresh_uid();
  void set_allocated_old_target_pivot_refresh_uid(::TSP::UUID* old_target_pivot_refresh_uid);
  private:
  const ::TSP::UUID& _internal_old_target_pivot_refresh_uid() const;
  ::TSP::UUID* _internal_mutable_old_target_pivot_refresh_uid();
  public:
  void unsafe_arena_set_allocated_old_target_pivot_refresh_uid(
      ::TSP::UUID* old_target_pivot_refresh_uid);
  ::TSP::UUID* unsafe_arena_release_old_target_pivot_refresh_uid();

  // optional .TSP.UUID new_target_pivot_row_column_rule_change_uid = 33;
  bool has_new_target_pivot_row_column_rule_change_uid() const;
  private:
  bool _internal_has_new_target_pivot_row_column_rule_change_uid() const;
  public:
  void clear_new_target_pivot_row_column_rule_change_uid();
  const ::TSP::UUID& new_target_pivot_row_column_rule_change_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_new_target_pivot_row_column_rule_change_uid();
  ::TSP::UUID* mutable_new_target_pivot_row_column_rule_change_uid();
  void set_allocated_new_target_pivot_row_column_rule_change_uid(::TSP::UUID* new_target_pivot_row_column_rule_change_uid);
  private:
  const ::TSP::UUID& _internal_new_target_pivot_row_column_rule_change_uid() const;
  ::TSP::UUID* _internal_mutable_new_target_pivot_row_column_rule_change_uid();
  public:
  void unsafe_arena_set_allocated_new_target_pivot_row_column_rule_change_uid(
      ::TSP::UUID* new_target_pivot_row_column_rule_change_uid);
  ::TSP::UUID* unsafe_arena_release_new_target_pivot_row_column_rule_change_uid();

  // optional .TSP.UUID old_target_pivot_row_column_rule_change_uid = 34;
  bool has_old_target_pivot_row_column_rule_change_uid() const;
  private:
  bool _internal_has_old_target_pivot_row_column_rule_change_uid() const;
  public:
  void clear_old_target_pivot_row_column_rule_change_uid();
  const ::TSP::UUID& old_target_pivot_row_column_rule_change_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_old_target_pivot_row_column_rule_change_uid();
  ::TSP::UUID* mutable_old_target_pivot_row_column_rule_change_uid();
  void set_allocated_old_target_pivot_row_column_rule_change_uid(::TSP::UUID* old_target_pivot_row_column_rule_change_uid);
  private:
  const ::TSP::UUID& _internal_old_target_pivot_row_column_rule_change_uid() const;
  ::TSP::UUID* _internal_mutable_old_target_pivot_row_column_rule_change_uid();
  public:
  void unsafe_arena_set_allocated_old_target_pivot_row_column_rule_change_uid(
      ::TSP::UUID* old_target_pivot_row_column_rule_change_uid);
  ::TSP::UUID* unsafe_arena_release_old_target_pivot_row_column_rule_change_uid();

  // optional .TSP.UUID new_target_pivot_aggregate_rule_change_uid = 35;
  bool has_new_target_pivot_aggregate_rule_change_uid() const;
  private:
  bool _internal_has_new_target_pivot_aggregate_rule_change_uid() const;
  public:
  void clear_new_target_pivot_aggregate_rule_change_uid();
  const ::TSP::UUID& new_target_pivot_aggregate_rule_change_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_new_target_pivot_aggregate_rule_change_uid();
  ::TSP::UUID* mutable_new_target_pivot_aggregate_rule_change_uid();
  void set_allocated_new_target_pivot_aggregate_rule_change_uid(::TSP::UUID* new_target_pivot_aggregate_rule_change_uid);
  private:
  const ::TSP::UUID& _internal_new_target_pivot_aggregate_rule_change_uid() const;
  ::TSP::UUID* _internal_mutable_new_target_pivot_aggregate_rule_change_uid();
  public:
  void unsafe_arena_set_allocated_new_target_pivot_aggregate_rule_change_uid(
      ::TSP::UUID* new_target_pivot_aggregate_rule_change_uid);
  ::TSP::UUID* unsafe_arena_release_new_target_pivot_aggregate_rule_change_uid();

  // optional .TSP.UUID old_target_pivot_aggregate_rule_change_uid = 36;
  bool has_old_target_pivot_aggregate_rule_change_uid() const;
  private:
  bool _internal_has_old_target_pivot_aggregate_rule_change_uid() const;
  public:
  void clear_old_target_pivot_aggregate_rule_change_uid();
  const ::TSP::UUID& old_target_pivot_aggregate_rule_change_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_old_target_pivot_aggregate_rule_change_uid();
  ::TSP::UUID* mutable_old_target_pivot_aggregate_rule_change_uid();
  void set_allocated_old_target_pivot_aggregate_rule_change_uid(::TSP::UUID* old_target_pivot_aggregate_rule_change_uid);
  private:
  const ::TSP::UUID& _internal_old_target_pivot_aggregate_rule_change_uid() const;
  ::TSP::UUID* _internal_mutable_old_target_pivot_aggregate_rule_change_uid();
  public:
  void unsafe_arena_set_allocated_old_target_pivot_aggregate_rule_change_uid(
      ::TSP::UUID* old_target_pivot_aggregate_rule_change_uid);
  ::TSP::UUID* unsafe_arena_release_old_target_pivot_aggregate_rule_change_uid();

  // optional .TSP.Reference new_filter_set = 39;
  bool has_new_filter_set() const;
  private:
  bool _internal_has_new_filter_set() const;
  public:
  void clear_new_filter_set();
  const ::TSP::Reference& new_filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_filter_set();
  ::TSP::Reference* mutable_new_filter_set();
  void set_allocated_new_filter_set(::TSP::Reference* new_filter_set);
  private:
  const ::TSP::Reference& _internal_new_filter_set() const;
  ::TSP::Reference* _internal_mutable_new_filter_set();
  public:
  void unsafe_arena_set_allocated_new_filter_set(
      ::TSP::Reference* new_filter_set);
  ::TSP::Reference* unsafe_arena_release_new_filter_set();

  // optional .TSP.Reference old_filter_set = 40;
  bool has_old_filter_set() const;
  private:
  bool _internal_has_old_filter_set() const;
  public:
  void clear_old_filter_set();
  const ::TSP::Reference& old_filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_filter_set();
  ::TSP::Reference* mutable_old_filter_set();
  void set_allocated_old_filter_set(::TSP::Reference* old_filter_set);
  private:
  const ::TSP::Reference& _internal_old_filter_set() const;
  ::TSP::Reference* _internal_mutable_old_filter_set();
  public:
  void unsafe_arena_set_allocated_old_filter_set(
      ::TSP::Reference* old_filter_set);
  ::TSP::Reference* unsafe_arena_release_old_filter_set();

  // optional double new_pivot_refresh_timestamp = 15;
  bool has_new_pivot_refresh_timestamp() const;
  private:
  bool _internal_has_new_pivot_refresh_timestamp() const;
  public:
  void clear_new_pivot_refresh_timestamp();
  double new_pivot_refresh_timestamp() const;
  void set_new_pivot_refresh_timestamp(double value);
  private:
  double _internal_new_pivot_refresh_timestamp() const;
  void _internal_set_new_pivot_refresh_timestamp(double value);
  public:

  // optional double old_pivot_refresh_timestamp = 16;
  bool has_old_pivot_refresh_timestamp() const;
  private:
  bool _internal_has_old_pivot_refresh_timestamp() const;
  public:
  void clear_old_pivot_refresh_timestamp();
  double old_pivot_refresh_timestamp() const;
  void set_old_pivot_refresh_timestamp(double value);
  private:
  double _internal_old_pivot_refresh_timestamp() const;
  void _internal_set_old_pivot_refresh_timestamp(double value);
  public:

  // optional bool is_order_finalized = 37;
  bool has_is_order_finalized() const;
  private:
  bool _internal_has_is_order_finalized() const;
  public:
  void clear_is_order_finalized();
  bool is_order_finalized() const;
  void set_is_order_finalized(bool value);
  private:
  bool _internal_is_order_finalized() const;
  void _internal_set_is_order_finalized(bool value);
  public:

  // optional bool use_small_table_limits = 41;
  bool has_use_small_table_limits() const;
  private:
  bool _internal_has_use_small_table_limits() const;
  public:
  void clear_use_small_table_limits();
  bool use_small_table_limits() const;
  void set_use_small_table_limits(bool value);
  private:
  bool _internal_use_small_table_limits() const;
  void _internal_set_use_small_table_limits(bool value);
  public:

  // optional int32 setting_filters_enabled = 42;
  bool has_setting_filters_enabled() const;
  private:
  bool _internal_has_setting_filters_enabled() const;
  public:
  void clear_setting_filters_enabled();
  int32_t setting_filters_enabled() const;
  void set_setting_filters_enabled(int32_t value);
  private:
  int32_t _internal_setting_filters_enabled() const;
  void _internal_set_setting_filters_enabled(int32_t value);
  public:

  // optional int32 undo_setting_filters_enabled = 43;
  bool has_undo_setting_filters_enabled() const;
  private:
  bool _internal_has_undo_setting_filters_enabled() const;
  public:
  void clear_undo_setting_filters_enabled();
  int32_t undo_setting_filters_enabled() const;
  void set_undo_setting_filters_enabled(int32_t value);
  private:
  int32_t _internal_undo_setting_filters_enabled() const;
  void _internal_set_undo_setting_filters_enabled(int32_t value);
  public:

  // optional .TST.TableDimensionArchive new_flattening_dimension = 9;
  bool has_new_flattening_dimension() const;
  private:
  bool _internal_has_new_flattening_dimension() const;
  public:
  void clear_new_flattening_dimension();
  ::TST::TableDimensionArchive new_flattening_dimension() const;
  void set_new_flattening_dimension(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_new_flattening_dimension() const;
  void _internal_set_new_flattening_dimension(::TST::TableDimensionArchive value);
  public:

  // optional .TST.TableDimensionArchive old_flattening_dimension = 10;
  bool has_old_flattening_dimension() const;
  private:
  bool _internal_has_old_flattening_dimension() const;
  public:
  void clear_old_flattening_dimension();
  ::TST::TableDimensionArchive old_flattening_dimension() const;
  void set_old_flattening_dimension(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_old_flattening_dimension() const;
  void _internal_set_old_flattening_dimension(::TST::TableDimensionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandPivotSetPivotRulesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > new_view_row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > old_view_row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > new_view_column_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > old_view_column_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > new_collapsed_row_groups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > old_collapsed_row_groups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > new_collapsed_column_groups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > old_collapsed_column_groups_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUID* new_target_pivot_refresh_uid_;
    ::TST::GroupColumnListArchive* new_row_groupings_;
    ::TST::GroupColumnListArchive* old_row_groupings_;
    ::TST::GroupColumnListArchive* new_column_groupings_;
    ::TST::GroupColumnListArchive* old_column_groupings_;
    ::TST::ColumnAggregateListArchive* new_aggregates_;
    ::TST::ColumnAggregateListArchive* old_aggregates_;
    ::TSP::Reference* new_pivot_data_model_;
    ::TSP::Reference* old_pivot_data_model_;
    ::TSP::UUID* new_pivot_refresh_uid_;
    ::TSP::UUID* old_pivot_refresh_uid_;
    ::TSP::Reference* new_options_map_;
    ::TSP::Reference* old_options_map_;
    ::TST::HierarchicalCellDiffMapArchive* new_hierarchical_cell_diff_map_;
    ::TST::HierarchicalCellDiffMapArchive* old_hierarchical_cell_diff_map_;
    ::TSP::Reference* formula_rewrite_command_for_undo_;
    ::TSP::UUIDRectArchive* new_body_uid_tract_;
    ::TSP::UUIDRectArchive* old_body_uid_tract_;
    ::TSP::UUID* old_target_pivot_refresh_uid_;
    ::TSP::UUID* new_target_pivot_row_column_rule_change_uid_;
    ::TSP::UUID* old_target_pivot_row_column_rule_change_uid_;
    ::TSP::UUID* new_target_pivot_aggregate_rule_change_uid_;
    ::TSP::UUID* old_target_pivot_aggregate_rule_change_uid_;
    ::TSP::Reference* new_filter_set_;
    ::TSP::Reference* old_filter_set_;
    double new_pivot_refresh_timestamp_;
    double old_pivot_refresh_timestamp_;
    bool is_order_finalized_;
    bool use_small_table_limits_;
    int32_t setting_filters_enabled_;
    int32_t undo_setting_filters_enabled_;
    int new_flattening_dimension_;
    int old_flattening_dimension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPivotSetGroupingColumnOptionsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandPivotSetGroupingColumnOptionsArchive) */ {
 public:
  inline CommandPivotSetGroupingColumnOptionsArchive() : CommandPivotSetGroupingColumnOptionsArchive(nullptr) {}
  ~CommandPivotSetGroupingColumnOptionsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPivotSetGroupingColumnOptionsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPivotSetGroupingColumnOptionsArchive(const CommandPivotSetGroupingColumnOptionsArchive& from);
  CommandPivotSetGroupingColumnOptionsArchive(CommandPivotSetGroupingColumnOptionsArchive&& from) noexcept
    : CommandPivotSetGroupingColumnOptionsArchive() {
    *this = ::std::move(from);
  }

  inline CommandPivotSetGroupingColumnOptionsArchive& operator=(const CommandPivotSetGroupingColumnOptionsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPivotSetGroupingColumnOptionsArchive& operator=(CommandPivotSetGroupingColumnOptionsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPivotSetGroupingColumnOptionsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPivotSetGroupingColumnOptionsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPivotSetGroupingColumnOptionsArchive*>(
               &_CommandPivotSetGroupingColumnOptionsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CommandPivotSetGroupingColumnOptionsArchive& a, CommandPivotSetGroupingColumnOptionsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPivotSetGroupingColumnOptionsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPivotSetGroupingColumnOptionsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPivotSetGroupingColumnOptionsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPivotSetGroupingColumnOptionsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPivotSetGroupingColumnOptionsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPivotSetGroupingColumnOptionsArchive& from) {
    CommandPivotSetGroupingColumnOptionsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPivotSetGroupingColumnOptionsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandPivotSetGroupingColumnOptionsArchive";
  }
  protected:
  explicit CommandPivotSetGroupingColumnOptionsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kGroupingColumnUidFieldNumber = 2,
    kNonSortingFlagFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kUndoBoolValueFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID grouping_column_uid = 2;
  bool has_grouping_column_uid() const;
  private:
  bool _internal_has_grouping_column_uid() const;
  public:
  void clear_grouping_column_uid();
  const ::TSP::UUID& grouping_column_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_grouping_column_uid();
  ::TSP::UUID* mutable_grouping_column_uid();
  void set_allocated_grouping_column_uid(::TSP::UUID* grouping_column_uid);
  private:
  const ::TSP::UUID& _internal_grouping_column_uid() const;
  ::TSP::UUID* _internal_mutable_grouping_column_uid();
  public:
  void unsafe_arena_set_allocated_grouping_column_uid(
      ::TSP::UUID* grouping_column_uid);
  ::TSP::UUID* unsafe_arena_release_grouping_column_uid();

  // optional uint32 non_sorting_flag = 3;
  bool has_non_sorting_flag() const;
  private:
  bool _internal_has_non_sorting_flag() const;
  public:
  void clear_non_sorting_flag();
  uint32_t non_sorting_flag() const;
  void set_non_sorting_flag(uint32_t value);
  private:
  uint32_t _internal_non_sorting_flag() const;
  void _internal_set_non_sorting_flag(uint32_t value);
  public:

  // optional bool bool_value = 4;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional bool undo_bool_value = 5;
  bool has_undo_bool_value() const;
  private:
  bool _internal_has_undo_bool_value() const;
  public:
  void clear_undo_bool_value();
  bool undo_bool_value() const;
  void set_undo_bool_value(bool value);
  private:
  bool _internal_undo_bool_value() const;
  void _internal_set_undo_bool_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandPivotSetGroupingColumnOptionsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUID* grouping_column_uid_;
    uint32_t non_sorting_flag_;
    bool bool_value_;
    bool undo_bool_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPivotHideShowGrandTotalsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandPivotHideShowGrandTotalsArchive) */ {
 public:
  inline CommandPivotHideShowGrandTotalsArchive() : CommandPivotHideShowGrandTotalsArchive(nullptr) {}
  ~CommandPivotHideShowGrandTotalsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPivotHideShowGrandTotalsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPivotHideShowGrandTotalsArchive(const CommandPivotHideShowGrandTotalsArchive& from);
  CommandPivotHideShowGrandTotalsArchive(CommandPivotHideShowGrandTotalsArchive&& from) noexcept
    : CommandPivotHideShowGrandTotalsArchive() {
    *this = ::std::move(from);
  }

  inline CommandPivotHideShowGrandTotalsArchive& operator=(const CommandPivotHideShowGrandTotalsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPivotHideShowGrandTotalsArchive& operator=(CommandPivotHideShowGrandTotalsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPivotHideShowGrandTotalsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPivotHideShowGrandTotalsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPivotHideShowGrandTotalsArchive*>(
               &_CommandPivotHideShowGrandTotalsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CommandPivotHideShowGrandTotalsArchive& a, CommandPivotHideShowGrandTotalsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPivotHideShowGrandTotalsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPivotHideShowGrandTotalsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPivotHideShowGrandTotalsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPivotHideShowGrandTotalsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPivotHideShowGrandTotalsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPivotHideShowGrandTotalsArchive& from) {
    CommandPivotHideShowGrandTotalsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPivotHideShowGrandTotalsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandPivotHideShowGrandTotalsArchive";
  }
  protected:
  explicit CommandPivotHideShowGrandTotalsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kIsHidingFieldNumber = 3,
    kUndoIsHidingFieldNumber = 4,
    kDimensionFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional bool is_hiding = 3;
  bool has_is_hiding() const;
  private:
  bool _internal_has_is_hiding() const;
  public:
  void clear_is_hiding();
  bool is_hiding() const;
  void set_is_hiding(bool value);
  private:
  bool _internal_is_hiding() const;
  void _internal_set_is_hiding(bool value);
  public:

  // optional bool undo_is_hiding = 4;
  bool has_undo_is_hiding() const;
  private:
  bool _internal_has_undo_is_hiding() const;
  public:
  void clear_undo_is_hiding();
  bool undo_is_hiding() const;
  void set_undo_is_hiding(bool value);
  private:
  bool _internal_undo_is_hiding() const;
  void _internal_set_undo_is_hiding(bool value);
  public:

  // optional .TST.TableDimensionArchive dimension = 2;
  bool has_dimension() const;
  private:
  bool _internal_has_dimension() const;
  public:
  void clear_dimension();
  ::TST::TableDimensionArchive dimension() const;
  void set_dimension(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_dimension() const;
  void _internal_set_dimension(::TST::TableDimensionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandPivotHideShowGrandTotalsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool is_hiding_;
    bool undo_is_hiding_;
    int dimension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPivotSortArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandPivotSortArchive) */ {
 public:
  inline CommandPivotSortArchive() : CommandPivotSortArchive(nullptr) {}
  ~CommandPivotSortArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPivotSortArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPivotSortArchive(const CommandPivotSortArchive& from);
  CommandPivotSortArchive(CommandPivotSortArchive&& from) noexcept
    : CommandPivotSortArchive() {
    *this = ::std::move(from);
  }

  inline CommandPivotSortArchive& operator=(const CommandPivotSortArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPivotSortArchive& operator=(CommandPivotSortArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPivotSortArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPivotSortArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPivotSortArchive*>(
               &_CommandPivotSortArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CommandPivotSortArchive& a, CommandPivotSortArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPivotSortArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPivotSortArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPivotSortArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPivotSortArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPivotSortArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPivotSortArchive& from) {
    CommandPivotSortArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPivotSortArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandPivotSortArchive";
  }
  protected:
  explicit CommandPivotSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnOrderFieldNumber = 3,
    kUndoColumnOrderFieldNumber = 4,
    kRowOrderFieldNumber = 5,
    kUndoRowOrderFieldNumber = 6,
    kSuperFieldNumber = 1,
    kTargetPivotRowColumnRuleChangeUidFieldNumber = 7,
    kTargetPivotAggregateRuleChangeUidFieldNumber = 8,
    kTargetPivotDataRefreshUidFieldNumber = 9,
    kGroupingColumnUidFieldNumber = 10,
    kSortingAggregateRuleUidFieldNumber = 13,
    kUndoSortingAggregateRuleUidFieldNumber = 14,
    kSortingFlagsFieldNumber = 11,
    kUndoSortingFlagsFieldNumber = 12,
    kIsOrderFinalizedFieldNumber = 15,
    kDimensionFieldNumber = 2,
  };
  // repeated .TSP.UUID column_order = 3;
  int column_order_size() const;
  private:
  int _internal_column_order_size() const;
  public:
  void clear_column_order();
  ::TSP::UUID* mutable_column_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_column_order();
  private:
  const ::TSP::UUID& _internal_column_order(int index) const;
  ::TSP::UUID* _internal_add_column_order();
  public:
  const ::TSP::UUID& column_order(int index) const;
  ::TSP::UUID* add_column_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      column_order() const;

  // repeated .TSP.UUID undo_column_order = 4;
  int undo_column_order_size() const;
  private:
  int _internal_undo_column_order_size() const;
  public:
  void clear_undo_column_order();
  ::TSP::UUID* mutable_undo_column_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_column_order();
  private:
  const ::TSP::UUID& _internal_undo_column_order(int index) const;
  ::TSP::UUID* _internal_add_undo_column_order();
  public:
  const ::TSP::UUID& undo_column_order(int index) const;
  ::TSP::UUID* add_undo_column_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_column_order() const;

  // repeated .TSP.UUID row_order = 5;
  int row_order_size() const;
  private:
  int _internal_row_order_size() const;
  public:
  void clear_row_order();
  ::TSP::UUID* mutable_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_order();
  private:
  const ::TSP::UUID& _internal_row_order(int index) const;
  ::TSP::UUID* _internal_add_row_order();
  public:
  const ::TSP::UUID& row_order(int index) const;
  ::TSP::UUID* add_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_order() const;

  // repeated .TSP.UUID undo_row_order = 6;
  int undo_row_order_size() const;
  private:
  int _internal_undo_row_order_size() const;
  public:
  void clear_undo_row_order();
  ::TSP::UUID* mutable_undo_row_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_row_order();
  private:
  const ::TSP::UUID& _internal_undo_row_order(int index) const;
  ::TSP::UUID* _internal_add_undo_row_order();
  public:
  const ::TSP::UUID& undo_row_order(int index) const;
  ::TSP::UUID* add_undo_row_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_row_order() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID target_pivot_row_column_rule_change_uid = 7;
  bool has_target_pivot_row_column_rule_change_uid() const;
  private:
  bool _internal_has_target_pivot_row_column_rule_change_uid() const;
  public:
  void clear_target_pivot_row_column_rule_change_uid();
  const ::TSP::UUID& target_pivot_row_column_rule_change_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_target_pivot_row_column_rule_change_uid();
  ::TSP::UUID* mutable_target_pivot_row_column_rule_change_uid();
  void set_allocated_target_pivot_row_column_rule_change_uid(::TSP::UUID* target_pivot_row_column_rule_change_uid);
  private:
  const ::TSP::UUID& _internal_target_pivot_row_column_rule_change_uid() const;
  ::TSP::UUID* _internal_mutable_target_pivot_row_column_rule_change_uid();
  public:
  void unsafe_arena_set_allocated_target_pivot_row_column_rule_change_uid(
      ::TSP::UUID* target_pivot_row_column_rule_change_uid);
  ::TSP::UUID* unsafe_arena_release_target_pivot_row_column_rule_change_uid();

  // required .TSP.UUID target_pivot_aggregate_rule_change_uid = 8;
  bool has_target_pivot_aggregate_rule_change_uid() const;
  private:
  bool _internal_has_target_pivot_aggregate_rule_change_uid() const;
  public:
  void clear_target_pivot_aggregate_rule_change_uid();
  const ::TSP::UUID& target_pivot_aggregate_rule_change_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_target_pivot_aggregate_rule_change_uid();
  ::TSP::UUID* mutable_target_pivot_aggregate_rule_change_uid();
  void set_allocated_target_pivot_aggregate_rule_change_uid(::TSP::UUID* target_pivot_aggregate_rule_change_uid);
  private:
  const ::TSP::UUID& _internal_target_pivot_aggregate_rule_change_uid() const;
  ::TSP::UUID* _internal_mutable_target_pivot_aggregate_rule_change_uid();
  public:
  void unsafe_arena_set_allocated_target_pivot_aggregate_rule_change_uid(
      ::TSP::UUID* target_pivot_aggregate_rule_change_uid);
  ::TSP::UUID* unsafe_arena_release_target_pivot_aggregate_rule_change_uid();

  // required .TSP.UUID target_pivot_data_refresh_uid = 9;
  bool has_target_pivot_data_refresh_uid() const;
  private:
  bool _internal_has_target_pivot_data_refresh_uid() const;
  public:
  void clear_target_pivot_data_refresh_uid();
  const ::TSP::UUID& target_pivot_data_refresh_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_target_pivot_data_refresh_uid();
  ::TSP::UUID* mutable_target_pivot_data_refresh_uid();
  void set_allocated_target_pivot_data_refresh_uid(::TSP::UUID* target_pivot_data_refresh_uid);
  private:
  const ::TSP::UUID& _internal_target_pivot_data_refresh_uid() const;
  ::TSP::UUID* _internal_mutable_target_pivot_data_refresh_uid();
  public:
  void unsafe_arena_set_allocated_target_pivot_data_refresh_uid(
      ::TSP::UUID* target_pivot_data_refresh_uid);
  ::TSP::UUID* unsafe_arena_release_target_pivot_data_refresh_uid();

  // optional .TSP.UUID grouping_column_uid = 10;
  bool has_grouping_column_uid() const;
  private:
  bool _internal_has_grouping_column_uid() const;
  public:
  void clear_grouping_column_uid();
  const ::TSP::UUID& grouping_column_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_grouping_column_uid();
  ::TSP::UUID* mutable_grouping_column_uid();
  void set_allocated_grouping_column_uid(::TSP::UUID* grouping_column_uid);
  private:
  const ::TSP::UUID& _internal_grouping_column_uid() const;
  ::TSP::UUID* _internal_mutable_grouping_column_uid();
  public:
  void unsafe_arena_set_allocated_grouping_column_uid(
      ::TSP::UUID* grouping_column_uid);
  ::TSP::UUID* unsafe_arena_release_grouping_column_uid();

  // optional .TSP.UUID sorting_aggregate_rule_uid = 13;
  bool has_sorting_aggregate_rule_uid() const;
  private:
  bool _internal_has_sorting_aggregate_rule_uid() const;
  public:
  void clear_sorting_aggregate_rule_uid();
  const ::TSP::UUID& sorting_aggregate_rule_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_sorting_aggregate_rule_uid();
  ::TSP::UUID* mutable_sorting_aggregate_rule_uid();
  void set_allocated_sorting_aggregate_rule_uid(::TSP::UUID* sorting_aggregate_rule_uid);
  private:
  const ::TSP::UUID& _internal_sorting_aggregate_rule_uid() const;
  ::TSP::UUID* _internal_mutable_sorting_aggregate_rule_uid();
  public:
  void unsafe_arena_set_allocated_sorting_aggregate_rule_uid(
      ::TSP::UUID* sorting_aggregate_rule_uid);
  ::TSP::UUID* unsafe_arena_release_sorting_aggregate_rule_uid();

  // optional .TSP.UUID undo_sorting_aggregate_rule_uid = 14;
  bool has_undo_sorting_aggregate_rule_uid() const;
  private:
  bool _internal_has_undo_sorting_aggregate_rule_uid() const;
  public:
  void clear_undo_sorting_aggregate_rule_uid();
  const ::TSP::UUID& undo_sorting_aggregate_rule_uid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_undo_sorting_aggregate_rule_uid();
  ::TSP::UUID* mutable_undo_sorting_aggregate_rule_uid();
  void set_allocated_undo_sorting_aggregate_rule_uid(::TSP::UUID* undo_sorting_aggregate_rule_uid);
  private:
  const ::TSP::UUID& _internal_undo_sorting_aggregate_rule_uid() const;
  ::TSP::UUID* _internal_mutable_undo_sorting_aggregate_rule_uid();
  public:
  void unsafe_arena_set_allocated_undo_sorting_aggregate_rule_uid(
      ::TSP::UUID* undo_sorting_aggregate_rule_uid);
  ::TSP::UUID* unsafe_arena_release_undo_sorting_aggregate_rule_uid();

  // optional uint32 sorting_flags = 11;
  bool has_sorting_flags() const;
  private:
  bool _internal_has_sorting_flags() const;
  public:
  void clear_sorting_flags();
  uint32_t sorting_flags() const;
  void set_sorting_flags(uint32_t value);
  private:
  uint32_t _internal_sorting_flags() const;
  void _internal_set_sorting_flags(uint32_t value);
  public:

  // optional uint32 undo_sorting_flags = 12;
  bool has_undo_sorting_flags() const;
  private:
  bool _internal_has_undo_sorting_flags() const;
  public:
  void clear_undo_sorting_flags();
  uint32_t undo_sorting_flags() const;
  void set_undo_sorting_flags(uint32_t value);
  private:
  uint32_t _internal_undo_sorting_flags() const;
  void _internal_set_undo_sorting_flags(uint32_t value);
  public:

  // required bool is_order_finalized = 15;
  bool has_is_order_finalized() const;
  private:
  bool _internal_has_is_order_finalized() const;
  public:
  void clear_is_order_finalized();
  bool is_order_finalized() const;
  void set_is_order_finalized(bool value);
  private:
  bool _internal_is_order_finalized() const;
  void _internal_set_is_order_finalized(bool value);
  public:

  // optional .TST.TableDimensionArchive dimension = 2;
  bool has_dimension() const;
  private:
  bool _internal_has_dimension() const;
  public:
  void clear_dimension();
  ::TST::TableDimensionArchive dimension() const;
  void set_dimension(::TST::TableDimensionArchive value);
  private:
  ::TST::TableDimensionArchive _internal_dimension() const;
  void _internal_set_dimension(::TST::TableDimensionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandPivotSortArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > column_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_column_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_order_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_row_order_;
    ::TST::TableCommandArchive* super_;
    ::TSP::UUID* target_pivot_row_column_rule_change_uid_;
    ::TSP::UUID* target_pivot_aggregate_rule_change_uid_;
    ::TSP::UUID* target_pivot_data_refresh_uid_;
    ::TSP::UUID* grouping_column_uid_;
    ::TSP::UUID* sorting_aggregate_rule_uid_;
    ::TSP::UUID* undo_sorting_aggregate_rule_uid_;
    uint32_t sorting_flags_;
    uint32_t undo_sorting_flags_;
    bool is_order_finalized_;
    int dimension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteTrackedReferencesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteTrackedReferencesArchive) */ {
 public:
  inline CommandRewriteTrackedReferencesArchive() : CommandRewriteTrackedReferencesArchive(nullptr) {}
  ~CommandRewriteTrackedReferencesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteTrackedReferencesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteTrackedReferencesArchive(const CommandRewriteTrackedReferencesArchive& from);
  CommandRewriteTrackedReferencesArchive(CommandRewriteTrackedReferencesArchive&& from) noexcept
    : CommandRewriteTrackedReferencesArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteTrackedReferencesArchive& operator=(const CommandRewriteTrackedReferencesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteTrackedReferencesArchive& operator=(CommandRewriteTrackedReferencesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteTrackedReferencesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteTrackedReferencesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteTrackedReferencesArchive*>(
               &_CommandRewriteTrackedReferencesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CommandRewriteTrackedReferencesArchive& a, CommandRewriteTrackedReferencesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteTrackedReferencesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteTrackedReferencesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteTrackedReferencesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteTrackedReferencesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteTrackedReferencesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteTrackedReferencesArchive& from) {
    CommandRewriteTrackedReferencesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteTrackedReferencesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteTrackedReferencesArchive";
  }
  protected:
  explicit CommandRewriteTrackedReferencesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteTrackedReferencesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandExtendTableIDHistoryArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandExtendTableIDHistoryArchive) */ {
 public:
  inline CommandExtendTableIDHistoryArchive() : CommandExtendTableIDHistoryArchive(nullptr) {}
  ~CommandExtendTableIDHistoryArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandExtendTableIDHistoryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandExtendTableIDHistoryArchive(const CommandExtendTableIDHistoryArchive& from);
  CommandExtendTableIDHistoryArchive(CommandExtendTableIDHistoryArchive&& from) noexcept
    : CommandExtendTableIDHistoryArchive() {
    *this = ::std::move(from);
  }

  inline CommandExtendTableIDHistoryArchive& operator=(const CommandExtendTableIDHistoryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandExtendTableIDHistoryArchive& operator=(CommandExtendTableIDHistoryArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandExtendTableIDHistoryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandExtendTableIDHistoryArchive* internal_default_instance() {
    return reinterpret_cast<const CommandExtendTableIDHistoryArchive*>(
               &_CommandExtendTableIDHistoryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CommandExtendTableIDHistoryArchive& a, CommandExtendTableIDHistoryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandExtendTableIDHistoryArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandExtendTableIDHistoryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandExtendTableIDHistoryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandExtendTableIDHistoryArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandExtendTableIDHistoryArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandExtendTableIDHistoryArchive& from) {
    CommandExtendTableIDHistoryArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandExtendTableIDHistoryArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandExtendTableIDHistoryArchive";
  }
  protected:
  explicit CommandExtendTableIDHistoryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kTableUidHistoryRollbackFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TST::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TST::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TST::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TST::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TST::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TST::FormulaRewriteSpecArchive* rewrite_spec);
  ::TST::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
  bool has_table_uid_history_rollback() const;
  private:
  bool _internal_has_table_uid_history_rollback() const;
  public:
  void clear_table_uid_history_rollback();
  const ::TSCE::RewriteTableUIDInfoArchive& table_uid_history_rollback() const;
  PROTOBUF_NODISCARD ::TSCE::RewriteTableUIDInfoArchive* release_table_uid_history_rollback();
  ::TSCE::RewriteTableUIDInfoArchive* mutable_table_uid_history_rollback();
  void set_allocated_table_uid_history_rollback(::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback);
  private:
  const ::TSCE::RewriteTableUIDInfoArchive& _internal_table_uid_history_rollback() const;
  ::TSCE::RewriteTableUIDInfoArchive* _internal_mutable_table_uid_history_rollback();
  public:
  void unsafe_arena_set_allocated_table_uid_history_rollback(
      ::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback);
  ::TSCE::RewriteTableUIDInfoArchive* unsafe_arena_release_table_uid_history_rollback();

  // @@protoc_insertion_point(class_scope:TST.CommandExtendTableIDHistoryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TST::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TableCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool TableCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool TableCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TableCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TableCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.super)
  return _internal_super();
}
inline void TableCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandArchive.super)
}
inline ::TSK::CommandArchive* TableCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* TableCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TableCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TableCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* TableCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandArchive.super)
  return _msg;
}
inline void TableCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandArchive.super)
}

// required .TSP.UUIDPath table_info_id_path = 2;
inline bool TableCommandArchive::_internal_has_table_info_id_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_info_id_path_ != nullptr);
  return value;
}
inline bool TableCommandArchive::has_table_info_id_path() const {
  return _internal_has_table_info_id_path();
}
inline const ::TSP::UUIDPath& TableCommandArchive::_internal_table_info_id_path() const {
  const ::TSP::UUIDPath* p = _impl_.table_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& TableCommandArchive::table_info_id_path() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.table_info_id_path)
  return _internal_table_info_id_path();
}
inline void TableCommandArchive::unsafe_arena_set_allocated_table_info_id_path(
    ::TSP::UUIDPath* table_info_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_id_path_);
  }
  _impl_.table_info_id_path_ = table_info_id_path;
  if (table_info_id_path) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandArchive.table_info_id_path)
}
inline ::TSP::UUIDPath* TableCommandArchive::release_table_info_id_path() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = _impl_.table_info_id_path_;
  _impl_.table_info_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* TableCommandArchive::unsafe_arena_release_table_info_id_path() {
  // @@protoc_insertion_point(field_release:TST.TableCommandArchive.table_info_id_path)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = _impl_.table_info_id_path_;
  _impl_.table_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* TableCommandArchive::_internal_mutable_table_info_id_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.table_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.table_info_id_path_ = p;
  }
  return _impl_.table_info_id_path_;
}
inline ::TSP::UUIDPath* TableCommandArchive::mutable_table_info_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_table_info_id_path();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandArchive.table_info_id_path)
  return _msg;
}
inline void TableCommandArchive::set_allocated_table_info_id_path(::TSP::UUIDPath* table_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_id_path_);
  }
  if (table_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_id_path));
    if (message_arena != submessage_arena) {
      table_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info_id_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.table_info_id_path_ = table_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandArchive.table_info_id_path)
}

// optional string commandname = 3;
inline bool TableCommandArchive::_internal_has_commandname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableCommandArchive::has_commandname() const {
  return _internal_has_commandname();
}
inline void TableCommandArchive::clear_commandname() {
  _impl_.commandname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableCommandArchive::commandname() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.commandname)
  return _internal_commandname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableCommandArchive::set_commandname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.commandname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.commandname)
}
inline std::string* TableCommandArchive::mutable_commandname() {
  std::string* _s = _internal_mutable_commandname();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandArchive.commandname)
  return _s;
}
inline const std::string& TableCommandArchive::_internal_commandname() const {
  return _impl_.commandname_.Get();
}
inline void TableCommandArchive::_internal_set_commandname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.commandname_.Set(value, GetArenaForAllocation());
}
inline std::string* TableCommandArchive::_internal_mutable_commandname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.commandname_.Mutable(GetArenaForAllocation());
}
inline std::string* TableCommandArchive::release_commandname() {
  // @@protoc_insertion_point(field_release:TST.TableCommandArchive.commandname)
  if (!_internal_has_commandname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.commandname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commandname_.IsDefault()) {
    _impl_.commandname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TableCommandArchive::set_allocated_commandname(std::string* commandname) {
  if (commandname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.commandname_.SetAllocated(commandname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commandname_.IsDefault()) {
    _impl_.commandname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandArchive.commandname)
}

// optional .TSP.Reference default_cell_styles_container = 4;
inline bool TableCommandArchive::_internal_has_default_cell_styles_container() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_cell_styles_container_ != nullptr);
  return value;
}
inline bool TableCommandArchive::has_default_cell_styles_container() const {
  return _internal_has_default_cell_styles_container();
}
inline const ::TSP::Reference& TableCommandArchive::_internal_default_cell_styles_container() const {
  const ::TSP::Reference* p = _impl_.default_cell_styles_container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableCommandArchive::default_cell_styles_container() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.default_cell_styles_container)
  return _internal_default_cell_styles_container();
}
inline void TableCommandArchive::unsafe_arena_set_allocated_default_cell_styles_container(
    ::TSP::Reference* default_cell_styles_container) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_cell_styles_container_);
  }
  _impl_.default_cell_styles_container_ = default_cell_styles_container;
  if (default_cell_styles_container) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandArchive.default_cell_styles_container)
}
inline ::TSP::Reference* TableCommandArchive::release_default_cell_styles_container() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.default_cell_styles_container_;
  _impl_.default_cell_styles_container_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TableCommandArchive::unsafe_arena_release_default_cell_styles_container() {
  // @@protoc_insertion_point(field_release:TST.TableCommandArchive.default_cell_styles_container)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.default_cell_styles_container_;
  _impl_.default_cell_styles_container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableCommandArchive::_internal_mutable_default_cell_styles_container() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.default_cell_styles_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.default_cell_styles_container_ = p;
  }
  return _impl_.default_cell_styles_container_;
}
inline ::TSP::Reference* TableCommandArchive::mutable_default_cell_styles_container() {
  ::TSP::Reference* _msg = _internal_mutable_default_cell_styles_container();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandArchive.default_cell_styles_container)
  return _msg;
}
inline void TableCommandArchive::set_allocated_default_cell_styles_container(::TSP::Reference* default_cell_styles_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_cell_styles_container_);
  }
  if (default_cell_styles_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_cell_styles_container));
    if (message_arena != submessage_arena) {
      default_cell_styles_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_cell_styles_container, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.default_cell_styles_container_ = default_cell_styles_container;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandArchive.default_cell_styles_container)
}

// optional double timestamp = 5;
inline bool TableCommandArchive::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TableCommandArchive::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void TableCommandArchive::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double TableCommandArchive::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double TableCommandArchive::timestamp() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.timestamp)
  return _internal_timestamp();
}
inline void TableCommandArchive::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.timestamp_ = value;
}
inline void TableCommandArchive::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.timestamp)
}

// optional uint32 random_seed_lo = 6;
inline bool TableCommandArchive::_internal_has_random_seed_lo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TableCommandArchive::has_random_seed_lo() const {
  return _internal_has_random_seed_lo();
}
inline void TableCommandArchive::clear_random_seed_lo() {
  _impl_.random_seed_lo_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t TableCommandArchive::_internal_random_seed_lo() const {
  return _impl_.random_seed_lo_;
}
inline uint32_t TableCommandArchive::random_seed_lo() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.random_seed_lo)
  return _internal_random_seed_lo();
}
inline void TableCommandArchive::_internal_set_random_seed_lo(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.random_seed_lo_ = value;
}
inline void TableCommandArchive::set_random_seed_lo(uint32_t value) {
  _internal_set_random_seed_lo(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.random_seed_lo)
}

// optional uint32 random_seed_hi = 7;
inline bool TableCommandArchive::_internal_has_random_seed_hi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TableCommandArchive::has_random_seed_hi() const {
  return _internal_has_random_seed_hi();
}
inline void TableCommandArchive::clear_random_seed_hi() {
  _impl_.random_seed_hi_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t TableCommandArchive::_internal_random_seed_hi() const {
  return _impl_.random_seed_hi_;
}
inline uint32_t TableCommandArchive::random_seed_hi() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.random_seed_hi)
  return _internal_random_seed_hi();
}
inline void TableCommandArchive::_internal_set_random_seed_hi(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.random_seed_hi_ = value;
}
inline void TableCommandArchive::set_random_seed_hi(uint32_t value) {
  _internal_set_random_seed_hi(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.random_seed_hi)
}

// optional bool is_inverse = 8;
inline bool TableCommandArchive::_internal_has_is_inverse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TableCommandArchive::has_is_inverse() const {
  return _internal_has_is_inverse();
}
inline void TableCommandArchive::clear_is_inverse() {
  _impl_.is_inverse_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool TableCommandArchive::_internal_is_inverse() const {
  return _impl_.is_inverse_;
}
inline bool TableCommandArchive::is_inverse() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.is_inverse)
  return _internal_is_inverse();
}
inline void TableCommandArchive::_internal_set_is_inverse(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_inverse_ = value;
}
inline void TableCommandArchive::set_is_inverse(bool value) {
  _internal_set_is_inverse(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.is_inverse)
}

// optional double old_timestamp = 9;
inline bool TableCommandArchive::_internal_has_old_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TableCommandArchive::has_old_timestamp() const {
  return _internal_has_old_timestamp();
}
inline void TableCommandArchive::clear_old_timestamp() {
  _impl_.old_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double TableCommandArchive::_internal_old_timestamp() const {
  return _impl_.old_timestamp_;
}
inline double TableCommandArchive::old_timestamp() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.old_timestamp)
  return _internal_old_timestamp();
}
inline void TableCommandArchive::_internal_set_old_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.old_timestamp_ = value;
}
inline void TableCommandArchive::set_old_timestamp(double value) {
  _internal_set_old_timestamp(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.old_timestamp)
}

// optional uint64 old_random_seed = 10;
inline bool TableCommandArchive::_internal_has_old_random_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TableCommandArchive::has_old_random_seed() const {
  return _internal_has_old_random_seed();
}
inline void TableCommandArchive::clear_old_random_seed() {
  _impl_.old_random_seed_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t TableCommandArchive::_internal_old_random_seed() const {
  return _impl_.old_random_seed_;
}
inline uint64_t TableCommandArchive::old_random_seed() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.old_random_seed)
  return _internal_old_random_seed();
}
inline void TableCommandArchive::_internal_set_old_random_seed(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.old_random_seed_ = value;
}
inline void TableCommandArchive::set_old_random_seed(uint64_t value) {
  _internal_set_old_random_seed(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.old_random_seed)
}

// -------------------------------------------------------------------

// CommandApplyCellContentsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyCellContentsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyCellContentsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyCellContentsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::TableCommandArchive& CommandApplyCellContentsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyCellContentsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellContentsArchive.super)
  return _internal_super();
}
inline void CommandApplyCellContentsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellContentsArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyCellContentsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellContentsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellContentsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellContentsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyCellContentsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellContentsArchive.super)
  return _msg;
}
inline void CommandApplyCellContentsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellContentsArchive.super)
}

// required .TSP.Reference cell_diff_map = 2;
inline bool CommandApplyCellContentsArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandApplyCellContentsArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandApplyCellContentsArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellContentsArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellContentsArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandApplyCellContentsArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellContentsArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellContentsArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellContentsArchive.cell_diff_map)
  return _msg;
}
inline void CommandApplyCellContentsArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellContentsArchive.cell_diff_map)
}

// optional .TSP.Reference rollback_cell_diff_map = 3;
inline bool CommandApplyCellContentsArchive::_internal_has_rollback_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rollback_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandApplyCellContentsArchive::has_rollback_cell_diff_map() const {
  return _internal_has_rollback_cell_diff_map();
}
inline const ::TSP::Reference& CommandApplyCellContentsArchive::_internal_rollback_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.rollback_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellContentsArchive::rollback_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellContentsArchive.rollback_cell_diff_map)
  return _internal_rollback_cell_diff_map();
}
inline void CommandApplyCellContentsArchive::unsafe_arena_set_allocated_rollback_cell_diff_map(
    ::TSP::Reference* rollback_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rollback_cell_diff_map_);
  }
  _impl_.rollback_cell_diff_map_ = rollback_cell_diff_map;
  if (rollback_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellContentsArchive.rollback_cell_diff_map)
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::release_rollback_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.rollback_cell_diff_map_;
  _impl_.rollback_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::unsafe_arena_release_rollback_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellContentsArchive.rollback_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.rollback_cell_diff_map_;
  _impl_.rollback_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::_internal_mutable_rollback_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rollback_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.rollback_cell_diff_map_ = p;
  }
  return _impl_.rollback_cell_diff_map_;
}
inline ::TSP::Reference* CommandApplyCellContentsArchive::mutable_rollback_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellContentsArchive.rollback_cell_diff_map)
  return _msg;
}
inline void CommandApplyCellContentsArchive::set_allocated_rollback_cell_diff_map(::TSP::Reference* rollback_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rollback_cell_diff_map_);
  }
  if (rollback_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cell_diff_map));
    if (message_arena != submessage_arena) {
      rollback_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rollback_cell_diff_map_ = rollback_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellContentsArchive.rollback_cell_diff_map)
}

// repeated .TSP.UUID custom_format_keys = 4;
inline int CommandApplyCellContentsArchive::_internal_custom_format_keys_size() const {
  return _impl_.custom_format_keys_.size();
}
inline int CommandApplyCellContentsArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandApplyCellContentsArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellContentsArchive.custom_format_keys)
  return _impl_.custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandApplyCellContentsArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyCellContentsArchive.custom_format_keys)
  return &_impl_.custom_format_keys_;
}
inline const ::TSP::UUID& CommandApplyCellContentsArchive::_internal_custom_format_keys(int index) const {
  return _impl_.custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandApplyCellContentsArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellContentsArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandApplyCellContentsArchive::_internal_add_custom_format_keys() {
  return _impl_.custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandApplyCellContentsArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:TST.CommandApplyCellContentsArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandApplyCellContentsArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyCellContentsArchive.custom_format_keys)
  return _impl_.custom_format_keys_;
}

// optional string action_string = 5;
inline bool CommandApplyCellContentsArchive::_internal_has_action_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandApplyCellContentsArchive::has_action_string() const {
  return _internal_has_action_string();
}
inline void CommandApplyCellContentsArchive::clear_action_string() {
  _impl_.action_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandApplyCellContentsArchive::action_string() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellContentsArchive.action_string)
  return _internal_action_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandApplyCellContentsArchive::set_action_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.action_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandApplyCellContentsArchive.action_string)
}
inline std::string* CommandApplyCellContentsArchive::mutable_action_string() {
  std::string* _s = _internal_mutable_action_string();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellContentsArchive.action_string)
  return _s;
}
inline const std::string& CommandApplyCellContentsArchive::_internal_action_string() const {
  return _impl_.action_string_.Get();
}
inline void CommandApplyCellContentsArchive::_internal_set_action_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.action_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandApplyCellContentsArchive::_internal_mutable_action_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.action_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandApplyCellContentsArchive::release_action_string() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellContentsArchive.action_string)
  if (!_internal_has_action_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.action_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_string_.IsDefault()) {
    _impl_.action_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandApplyCellContentsArchive::set_allocated_action_string(std::string* action_string) {
  if (action_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.action_string_.SetAllocated(action_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_string_.IsDefault()) {
    _impl_.action_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellContentsArchive.action_string)
}

// -------------------------------------------------------------------

// CommandApplyCellDiffMapArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyCellDiffMapArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyCellDiffMapArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyCellDiffMapArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyCellDiffMapArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyCellDiffMapArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellDiffMapArchive.super)
  return _internal_super();
}
inline void CommandApplyCellDiffMapArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellDiffMapArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyCellDiffMapArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellDiffMapArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellDiffMapArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellDiffMapArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyCellDiffMapArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellDiffMapArchive.super)
  return _msg;
}
inline void CommandApplyCellDiffMapArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellDiffMapArchive.super)
}

// required .TSP.Reference cell_diff_map = 2;
inline bool CommandApplyCellDiffMapArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandApplyCellDiffMapArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandApplyCellDiffMapArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellDiffMapArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellDiffMapArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandApplyCellDiffMapArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellDiffMapArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellDiffMapArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellDiffMapArchive.cell_diff_map)
  return _msg;
}
inline void CommandApplyCellDiffMapArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellDiffMapArchive.cell_diff_map)
}

// required bool should_allow_merge_fragments = 3;
inline bool CommandApplyCellDiffMapArchive::_internal_has_should_allow_merge_fragments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandApplyCellDiffMapArchive::has_should_allow_merge_fragments() const {
  return _internal_has_should_allow_merge_fragments();
}
inline void CommandApplyCellDiffMapArchive::clear_should_allow_merge_fragments() {
  _impl_.should_allow_merge_fragments_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandApplyCellDiffMapArchive::_internal_should_allow_merge_fragments() const {
  return _impl_.should_allow_merge_fragments_;
}
inline bool CommandApplyCellDiffMapArchive::should_allow_merge_fragments() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellDiffMapArchive.should_allow_merge_fragments)
  return _internal_should_allow_merge_fragments();
}
inline void CommandApplyCellDiffMapArchive::_internal_set_should_allow_merge_fragments(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.should_allow_merge_fragments_ = value;
}
inline void CommandApplyCellDiffMapArchive::set_should_allow_merge_fragments(bool value) {
  _internal_set_should_allow_merge_fragments(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyCellDiffMapArchive.should_allow_merge_fragments)
}

// optional .TSP.Reference inverse_cell_diff_map = 4;
inline bool CommandApplyCellDiffMapArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandApplyCellDiffMapArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandApplyCellDiffMapArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellDiffMapArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellDiffMapArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandApplyCellDiffMapArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellDiffMapArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellDiffMapArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandApplyCellDiffMapArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellDiffMapArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandApplyCellDiffMapArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellDiffMapArchive.inverse_cell_diff_map)
}

// repeated .TSP.UUID custom_format_keys = 5;
inline int CommandApplyCellDiffMapArchive::_internal_custom_format_keys_size() const {
  return _impl_.custom_format_keys_.size();
}
inline int CommandApplyCellDiffMapArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandApplyCellDiffMapArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellDiffMapArchive.custom_format_keys)
  return _impl_.custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandApplyCellDiffMapArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyCellDiffMapArchive.custom_format_keys)
  return &_impl_.custom_format_keys_;
}
inline const ::TSP::UUID& CommandApplyCellDiffMapArchive::_internal_custom_format_keys(int index) const {
  return _impl_.custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandApplyCellDiffMapArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellDiffMapArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandApplyCellDiffMapArchive::_internal_add_custom_format_keys() {
  return _impl_.custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandApplyCellDiffMapArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:TST.CommandApplyCellDiffMapArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandApplyCellDiffMapArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyCellDiffMapArchive.custom_format_keys)
  return _impl_.custom_format_keys_;
}

// -------------------------------------------------------------------

// CommandApplyCellMapArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyCellMapArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyCellMapArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyCellMapArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyCellMapArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyCellMapArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.super)
  return _internal_super();
}
inline void CommandApplyCellMapArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellMapArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyCellMapArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellMapArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellMapArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellMapArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyCellMapArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellMapArchive.super)
  return _msg;
}
inline void CommandApplyCellMapArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellMapArchive.super)
}

// required .TSP.Reference redo_cell_map = 2;
inline bool CommandApplyCellMapArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyCellMapArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::_internal_redo_cell_map() const {
  const ::TSP::Reference* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandApplyCellMapArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TSP::Reference* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellMapArchive.redo_cell_map)
}
inline ::TSP::Reference* CommandApplyCellMapArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellMapArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::mutable_redo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellMapArchive.redo_cell_map)
  return _msg;
}
inline void CommandApplyCellMapArchive::set_allocated_redo_cell_map(::TSP::Reference* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellMapArchive.redo_cell_map)
}

// optional .TSP.Reference undo_cell_map = 3;
inline bool CommandApplyCellMapArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyCellMapArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::_internal_undo_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandApplyCellMapArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TSP::Reference* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellMapArchive.undo_cell_map)
}
inline ::TSP::Reference* CommandApplyCellMapArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellMapArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::mutable_undo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellMapArchive.undo_cell_map)
  return _msg;
}
inline void CommandApplyCellMapArchive::set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellMapArchive.undo_cell_map)
}

// optional .TSP.Reference undo_formula_rewrite_command = 4;
inline bool CommandApplyCellMapArchive::_internal_has_undo_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandApplyCellMapArchive::has_undo_formula_rewrite_command() const {
  return _internal_has_undo_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::_internal_undo_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::undo_formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.undo_formula_rewrite_command)
  return _internal_undo_formula_rewrite_command();
}
inline void CommandApplyCellMapArchive::unsafe_arena_set_allocated_undo_formula_rewrite_command(
    ::TSP::Reference* undo_formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  if (undo_formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellMapArchive.undo_formula_rewrite_command)
}
inline ::TSP::Reference* CommandApplyCellMapArchive::release_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::unsafe_arena_release_undo_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellMapArchive.undo_formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::_internal_mutable_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_formula_rewrite_command_ = p;
  }
  return _impl_.undo_formula_rewrite_command_;
}
inline ::TSP::Reference* CommandApplyCellMapArchive::mutable_undo_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellMapArchive.undo_formula_rewrite_command)
  return _msg;
}
inline void CommandApplyCellMapArchive::set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  if (undo_formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_formula_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellMapArchive.undo_formula_rewrite_command)
}

// repeated .TSP.UUID custom_format_keys = 5;
inline int CommandApplyCellMapArchive::_internal_custom_format_keys_size() const {
  return _impl_.custom_format_keys_.size();
}
inline int CommandApplyCellMapArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandApplyCellMapArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellMapArchive.custom_format_keys)
  return _impl_.custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandApplyCellMapArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyCellMapArchive.custom_format_keys)
  return &_impl_.custom_format_keys_;
}
inline const ::TSP::UUID& CommandApplyCellMapArchive::_internal_custom_format_keys(int index) const {
  return _impl_.custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandApplyCellMapArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandApplyCellMapArchive::_internal_add_custom_format_keys() {
  return _impl_.custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandApplyCellMapArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:TST.CommandApplyCellMapArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandApplyCellMapArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyCellMapArchive.custom_format_keys)
  return _impl_.custom_format_keys_;
}

// optional uint32 merge_owner_rollback_index = 6;
inline bool CommandApplyCellMapArchive::_internal_has_merge_owner_rollback_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandApplyCellMapArchive::has_merge_owner_rollback_index() const {
  return _internal_has_merge_owner_rollback_index();
}
inline void CommandApplyCellMapArchive::clear_merge_owner_rollback_index() {
  _impl_.merge_owner_rollback_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandApplyCellMapArchive::_internal_merge_owner_rollback_index() const {
  return _impl_.merge_owner_rollback_index_;
}
inline uint32_t CommandApplyCellMapArchive::merge_owner_rollback_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.merge_owner_rollback_index)
  return _internal_merge_owner_rollback_index();
}
inline void CommandApplyCellMapArchive::_internal_set_merge_owner_rollback_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.merge_owner_rollback_index_ = value;
}
inline void CommandApplyCellMapArchive::set_merge_owner_rollback_index(uint32_t value) {
  _internal_set_merge_owner_rollback_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyCellMapArchive.merge_owner_rollback_index)
}

// required bool is_from_paste = 7;
inline bool CommandApplyCellMapArchive::_internal_has_is_from_paste() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandApplyCellMapArchive::has_is_from_paste() const {
  return _internal_has_is_from_paste();
}
inline void CommandApplyCellMapArchive::clear_is_from_paste() {
  _impl_.is_from_paste_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandApplyCellMapArchive::_internal_is_from_paste() const {
  return _impl_.is_from_paste_;
}
inline bool CommandApplyCellMapArchive::is_from_paste() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.is_from_paste)
  return _internal_is_from_paste();
}
inline void CommandApplyCellMapArchive::_internal_set_is_from_paste(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_from_paste_ = value;
}
inline void CommandApplyCellMapArchive::set_is_from_paste(bool value) {
  _internal_set_is_from_paste(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyCellMapArchive.is_from_paste)
}

// repeated .TSP.Reference formula_rewrite_commands = 8;
inline int CommandApplyCellMapArchive::_internal_formula_rewrite_commands_size() const {
  return _impl_.formula_rewrite_commands_.size();
}
inline int CommandApplyCellMapArchive::formula_rewrite_commands_size() const {
  return _internal_formula_rewrite_commands_size();
}
inline ::TSP::Reference* CommandApplyCellMapArchive::mutable_formula_rewrite_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellMapArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandApplyCellMapArchive::mutable_formula_rewrite_commands() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyCellMapArchive.formula_rewrite_commands)
  return &_impl_.formula_rewrite_commands_;
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::_internal_formula_rewrite_commands(int index) const {
  return _impl_.formula_rewrite_commands_.Get(index);
}
inline const ::TSP::Reference& CommandApplyCellMapArchive::formula_rewrite_commands(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellMapArchive.formula_rewrite_commands)
  return _internal_formula_rewrite_commands(index);
}
inline ::TSP::Reference* CommandApplyCellMapArchive::_internal_add_formula_rewrite_commands() {
  return _impl_.formula_rewrite_commands_.Add();
}
inline ::TSP::Reference* CommandApplyCellMapArchive::add_formula_rewrite_commands() {
  ::TSP::Reference* _add = _internal_add_formula_rewrite_commands();
  // @@protoc_insertion_point(field_add:TST.CommandApplyCellMapArchive.formula_rewrite_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandApplyCellMapArchive::formula_rewrite_commands() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyCellMapArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_;
}

// -------------------------------------------------------------------

// CommandApplyConcurrentCellMapArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyConcurrentCellMapArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyConcurrentCellMapArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyConcurrentCellMapArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyConcurrentCellMapArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyConcurrentCellMapArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.super)
  return _internal_super();
}
inline void CommandApplyConcurrentCellMapArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConcurrentCellMapArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyConcurrentCellMapArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyConcurrentCellMapArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConcurrentCellMapArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyConcurrentCellMapArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyConcurrentCellMapArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConcurrentCellMapArchive.super)
  return _msg;
}
inline void CommandApplyConcurrentCellMapArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConcurrentCellMapArchive.super)
}

// required .TSP.Reference redo_concurrent_cell_map = 2;
inline bool CommandApplyConcurrentCellMapArchive::_internal_has_redo_concurrent_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_concurrent_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyConcurrentCellMapArchive::has_redo_concurrent_cell_map() const {
  return _internal_has_redo_concurrent_cell_map();
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::_internal_redo_concurrent_cell_map() const {
  const ::TSP::Reference* p = _impl_.redo_concurrent_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::redo_concurrent_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.redo_concurrent_cell_map)
  return _internal_redo_concurrent_cell_map();
}
inline void CommandApplyConcurrentCellMapArchive::unsafe_arena_set_allocated_redo_concurrent_cell_map(
    ::TSP::Reference* redo_concurrent_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_concurrent_cell_map_);
  }
  _impl_.redo_concurrent_cell_map_ = redo_concurrent_cell_map;
  if (redo_concurrent_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConcurrentCellMapArchive.redo_concurrent_cell_map)
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::release_redo_concurrent_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.redo_concurrent_cell_map_;
  _impl_.redo_concurrent_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::unsafe_arena_release_redo_concurrent_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConcurrentCellMapArchive.redo_concurrent_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.redo_concurrent_cell_map_;
  _impl_.redo_concurrent_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::_internal_mutable_redo_concurrent_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.redo_concurrent_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.redo_concurrent_cell_map_ = p;
  }
  return _impl_.redo_concurrent_cell_map_;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::mutable_redo_concurrent_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_redo_concurrent_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConcurrentCellMapArchive.redo_concurrent_cell_map)
  return _msg;
}
inline void CommandApplyConcurrentCellMapArchive::set_allocated_redo_concurrent_cell_map(::TSP::Reference* redo_concurrent_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_concurrent_cell_map_);
  }
  if (redo_concurrent_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_concurrent_cell_map));
    if (message_arena != submessage_arena) {
      redo_concurrent_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_concurrent_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.redo_concurrent_cell_map_ = redo_concurrent_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConcurrentCellMapArchive.redo_concurrent_cell_map)
}

// optional .TSP.Reference undo_concurrent_cell_map = 3;
inline bool CommandApplyConcurrentCellMapArchive::_internal_has_undo_concurrent_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_concurrent_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyConcurrentCellMapArchive::has_undo_concurrent_cell_map() const {
  return _internal_has_undo_concurrent_cell_map();
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::_internal_undo_concurrent_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_concurrent_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::undo_concurrent_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.undo_concurrent_cell_map)
  return _internal_undo_concurrent_cell_map();
}
inline void CommandApplyConcurrentCellMapArchive::unsafe_arena_set_allocated_undo_concurrent_cell_map(
    ::TSP::Reference* undo_concurrent_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_concurrent_cell_map_);
  }
  _impl_.undo_concurrent_cell_map_ = undo_concurrent_cell_map;
  if (undo_concurrent_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConcurrentCellMapArchive.undo_concurrent_cell_map)
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::release_undo_concurrent_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_concurrent_cell_map_;
  _impl_.undo_concurrent_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::unsafe_arena_release_undo_concurrent_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConcurrentCellMapArchive.undo_concurrent_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_concurrent_cell_map_;
  _impl_.undo_concurrent_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::_internal_mutable_undo_concurrent_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_concurrent_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_concurrent_cell_map_ = p;
  }
  return _impl_.undo_concurrent_cell_map_;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::mutable_undo_concurrent_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_concurrent_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConcurrentCellMapArchive.undo_concurrent_cell_map)
  return _msg;
}
inline void CommandApplyConcurrentCellMapArchive::set_allocated_undo_concurrent_cell_map(::TSP::Reference* undo_concurrent_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_concurrent_cell_map_);
  }
  if (undo_concurrent_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_concurrent_cell_map));
    if (message_arena != submessage_arena) {
      undo_concurrent_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_concurrent_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_concurrent_cell_map_ = undo_concurrent_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConcurrentCellMapArchive.undo_concurrent_cell_map)
}

// optional .TSP.Reference undo_formula_rewrite_command = 4;
inline bool CommandApplyConcurrentCellMapArchive::_internal_has_undo_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandApplyConcurrentCellMapArchive::has_undo_formula_rewrite_command() const {
  return _internal_has_undo_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::_internal_undo_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::undo_formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.undo_formula_rewrite_command)
  return _internal_undo_formula_rewrite_command();
}
inline void CommandApplyConcurrentCellMapArchive::unsafe_arena_set_allocated_undo_formula_rewrite_command(
    ::TSP::Reference* undo_formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  if (undo_formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConcurrentCellMapArchive.undo_formula_rewrite_command)
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::release_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::unsafe_arena_release_undo_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConcurrentCellMapArchive.undo_formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::_internal_mutable_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_formula_rewrite_command_ = p;
  }
  return _impl_.undo_formula_rewrite_command_;
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::mutable_undo_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConcurrentCellMapArchive.undo_formula_rewrite_command)
  return _msg;
}
inline void CommandApplyConcurrentCellMapArchive::set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  if (undo_formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_formula_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConcurrentCellMapArchive.undo_formula_rewrite_command)
}

// repeated .TSP.UUID custom_format_keys = 5;
inline int CommandApplyConcurrentCellMapArchive::_internal_custom_format_keys_size() const {
  return _impl_.custom_format_keys_.size();
}
inline int CommandApplyConcurrentCellMapArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandApplyConcurrentCellMapArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConcurrentCellMapArchive.custom_format_keys)
  return _impl_.custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandApplyConcurrentCellMapArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyConcurrentCellMapArchive.custom_format_keys)
  return &_impl_.custom_format_keys_;
}
inline const ::TSP::UUID& CommandApplyConcurrentCellMapArchive::_internal_custom_format_keys(int index) const {
  return _impl_.custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandApplyConcurrentCellMapArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandApplyConcurrentCellMapArchive::_internal_add_custom_format_keys() {
  return _impl_.custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandApplyConcurrentCellMapArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:TST.CommandApplyConcurrentCellMapArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandApplyConcurrentCellMapArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyConcurrentCellMapArchive.custom_format_keys)
  return _impl_.custom_format_keys_;
}

// optional uint32 merge_owner_rollback_index = 6;
inline bool CommandApplyConcurrentCellMapArchive::_internal_has_merge_owner_rollback_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandApplyConcurrentCellMapArchive::has_merge_owner_rollback_index() const {
  return _internal_has_merge_owner_rollback_index();
}
inline void CommandApplyConcurrentCellMapArchive::clear_merge_owner_rollback_index() {
  _impl_.merge_owner_rollback_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandApplyConcurrentCellMapArchive::_internal_merge_owner_rollback_index() const {
  return _impl_.merge_owner_rollback_index_;
}
inline uint32_t CommandApplyConcurrentCellMapArchive::merge_owner_rollback_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.merge_owner_rollback_index)
  return _internal_merge_owner_rollback_index();
}
inline void CommandApplyConcurrentCellMapArchive::_internal_set_merge_owner_rollback_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.merge_owner_rollback_index_ = value;
}
inline void CommandApplyConcurrentCellMapArchive::set_merge_owner_rollback_index(uint32_t value) {
  _internal_set_merge_owner_rollback_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyConcurrentCellMapArchive.merge_owner_rollback_index)
}

// required bool is_from_paste = 7;
inline bool CommandApplyConcurrentCellMapArchive::_internal_has_is_from_paste() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandApplyConcurrentCellMapArchive::has_is_from_paste() const {
  return _internal_has_is_from_paste();
}
inline void CommandApplyConcurrentCellMapArchive::clear_is_from_paste() {
  _impl_.is_from_paste_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandApplyConcurrentCellMapArchive::_internal_is_from_paste() const {
  return _impl_.is_from_paste_;
}
inline bool CommandApplyConcurrentCellMapArchive::is_from_paste() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.is_from_paste)
  return _internal_is_from_paste();
}
inline void CommandApplyConcurrentCellMapArchive::_internal_set_is_from_paste(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_from_paste_ = value;
}
inline void CommandApplyConcurrentCellMapArchive::set_is_from_paste(bool value) {
  _internal_set_is_from_paste(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyConcurrentCellMapArchive.is_from_paste)
}

// repeated .TSP.Reference formula_rewrite_commands = 8;
inline int CommandApplyConcurrentCellMapArchive::_internal_formula_rewrite_commands_size() const {
  return _impl_.formula_rewrite_commands_.size();
}
inline int CommandApplyConcurrentCellMapArchive::formula_rewrite_commands_size() const {
  return _internal_formula_rewrite_commands_size();
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::mutable_formula_rewrite_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConcurrentCellMapArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandApplyConcurrentCellMapArchive::mutable_formula_rewrite_commands() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyConcurrentCellMapArchive.formula_rewrite_commands)
  return &_impl_.formula_rewrite_commands_;
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::_internal_formula_rewrite_commands(int index) const {
  return _impl_.formula_rewrite_commands_.Get(index);
}
inline const ::TSP::Reference& CommandApplyConcurrentCellMapArchive::formula_rewrite_commands(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConcurrentCellMapArchive.formula_rewrite_commands)
  return _internal_formula_rewrite_commands(index);
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::_internal_add_formula_rewrite_commands() {
  return _impl_.formula_rewrite_commands_.Add();
}
inline ::TSP::Reference* CommandApplyConcurrentCellMapArchive::add_formula_rewrite_commands() {
  ::TSP::Reference* _add = _internal_add_formula_rewrite_commands();
  // @@protoc_insertion_point(field_add:TST.CommandApplyConcurrentCellMapArchive.formula_rewrite_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandApplyConcurrentCellMapArchive::formula_rewrite_commands() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyConcurrentCellMapArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_;
}

// -------------------------------------------------------------------

// CommandChangeFreezeHeaderStateArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandChangeFreezeHeaderStateArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChangeFreezeHeaderStateArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandChangeFreezeHeaderStateArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandChangeFreezeHeaderStateArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandChangeFreezeHeaderStateArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeFreezeHeaderStateArchive.super)
  return _internal_super();
}
inline void CommandChangeFreezeHeaderStateArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChangeFreezeHeaderStateArchive.super)
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandChangeFreezeHeaderStateArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandChangeFreezeHeaderStateArchive.super)
  return _msg;
}
inline void CommandChangeFreezeHeaderStateArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChangeFreezeHeaderStateArchive.super)
}

// required .TST.TableDimensionArchive direction = 2;
inline bool CommandChangeFreezeHeaderStateArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandChangeFreezeHeaderStateArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandChangeFreezeHeaderStateArchive::clear_direction() {
  _impl_.direction_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TST::TableDimensionArchive CommandChangeFreezeHeaderStateArchive::_internal_direction() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.direction_);
}
inline ::TST::TableDimensionArchive CommandChangeFreezeHeaderStateArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeFreezeHeaderStateArchive.direction)
  return _internal_direction();
}
inline void CommandChangeFreezeHeaderStateArchive::_internal_set_direction(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.direction_ = value;
}
inline void CommandChangeFreezeHeaderStateArchive::set_direction(::TST::TableDimensionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandChangeFreezeHeaderStateArchive.direction)
}

// required bool new_freeze_state = 3;
inline bool CommandChangeFreezeHeaderStateArchive::_internal_has_new_freeze_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandChangeFreezeHeaderStateArchive::has_new_freeze_state() const {
  return _internal_has_new_freeze_state();
}
inline void CommandChangeFreezeHeaderStateArchive::clear_new_freeze_state() {
  _impl_.new_freeze_state_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandChangeFreezeHeaderStateArchive::_internal_new_freeze_state() const {
  return _impl_.new_freeze_state_;
}
inline bool CommandChangeFreezeHeaderStateArchive::new_freeze_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeFreezeHeaderStateArchive.new_freeze_state)
  return _internal_new_freeze_state();
}
inline void CommandChangeFreezeHeaderStateArchive::_internal_set_new_freeze_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_freeze_state_ = value;
}
inline void CommandChangeFreezeHeaderStateArchive::set_new_freeze_state(bool value) {
  _internal_set_new_freeze_state(value);
  // @@protoc_insertion_point(field_set:TST.CommandChangeFreezeHeaderStateArchive.new_freeze_state)
}

// required bool prev_freeze_state = 4;
inline bool CommandChangeFreezeHeaderStateArchive::_internal_has_prev_freeze_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandChangeFreezeHeaderStateArchive::has_prev_freeze_state() const {
  return _internal_has_prev_freeze_state();
}
inline void CommandChangeFreezeHeaderStateArchive::clear_prev_freeze_state() {
  _impl_.prev_freeze_state_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandChangeFreezeHeaderStateArchive::_internal_prev_freeze_state() const {
  return _impl_.prev_freeze_state_;
}
inline bool CommandChangeFreezeHeaderStateArchive::prev_freeze_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeFreezeHeaderStateArchive.prev_freeze_state)
  return _internal_prev_freeze_state();
}
inline void CommandChangeFreezeHeaderStateArchive::_internal_set_prev_freeze_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prev_freeze_state_ = value;
}
inline void CommandChangeFreezeHeaderStateArchive::set_prev_freeze_state(bool value) {
  _internal_set_prev_freeze_state(value);
  // @@protoc_insertion_point(field_set:TST.CommandChangeFreezeHeaderStateArchive.prev_freeze_state)
}

// -------------------------------------------------------------------

// CommandDeleteCellsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandDeleteCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandDeleteCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandDeleteCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.super)
  return _internal_super();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.super)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.super)
}

// optional bool invalidate_comments = 5;
inline bool CommandDeleteCellsArchive::_internal_has_invalidate_comments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandDeleteCellsArchive::has_invalidate_comments() const {
  return _internal_has_invalidate_comments();
}
inline void CommandDeleteCellsArchive::clear_invalidate_comments() {
  _impl_.invalidate_comments_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandDeleteCellsArchive::_internal_invalidate_comments() const {
  return _impl_.invalidate_comments_;
}
inline bool CommandDeleteCellsArchive::invalidate_comments() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.invalidate_comments)
  return _internal_invalidate_comments();
}
inline void CommandDeleteCellsArchive::_internal_set_invalidate_comments(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.invalidate_comments_ = value;
}
inline void CommandDeleteCellsArchive::set_invalidate_comments(bool value) {
  _internal_set_invalidate_comments(value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteCellsArchive.invalidate_comments)
}

// optional bool invalidate_comments_valid = 6;
inline bool CommandDeleteCellsArchive::_internal_has_invalidate_comments_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandDeleteCellsArchive::has_invalidate_comments_valid() const {
  return _internal_has_invalidate_comments_valid();
}
inline void CommandDeleteCellsArchive::clear_invalidate_comments_valid() {
  _impl_.invalidate_comments_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandDeleteCellsArchive::_internal_invalidate_comments_valid() const {
  return _impl_.invalidate_comments_valid_;
}
inline bool CommandDeleteCellsArchive::invalidate_comments_valid() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.invalidate_comments_valid)
  return _internal_invalidate_comments_valid();
}
inline void CommandDeleteCellsArchive::_internal_set_invalidate_comments_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.invalidate_comments_valid_ = value;
}
inline void CommandDeleteCellsArchive::set_invalidate_comments_valid(bool value) {
  _internal_set_invalidate_comments_valid(value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteCellsArchive.invalidate_comments_valid)
}

// optional .TST.CellUIDRegionArchive cell_uid_region = 7;
inline bool CommandDeleteCellsArchive::_internal_has_cell_uid_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_region_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_cell_uid_region() const {
  return _internal_has_cell_uid_region();
}
inline const ::TST::CellUIDRegionArchive& CommandDeleteCellsArchive::_internal_cell_uid_region() const {
  const ::TST::CellUIDRegionArchive* p = _impl_.cell_uid_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDRegionArchive&>(
      ::TST::_CellUIDRegionArchive_default_instance_);
}
inline const ::TST::CellUIDRegionArchive& CommandDeleteCellsArchive::cell_uid_region() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.cell_uid_region)
  return _internal_cell_uid_region();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_cell_uid_region(
    ::TST::CellUIDRegionArchive* cell_uid_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_region_);
  }
  _impl_.cell_uid_region_ = cell_uid_region;
  if (cell_uid_region) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.cell_uid_region)
}
inline ::TST::CellUIDRegionArchive* CommandDeleteCellsArchive::release_cell_uid_region() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDRegionArchive* temp = _impl_.cell_uid_region_;
  _impl_.cell_uid_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDRegionArchive* CommandDeleteCellsArchive::unsafe_arena_release_cell_uid_region() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.cell_uid_region)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDRegionArchive* temp = _impl_.cell_uid_region_;
  _impl_.cell_uid_region_ = nullptr;
  return temp;
}
inline ::TST::CellUIDRegionArchive* CommandDeleteCellsArchive::_internal_mutable_cell_uid_region() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uid_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDRegionArchive>(GetArenaForAllocation());
    _impl_.cell_uid_region_ = p;
  }
  return _impl_.cell_uid_region_;
}
inline ::TST::CellUIDRegionArchive* CommandDeleteCellsArchive::mutable_cell_uid_region() {
  ::TST::CellUIDRegionArchive* _msg = _internal_mutable_cell_uid_region();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.cell_uid_region)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_cell_uid_region(::TST::CellUIDRegionArchive* cell_uid_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_region_);
  }
  if (cell_uid_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_region));
    if (message_arena != submessage_arena) {
      cell_uid_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uid_region_ = cell_uid_region;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.cell_uid_region)
}

// optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
inline bool CommandDeleteCellsArchive::_internal_has_summary_cell_uid_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.summary_cell_uid_list_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_summary_cell_uid_list() const {
  return _internal_has_summary_cell_uid_list();
}
inline const ::TST::CellUIDListArchive& CommandDeleteCellsArchive::_internal_summary_cell_uid_list() const {
  const ::TST::CellUIDListArchive* p = _impl_.summary_cell_uid_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CommandDeleteCellsArchive::summary_cell_uid_list() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.summary_cell_uid_list)
  return _internal_summary_cell_uid_list();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_summary_cell_uid_list(
    ::TST::CellUIDListArchive* summary_cell_uid_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.summary_cell_uid_list_);
  }
  _impl_.summary_cell_uid_list_ = summary_cell_uid_list;
  if (summary_cell_uid_list) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.summary_cell_uid_list)
}
inline ::TST::CellUIDListArchive* CommandDeleteCellsArchive::release_summary_cell_uid_list() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellUIDListArchive* temp = _impl_.summary_cell_uid_list_;
  _impl_.summary_cell_uid_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* CommandDeleteCellsArchive::unsafe_arena_release_summary_cell_uid_list() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.summary_cell_uid_list)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellUIDListArchive* temp = _impl_.summary_cell_uid_list_;
  _impl_.summary_cell_uid_list_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CommandDeleteCellsArchive::_internal_mutable_summary_cell_uid_list() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.summary_cell_uid_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.summary_cell_uid_list_ = p;
  }
  return _impl_.summary_cell_uid_list_;
}
inline ::TST::CellUIDListArchive* CommandDeleteCellsArchive::mutable_summary_cell_uid_list() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_summary_cell_uid_list();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.summary_cell_uid_list)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_summary_cell_uid_list(::TST::CellUIDListArchive* summary_cell_uid_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.summary_cell_uid_list_);
  }
  if (summary_cell_uid_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_cell_uid_list));
    if (message_arena != submessage_arena) {
      summary_cell_uid_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary_cell_uid_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.summary_cell_uid_list_ = summary_cell_uid_list;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.summary_cell_uid_list)
}

// optional .TSP.Reference inverse_concurrent_cell_map = 9;
inline bool CommandDeleteCellsArchive::_internal_has_inverse_concurrent_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_concurrent_cell_map_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_inverse_concurrent_cell_map() const {
  return _internal_has_inverse_concurrent_cell_map();
}
inline const ::TSP::Reference& CommandDeleteCellsArchive::_internal_inverse_concurrent_cell_map() const {
  const ::TSP::Reference* p = _impl_.inverse_concurrent_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDeleteCellsArchive::inverse_concurrent_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.inverse_concurrent_cell_map)
  return _internal_inverse_concurrent_cell_map();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_inverse_concurrent_cell_map(
    ::TSP::Reference* inverse_concurrent_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_concurrent_cell_map_);
  }
  _impl_.inverse_concurrent_cell_map_ = inverse_concurrent_cell_map;
  if (inverse_concurrent_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.inverse_concurrent_cell_map)
}
inline ::TSP::Reference* CommandDeleteCellsArchive::release_inverse_concurrent_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.inverse_concurrent_cell_map_;
  _impl_.inverse_concurrent_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDeleteCellsArchive::unsafe_arena_release_inverse_concurrent_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.inverse_concurrent_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.inverse_concurrent_cell_map_;
  _impl_.inverse_concurrent_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDeleteCellsArchive::_internal_mutable_inverse_concurrent_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.inverse_concurrent_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_concurrent_cell_map_ = p;
  }
  return _impl_.inverse_concurrent_cell_map_;
}
inline ::TSP::Reference* CommandDeleteCellsArchive::mutable_inverse_concurrent_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_concurrent_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.inverse_concurrent_cell_map)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_inverse_concurrent_cell_map(::TSP::Reference* inverse_concurrent_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_concurrent_cell_map_);
  }
  if (inverse_concurrent_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_concurrent_cell_map));
    if (message_arena != submessage_arena) {
      inverse_concurrent_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_concurrent_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.inverse_concurrent_cell_map_ = inverse_concurrent_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.inverse_concurrent_cell_map)
}

// -------------------------------------------------------------------

// CommandDeleteCellContentsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandDeleteCellContentsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteCellContentsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandDeleteCellContentsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandDeleteCellContentsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.super)
  return _internal_super();
}
inline void CommandDeleteCellContentsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellContentsArchive.super)
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellContentsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellContentsArchive.super)
  return _msg;
}
inline void CommandDeleteCellContentsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellContentsArchive.super)
}

// required .TST.CellUIDListArchive cell_uid_list = 2;
inline bool CommandDeleteCellContentsArchive::_internal_has_cell_uid_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_list_ != nullptr);
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_cell_uid_list() const {
  return _internal_has_cell_uid_list();
}
inline const ::TST::CellUIDListArchive& CommandDeleteCellContentsArchive::_internal_cell_uid_list() const {
  const ::TST::CellUIDListArchive* p = _impl_.cell_uid_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CommandDeleteCellContentsArchive::cell_uid_list() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.cell_uid_list)
  return _internal_cell_uid_list();
}
inline void CommandDeleteCellContentsArchive::unsafe_arena_set_allocated_cell_uid_list(
    ::TST::CellUIDListArchive* cell_uid_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  if (cell_uid_list) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellContentsArchive.cell_uid_list)
}
inline ::TST::CellUIDListArchive* CommandDeleteCellContentsArchive::release_cell_uid_list() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* CommandDeleteCellContentsArchive::unsafe_arena_release_cell_uid_list() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellContentsArchive.cell_uid_list)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CommandDeleteCellContentsArchive::_internal_mutable_cell_uid_list() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uid_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.cell_uid_list_ = p;
  }
  return _impl_.cell_uid_list_;
}
inline ::TST::CellUIDListArchive* CommandDeleteCellContentsArchive::mutable_cell_uid_list() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_cell_uid_list();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellContentsArchive.cell_uid_list)
  return _msg;
}
inline void CommandDeleteCellContentsArchive::set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  if (cell_uid_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_list));
    if (message_arena != submessage_arena) {
      cell_uid_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellContentsArchive.cell_uid_list)
}

// optional .TSP.Reference inverse_cell_diff_map = 3;
inline bool CommandDeleteCellContentsArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandDeleteCellContentsArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDeleteCellContentsArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandDeleteCellContentsArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellContentsArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandDeleteCellContentsArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDeleteCellContentsArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellContentsArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDeleteCellContentsArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandDeleteCellContentsArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellContentsArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandDeleteCellContentsArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellContentsArchive.inverse_cell_diff_map)
}

// -------------------------------------------------------------------

// CommandMutateCellFormatArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMutateCellFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMutateCellFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMutateCellFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMutateCellFormatArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMutateCellFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellFormatArchive.super)
  return _internal_super();
}
inline void CommandMutateCellFormatArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellFormatArchive.super)
}
inline ::TST::TableCommandArchive* CommandMutateCellFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMutateCellFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMutateCellFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMutateCellFormatArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellFormatArchive.super)
  return _msg;
}
inline void CommandMutateCellFormatArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellFormatArchive.super)
}

// optional .TST.CellUIDListArchive cell_uid_list = 2;
inline bool CommandMutateCellFormatArchive::_internal_has_cell_uid_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_list_ != nullptr);
  return value;
}
inline bool CommandMutateCellFormatArchive::has_cell_uid_list() const {
  return _internal_has_cell_uid_list();
}
inline const ::TST::CellUIDListArchive& CommandMutateCellFormatArchive::_internal_cell_uid_list() const {
  const ::TST::CellUIDListArchive* p = _impl_.cell_uid_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CommandMutateCellFormatArchive::cell_uid_list() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellFormatArchive.cell_uid_list)
  return _internal_cell_uid_list();
}
inline void CommandMutateCellFormatArchive::unsafe_arena_set_allocated_cell_uid_list(
    ::TST::CellUIDListArchive* cell_uid_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  if (cell_uid_list) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellFormatArchive.cell_uid_list)
}
inline ::TST::CellUIDListArchive* CommandMutateCellFormatArchive::release_cell_uid_list() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* CommandMutateCellFormatArchive::unsafe_arena_release_cell_uid_list() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellFormatArchive.cell_uid_list)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CommandMutateCellFormatArchive::_internal_mutable_cell_uid_list() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uid_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.cell_uid_list_ = p;
  }
  return _impl_.cell_uid_list_;
}
inline ::TST::CellUIDListArchive* CommandMutateCellFormatArchive::mutable_cell_uid_list() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_cell_uid_list();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellFormatArchive.cell_uid_list)
  return _msg;
}
inline void CommandMutateCellFormatArchive::set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  if (cell_uid_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_list));
    if (message_arena != submessage_arena) {
      cell_uid_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellFormatArchive.cell_uid_list)
}

// optional .TSP.Reference inverse_cell_diff_map = 3;
inline bool CommandMutateCellFormatArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandMutateCellFormatArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandMutateCellFormatArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMutateCellFormatArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellFormatArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandMutateCellFormatArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellFormatArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellFormatArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellFormatArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandMutateCellFormatArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellFormatArchive.inverse_cell_diff_map)
}

// optional .TSP.Reference whole_format_diff_map = 4;
inline bool CommandMutateCellFormatArchive::_internal_has_whole_format_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.whole_format_diff_map_ != nullptr);
  return value;
}
inline bool CommandMutateCellFormatArchive::has_whole_format_diff_map() const {
  return _internal_has_whole_format_diff_map();
}
inline const ::TSP::Reference& CommandMutateCellFormatArchive::_internal_whole_format_diff_map() const {
  const ::TSP::Reference* p = _impl_.whole_format_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMutateCellFormatArchive::whole_format_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellFormatArchive.whole_format_diff_map)
  return _internal_whole_format_diff_map();
}
inline void CommandMutateCellFormatArchive::unsafe_arena_set_allocated_whole_format_diff_map(
    ::TSP::Reference* whole_format_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.whole_format_diff_map_);
  }
  _impl_.whole_format_diff_map_ = whole_format_diff_map;
  if (whole_format_diff_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellFormatArchive.whole_format_diff_map)
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::release_whole_format_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.whole_format_diff_map_;
  _impl_.whole_format_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::unsafe_arena_release_whole_format_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellFormatArchive.whole_format_diff_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.whole_format_diff_map_;
  _impl_.whole_format_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::_internal_mutable_whole_format_diff_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.whole_format_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.whole_format_diff_map_ = p;
  }
  return _impl_.whole_format_diff_map_;
}
inline ::TSP::Reference* CommandMutateCellFormatArchive::mutable_whole_format_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_whole_format_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellFormatArchive.whole_format_diff_map)
  return _msg;
}
inline void CommandMutateCellFormatArchive::set_allocated_whole_format_diff_map(::TSP::Reference* whole_format_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.whole_format_diff_map_);
  }
  if (whole_format_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whole_format_diff_map));
    if (message_arena != submessage_arena) {
      whole_format_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whole_format_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.whole_format_diff_map_ = whole_format_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellFormatArchive.whole_format_diff_map)
}

// required uint32 intended_format_type = 5;
inline bool CommandMutateCellFormatArchive::_internal_has_intended_format_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandMutateCellFormatArchive::has_intended_format_type() const {
  return _internal_has_intended_format_type();
}
inline void CommandMutateCellFormatArchive::clear_intended_format_type() {
  _impl_.intended_format_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandMutateCellFormatArchive::_internal_intended_format_type() const {
  return _impl_.intended_format_type_;
}
inline uint32_t CommandMutateCellFormatArchive::intended_format_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellFormatArchive.intended_format_type)
  return _internal_intended_format_type();
}
inline void CommandMutateCellFormatArchive::_internal_set_intended_format_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.intended_format_type_ = value;
}
inline void CommandMutateCellFormatArchive::set_intended_format_type(uint32_t value) {
  _internal_set_intended_format_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandMutateCellFormatArchive.intended_format_type)
}

// -------------------------------------------------------------------

// CommandSetAutomaticDurationUnitsArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticDurationUnitsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetAutomaticDurationUnitsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetAutomaticDurationUnitsArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetAutomaticDurationUnitsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticDurationUnitsArchive.super)
  return _internal_super();
}
inline void CommandSetAutomaticDurationUnitsArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetAutomaticDurationUnitsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetAutomaticDurationUnitsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticDurationUnitsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetAutomaticDurationUnitsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetAutomaticDurationUnitsArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticDurationUnitsArchive.super)
  return _msg;
}
inline void CommandSetAutomaticDurationUnitsArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.super)
}

// optional bool automatic_units = 4;
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_has_automatic_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetAutomaticDurationUnitsArchive::has_automatic_units() const {
  return _internal_has_automatic_units();
}
inline void CommandSetAutomaticDurationUnitsArchive::clear_automatic_units() {
  _impl_.automatic_units_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_automatic_units() const {
  return _impl_.automatic_units_;
}
inline bool CommandSetAutomaticDurationUnitsArchive::automatic_units() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticDurationUnitsArchive.automatic_units)
  return _internal_automatic_units();
}
inline void CommandSetAutomaticDurationUnitsArchive::_internal_set_automatic_units(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.automatic_units_ = value;
}
inline void CommandSetAutomaticDurationUnitsArchive::set_automatic_units(bool value) {
  _internal_set_automatic_units(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetAutomaticDurationUnitsArchive.automatic_units)
}

// -------------------------------------------------------------------

// CommandSetDurationStyleArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetDurationStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetDurationStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetDurationStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetDurationStyleArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetDurationStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDurationStyleArchive.super)
  return _internal_super();
}
inline void CommandSetDurationStyleArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetDurationStyleArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetDurationStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationStyleArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetDurationStyleArchive.super)
  return _msg;
}
inline void CommandSetDurationStyleArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetDurationStyleArchive.super)
}

// optional uint32 duration_style = 2;
inline bool CommandSetDurationStyleArchive::_internal_has_duration_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetDurationStyleArchive::has_duration_style() const {
  return _internal_has_duration_style();
}
inline void CommandSetDurationStyleArchive::clear_duration_style() {
  _impl_.duration_style_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetDurationStyleArchive::_internal_duration_style() const {
  return _impl_.duration_style_;
}
inline uint32_t CommandSetDurationStyleArchive::duration_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDurationStyleArchive.duration_style)
  return _internal_duration_style();
}
inline void CommandSetDurationStyleArchive::_internal_set_duration_style(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_style_ = value;
}
inline void CommandSetDurationStyleArchive::set_duration_style(uint32_t value) {
  _internal_set_duration_style(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetDurationStyleArchive.duration_style)
}

// -------------------------------------------------------------------

// CommandSetDurationUnitSmallestLargestArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetDurationUnitSmallestLargestArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetDurationUnitSmallestLargestArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetDurationUnitSmallestLargestArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetDurationUnitSmallestLargestArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetDurationUnitSmallestLargestArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDurationUnitSmallestLargestArchive.super)
  return _internal_super();
}
inline void CommandSetDurationUnitSmallestLargestArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetDurationUnitSmallestLargestArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationUnitSmallestLargestArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationUnitSmallestLargestArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetDurationUnitSmallestLargestArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationUnitSmallestLargestArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDurationUnitSmallestLargestArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetDurationUnitSmallestLargestArchive.super)
  return _msg;
}
inline void CommandSetDurationUnitSmallestLargestArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetDurationUnitSmallestLargestArchive.super)
}

// optional uint32 smallest_unit = 2;
inline bool CommandSetDurationUnitSmallestLargestArchive::_internal_has_smallest_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetDurationUnitSmallestLargestArchive::has_smallest_unit() const {
  return _internal_has_smallest_unit();
}
inline void CommandSetDurationUnitSmallestLargestArchive::clear_smallest_unit() {
  _impl_.smallest_unit_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetDurationUnitSmallestLargestArchive::_internal_smallest_unit() const {
  return _impl_.smallest_unit_;
}
inline uint32_t CommandSetDurationUnitSmallestLargestArchive::smallest_unit() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDurationUnitSmallestLargestArchive.smallest_unit)
  return _internal_smallest_unit();
}
inline void CommandSetDurationUnitSmallestLargestArchive::_internal_set_smallest_unit(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.smallest_unit_ = value;
}
inline void CommandSetDurationUnitSmallestLargestArchive::set_smallest_unit(uint32_t value) {
  _internal_set_smallest_unit(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetDurationUnitSmallestLargestArchive.smallest_unit)
}

// optional uint32 largest_unit = 3;
inline bool CommandSetDurationUnitSmallestLargestArchive::_internal_has_largest_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetDurationUnitSmallestLargestArchive::has_largest_unit() const {
  return _internal_has_largest_unit();
}
inline void CommandSetDurationUnitSmallestLargestArchive::clear_largest_unit() {
  _impl_.largest_unit_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetDurationUnitSmallestLargestArchive::_internal_largest_unit() const {
  return _impl_.largest_unit_;
}
inline uint32_t CommandSetDurationUnitSmallestLargestArchive::largest_unit() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDurationUnitSmallestLargestArchive.largest_unit)
  return _internal_largest_unit();
}
inline void CommandSetDurationUnitSmallestLargestArchive::_internal_set_largest_unit(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.largest_unit_ = value;
}
inline void CommandSetDurationUnitSmallestLargestArchive::set_largest_unit(uint32_t value) {
  _internal_set_largest_unit(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetDurationUnitSmallestLargestArchive.largest_unit)
}

// -------------------------------------------------------------------

// CommandReplaceCustomFormatArchive

// optional .TSP.Reference undo_diff_map = 1;
inline bool CommandReplaceCustomFormatArchive::_internal_has_undo_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_diff_map_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive::has_undo_diff_map() const {
  return _internal_has_undo_diff_map();
}
inline const ::TSP::Reference& CommandReplaceCustomFormatArchive::_internal_undo_diff_map() const {
  const ::TSP::Reference* p = _impl_.undo_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceCustomFormatArchive::undo_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceCustomFormatArchive.undo_diff_map)
  return _internal_undo_diff_map();
}
inline void CommandReplaceCustomFormatArchive::unsafe_arena_set_allocated_undo_diff_map(
    ::TSP::Reference* undo_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_diff_map_);
  }
  _impl_.undo_diff_map_ = undo_diff_map;
  if (undo_diff_map) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceCustomFormatArchive.undo_diff_map)
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::release_undo_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.undo_diff_map_;
  _impl_.undo_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::unsafe_arena_release_undo_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceCustomFormatArchive.undo_diff_map)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.undo_diff_map_;
  _impl_.undo_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::_internal_mutable_undo_diff_map() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.undo_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_diff_map_ = p;
  }
  return _impl_.undo_diff_map_;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::mutable_undo_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceCustomFormatArchive.undo_diff_map)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive::set_allocated_undo_diff_map(::TSP::Reference* undo_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_diff_map_);
  }
  if (undo_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_diff_map));
    if (message_arena != submessage_arena) {
      undo_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.undo_diff_map_ = undo_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceCustomFormatArchive.undo_diff_map)
}

// optional .TSP.Reference commit_diff_map = 2;
inline bool CommandReplaceCustomFormatArchive::_internal_has_commit_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commit_diff_map_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive::has_commit_diff_map() const {
  return _internal_has_commit_diff_map();
}
inline const ::TSP::Reference& CommandReplaceCustomFormatArchive::_internal_commit_diff_map() const {
  const ::TSP::Reference* p = _impl_.commit_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceCustomFormatArchive::commit_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceCustomFormatArchive.commit_diff_map)
  return _internal_commit_diff_map();
}
inline void CommandReplaceCustomFormatArchive::unsafe_arena_set_allocated_commit_diff_map(
    ::TSP::Reference* commit_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_diff_map_);
  }
  _impl_.commit_diff_map_ = commit_diff_map;
  if (commit_diff_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceCustomFormatArchive.commit_diff_map)
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::release_commit_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.commit_diff_map_;
  _impl_.commit_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::unsafe_arena_release_commit_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceCustomFormatArchive.commit_diff_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.commit_diff_map_;
  _impl_.commit_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::_internal_mutable_commit_diff_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.commit_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.commit_diff_map_ = p;
  }
  return _impl_.commit_diff_map_;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::mutable_commit_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_commit_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceCustomFormatArchive.commit_diff_map)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive::set_allocated_commit_diff_map(::TSP::Reference* commit_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_diff_map_);
  }
  if (commit_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_diff_map));
    if (message_arena != submessage_arena) {
      commit_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.commit_diff_map_ = commit_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceCustomFormatArchive.commit_diff_map)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandReplaceCustomFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandReplaceCustomFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandReplaceCustomFormatArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandReplaceCustomFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceCustomFormatArchive.super)
  return _internal_super();
}
inline void CommandReplaceCustomFormatArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceCustomFormatArchive.super)
}
inline ::TST::TableCommandArchive* CommandReplaceCustomFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandReplaceCustomFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceCustomFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandReplaceCustomFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandReplaceCustomFormatArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceCustomFormatArchive.super)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceCustomFormatArchive.super)
}

// -------------------------------------------------------------------

// CommandMoveCellsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMoveCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMoveCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMoveCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.super)
  return _internal_super();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandMoveCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMoveCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.super)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.super)
}

// required .TSP.UUIDPath dst_table_info_id_path = 2;
inline bool CommandMoveCellsArchive::_internal_has_dst_table_info_id_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dst_table_info_id_path_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_dst_table_info_id_path() const {
  return _internal_has_dst_table_info_id_path();
}
inline const ::TSP::UUIDPath& CommandMoveCellsArchive::_internal_dst_table_info_id_path() const {
  const ::TSP::UUIDPath* p = _impl_.dst_table_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandMoveCellsArchive::dst_table_info_id_path() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.dst_table_info_id_path)
  return _internal_dst_table_info_id_path();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_dst_table_info_id_path(
    ::TSP::UUIDPath* dst_table_info_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_table_info_id_path_);
  }
  _impl_.dst_table_info_id_path_ = dst_table_info_id_path;
  if (dst_table_info_id_path) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.dst_table_info_id_path)
}
inline ::TSP::UUIDPath* CommandMoveCellsArchive::release_dst_table_info_id_path() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.dst_table_info_id_path_;
  _impl_.dst_table_info_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandMoveCellsArchive::unsafe_arena_release_dst_table_info_id_path() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.dst_table_info_id_path)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.dst_table_info_id_path_;
  _impl_.dst_table_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandMoveCellsArchive::_internal_mutable_dst_table_info_id_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dst_table_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.dst_table_info_id_path_ = p;
  }
  return _impl_.dst_table_info_id_path_;
}
inline ::TSP::UUIDPath* CommandMoveCellsArchive::mutable_dst_table_info_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_dst_table_info_id_path();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.dst_table_info_id_path)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_dst_table_info_id_path(::TSP::UUIDPath* dst_table_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_table_info_id_path_);
  }
  if (dst_table_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_table_info_id_path));
    if (message_arena != submessage_arena) {
      dst_table_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_table_info_id_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dst_table_info_id_path_ = dst_table_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.dst_table_info_id_path)
}

// required .TSP.UUIDRectArchive src_uid_range = 3;
inline bool CommandMoveCellsArchive::_internal_has_src_uid_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.src_uid_range_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_src_uid_range() const {
  return _internal_has_src_uid_range();
}
inline const ::TSP::UUIDRectArchive& CommandMoveCellsArchive::_internal_src_uid_range() const {
  const ::TSP::UUIDRectArchive* p = _impl_.src_uid_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDRectArchive&>(
      ::TSP::_UUIDRectArchive_default_instance_);
}
inline const ::TSP::UUIDRectArchive& CommandMoveCellsArchive::src_uid_range() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.src_uid_range)
  return _internal_src_uid_range();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_src_uid_range(
    ::TSP::UUIDRectArchive* src_uid_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_uid_range_);
  }
  _impl_.src_uid_range_ = src_uid_range;
  if (src_uid_range) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.src_uid_range)
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::release_src_uid_range() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDRectArchive* temp = _impl_.src_uid_range_;
  _impl_.src_uid_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::unsafe_arena_release_src_uid_range() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.src_uid_range)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDRectArchive* temp = _impl_.src_uid_range_;
  _impl_.src_uid_range_ = nullptr;
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::_internal_mutable_src_uid_range() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.src_uid_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDRectArchive>(GetArenaForAllocation());
    _impl_.src_uid_range_ = p;
  }
  return _impl_.src_uid_range_;
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::mutable_src_uid_range() {
  ::TSP::UUIDRectArchive* _msg = _internal_mutable_src_uid_range();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.src_uid_range)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_src_uid_range(::TSP::UUIDRectArchive* src_uid_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_uid_range_);
  }
  if (src_uid_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_uid_range));
    if (message_arena != submessage_arena) {
      src_uid_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_uid_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.src_uid_range_ = src_uid_range;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.src_uid_range)
}

// required .TSP.UUIDRectArchive dst_uid_range = 4;
inline bool CommandMoveCellsArchive::_internal_has_dst_uid_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dst_uid_range_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_dst_uid_range() const {
  return _internal_has_dst_uid_range();
}
inline const ::TSP::UUIDRectArchive& CommandMoveCellsArchive::_internal_dst_uid_range() const {
  const ::TSP::UUIDRectArchive* p = _impl_.dst_uid_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDRectArchive&>(
      ::TSP::_UUIDRectArchive_default_instance_);
}
inline const ::TSP::UUIDRectArchive& CommandMoveCellsArchive::dst_uid_range() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.dst_uid_range)
  return _internal_dst_uid_range();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_dst_uid_range(
    ::TSP::UUIDRectArchive* dst_uid_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_uid_range_);
  }
  _impl_.dst_uid_range_ = dst_uid_range;
  if (dst_uid_range) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.dst_uid_range)
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::release_dst_uid_range() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUIDRectArchive* temp = _impl_.dst_uid_range_;
  _impl_.dst_uid_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::unsafe_arena_release_dst_uid_range() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.dst_uid_range)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUIDRectArchive* temp = _impl_.dst_uid_range_;
  _impl_.dst_uid_range_ = nullptr;
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::_internal_mutable_dst_uid_range() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dst_uid_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDRectArchive>(GetArenaForAllocation());
    _impl_.dst_uid_range_ = p;
  }
  return _impl_.dst_uid_range_;
}
inline ::TSP::UUIDRectArchive* CommandMoveCellsArchive::mutable_dst_uid_range() {
  ::TSP::UUIDRectArchive* _msg = _internal_mutable_dst_uid_range();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.dst_uid_range)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_dst_uid_range(::TSP::UUIDRectArchive* dst_uid_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_uid_range_);
  }
  if (dst_uid_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_uid_range));
    if (message_arena != submessage_arena) {
      dst_uid_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_uid_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.dst_uid_range_ = dst_uid_range;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.dst_uid_range)
}

// optional .TST.TableDimensionArchive table_dimension = 5;
inline bool CommandMoveCellsArchive::_internal_has_table_dimension() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CommandMoveCellsArchive::has_table_dimension() const {
  return _internal_has_table_dimension();
}
inline void CommandMoveCellsArchive::clear_table_dimension() {
  _impl_.table_dimension_ = -1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::TST::TableDimensionArchive CommandMoveCellsArchive::_internal_table_dimension() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.table_dimension_);
}
inline ::TST::TableDimensionArchive CommandMoveCellsArchive::table_dimension() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.table_dimension)
  return _internal_table_dimension();
}
inline void CommandMoveCellsArchive::_internal_set_table_dimension(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.table_dimension_ = value;
}
inline void CommandMoveCellsArchive::set_table_dimension(::TST::TableDimensionArchive value) {
  _internal_set_table_dimension(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveCellsArchive.table_dimension)
}

// required .TSP.Reference src_cell_map = 6;
inline bool CommandMoveCellsArchive::_internal_has_src_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.src_cell_map_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_src_cell_map() const {
  return _internal_has_src_cell_map();
}
inline const ::TSP::Reference& CommandMoveCellsArchive::_internal_src_cell_map() const {
  const ::TSP::Reference* p = _impl_.src_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveCellsArchive::src_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.src_cell_map)
  return _internal_src_cell_map();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_src_cell_map(
    ::TSP::Reference* src_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_cell_map_);
  }
  _impl_.src_cell_map_ = src_cell_map;
  if (src_cell_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.src_cell_map)
}
inline ::TSP::Reference* CommandMoveCellsArchive::release_src_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.src_cell_map_;
  _impl_.src_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::unsafe_arena_release_src_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.src_cell_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.src_cell_map_;
  _impl_.src_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::_internal_mutable_src_cell_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.src_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.src_cell_map_ = p;
  }
  return _impl_.src_cell_map_;
}
inline ::TSP::Reference* CommandMoveCellsArchive::mutable_src_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_src_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.src_cell_map)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_src_cell_map(::TSP::Reference* src_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_cell_map_);
  }
  if (src_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_cell_map));
    if (message_arena != submessage_arena) {
      src_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.src_cell_map_ = src_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.src_cell_map)
}

// optional .TSP.Reference dst_cell_map = 7;
inline bool CommandMoveCellsArchive::_internal_has_dst_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dst_cell_map_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_dst_cell_map() const {
  return _internal_has_dst_cell_map();
}
inline const ::TSP::Reference& CommandMoveCellsArchive::_internal_dst_cell_map() const {
  const ::TSP::Reference* p = _impl_.dst_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveCellsArchive::dst_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.dst_cell_map)
  return _internal_dst_cell_map();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_dst_cell_map(
    ::TSP::Reference* dst_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_cell_map_);
  }
  _impl_.dst_cell_map_ = dst_cell_map;
  if (dst_cell_map) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.dst_cell_map)
}
inline ::TSP::Reference* CommandMoveCellsArchive::release_dst_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.dst_cell_map_;
  _impl_.dst_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::unsafe_arena_release_dst_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.dst_cell_map)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.dst_cell_map_;
  _impl_.dst_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::_internal_mutable_dst_cell_map() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dst_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.dst_cell_map_ = p;
  }
  return _impl_.dst_cell_map_;
}
inline ::TSP::Reference* CommandMoveCellsArchive::mutable_dst_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_dst_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.dst_cell_map)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_dst_cell_map(::TSP::Reference* dst_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_cell_map_);
  }
  if (dst_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_cell_map));
    if (message_arena != submessage_arena) {
      dst_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.dst_cell_map_ = dst_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.dst_cell_map)
}

// optional .TSP.Reference dst_cell_styles_container = 8;
inline bool CommandMoveCellsArchive::_internal_has_dst_cell_styles_container() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dst_cell_styles_container_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_dst_cell_styles_container() const {
  return _internal_has_dst_cell_styles_container();
}
inline const ::TSP::Reference& CommandMoveCellsArchive::_internal_dst_cell_styles_container() const {
  const ::TSP::Reference* p = _impl_.dst_cell_styles_container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveCellsArchive::dst_cell_styles_container() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.dst_cell_styles_container)
  return _internal_dst_cell_styles_container();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_dst_cell_styles_container(
    ::TSP::Reference* dst_cell_styles_container) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_cell_styles_container_);
  }
  _impl_.dst_cell_styles_container_ = dst_cell_styles_container;
  if (dst_cell_styles_container) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.dst_cell_styles_container)
}
inline ::TSP::Reference* CommandMoveCellsArchive::release_dst_cell_styles_container() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.dst_cell_styles_container_;
  _impl_.dst_cell_styles_container_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::unsafe_arena_release_dst_cell_styles_container() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.dst_cell_styles_container)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.dst_cell_styles_container_;
  _impl_.dst_cell_styles_container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::_internal_mutable_dst_cell_styles_container() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.dst_cell_styles_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.dst_cell_styles_container_ = p;
  }
  return _impl_.dst_cell_styles_container_;
}
inline ::TSP::Reference* CommandMoveCellsArchive::mutable_dst_cell_styles_container() {
  ::TSP::Reference* _msg = _internal_mutable_dst_cell_styles_container();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.dst_cell_styles_container)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_dst_cell_styles_container(::TSP::Reference* dst_cell_styles_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_cell_styles_container_);
  }
  if (dst_cell_styles_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_cell_styles_container));
    if (message_arena != submessage_arena) {
      dst_cell_styles_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_cell_styles_container, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.dst_cell_styles_container_ = dst_cell_styles_container;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.dst_cell_styles_container)
}

// optional .TSP.Reference src_undo_cell_map = 9;
inline bool CommandMoveCellsArchive::_internal_has_src_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.src_undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_src_undo_cell_map() const {
  return _internal_has_src_undo_cell_map();
}
inline const ::TSP::Reference& CommandMoveCellsArchive::_internal_src_undo_cell_map() const {
  const ::TSP::Reference* p = _impl_.src_undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveCellsArchive::src_undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.src_undo_cell_map)
  return _internal_src_undo_cell_map();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_src_undo_cell_map(
    ::TSP::Reference* src_undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_undo_cell_map_);
  }
  _impl_.src_undo_cell_map_ = src_undo_cell_map;
  if (src_undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.src_undo_cell_map)
}
inline ::TSP::Reference* CommandMoveCellsArchive::release_src_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.src_undo_cell_map_;
  _impl_.src_undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::unsafe_arena_release_src_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.src_undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.src_undo_cell_map_;
  _impl_.src_undo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::_internal_mutable_src_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.src_undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.src_undo_cell_map_ = p;
  }
  return _impl_.src_undo_cell_map_;
}
inline ::TSP::Reference* CommandMoveCellsArchive::mutable_src_undo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_src_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.src_undo_cell_map)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_src_undo_cell_map(::TSP::Reference* src_undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_undo_cell_map_);
  }
  if (src_undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_undo_cell_map));
    if (message_arena != submessage_arena) {
      src_undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.src_undo_cell_map_ = src_undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.src_undo_cell_map)
}

// optional .TSP.Reference dst_undo_cell_map = 10;
inline bool CommandMoveCellsArchive::_internal_has_dst_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dst_undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_dst_undo_cell_map() const {
  return _internal_has_dst_undo_cell_map();
}
inline const ::TSP::Reference& CommandMoveCellsArchive::_internal_dst_undo_cell_map() const {
  const ::TSP::Reference* p = _impl_.dst_undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveCellsArchive::dst_undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.dst_undo_cell_map)
  return _internal_dst_undo_cell_map();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_dst_undo_cell_map(
    ::TSP::Reference* dst_undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_undo_cell_map_);
  }
  _impl_.dst_undo_cell_map_ = dst_undo_cell_map;
  if (dst_undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.dst_undo_cell_map)
}
inline ::TSP::Reference* CommandMoveCellsArchive::release_dst_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.dst_undo_cell_map_;
  _impl_.dst_undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::unsafe_arena_release_dst_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.dst_undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.dst_undo_cell_map_;
  _impl_.dst_undo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveCellsArchive::_internal_mutable_dst_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.dst_undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.dst_undo_cell_map_ = p;
  }
  return _impl_.dst_undo_cell_map_;
}
inline ::TSP::Reference* CommandMoveCellsArchive::mutable_dst_undo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_dst_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.dst_undo_cell_map)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_dst_undo_cell_map(::TSP::Reference* dst_undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_undo_cell_map_);
  }
  if (dst_undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_undo_cell_map));
    if (message_arena != submessage_arena) {
      dst_undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.dst_undo_cell_map_ = dst_undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.dst_undo_cell_map)
}

// required uint32 dst_merge_owner_rollback_index = 11;
inline bool CommandMoveCellsArchive::_internal_has_dst_merge_owner_rollback_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CommandMoveCellsArchive::has_dst_merge_owner_rollback_index() const {
  return _internal_has_dst_merge_owner_rollback_index();
}
inline void CommandMoveCellsArchive::clear_dst_merge_owner_rollback_index() {
  _impl_.dst_merge_owner_rollback_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CommandMoveCellsArchive::_internal_dst_merge_owner_rollback_index() const {
  return _impl_.dst_merge_owner_rollback_index_;
}
inline uint32_t CommandMoveCellsArchive::dst_merge_owner_rollback_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.dst_merge_owner_rollback_index)
  return _internal_dst_merge_owner_rollback_index();
}
inline void CommandMoveCellsArchive::_internal_set_dst_merge_owner_rollback_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.dst_merge_owner_rollback_index_ = value;
}
inline void CommandMoveCellsArchive::set_dst_merge_owner_rollback_index(uint32_t value) {
  _internal_set_dst_merge_owner_rollback_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveCellsArchive.dst_merge_owner_rollback_index)
}

// repeated .TSP.Reference formula_rewrite_commands = 12;
inline int CommandMoveCellsArchive::_internal_formula_rewrite_commands_size() const {
  return _impl_.formula_rewrite_commands_.size();
}
inline int CommandMoveCellsArchive::formula_rewrite_commands_size() const {
  return _internal_formula_rewrite_commands_size();
}
inline ::TSP::Reference* CommandMoveCellsArchive::mutable_formula_rewrite_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveCellsArchive::mutable_formula_rewrite_commands() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandMoveCellsArchive.formula_rewrite_commands)
  return &_impl_.formula_rewrite_commands_;
}
inline const ::TSP::Reference& CommandMoveCellsArchive::_internal_formula_rewrite_commands(int index) const {
  return _impl_.formula_rewrite_commands_.Get(index);
}
inline const ::TSP::Reference& CommandMoveCellsArchive::formula_rewrite_commands(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.formula_rewrite_commands)
  return _internal_formula_rewrite_commands(index);
}
inline ::TSP::Reference* CommandMoveCellsArchive::_internal_add_formula_rewrite_commands() {
  return _impl_.formula_rewrite_commands_.Add();
}
inline ::TSP::Reference* CommandMoveCellsArchive::add_formula_rewrite_commands() {
  ::TSP::Reference* _add = _internal_add_formula_rewrite_commands();
  // @@protoc_insertion_point(field_add:TST.CommandMoveCellsArchive.formula_rewrite_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveCellsArchive::formula_rewrite_commands() const {
  // @@protoc_insertion_point(field_list:TST.CommandMoveCellsArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_;
}

// optional .TST.MergeOperationArchive merge_action_to_restore = 13;
inline bool CommandMoveCellsArchive::_internal_has_merge_action_to_restore() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merge_action_to_restore_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_merge_action_to_restore() const {
  return _internal_has_merge_action_to_restore();
}
inline const ::TST::MergeOperationArchive& CommandMoveCellsArchive::_internal_merge_action_to_restore() const {
  const ::TST::MergeOperationArchive* p = _impl_.merge_action_to_restore_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::MergeOperationArchive&>(
      ::TST::_MergeOperationArchive_default_instance_);
}
inline const ::TST::MergeOperationArchive& CommandMoveCellsArchive::merge_action_to_restore() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.merge_action_to_restore)
  return _internal_merge_action_to_restore();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_merge_action_to_restore(
    ::TST::MergeOperationArchive* merge_action_to_restore) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_action_to_restore_);
  }
  _impl_.merge_action_to_restore_ = merge_action_to_restore;
  if (merge_action_to_restore) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.merge_action_to_restore)
}
inline ::TST::MergeOperationArchive* CommandMoveCellsArchive::release_merge_action_to_restore() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TST::MergeOperationArchive* temp = _impl_.merge_action_to_restore_;
  _impl_.merge_action_to_restore_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::MergeOperationArchive* CommandMoveCellsArchive::unsafe_arena_release_merge_action_to_restore() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.merge_action_to_restore)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TST::MergeOperationArchive* temp = _impl_.merge_action_to_restore_;
  _impl_.merge_action_to_restore_ = nullptr;
  return temp;
}
inline ::TST::MergeOperationArchive* CommandMoveCellsArchive::_internal_mutable_merge_action_to_restore() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.merge_action_to_restore_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::MergeOperationArchive>(GetArenaForAllocation());
    _impl_.merge_action_to_restore_ = p;
  }
  return _impl_.merge_action_to_restore_;
}
inline ::TST::MergeOperationArchive* CommandMoveCellsArchive::mutable_merge_action_to_restore() {
  ::TST::MergeOperationArchive* _msg = _internal_mutable_merge_action_to_restore();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.merge_action_to_restore)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_merge_action_to_restore(::TST::MergeOperationArchive* merge_action_to_restore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_action_to_restore_);
  }
  if (merge_action_to_restore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_action_to_restore));
    if (message_arena != submessage_arena) {
      merge_action_to_restore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_action_to_restore, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.merge_action_to_restore_ = merge_action_to_restore;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.merge_action_to_restore)
}

// optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
inline bool CommandMoveCellsArchive::_internal_has_comment_cell_uids_to_restore() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.comment_cell_uids_to_restore_ != nullptr);
  return value;
}
inline bool CommandMoveCellsArchive::has_comment_cell_uids_to_restore() const {
  return _internal_has_comment_cell_uids_to_restore();
}
inline const ::TST::CellUIDListArchive& CommandMoveCellsArchive::_internal_comment_cell_uids_to_restore() const {
  const ::TST::CellUIDListArchive* p = _impl_.comment_cell_uids_to_restore_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CommandMoveCellsArchive::comment_cell_uids_to_restore() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.comment_cell_uids_to_restore)
  return _internal_comment_cell_uids_to_restore();
}
inline void CommandMoveCellsArchive::unsafe_arena_set_allocated_comment_cell_uids_to_restore(
    ::TST::CellUIDListArchive* comment_cell_uids_to_restore) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.comment_cell_uids_to_restore_);
  }
  _impl_.comment_cell_uids_to_restore_ = comment_cell_uids_to_restore;
  if (comment_cell_uids_to_restore) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveCellsArchive.comment_cell_uids_to_restore)
}
inline ::TST::CellUIDListArchive* CommandMoveCellsArchive::release_comment_cell_uids_to_restore() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TST::CellUIDListArchive* temp = _impl_.comment_cell_uids_to_restore_;
  _impl_.comment_cell_uids_to_restore_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* CommandMoveCellsArchive::unsafe_arena_release_comment_cell_uids_to_restore() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveCellsArchive.comment_cell_uids_to_restore)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TST::CellUIDListArchive* temp = _impl_.comment_cell_uids_to_restore_;
  _impl_.comment_cell_uids_to_restore_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CommandMoveCellsArchive::_internal_mutable_comment_cell_uids_to_restore() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.comment_cell_uids_to_restore_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.comment_cell_uids_to_restore_ = p;
  }
  return _impl_.comment_cell_uids_to_restore_;
}
inline ::TST::CellUIDListArchive* CommandMoveCellsArchive::mutable_comment_cell_uids_to_restore() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_comment_cell_uids_to_restore();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.comment_cell_uids_to_restore)
  return _msg;
}
inline void CommandMoveCellsArchive::set_allocated_comment_cell_uids_to_restore(::TST::CellUIDListArchive* comment_cell_uids_to_restore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.comment_cell_uids_to_restore_);
  }
  if (comment_cell_uids_to_restore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_cell_uids_to_restore));
    if (message_arena != submessage_arena) {
      comment_cell_uids_to_restore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comment_cell_uids_to_restore, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.comment_cell_uids_to_restore_ = comment_cell_uids_to_restore;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveCellsArchive.comment_cell_uids_to_restore)
}

// repeated .TSP.Reference comment_storages_to_restore = 15;
inline int CommandMoveCellsArchive::_internal_comment_storages_to_restore_size() const {
  return _impl_.comment_storages_to_restore_.size();
}
inline int CommandMoveCellsArchive::comment_storages_to_restore_size() const {
  return _internal_comment_storages_to_restore_size();
}
inline ::TSP::Reference* CommandMoveCellsArchive::mutable_comment_storages_to_restore(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveCellsArchive.comment_storages_to_restore)
  return _impl_.comment_storages_to_restore_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveCellsArchive::mutable_comment_storages_to_restore() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandMoveCellsArchive.comment_storages_to_restore)
  return &_impl_.comment_storages_to_restore_;
}
inline const ::TSP::Reference& CommandMoveCellsArchive::_internal_comment_storages_to_restore(int index) const {
  return _impl_.comment_storages_to_restore_.Get(index);
}
inline const ::TSP::Reference& CommandMoveCellsArchive::comment_storages_to_restore(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveCellsArchive.comment_storages_to_restore)
  return _internal_comment_storages_to_restore(index);
}
inline ::TSP::Reference* CommandMoveCellsArchive::_internal_add_comment_storages_to_restore() {
  return _impl_.comment_storages_to_restore_.Add();
}
inline ::TSP::Reference* CommandMoveCellsArchive::add_comment_storages_to_restore() {
  ::TSP::Reference* _add = _internal_add_comment_storages_to_restore();
  // @@protoc_insertion_point(field_add:TST.CommandMoveCellsArchive.comment_storages_to_restore)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveCellsArchive::comment_storages_to_restore() const {
  // @@protoc_insertion_point(field_list:TST.CommandMoveCellsArchive.comment_storages_to_restore)
  return _impl_.comment_storages_to_restore_;
}

// -------------------------------------------------------------------

// ColumnRowMetadataArchive

// required double size = 1;
inline bool ColumnRowMetadataArchive::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColumnRowMetadataArchive::has_size() const {
  return _internal_has_size();
}
inline void ColumnRowMetadataArchive::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ColumnRowMetadataArchive::_internal_size() const {
  return _impl_.size_;
}
inline double ColumnRowMetadataArchive::size() const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowMetadataArchive.size)
  return _internal_size();
}
inline void ColumnRowMetadataArchive::_internal_set_size(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}
inline void ColumnRowMetadataArchive::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowMetadataArchive.size)
}

// required uint32 hiding_action = 2;
inline bool ColumnRowMetadataArchive::_internal_has_hiding_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ColumnRowMetadataArchive::has_hiding_action() const {
  return _internal_has_hiding_action();
}
inline void ColumnRowMetadataArchive::clear_hiding_action() {
  _impl_.hiding_action_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ColumnRowMetadataArchive::_internal_hiding_action() const {
  return _impl_.hiding_action_;
}
inline uint32_t ColumnRowMetadataArchive::hiding_action() const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowMetadataArchive.hiding_action)
  return _internal_hiding_action();
}
inline void ColumnRowMetadataArchive::_internal_set_hiding_action(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hiding_action_ = value;
}
inline void ColumnRowMetadataArchive::set_hiding_action(uint32_t value) {
  _internal_set_hiding_action(value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowMetadataArchive.hiding_action)
}

// optional .TSP.Reference cell_style = 3;
inline bool ColumnRowMetadataArchive::_internal_has_cell_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_style_ != nullptr);
  return value;
}
inline bool ColumnRowMetadataArchive::has_cell_style() const {
  return _internal_has_cell_style();
}
inline const ::TSP::Reference& ColumnRowMetadataArchive::_internal_cell_style() const {
  const ::TSP::Reference* p = _impl_.cell_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ColumnRowMetadataArchive::cell_style() const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowMetadataArchive.cell_style)
  return _internal_cell_style();
}
inline void ColumnRowMetadataArchive::unsafe_arena_set_allocated_cell_style(
    ::TSP::Reference* cell_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_style_);
  }
  _impl_.cell_style_ = cell_style;
  if (cell_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ColumnRowMetadataArchive.cell_style)
}
inline ::TSP::Reference* ColumnRowMetadataArchive::release_cell_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.cell_style_;
  _impl_.cell_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ColumnRowMetadataArchive::unsafe_arena_release_cell_style() {
  // @@protoc_insertion_point(field_release:TST.ColumnRowMetadataArchive.cell_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.cell_style_;
  _impl_.cell_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ColumnRowMetadataArchive::_internal_mutable_cell_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cell_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_style_ = p;
  }
  return _impl_.cell_style_;
}
inline ::TSP::Reference* ColumnRowMetadataArchive::mutable_cell_style() {
  ::TSP::Reference* _msg = _internal_mutable_cell_style();
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowMetadataArchive.cell_style)
  return _msg;
}
inline void ColumnRowMetadataArchive::set_allocated_cell_style(::TSP::Reference* cell_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_style_);
  }
  if (cell_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style));
    if (message_arena != submessage_arena) {
      cell_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cell_style_ = cell_style;
  // @@protoc_insertion_point(field_set_allocated:TST.ColumnRowMetadataArchive.cell_style)
}

// optional .TSP.Reference text_style = 4;
inline bool ColumnRowMetadataArchive::_internal_has_text_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_style_ != nullptr);
  return value;
}
inline bool ColumnRowMetadataArchive::has_text_style() const {
  return _internal_has_text_style();
}
inline const ::TSP::Reference& ColumnRowMetadataArchive::_internal_text_style() const {
  const ::TSP::Reference* p = _impl_.text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ColumnRowMetadataArchive::text_style() const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowMetadataArchive.text_style)
  return _internal_text_style();
}
inline void ColumnRowMetadataArchive::unsafe_arena_set_allocated_text_style(
    ::TSP::Reference* text_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_style_);
  }
  _impl_.text_style_ = text_style;
  if (text_style) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ColumnRowMetadataArchive.text_style)
}
inline ::TSP::Reference* ColumnRowMetadataArchive::release_text_style() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.text_style_;
  _impl_.text_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ColumnRowMetadataArchive::unsafe_arena_release_text_style() {
  // @@protoc_insertion_point(field_release:TST.ColumnRowMetadataArchive.text_style)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.text_style_;
  _impl_.text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ColumnRowMetadataArchive::_internal_mutable_text_style() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.text_style_ = p;
  }
  return _impl_.text_style_;
}
inline ::TSP::Reference* ColumnRowMetadataArchive::mutable_text_style() {
  ::TSP::Reference* _msg = _internal_mutable_text_style();
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowMetadataArchive.text_style)
  return _msg;
}
inline void ColumnRowMetadataArchive::set_allocated_text_style(::TSP::Reference* text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_style_);
  }
  if (text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style));
    if (message_arena != submessage_arena) {
      text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.text_style_ = text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.ColumnRowMetadataArchive.text_style)
}

// optional .TSP.UUID uuid = 5;
inline bool ColumnRowMetadataArchive::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uuid_ != nullptr);
  return value;
}
inline bool ColumnRowMetadataArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::UUID& ColumnRowMetadataArchive::_internal_uuid() const {
  const ::TSP::UUID* p = _impl_.uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ColumnRowMetadataArchive::uuid() const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowMetadataArchive.uuid)
  return _internal_uuid();
}
inline void ColumnRowMetadataArchive::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  _impl_.uuid_ = uuid;
  if (uuid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ColumnRowMetadataArchive.uuid)
}
inline ::TSP::UUID* ColumnRowMetadataArchive::release_uuid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* ColumnRowMetadataArchive::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TST.ColumnRowMetadataArchive.uuid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ColumnRowMetadataArchive::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.uuid_ = p;
  }
  return _impl_.uuid_;
}
inline ::TSP::UUID* ColumnRowMetadataArchive::mutable_uuid() {
  ::TSP::UUID* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowMetadataArchive.uuid)
  return _msg;
}
inline void ColumnRowMetadataArchive::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TST.ColumnRowMetadataArchive.uuid)
}

// -------------------------------------------------------------------

// CommandInsertColumnsOrRowsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandInsertColumnsOrRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandInsertColumnsOrRowsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandInsertColumnsOrRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.super)
  return _internal_super();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.super)
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.super)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.super)
}

// required .TST.ColumnRowBundleArchive bundle = 2;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_bundle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bundle_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_bundle() const {
  return _internal_has_bundle();
}
inline void CommandInsertColumnsOrRowsArchive::clear_bundle() {
  if (_impl_.bundle_ != nullptr) _impl_.bundle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ColumnRowBundleArchive& CommandInsertColumnsOrRowsArchive::_internal_bundle() const {
  const ::TST::ColumnRowBundleArchive* p = _impl_.bundle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnRowBundleArchive&>(
      ::TST::_ColumnRowBundleArchive_default_instance_);
}
inline const ::TST::ColumnRowBundleArchive& CommandInsertColumnsOrRowsArchive::bundle() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.bundle)
  return _internal_bundle();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_bundle(
    ::TST::ColumnRowBundleArchive* bundle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bundle_);
  }
  _impl_.bundle_ = bundle;
  if (bundle) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.bundle)
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::release_bundle() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::ColumnRowBundleArchive* temp = _impl_.bundle_;
  _impl_.bundle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_bundle() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.bundle)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::ColumnRowBundleArchive* temp = _impl_.bundle_;
  _impl_.bundle_ = nullptr;
  return temp;
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::_internal_mutable_bundle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bundle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnRowBundleArchive>(GetArenaForAllocation());
    _impl_.bundle_ = p;
  }
  return _impl_.bundle_;
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::mutable_bundle() {
  ::TST::ColumnRowBundleArchive* _msg = _internal_mutable_bundle();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.bundle)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_bundle(::TST::ColumnRowBundleArchive* bundle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bundle_;
  }
  if (bundle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bundle);
    if (message_arena != submessage_arena) {
      bundle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bundle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bundle_ = bundle;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.bundle)
}

// required .TSP.Reference concurrent_cell_map = 15;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_concurrent_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.concurrent_cell_map_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_concurrent_cell_map() const {
  return _internal_has_concurrent_cell_map();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_concurrent_cell_map() const {
  const ::TSP::Reference* p = _impl_.concurrent_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::concurrent_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.concurrent_cell_map)
  return _internal_concurrent_cell_map();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_concurrent_cell_map(
    ::TSP::Reference* concurrent_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.concurrent_cell_map_);
  }
  _impl_.concurrent_cell_map_ = concurrent_cell_map;
  if (concurrent_cell_map) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.concurrent_cell_map)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_concurrent_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.concurrent_cell_map_;
  _impl_.concurrent_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_concurrent_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.concurrent_cell_map)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.concurrent_cell_map_;
  _impl_.concurrent_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_concurrent_cell_map() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.concurrent_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.concurrent_cell_map_ = p;
  }
  return _impl_.concurrent_cell_map_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_concurrent_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_concurrent_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.concurrent_cell_map)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_concurrent_cell_map(::TSP::Reference* concurrent_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.concurrent_cell_map_);
  }
  if (concurrent_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concurrent_cell_map));
    if (message_arena != submessage_arena) {
      concurrent_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concurrent_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.concurrent_cell_map_ = concurrent_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.concurrent_cell_map)
}

// required .TSP.Reference categories_cell_map = 16;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_categories_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.categories_cell_map_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_categories_cell_map() const {
  return _internal_has_categories_cell_map();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_categories_cell_map() const {
  const ::TSP::Reference* p = _impl_.categories_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::categories_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.categories_cell_map)
  return _internal_categories_cell_map();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_categories_cell_map(
    ::TSP::Reference* categories_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.categories_cell_map_);
  }
  _impl_.categories_cell_map_ = categories_cell_map;
  if (categories_cell_map) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.categories_cell_map)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_categories_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.categories_cell_map_;
  _impl_.categories_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_categories_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.categories_cell_map)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.categories_cell_map_;
  _impl_.categories_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_categories_cell_map() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.categories_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.categories_cell_map_ = p;
  }
  return _impl_.categories_cell_map_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_categories_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_categories_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.categories_cell_map)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_categories_cell_map(::TSP::Reference* categories_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.categories_cell_map_);
  }
  if (categories_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(categories_cell_map));
    if (message_arena != submessage_arena) {
      categories_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, categories_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.categories_cell_map_ = categories_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.categories_cell_map)
}

// optional .TSP.Reference undo_commands = 4;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_undo_commands() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_commands_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_undo_commands() const {
  return _internal_has_undo_commands();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_undo_commands() const {
  const ::TSP::Reference* p = _impl_.undo_commands_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::undo_commands() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.undo_commands)
  return _internal_undo_commands();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_commands(
    ::TSP::Reference* undo_commands) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_commands_);
  }
  _impl_.undo_commands_ = undo_commands;
  if (undo_commands) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_commands)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_undo_commands() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_commands_;
  _impl_.undo_commands_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_undo_commands() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.undo_commands)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_commands_;
  _impl_.undo_commands_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_undo_commands() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_commands_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_commands_ = p;
  }
  return _impl_.undo_commands_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_undo_commands() {
  ::TSP::Reference* _msg = _internal_mutable_undo_commands();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.undo_commands)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_undo_commands(::TSP::Reference* undo_commands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_commands_);
  }
  if (undo_commands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_commands));
    if (message_arena != submessage_arena) {
      undo_commands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_commands, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_commands_ = undo_commands;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_commands)
}

// optional .TSP.Reference undo_concurrent_cell_map = 17;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_undo_concurrent_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_concurrent_cell_map_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_undo_concurrent_cell_map() const {
  return _internal_has_undo_concurrent_cell_map();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_undo_concurrent_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_concurrent_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::undo_concurrent_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.undo_concurrent_cell_map)
  return _internal_undo_concurrent_cell_map();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_concurrent_cell_map(
    ::TSP::Reference* undo_concurrent_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_concurrent_cell_map_);
  }
  _impl_.undo_concurrent_cell_map_ = undo_concurrent_cell_map;
  if (undo_concurrent_cell_map) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_concurrent_cell_map)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_undo_concurrent_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = _impl_.undo_concurrent_cell_map_;
  _impl_.undo_concurrent_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_undo_concurrent_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.undo_concurrent_cell_map)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = _impl_.undo_concurrent_cell_map_;
  _impl_.undo_concurrent_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_undo_concurrent_cell_map() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.undo_concurrent_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_concurrent_cell_map_ = p;
  }
  return _impl_.undo_concurrent_cell_map_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_undo_concurrent_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_concurrent_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.undo_concurrent_cell_map)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_undo_concurrent_cell_map(::TSP::Reference* undo_concurrent_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_concurrent_cell_map_);
  }
  if (undo_concurrent_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_concurrent_cell_map));
    if (message_arena != submessage_arena) {
      undo_concurrent_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_concurrent_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.undo_concurrent_cell_map_ = undo_concurrent_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_concurrent_cell_map)
}

// optional .TSP.Reference undo_categories_cell_map = 18;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_undo_categories_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_categories_cell_map_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_undo_categories_cell_map() const {
  return _internal_has_undo_categories_cell_map();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_undo_categories_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_categories_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::undo_categories_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.undo_categories_cell_map)
  return _internal_undo_categories_cell_map();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_categories_cell_map(
    ::TSP::Reference* undo_categories_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_categories_cell_map_);
  }
  _impl_.undo_categories_cell_map_ = undo_categories_cell_map;
  if (undo_categories_cell_map) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_categories_cell_map)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_undo_categories_cell_map() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = _impl_.undo_categories_cell_map_;
  _impl_.undo_categories_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_undo_categories_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.undo_categories_cell_map)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = _impl_.undo_categories_cell_map_;
  _impl_.undo_categories_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_undo_categories_cell_map() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.undo_categories_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_categories_cell_map_ = p;
  }
  return _impl_.undo_categories_cell_map_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_undo_categories_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_categories_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.undo_categories_cell_map)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_undo_categories_cell_map(::TSP::Reference* undo_categories_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_categories_cell_map_);
  }
  if (undo_categories_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_categories_cell_map));
    if (message_arena != submessage_arena) {
      undo_categories_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_categories_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.undo_categories_cell_map_ = undo_categories_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_categories_cell_map)
}

// optional .TST.TableSortOrderUIDArchive sort_order = 6;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sort_order_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_sort_order() const {
  return _internal_has_sort_order();
}
inline const ::TST::TableSortOrderUIDArchive& CommandInsertColumnsOrRowsArchive::_internal_sort_order() const {
  const ::TST::TableSortOrderUIDArchive* p = _impl_.sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderUIDArchive&>(
      ::TST::_TableSortOrderUIDArchive_default_instance_);
}
inline const ::TST::TableSortOrderUIDArchive& CommandInsertColumnsOrRowsArchive::sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.sort_order)
  return _internal_sort_order();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_sort_order(
    ::TST::TableSortOrderUIDArchive* sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_order_);
  }
  _impl_.sort_order_ = sort_order;
  if (sort_order) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.sort_order)
}
inline ::TST::TableSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::release_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableSortOrderUIDArchive* temp = _impl_.sort_order_;
  _impl_.sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.sort_order)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableSortOrderUIDArchive* temp = _impl_.sort_order_;
  _impl_.sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::_internal_mutable_sort_order() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderUIDArchive>(GetArenaForAllocation());
    _impl_.sort_order_ = p;
  }
  return _impl_.sort_order_;
}
inline ::TST::TableSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::mutable_sort_order() {
  ::TST::TableSortOrderUIDArchive* _msg = _internal_mutable_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.sort_order)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_sort_order(::TST::TableSortOrderUIDArchive* sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_order_);
  }
  if (sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_order));
    if (message_arena != submessage_arena) {
      sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sort_order_ = sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.sort_order)
}

// optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 14;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_group_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_sort_order_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_group_sort_order() const {
  return _internal_has_group_sort_order();
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandInsertColumnsOrRowsArchive::_internal_group_sort_order() const {
  const ::TST::TableGroupSortOrderUIDArchive* p = _impl_.group_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableGroupSortOrderUIDArchive&>(
      ::TST::_TableGroupSortOrderUIDArchive_default_instance_);
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandInsertColumnsOrRowsArchive::group_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.group_sort_order)
  return _internal_group_sort_order();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_group_sort_order(
    ::TST::TableGroupSortOrderUIDArchive* group_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_sort_order_);
  }
  _impl_.group_sort_order_ = group_sort_order;
  if (group_sort_order) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.group_sort_order)
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::release_group_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.group_sort_order_;
  _impl_.group_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_group_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.group_sort_order)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.group_sort_order_;
  _impl_.group_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::_internal_mutable_group_sort_order() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.group_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableGroupSortOrderUIDArchive>(GetArenaForAllocation());
    _impl_.group_sort_order_ = p;
  }
  return _impl_.group_sort_order_;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandInsertColumnsOrRowsArchive::mutable_group_sort_order() {
  ::TST::TableGroupSortOrderUIDArchive* _msg = _internal_mutable_group_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.group_sort_order)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_group_sort_order(::TST::TableGroupSortOrderUIDArchive* group_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_sort_order_);
  }
  if (group_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_sort_order));
    if (message_arena != submessage_arena) {
      group_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.group_sort_order_ = group_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.group_sort_order)
}

// optional .TSP.Reference filter_set = 7;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_set_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_filter_set() const {
  return _internal_has_filter_set();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_filter_set() const {
  const ::TSP::Reference* p = _impl_.filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.filter_set)
  return _internal_filter_set();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_filter_set(
    ::TSP::Reference* filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  _impl_.filter_set_ = filter_set;
  if (filter_set) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.filter_set)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.filter_set)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_filter_set() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.filter_set_ = p;
  }
  return _impl_.filter_set_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.filter_set)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_filter_set(::TSP::Reference* filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  if (filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_set));
    if (message_arena != submessage_arena) {
      filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.filter_set_ = filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.filter_set)
}

// optional bool should_edge_expand_formula_ranges = 8;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_should_edge_expand_formula_ranges() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_should_edge_expand_formula_ranges() const {
  return _internal_has_should_edge_expand_formula_ranges();
}
inline void CommandInsertColumnsOrRowsArchive::clear_should_edge_expand_formula_ranges() {
  _impl_.should_edge_expand_formula_ranges_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool CommandInsertColumnsOrRowsArchive::_internal_should_edge_expand_formula_ranges() const {
  return _impl_.should_edge_expand_formula_ranges_;
}
inline bool CommandInsertColumnsOrRowsArchive::should_edge_expand_formula_ranges() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.should_edge_expand_formula_ranges)
  return _internal_should_edge_expand_formula_ranges();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_should_edge_expand_formula_ranges(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.should_edge_expand_formula_ranges_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_should_edge_expand_formula_ranges(bool value) {
  _internal_set_should_edge_expand_formula_ranges(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.should_edge_expand_formula_ranges)
}

// optional bool was_categorized = 9;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_was_categorized() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_was_categorized() const {
  return _internal_has_was_categorized();
}
inline void CommandInsertColumnsOrRowsArchive::clear_was_categorized() {
  _impl_.was_categorized_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool CommandInsertColumnsOrRowsArchive::_internal_was_categorized() const {
  return _impl_.was_categorized_;
}
inline bool CommandInsertColumnsOrRowsArchive::was_categorized() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.was_categorized)
  return _internal_was_categorized();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_was_categorized(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.was_categorized_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_was_categorized(bool value) {
  _internal_set_was_categorized(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.was_categorized)
}

// repeated .TSP.UUID undo_order = 10;
inline int CommandInsertColumnsOrRowsArchive::_internal_undo_order_size() const {
  return _impl_.undo_order_.size();
}
inline int CommandInsertColumnsOrRowsArchive::undo_order_size() const {
  return _internal_undo_order_size();
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::mutable_undo_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.undo_order)
  return _impl_.undo_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandInsertColumnsOrRowsArchive::mutable_undo_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandInsertColumnsOrRowsArchive.undo_order)
  return &_impl_.undo_order_;
}
inline const ::TSP::UUID& CommandInsertColumnsOrRowsArchive::_internal_undo_order(int index) const {
  return _impl_.undo_order_.Get(index);
}
inline const ::TSP::UUID& CommandInsertColumnsOrRowsArchive::undo_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.undo_order)
  return _internal_undo_order(index);
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::_internal_add_undo_order() {
  return _impl_.undo_order_.Add();
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::add_undo_order() {
  ::TSP::UUID* _add = _internal_add_undo_order();
  // @@protoc_insertion_point(field_add:TST.CommandInsertColumnsOrRowsArchive.undo_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandInsertColumnsOrRowsArchive::undo_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandInsertColumnsOrRowsArchive.undo_order)
  return _impl_.undo_order_;
}

// required .TSP.UUID src_row_column_uid = 11;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_src_row_column_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.src_row_column_uid_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_src_row_column_uid() const {
  return _internal_has_src_row_column_uid();
}
inline const ::TSP::UUID& CommandInsertColumnsOrRowsArchive::_internal_src_row_column_uid() const {
  const ::TSP::UUID* p = _impl_.src_row_column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandInsertColumnsOrRowsArchive::src_row_column_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.src_row_column_uid)
  return _internal_src_row_column_uid();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_src_row_column_uid(
    ::TSP::UUID* src_row_column_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_row_column_uid_);
  }
  _impl_.src_row_column_uid_ = src_row_column_uid;
  if (src_row_column_uid) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.src_row_column_uid)
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::release_src_row_column_uid() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = _impl_.src_row_column_uid_;
  _impl_.src_row_column_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_src_row_column_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.src_row_column_uid)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = _impl_.src_row_column_uid_;
  _impl_.src_row_column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::_internal_mutable_src_row_column_uid() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.src_row_column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.src_row_column_uid_ = p;
  }
  return _impl_.src_row_column_uid_;
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::mutable_src_row_column_uid() {
  ::TSP::UUID* _msg = _internal_mutable_src_row_column_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.src_row_column_uid)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_src_row_column_uid(::TSP::UUID* src_row_column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_row_column_uid_);
  }
  if (src_row_column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_row_column_uid));
    if (message_arena != submessage_arena) {
      src_row_column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_row_column_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.src_row_column_uid_ = src_row_column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.src_row_column_uid)
}

// required .TSP.UUID opp_row_column_uid = 12;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_opp_row_column_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.opp_row_column_uid_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_opp_row_column_uid() const {
  return _internal_has_opp_row_column_uid();
}
inline const ::TSP::UUID& CommandInsertColumnsOrRowsArchive::_internal_opp_row_column_uid() const {
  const ::TSP::UUID* p = _impl_.opp_row_column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandInsertColumnsOrRowsArchive::opp_row_column_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.opp_row_column_uid)
  return _internal_opp_row_column_uid();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_opp_row_column_uid(
    ::TSP::UUID* opp_row_column_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.opp_row_column_uid_);
  }
  _impl_.opp_row_column_uid_ = opp_row_column_uid;
  if (opp_row_column_uid) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.opp_row_column_uid)
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::release_opp_row_column_uid() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = _impl_.opp_row_column_uid_;
  _impl_.opp_row_column_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_opp_row_column_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.opp_row_column_uid)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = _impl_.opp_row_column_uid_;
  _impl_.opp_row_column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::_internal_mutable_opp_row_column_uid() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.opp_row_column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.opp_row_column_uid_ = p;
  }
  return _impl_.opp_row_column_uid_;
}
inline ::TSP::UUID* CommandInsertColumnsOrRowsArchive::mutable_opp_row_column_uid() {
  ::TSP::UUID* _msg = _internal_mutable_opp_row_column_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.opp_row_column_uid)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_opp_row_column_uid(::TSP::UUID* opp_row_column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.opp_row_column_uid_);
  }
  if (opp_row_column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opp_row_column_uid));
    if (message_arena != submessage_arena) {
      opp_row_column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opp_row_column_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.opp_row_column_uid_ = opp_row_column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.opp_row_column_uid)
}

// optional .TST.ColumnRowBundleArchive undo_bundle = 13;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_undo_bundle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_bundle_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_undo_bundle() const {
  return _internal_has_undo_bundle();
}
inline void CommandInsertColumnsOrRowsArchive::clear_undo_bundle() {
  if (_impl_.undo_bundle_ != nullptr) _impl_.undo_bundle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::TST::ColumnRowBundleArchive& CommandInsertColumnsOrRowsArchive::_internal_undo_bundle() const {
  const ::TST::ColumnRowBundleArchive* p = _impl_.undo_bundle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnRowBundleArchive&>(
      ::TST::_ColumnRowBundleArchive_default_instance_);
}
inline const ::TST::ColumnRowBundleArchive& CommandInsertColumnsOrRowsArchive::undo_bundle() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.undo_bundle)
  return _internal_undo_bundle();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_bundle(
    ::TST::ColumnRowBundleArchive* undo_bundle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_bundle_);
  }
  _impl_.undo_bundle_ = undo_bundle;
  if (undo_bundle) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_bundle)
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::release_undo_bundle() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::ColumnRowBundleArchive* temp = _impl_.undo_bundle_;
  _impl_.undo_bundle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_undo_bundle() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.undo_bundle)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::ColumnRowBundleArchive* temp = _impl_.undo_bundle_;
  _impl_.undo_bundle_ = nullptr;
  return temp;
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::_internal_mutable_undo_bundle() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.undo_bundle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnRowBundleArchive>(GetArenaForAllocation());
    _impl_.undo_bundle_ = p;
  }
  return _impl_.undo_bundle_;
}
inline ::TST::ColumnRowBundleArchive* CommandInsertColumnsOrRowsArchive::mutable_undo_bundle() {
  ::TST::ColumnRowBundleArchive* _msg = _internal_mutable_undo_bundle();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.undo_bundle)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_undo_bundle(::TST::ColumnRowBundleArchive* undo_bundle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.undo_bundle_;
  }
  if (undo_bundle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(undo_bundle);
    if (message_arena != submessage_arena) {
      undo_bundle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_bundle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.undo_bundle_ = undo_bundle;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.undo_bundle)
}

// -------------------------------------------------------------------

// ColumnRowBundleArchive

// required bool is_row = 1;
inline bool ColumnRowBundleArchive::_internal_has_is_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnRowBundleArchive::has_is_row() const {
  return _internal_has_is_row();
}
inline void ColumnRowBundleArchive::clear_is_row() {
  _impl_.is_row_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ColumnRowBundleArchive::_internal_is_row() const {
  return _impl_.is_row_;
}
inline bool ColumnRowBundleArchive::is_row() const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.is_row)
  return _internal_is_row();
}
inline void ColumnRowBundleArchive::_internal_set_is_row(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_row_ = value;
}
inline void ColumnRowBundleArchive::set_is_row(bool value) {
  _internal_set_is_row(value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowBundleArchive.is_row)
}

// repeated .TSP.UUID view_uid_list = 2;
inline int ColumnRowBundleArchive::_internal_view_uid_list_size() const {
  return _impl_.view_uid_list_.size();
}
inline int ColumnRowBundleArchive::view_uid_list_size() const {
  return _internal_view_uid_list_size();
}
inline ::TSP::UUID* ColumnRowBundleArchive::mutable_view_uid_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowBundleArchive.view_uid_list)
  return _impl_.view_uid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ColumnRowBundleArchive::mutable_view_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowBundleArchive.view_uid_list)
  return &_impl_.view_uid_list_;
}
inline const ::TSP::UUID& ColumnRowBundleArchive::_internal_view_uid_list(int index) const {
  return _impl_.view_uid_list_.Get(index);
}
inline const ::TSP::UUID& ColumnRowBundleArchive::view_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.view_uid_list)
  return _internal_view_uid_list(index);
}
inline ::TSP::UUID* ColumnRowBundleArchive::_internal_add_view_uid_list() {
  return _impl_.view_uid_list_.Add();
}
inline ::TSP::UUID* ColumnRowBundleArchive::add_view_uid_list() {
  ::TSP::UUID* _add = _internal_add_view_uid_list();
  // @@protoc_insertion_point(field_add:TST.ColumnRowBundleArchive.view_uid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ColumnRowBundleArchive::view_uid_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowBundleArchive.view_uid_list)
  return _impl_.view_uid_list_;
}

// repeated .TST.ColumnRowBundleItemTypeEnum view_type_list = 3;
inline int ColumnRowBundleArchive::_internal_view_type_list_size() const {
  return _impl_.view_type_list_.size();
}
inline int ColumnRowBundleArchive::view_type_list_size() const {
  return _internal_view_type_list_size();
}
inline void ColumnRowBundleArchive::clear_view_type_list() {
  _impl_.view_type_list_.Clear();
}
inline ::TST::ColumnRowBundleItemTypeEnum ColumnRowBundleArchive::_internal_view_type_list(int index) const {
  return static_cast< ::TST::ColumnRowBundleItemTypeEnum >(_impl_.view_type_list_.Get(index));
}
inline ::TST::ColumnRowBundleItemTypeEnum ColumnRowBundleArchive::view_type_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.view_type_list)
  return _internal_view_type_list(index);
}
inline void ColumnRowBundleArchive::set_view_type_list(int index, ::TST::ColumnRowBundleItemTypeEnum value) {
  assert(::TST::ColumnRowBundleItemTypeEnum_IsValid(value));
  _impl_.view_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowBundleArchive.view_type_list)
}
inline void ColumnRowBundleArchive::_internal_add_view_type_list(::TST::ColumnRowBundleItemTypeEnum value) {
  assert(::TST::ColumnRowBundleItemTypeEnum_IsValid(value));
  _impl_.view_type_list_.Add(value);
}
inline void ColumnRowBundleArchive::add_view_type_list(::TST::ColumnRowBundleItemTypeEnum value) {
  _internal_add_view_type_list(value);
  // @@protoc_insertion_point(field_add:TST.ColumnRowBundleArchive.view_type_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ColumnRowBundleArchive::view_type_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowBundleArchive.view_type_list)
  return _impl_.view_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ColumnRowBundleArchive::_internal_mutable_view_type_list() {
  return &_impl_.view_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ColumnRowBundleArchive::mutable_view_type_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowBundleArchive.view_type_list)
  return _internal_mutable_view_type_list();
}

// repeated .TSP.UUID base_uid_list = 4;
inline int ColumnRowBundleArchive::_internal_base_uid_list_size() const {
  return _impl_.base_uid_list_.size();
}
inline int ColumnRowBundleArchive::base_uid_list_size() const {
  return _internal_base_uid_list_size();
}
inline ::TSP::UUID* ColumnRowBundleArchive::mutable_base_uid_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowBundleArchive.base_uid_list)
  return _impl_.base_uid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ColumnRowBundleArchive::mutable_base_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowBundleArchive.base_uid_list)
  return &_impl_.base_uid_list_;
}
inline const ::TSP::UUID& ColumnRowBundleArchive::_internal_base_uid_list(int index) const {
  return _impl_.base_uid_list_.Get(index);
}
inline const ::TSP::UUID& ColumnRowBundleArchive::base_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.base_uid_list)
  return _internal_base_uid_list(index);
}
inline ::TSP::UUID* ColumnRowBundleArchive::_internal_add_base_uid_list() {
  return _impl_.base_uid_list_.Add();
}
inline ::TSP::UUID* ColumnRowBundleArchive::add_base_uid_list() {
  ::TSP::UUID* _add = _internal_add_base_uid_list();
  // @@protoc_insertion_point(field_add:TST.ColumnRowBundleArchive.base_uid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ColumnRowBundleArchive::base_uid_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowBundleArchive.base_uid_list)
  return _impl_.base_uid_list_;
}

// repeated .TST.ColumnRowBundleItemTypeEnum base_type_list = 5;
inline int ColumnRowBundleArchive::_internal_base_type_list_size() const {
  return _impl_.base_type_list_.size();
}
inline int ColumnRowBundleArchive::base_type_list_size() const {
  return _internal_base_type_list_size();
}
inline void ColumnRowBundleArchive::clear_base_type_list() {
  _impl_.base_type_list_.Clear();
}
inline ::TST::ColumnRowBundleItemTypeEnum ColumnRowBundleArchive::_internal_base_type_list(int index) const {
  return static_cast< ::TST::ColumnRowBundleItemTypeEnum >(_impl_.base_type_list_.Get(index));
}
inline ::TST::ColumnRowBundleItemTypeEnum ColumnRowBundleArchive::base_type_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.base_type_list)
  return _internal_base_type_list(index);
}
inline void ColumnRowBundleArchive::set_base_type_list(int index, ::TST::ColumnRowBundleItemTypeEnum value) {
  assert(::TST::ColumnRowBundleItemTypeEnum_IsValid(value));
  _impl_.base_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowBundleArchive.base_type_list)
}
inline void ColumnRowBundleArchive::_internal_add_base_type_list(::TST::ColumnRowBundleItemTypeEnum value) {
  assert(::TST::ColumnRowBundleItemTypeEnum_IsValid(value));
  _impl_.base_type_list_.Add(value);
}
inline void ColumnRowBundleArchive::add_base_type_list(::TST::ColumnRowBundleItemTypeEnum value) {
  _internal_add_base_type_list(value);
  // @@protoc_insertion_point(field_add:TST.ColumnRowBundleArchive.base_type_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ColumnRowBundleArchive::base_type_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowBundleArchive.base_type_list)
  return _impl_.base_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ColumnRowBundleArchive::_internal_mutable_base_type_list() {
  return &_impl_.base_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ColumnRowBundleArchive::mutable_base_type_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowBundleArchive.base_type_list)
  return _internal_mutable_base_type_list();
}

// repeated .TSP.UUID category_order_uid_list = 6;
inline int ColumnRowBundleArchive::_internal_category_order_uid_list_size() const {
  return _impl_.category_order_uid_list_.size();
}
inline int ColumnRowBundleArchive::category_order_uid_list_size() const {
  return _internal_category_order_uid_list_size();
}
inline ::TSP::UUID* ColumnRowBundleArchive::mutable_category_order_uid_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowBundleArchive.category_order_uid_list)
  return _impl_.category_order_uid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ColumnRowBundleArchive::mutable_category_order_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowBundleArchive.category_order_uid_list)
  return &_impl_.category_order_uid_list_;
}
inline const ::TSP::UUID& ColumnRowBundleArchive::_internal_category_order_uid_list(int index) const {
  return _impl_.category_order_uid_list_.Get(index);
}
inline const ::TSP::UUID& ColumnRowBundleArchive::category_order_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.category_order_uid_list)
  return _internal_category_order_uid_list(index);
}
inline ::TSP::UUID* ColumnRowBundleArchive::_internal_add_category_order_uid_list() {
  return _impl_.category_order_uid_list_.Add();
}
inline ::TSP::UUID* ColumnRowBundleArchive::add_category_order_uid_list() {
  ::TSP::UUID* _add = _internal_add_category_order_uid_list();
  // @@protoc_insertion_point(field_add:TST.ColumnRowBundleArchive.category_order_uid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ColumnRowBundleArchive::category_order_uid_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowBundleArchive.category_order_uid_list)
  return _impl_.category_order_uid_list_;
}

// repeated .TST.ColumnRowBundleItemTypeEnum category_order_type_list = 7;
inline int ColumnRowBundleArchive::_internal_category_order_type_list_size() const {
  return _impl_.category_order_type_list_.size();
}
inline int ColumnRowBundleArchive::category_order_type_list_size() const {
  return _internal_category_order_type_list_size();
}
inline void ColumnRowBundleArchive::clear_category_order_type_list() {
  _impl_.category_order_type_list_.Clear();
}
inline ::TST::ColumnRowBundleItemTypeEnum ColumnRowBundleArchive::_internal_category_order_type_list(int index) const {
  return static_cast< ::TST::ColumnRowBundleItemTypeEnum >(_impl_.category_order_type_list_.Get(index));
}
inline ::TST::ColumnRowBundleItemTypeEnum ColumnRowBundleArchive::category_order_type_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.category_order_type_list)
  return _internal_category_order_type_list(index);
}
inline void ColumnRowBundleArchive::set_category_order_type_list(int index, ::TST::ColumnRowBundleItemTypeEnum value) {
  assert(::TST::ColumnRowBundleItemTypeEnum_IsValid(value));
  _impl_.category_order_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowBundleArchive.category_order_type_list)
}
inline void ColumnRowBundleArchive::_internal_add_category_order_type_list(::TST::ColumnRowBundleItemTypeEnum value) {
  assert(::TST::ColumnRowBundleItemTypeEnum_IsValid(value));
  _impl_.category_order_type_list_.Add(value);
}
inline void ColumnRowBundleArchive::add_category_order_type_list(::TST::ColumnRowBundleItemTypeEnum value) {
  _internal_add_category_order_type_list(value);
  // @@protoc_insertion_point(field_add:TST.ColumnRowBundleArchive.category_order_type_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ColumnRowBundleArchive::category_order_type_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowBundleArchive.category_order_type_list)
  return _impl_.category_order_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ColumnRowBundleArchive::_internal_mutable_category_order_type_list() {
  return &_impl_.category_order_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ColumnRowBundleArchive::mutable_category_order_type_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowBundleArchive.category_order_type_list)
  return _internal_mutable_category_order_type_list();
}

// repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
inline int ColumnRowBundleArchive::_internal_metadata_list_size() const {
  return _impl_.metadata_list_.size();
}
inline int ColumnRowBundleArchive::metadata_list_size() const {
  return _internal_metadata_list_size();
}
inline void ColumnRowBundleArchive::clear_metadata_list() {
  _impl_.metadata_list_.Clear();
}
inline ::TST::ColumnRowMetadataArchive* ColumnRowBundleArchive::mutable_metadata_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowBundleArchive.metadata_list)
  return _impl_.metadata_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
ColumnRowBundleArchive::mutable_metadata_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowBundleArchive.metadata_list)
  return &_impl_.metadata_list_;
}
inline const ::TST::ColumnRowMetadataArchive& ColumnRowBundleArchive::_internal_metadata_list(int index) const {
  return _impl_.metadata_list_.Get(index);
}
inline const ::TST::ColumnRowMetadataArchive& ColumnRowBundleArchive::metadata_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowBundleArchive.metadata_list)
  return _internal_metadata_list(index);
}
inline ::TST::ColumnRowMetadataArchive* ColumnRowBundleArchive::_internal_add_metadata_list() {
  return _impl_.metadata_list_.Add();
}
inline ::TST::ColumnRowMetadataArchive* ColumnRowBundleArchive::add_metadata_list() {
  ::TST::ColumnRowMetadataArchive* _add = _internal_add_metadata_list();
  // @@protoc_insertion_point(field_add:TST.ColumnRowBundleArchive.metadata_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
ColumnRowBundleArchive::metadata_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowBundleArchive.metadata_list)
  return _impl_.metadata_list_;
}

// -------------------------------------------------------------------

// CommandRemoveColumnsOrRowsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRemoveColumnsOrRowsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRemoveColumnsOrRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.super)
  return _internal_super();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.super)
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.super)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.super)
}

// required .TST.ColumnRowBundleArchive bundle = 2;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_bundle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bundle_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_bundle() const {
  return _internal_has_bundle();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_bundle() {
  if (_impl_.bundle_ != nullptr) _impl_.bundle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ColumnRowBundleArchive& CommandRemoveColumnsOrRowsArchive::_internal_bundle() const {
  const ::TST::ColumnRowBundleArchive* p = _impl_.bundle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnRowBundleArchive&>(
      ::TST::_ColumnRowBundleArchive_default_instance_);
}
inline const ::TST::ColumnRowBundleArchive& CommandRemoveColumnsOrRowsArchive::bundle() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.bundle)
  return _internal_bundle();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_bundle(
    ::TST::ColumnRowBundleArchive* bundle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bundle_);
  }
  _impl_.bundle_ = bundle;
  if (bundle) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.bundle)
}
inline ::TST::ColumnRowBundleArchive* CommandRemoveColumnsOrRowsArchive::release_bundle() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::ColumnRowBundleArchive* temp = _impl_.bundle_;
  _impl_.bundle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnRowBundleArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_bundle() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.bundle)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::ColumnRowBundleArchive* temp = _impl_.bundle_;
  _impl_.bundle_ = nullptr;
  return temp;
}
inline ::TST::ColumnRowBundleArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_bundle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bundle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnRowBundleArchive>(GetArenaForAllocation());
    _impl_.bundle_ = p;
  }
  return _impl_.bundle_;
}
inline ::TST::ColumnRowBundleArchive* CommandRemoveColumnsOrRowsArchive::mutable_bundle() {
  ::TST::ColumnRowBundleArchive* _msg = _internal_mutable_bundle();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.bundle)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_bundle(::TST::ColumnRowBundleArchive* bundle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bundle_;
  }
  if (bundle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bundle);
    if (message_arena != submessage_arena) {
      bundle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bundle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bundle_ = bundle;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.bundle)
}

// optional .TSP.Reference concurrent_cell_map = 11;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_concurrent_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.concurrent_cell_map_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_concurrent_cell_map() const {
  return _internal_has_concurrent_cell_map();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_concurrent_cell_map() const {
  const ::TSP::Reference* p = _impl_.concurrent_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::concurrent_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.concurrent_cell_map)
  return _internal_concurrent_cell_map();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_concurrent_cell_map(
    ::TSP::Reference* concurrent_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.concurrent_cell_map_);
  }
  _impl_.concurrent_cell_map_ = concurrent_cell_map;
  if (concurrent_cell_map) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.concurrent_cell_map)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_concurrent_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.concurrent_cell_map_;
  _impl_.concurrent_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_concurrent_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.concurrent_cell_map)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.concurrent_cell_map_;
  _impl_.concurrent_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_concurrent_cell_map() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.concurrent_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.concurrent_cell_map_ = p;
  }
  return _impl_.concurrent_cell_map_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_concurrent_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_concurrent_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.concurrent_cell_map)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_concurrent_cell_map(::TSP::Reference* concurrent_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.concurrent_cell_map_);
  }
  if (concurrent_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concurrent_cell_map));
    if (message_arena != submessage_arena) {
      concurrent_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concurrent_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.concurrent_cell_map_ = concurrent_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.concurrent_cell_map)
}

// optional .TSP.Reference categories_cell_map = 12;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_categories_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.categories_cell_map_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_categories_cell_map() const {
  return _internal_has_categories_cell_map();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_categories_cell_map() const {
  const ::TSP::Reference* p = _impl_.categories_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::categories_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.categories_cell_map)
  return _internal_categories_cell_map();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_categories_cell_map(
    ::TSP::Reference* categories_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.categories_cell_map_);
  }
  _impl_.categories_cell_map_ = categories_cell_map;
  if (categories_cell_map) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.categories_cell_map)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_categories_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.categories_cell_map_;
  _impl_.categories_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_categories_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.categories_cell_map)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.categories_cell_map_;
  _impl_.categories_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_categories_cell_map() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.categories_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.categories_cell_map_ = p;
  }
  return _impl_.categories_cell_map_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_categories_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_categories_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.categories_cell_map)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_categories_cell_map(::TSP::Reference* categories_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.categories_cell_map_);
  }
  if (categories_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(categories_cell_map));
    if (message_arena != submessage_arena) {
      categories_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, categories_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.categories_cell_map_ = categories_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.categories_cell_map)
}

// optional .TSP.Reference undo_concurrent_cell_map = 13;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_undo_concurrent_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_concurrent_cell_map_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_undo_concurrent_cell_map() const {
  return _internal_has_undo_concurrent_cell_map();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_undo_concurrent_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_concurrent_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::undo_concurrent_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_concurrent_cell_map)
  return _internal_undo_concurrent_cell_map();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_concurrent_cell_map(
    ::TSP::Reference* undo_concurrent_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_concurrent_cell_map_);
  }
  _impl_.undo_concurrent_cell_map_ = undo_concurrent_cell_map;
  if (undo_concurrent_cell_map) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_concurrent_cell_map)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_undo_concurrent_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.undo_concurrent_cell_map_;
  _impl_.undo_concurrent_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_undo_concurrent_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.undo_concurrent_cell_map)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.undo_concurrent_cell_map_;
  _impl_.undo_concurrent_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_undo_concurrent_cell_map() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.undo_concurrent_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_concurrent_cell_map_ = p;
  }
  return _impl_.undo_concurrent_cell_map_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_undo_concurrent_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_concurrent_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_concurrent_cell_map)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_undo_concurrent_cell_map(::TSP::Reference* undo_concurrent_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_concurrent_cell_map_);
  }
  if (undo_concurrent_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_concurrent_cell_map));
    if (message_arena != submessage_arena) {
      undo_concurrent_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_concurrent_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.undo_concurrent_cell_map_ = undo_concurrent_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_concurrent_cell_map)
}

// optional .TSP.Reference undo_categories_cell_map = 14;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_undo_categories_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_categories_cell_map_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_undo_categories_cell_map() const {
  return _internal_has_undo_categories_cell_map();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_undo_categories_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_categories_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::undo_categories_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_categories_cell_map)
  return _internal_undo_categories_cell_map();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_categories_cell_map(
    ::TSP::Reference* undo_categories_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_categories_cell_map_);
  }
  _impl_.undo_categories_cell_map_ = undo_categories_cell_map;
  if (undo_categories_cell_map) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_categories_cell_map)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_undo_categories_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.undo_categories_cell_map_;
  _impl_.undo_categories_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_undo_categories_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.undo_categories_cell_map)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.undo_categories_cell_map_;
  _impl_.undo_categories_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_undo_categories_cell_map() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.undo_categories_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_categories_cell_map_ = p;
  }
  return _impl_.undo_categories_cell_map_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_undo_categories_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_categories_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_categories_cell_map)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_undo_categories_cell_map(::TSP::Reference* undo_categories_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_categories_cell_map_);
  }
  if (undo_categories_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_categories_cell_map));
    if (message_arena != submessage_arena) {
      undo_categories_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_categories_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.undo_categories_cell_map_ = undo_categories_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_categories_cell_map)
}

// optional .TSP.Reference undo_filter_set = 5;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_undo_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_filter_set_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_undo_filter_set() const {
  return _internal_has_undo_filter_set();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_undo_filter_set() const {
  const ::TSP::Reference* p = _impl_.undo_filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::undo_filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_filter_set)
  return _internal_undo_filter_set();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_filter_set(
    ::TSP::Reference* undo_filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_filter_set_);
  }
  _impl_.undo_filter_set_ = undo_filter_set;
  if (undo_filter_set) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_filter_set)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_undo_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_filter_set_;
  _impl_.undo_filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_undo_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.undo_filter_set)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_filter_set_;
  _impl_.undo_filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_undo_filter_set() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_filter_set_ = p;
  }
  return _impl_.undo_filter_set_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_undo_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_undo_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_filter_set)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_undo_filter_set(::TSP::Reference* undo_filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_filter_set_);
  }
  if (undo_filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_filter_set));
    if (message_arena != submessage_arena) {
      undo_filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_filter_set_ = undo_filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_filter_set)
}

// optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_undo_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_sort_order_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_undo_sort_order() const {
  return _internal_has_undo_sort_order();
}
inline const ::TST::TableSortOrderUIDArchive& CommandRemoveColumnsOrRowsArchive::_internal_undo_sort_order() const {
  const ::TST::TableSortOrderUIDArchive* p = _impl_.undo_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderUIDArchive&>(
      ::TST::_TableSortOrderUIDArchive_default_instance_);
}
inline const ::TST::TableSortOrderUIDArchive& CommandRemoveColumnsOrRowsArchive::undo_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_sort_order)
  return _internal_undo_sort_order();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_sort_order(
    ::TST::TableSortOrderUIDArchive* undo_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_sort_order_);
  }
  _impl_.undo_sort_order_ = undo_sort_order;
  if (undo_sort_order) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_sort_order)
}
inline ::TST::TableSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::release_undo_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableSortOrderUIDArchive* temp = _impl_.undo_sort_order_;
  _impl_.undo_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_undo_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.undo_sort_order)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableSortOrderUIDArchive* temp = _impl_.undo_sort_order_;
  _impl_.undo_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_undo_sort_order() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderUIDArchive>(GetArenaForAllocation());
    _impl_.undo_sort_order_ = p;
  }
  return _impl_.undo_sort_order_;
}
inline ::TST::TableSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::mutable_undo_sort_order() {
  ::TST::TableSortOrderUIDArchive* _msg = _internal_mutable_undo_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_sort_order)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_undo_sort_order(::TST::TableSortOrderUIDArchive* undo_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_sort_order_);
  }
  if (undo_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_sort_order));
    if (message_arena != submessage_arena) {
      undo_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_sort_order_ = undo_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_sort_order)
}

// optional .TST.TableGroupSortOrderUIDArchive undo_group_sort_order = 10;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_undo_group_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_group_sort_order_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_undo_group_sort_order() const {
  return _internal_has_undo_group_sort_order();
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandRemoveColumnsOrRowsArchive::_internal_undo_group_sort_order() const {
  const ::TST::TableGroupSortOrderUIDArchive* p = _impl_.undo_group_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableGroupSortOrderUIDArchive&>(
      ::TST::_TableGroupSortOrderUIDArchive_default_instance_);
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandRemoveColumnsOrRowsArchive::undo_group_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_group_sort_order)
  return _internal_undo_group_sort_order();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_group_sort_order(
    ::TST::TableGroupSortOrderUIDArchive* undo_group_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_group_sort_order_);
  }
  _impl_.undo_group_sort_order_ = undo_group_sort_order;
  if (undo_group_sort_order) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_group_sort_order)
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::release_undo_group_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.undo_group_sort_order_;
  _impl_.undo_group_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_undo_group_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.undo_group_sort_order)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.undo_group_sort_order_;
  _impl_.undo_group_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_undo_group_sort_order() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.undo_group_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableGroupSortOrderUIDArchive>(GetArenaForAllocation());
    _impl_.undo_group_sort_order_ = p;
  }
  return _impl_.undo_group_sort_order_;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandRemoveColumnsOrRowsArchive::mutable_undo_group_sort_order() {
  ::TST::TableGroupSortOrderUIDArchive* _msg = _internal_mutable_undo_group_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_group_sort_order)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_undo_group_sort_order(::TST::TableGroupSortOrderUIDArchive* undo_group_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_group_sort_order_);
  }
  if (undo_group_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_group_sort_order));
    if (message_arena != submessage_arena) {
      undo_group_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_group_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.undo_group_sort_order_ = undo_group_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_group_sort_order)
}

// optional .TSP.Reference formula_rewrite_command_for_undo = 7;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_formula_rewrite_command_for_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_for_undo_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_formula_rewrite_command_for_undo() const {
  return _internal_has_formula_rewrite_command_for_undo();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_formula_rewrite_command_for_undo() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_for_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::formula_rewrite_command_for_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command_for_undo)
  return _internal_formula_rewrite_command_for_undo();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
    ::TSP::Reference* formula_rewrite_command_for_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  if (formula_rewrite_command_for_undo) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command_for_undo)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_formula_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command_for_undo)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.formula_rewrite_command_for_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_for_undo_ = p;
  }
  return _impl_.formula_rewrite_command_for_undo_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_formula_rewrite_command_for_undo() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command_for_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command_for_undo)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  if (formula_rewrite_command_for_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo));
    if (message_arena != submessage_arena) {
      formula_rewrite_command_for_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command_for_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command_for_undo)
}

// optional bool inverse_should_edge_expand_formula_ranges = 8;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_inverse_should_edge_expand_formula_ranges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_inverse_should_edge_expand_formula_ranges() const {
  return _internal_has_inverse_should_edge_expand_formula_ranges();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_inverse_should_edge_expand_formula_ranges() {
  _impl_.inverse_should_edge_expand_formula_ranges_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CommandRemoveColumnsOrRowsArchive::_internal_inverse_should_edge_expand_formula_ranges() const {
  return _impl_.inverse_should_edge_expand_formula_ranges_;
}
inline bool CommandRemoveColumnsOrRowsArchive::inverse_should_edge_expand_formula_ranges() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.inverse_should_edge_expand_formula_ranges)
  return _internal_inverse_should_edge_expand_formula_ranges();
}
inline void CommandRemoveColumnsOrRowsArchive::_internal_set_inverse_should_edge_expand_formula_ranges(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.inverse_should_edge_expand_formula_ranges_ = value;
}
inline void CommandRemoveColumnsOrRowsArchive::set_inverse_should_edge_expand_formula_ranges(bool value) {
  _internal_set_inverse_should_edge_expand_formula_ranges(value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveColumnsOrRowsArchive.inverse_should_edge_expand_formula_ranges)
}

// repeated .TSP.UUID undo_order = 9;
inline int CommandRemoveColumnsOrRowsArchive::_internal_undo_order_size() const {
  return _impl_.undo_order_.size();
}
inline int CommandRemoveColumnsOrRowsArchive::undo_order_size() const {
  return _internal_undo_order_size();
}
inline ::TSP::UUID* CommandRemoveColumnsOrRowsArchive::mutable_undo_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_order)
  return _impl_.undo_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandRemoveColumnsOrRowsArchive::mutable_undo_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandRemoveColumnsOrRowsArchive.undo_order)
  return &_impl_.undo_order_;
}
inline const ::TSP::UUID& CommandRemoveColumnsOrRowsArchive::_internal_undo_order(int index) const {
  return _impl_.undo_order_.Get(index);
}
inline const ::TSP::UUID& CommandRemoveColumnsOrRowsArchive::undo_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_order)
  return _internal_undo_order(index);
}
inline ::TSP::UUID* CommandRemoveColumnsOrRowsArchive::_internal_add_undo_order() {
  return _impl_.undo_order_.Add();
}
inline ::TSP::UUID* CommandRemoveColumnsOrRowsArchive::add_undo_order() {
  ::TSP::UUID* _add = _internal_add_undo_order();
  // @@protoc_insertion_point(field_add:TST.CommandRemoveColumnsOrRowsArchive.undo_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandRemoveColumnsOrRowsArchive::undo_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandRemoveColumnsOrRowsArchive.undo_order)
  return _impl_.undo_order_;
}

// -------------------------------------------------------------------

// CommandRowColumnRangeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRowColumnRangeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRowColumnRangeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRowColumnRangeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRowColumnRangeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRowColumnRangeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRowColumnRangeArchive.super)
  return _internal_super();
}
inline void CommandRowColumnRangeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRowColumnRangeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRowColumnRangeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRowColumnRangeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRowColumnRangeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRowColumnRangeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRowColumnRangeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRowColumnRangeArchive.super)
  return _msg;
}
inline void CommandRowColumnRangeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRowColumnRangeArchive.super)
}

// repeated .TSP.UUID uids = 2;
inline int CommandRowColumnRangeArchive::_internal_uids_size() const {
  return _impl_.uids_.size();
}
inline int CommandRowColumnRangeArchive::uids_size() const {
  return _internal_uids_size();
}
inline ::TSP::UUID* CommandRowColumnRangeArchive::mutable_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandRowColumnRangeArchive.uids)
  return _impl_.uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandRowColumnRangeArchive::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandRowColumnRangeArchive.uids)
  return &_impl_.uids_;
}
inline const ::TSP::UUID& CommandRowColumnRangeArchive::_internal_uids(int index) const {
  return _impl_.uids_.Get(index);
}
inline const ::TSP::UUID& CommandRowColumnRangeArchive::uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandRowColumnRangeArchive.uids)
  return _internal_uids(index);
}
inline ::TSP::UUID* CommandRowColumnRangeArchive::_internal_add_uids() {
  return _impl_.uids_.Add();
}
inline ::TSP::UUID* CommandRowColumnRangeArchive::add_uids() {
  ::TSP::UUID* _add = _internal_add_uids();
  // @@protoc_insertion_point(field_add:TST.CommandRowColumnRangeArchive.uids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandRowColumnRangeArchive::uids() const {
  // @@protoc_insertion_point(field_list:TST.CommandRowColumnRangeArchive.uids)
  return _impl_.uids_;
}

// required bool is_row = 3;
inline bool CommandRowColumnRangeArchive::_internal_has_is_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandRowColumnRangeArchive::has_is_row() const {
  return _internal_has_is_row();
}
inline void CommandRowColumnRangeArchive::clear_is_row() {
  _impl_.is_row_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandRowColumnRangeArchive::_internal_is_row() const {
  return _impl_.is_row_;
}
inline bool CommandRowColumnRangeArchive::is_row() const {
  // @@protoc_insertion_point(field_get:TST.CommandRowColumnRangeArchive.is_row)
  return _internal_is_row();
}
inline void CommandRowColumnRangeArchive::_internal_set_is_row(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_row_ = value;
}
inline void CommandRowColumnRangeArchive::set_is_row(bool value) {
  _internal_set_is_row(value);
  // @@protoc_insertion_point(field_set:TST.CommandRowColumnRangeArchive.is_row)
}

// -------------------------------------------------------------------

// CommandResizeColumnOrRowArchive

// required .TST.CommandRowColumnRangeArchive super = 1;
inline bool CommandResizeColumnOrRowArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandResizeColumnOrRowArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandRowColumnRangeArchive& CommandResizeColumnOrRowArchive::_internal_super() const {
  const ::TST::CommandRowColumnRangeArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandRowColumnRangeArchive&>(
      ::TST::_CommandRowColumnRangeArchive_default_instance_);
}
inline const ::TST::CommandRowColumnRangeArchive& CommandResizeColumnOrRowArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.super)
  return _internal_super();
}
inline void CommandResizeColumnOrRowArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandRowColumnRangeArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResizeColumnOrRowArchive.super)
}
inline ::TST::CommandRowColumnRangeArchive* CommandResizeColumnOrRowArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandRowColumnRangeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandRowColumnRangeArchive* CommandResizeColumnOrRowArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandResizeColumnOrRowArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandRowColumnRangeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandRowColumnRangeArchive* CommandResizeColumnOrRowArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandRowColumnRangeArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandRowColumnRangeArchive* CommandResizeColumnOrRowArchive::mutable_super() {
  ::TST::CommandRowColumnRangeArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandResizeColumnOrRowArchive.super)
  return _msg;
}
inline void CommandResizeColumnOrRowArchive::set_allocated_super(::TST::CommandRowColumnRangeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResizeColumnOrRowArchive.super)
}

// repeated float sizes = 2;
inline int CommandResizeColumnOrRowArchive::_internal_sizes_size() const {
  return _impl_.sizes_.size();
}
inline int CommandResizeColumnOrRowArchive::sizes_size() const {
  return _internal_sizes_size();
}
inline void CommandResizeColumnOrRowArchive::clear_sizes() {
  _impl_.sizes_.Clear();
}
inline float CommandResizeColumnOrRowArchive::_internal_sizes(int index) const {
  return _impl_.sizes_.Get(index);
}
inline float CommandResizeColumnOrRowArchive::sizes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.sizes)
  return _internal_sizes(index);
}
inline void CommandResizeColumnOrRowArchive::set_sizes(int index, float value) {
  _impl_.sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.sizes)
}
inline void CommandResizeColumnOrRowArchive::_internal_add_sizes(float value) {
  _impl_.sizes_.Add(value);
}
inline void CommandResizeColumnOrRowArchive::add_sizes(float value) {
  _internal_add_sizes(value);
  // @@protoc_insertion_point(field_add:TST.CommandResizeColumnOrRowArchive.sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandResizeColumnOrRowArchive::_internal_sizes() const {
  return _impl_.sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandResizeColumnOrRowArchive::sizes() const {
  // @@protoc_insertion_point(field_list:TST.CommandResizeColumnOrRowArchive.sizes)
  return _internal_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandResizeColumnOrRowArchive::_internal_mutable_sizes() {
  return &_impl_.sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandResizeColumnOrRowArchive::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandResizeColumnOrRowArchive.sizes)
  return _internal_mutable_sizes();
}

// repeated float sizes_for_undo = 3;
inline int CommandResizeColumnOrRowArchive::_internal_sizes_for_undo_size() const {
  return _impl_.sizes_for_undo_.size();
}
inline int CommandResizeColumnOrRowArchive::sizes_for_undo_size() const {
  return _internal_sizes_for_undo_size();
}
inline void CommandResizeColumnOrRowArchive::clear_sizes_for_undo() {
  _impl_.sizes_for_undo_.Clear();
}
inline float CommandResizeColumnOrRowArchive::_internal_sizes_for_undo(int index) const {
  return _impl_.sizes_for_undo_.Get(index);
}
inline float CommandResizeColumnOrRowArchive::sizes_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.sizes_for_undo)
  return _internal_sizes_for_undo(index);
}
inline void CommandResizeColumnOrRowArchive::set_sizes_for_undo(int index, float value) {
  _impl_.sizes_for_undo_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.sizes_for_undo)
}
inline void CommandResizeColumnOrRowArchive::_internal_add_sizes_for_undo(float value) {
  _impl_.sizes_for_undo_.Add(value);
}
inline void CommandResizeColumnOrRowArchive::add_sizes_for_undo(float value) {
  _internal_add_sizes_for_undo(value);
  // @@protoc_insertion_point(field_add:TST.CommandResizeColumnOrRowArchive.sizes_for_undo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandResizeColumnOrRowArchive::_internal_sizes_for_undo() const {
  return _impl_.sizes_for_undo_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandResizeColumnOrRowArchive::sizes_for_undo() const {
  // @@protoc_insertion_point(field_list:TST.CommandResizeColumnOrRowArchive.sizes_for_undo)
  return _internal_sizes_for_undo();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandResizeColumnOrRowArchive::_internal_mutable_sizes_for_undo() {
  return &_impl_.sizes_for_undo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandResizeColumnOrRowArchive::mutable_sizes_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandResizeColumnOrRowArchive.sizes_for_undo)
  return _internal_mutable_sizes_for_undo();
}

// -------------------------------------------------------------------

// CommandCategoryResizeColumnOrRowArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandCategoryResizeColumnOrRowArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCategoryResizeColumnOrRowArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandCategoryResizeColumnOrRowArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandCategoryResizeColumnOrRowArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCategoryResizeColumnOrRowArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryResizeColumnOrRowArchive.super)
  return _internal_super();
}
inline void CommandCategoryResizeColumnOrRowArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryResizeColumnOrRowArchive.super)
}
inline ::TST::TableCommandArchive* CommandCategoryResizeColumnOrRowArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryResizeColumnOrRowArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryResizeColumnOrRowArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryResizeColumnOrRowArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCategoryResizeColumnOrRowArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryResizeColumnOrRowArchive.super)
  return _msg;
}
inline void CommandCategoryResizeColumnOrRowArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryResizeColumnOrRowArchive.super)
}

// repeated float category_row_sizes = 2;
inline int CommandCategoryResizeColumnOrRowArchive::_internal_category_row_sizes_size() const {
  return _impl_.category_row_sizes_.size();
}
inline int CommandCategoryResizeColumnOrRowArchive::category_row_sizes_size() const {
  return _internal_category_row_sizes_size();
}
inline void CommandCategoryResizeColumnOrRowArchive::clear_category_row_sizes() {
  _impl_.category_row_sizes_.Clear();
}
inline float CommandCategoryResizeColumnOrRowArchive::_internal_category_row_sizes(int index) const {
  return _impl_.category_row_sizes_.Get(index);
}
inline float CommandCategoryResizeColumnOrRowArchive::category_row_sizes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes)
  return _internal_category_row_sizes(index);
}
inline void CommandCategoryResizeColumnOrRowArchive::set_category_row_sizes(int index, float value) {
  _impl_.category_row_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes)
}
inline void CommandCategoryResizeColumnOrRowArchive::_internal_add_category_row_sizes(float value) {
  _impl_.category_row_sizes_.Add(value);
}
inline void CommandCategoryResizeColumnOrRowArchive::add_category_row_sizes(float value) {
  _internal_add_category_row_sizes(value);
  // @@protoc_insertion_point(field_add:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::_internal_category_row_sizes() const {
  return _impl_.category_row_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::category_row_sizes() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes)
  return _internal_category_row_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::_internal_mutable_category_row_sizes() {
  return &_impl_.category_row_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::mutable_category_row_sizes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes)
  return _internal_mutable_category_row_sizes();
}

// repeated float category_row_sizes_for_undo = 3;
inline int CommandCategoryResizeColumnOrRowArchive::_internal_category_row_sizes_for_undo_size() const {
  return _impl_.category_row_sizes_for_undo_.size();
}
inline int CommandCategoryResizeColumnOrRowArchive::category_row_sizes_for_undo_size() const {
  return _internal_category_row_sizes_for_undo_size();
}
inline void CommandCategoryResizeColumnOrRowArchive::clear_category_row_sizes_for_undo() {
  _impl_.category_row_sizes_for_undo_.Clear();
}
inline float CommandCategoryResizeColumnOrRowArchive::_internal_category_row_sizes_for_undo(int index) const {
  return _impl_.category_row_sizes_for_undo_.Get(index);
}
inline float CommandCategoryResizeColumnOrRowArchive::category_row_sizes_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes_for_undo)
  return _internal_category_row_sizes_for_undo(index);
}
inline void CommandCategoryResizeColumnOrRowArchive::set_category_row_sizes_for_undo(int index, float value) {
  _impl_.category_row_sizes_for_undo_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes_for_undo)
}
inline void CommandCategoryResizeColumnOrRowArchive::_internal_add_category_row_sizes_for_undo(float value) {
  _impl_.category_row_sizes_for_undo_.Add(value);
}
inline void CommandCategoryResizeColumnOrRowArchive::add_category_row_sizes_for_undo(float value) {
  _internal_add_category_row_sizes_for_undo(value);
  // @@protoc_insertion_point(field_add:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes_for_undo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::_internal_category_row_sizes_for_undo() const {
  return _impl_.category_row_sizes_for_undo_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::category_row_sizes_for_undo() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes_for_undo)
  return _internal_category_row_sizes_for_undo();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::_internal_mutable_category_row_sizes_for_undo() {
  return &_impl_.category_row_sizes_for_undo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::mutable_category_row_sizes_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategoryResizeColumnOrRowArchive.category_row_sizes_for_undo)
  return _internal_mutable_category_row_sizes_for_undo();
}

// repeated float category_label_row_sizes = 4;
inline int CommandCategoryResizeColumnOrRowArchive::_internal_category_label_row_sizes_size() const {
  return _impl_.category_label_row_sizes_.size();
}
inline int CommandCategoryResizeColumnOrRowArchive::category_label_row_sizes_size() const {
  return _internal_category_label_row_sizes_size();
}
inline void CommandCategoryResizeColumnOrRowArchive::clear_category_label_row_sizes() {
  _impl_.category_label_row_sizes_.Clear();
}
inline float CommandCategoryResizeColumnOrRowArchive::_internal_category_label_row_sizes(int index) const {
  return _impl_.category_label_row_sizes_.Get(index);
}
inline float CommandCategoryResizeColumnOrRowArchive::category_label_row_sizes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes)
  return _internal_category_label_row_sizes(index);
}
inline void CommandCategoryResizeColumnOrRowArchive::set_category_label_row_sizes(int index, float value) {
  _impl_.category_label_row_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes)
}
inline void CommandCategoryResizeColumnOrRowArchive::_internal_add_category_label_row_sizes(float value) {
  _impl_.category_label_row_sizes_.Add(value);
}
inline void CommandCategoryResizeColumnOrRowArchive::add_category_label_row_sizes(float value) {
  _internal_add_category_label_row_sizes(value);
  // @@protoc_insertion_point(field_add:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::_internal_category_label_row_sizes() const {
  return _impl_.category_label_row_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::category_label_row_sizes() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes)
  return _internal_category_label_row_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::_internal_mutable_category_label_row_sizes() {
  return &_impl_.category_label_row_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::mutable_category_label_row_sizes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes)
  return _internal_mutable_category_label_row_sizes();
}

// repeated float category_label_row_sizes_for_undo = 5;
inline int CommandCategoryResizeColumnOrRowArchive::_internal_category_label_row_sizes_for_undo_size() const {
  return _impl_.category_label_row_sizes_for_undo_.size();
}
inline int CommandCategoryResizeColumnOrRowArchive::category_label_row_sizes_for_undo_size() const {
  return _internal_category_label_row_sizes_for_undo_size();
}
inline void CommandCategoryResizeColumnOrRowArchive::clear_category_label_row_sizes_for_undo() {
  _impl_.category_label_row_sizes_for_undo_.Clear();
}
inline float CommandCategoryResizeColumnOrRowArchive::_internal_category_label_row_sizes_for_undo(int index) const {
  return _impl_.category_label_row_sizes_for_undo_.Get(index);
}
inline float CommandCategoryResizeColumnOrRowArchive::category_label_row_sizes_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes_for_undo)
  return _internal_category_label_row_sizes_for_undo(index);
}
inline void CommandCategoryResizeColumnOrRowArchive::set_category_label_row_sizes_for_undo(int index, float value) {
  _impl_.category_label_row_sizes_for_undo_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes_for_undo)
}
inline void CommandCategoryResizeColumnOrRowArchive::_internal_add_category_label_row_sizes_for_undo(float value) {
  _impl_.category_label_row_sizes_for_undo_.Add(value);
}
inline void CommandCategoryResizeColumnOrRowArchive::add_category_label_row_sizes_for_undo(float value) {
  _internal_add_category_label_row_sizes_for_undo(value);
  // @@protoc_insertion_point(field_add:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes_for_undo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::_internal_category_label_row_sizes_for_undo() const {
  return _impl_.category_label_row_sizes_for_undo_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandCategoryResizeColumnOrRowArchive::category_label_row_sizes_for_undo() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes_for_undo)
  return _internal_category_label_row_sizes_for_undo();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::_internal_mutable_category_label_row_sizes_for_undo() {
  return &_impl_.category_label_row_sizes_for_undo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandCategoryResizeColumnOrRowArchive::mutable_category_label_row_sizes_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategoryResizeColumnOrRowArchive.category_label_row_sizes_for_undo)
  return _internal_mutable_category_label_row_sizes_for_undo();
}

// optional double category_column_size = 6;
inline bool CommandCategoryResizeColumnOrRowArchive::_internal_has_category_column_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandCategoryResizeColumnOrRowArchive::has_category_column_size() const {
  return _internal_has_category_column_size();
}
inline void CommandCategoryResizeColumnOrRowArchive::clear_category_column_size() {
  _impl_.category_column_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommandCategoryResizeColumnOrRowArchive::_internal_category_column_size() const {
  return _impl_.category_column_size_;
}
inline double CommandCategoryResizeColumnOrRowArchive::category_column_size() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryResizeColumnOrRowArchive.category_column_size)
  return _internal_category_column_size();
}
inline void CommandCategoryResizeColumnOrRowArchive::_internal_set_category_column_size(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.category_column_size_ = value;
}
inline void CommandCategoryResizeColumnOrRowArchive::set_category_column_size(double value) {
  _internal_set_category_column_size(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryResizeColumnOrRowArchive.category_column_size)
}

// optional double category_column_size_for_undo = 7;
inline bool CommandCategoryResizeColumnOrRowArchive::_internal_has_category_column_size_for_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandCategoryResizeColumnOrRowArchive::has_category_column_size_for_undo() const {
  return _internal_has_category_column_size_for_undo();
}
inline void CommandCategoryResizeColumnOrRowArchive::clear_category_column_size_for_undo() {
  _impl_.category_column_size_for_undo_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CommandCategoryResizeColumnOrRowArchive::_internal_category_column_size_for_undo() const {
  return _impl_.category_column_size_for_undo_;
}
inline double CommandCategoryResizeColumnOrRowArchive::category_column_size_for_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryResizeColumnOrRowArchive.category_column_size_for_undo)
  return _internal_category_column_size_for_undo();
}
inline void CommandCategoryResizeColumnOrRowArchive::_internal_set_category_column_size_for_undo(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.category_column_size_for_undo_ = value;
}
inline void CommandCategoryResizeColumnOrRowArchive::set_category_column_size_for_undo(double value) {
  _internal_set_category_column_size_for_undo(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryResizeColumnOrRowArchive.category_column_size_for_undo)
}

// -------------------------------------------------------------------

// CommandHideShowArchive

// required .TST.CommandRowColumnRangeArchive super = 1;
inline bool CommandHideShowArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandHideShowArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandHideShowArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandRowColumnRangeArchive& CommandHideShowArchive::_internal_super() const {
  const ::TST::CommandRowColumnRangeArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandRowColumnRangeArchive&>(
      ::TST::_CommandRowColumnRangeArchive_default_instance_);
}
inline const ::TST::CommandRowColumnRangeArchive& CommandHideShowArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.super)
  return _internal_super();
}
inline void CommandHideShowArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandRowColumnRangeArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandHideShowArchive.super)
}
inline ::TST::CommandRowColumnRangeArchive* CommandHideShowArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandRowColumnRangeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandRowColumnRangeArchive* CommandHideShowArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandHideShowArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandRowColumnRangeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandRowColumnRangeArchive* CommandHideShowArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandRowColumnRangeArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandRowColumnRangeArchive* CommandHideShowArchive::mutable_super() {
  ::TST::CommandRowColumnRangeArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandHideShowArchive.super)
  return _msg;
}
inline void CommandHideShowArchive::set_allocated_super(::TST::CommandRowColumnRangeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandHideShowArchive.super)
}

// required .TST.HideShowActionArchive hide_show_action = 2;
inline bool CommandHideShowArchive::_internal_has_hide_show_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandHideShowArchive::has_hide_show_action() const {
  return _internal_has_hide_show_action();
}
inline void CommandHideShowArchive::clear_hide_show_action() {
  _impl_.hide_show_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TST::HideShowActionArchive CommandHideShowArchive::_internal_hide_show_action() const {
  return static_cast< ::TST::HideShowActionArchive >(_impl_.hide_show_action_);
}
inline ::TST::HideShowActionArchive CommandHideShowArchive::hide_show_action() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.hide_show_action)
  return _internal_hide_show_action();
}
inline void CommandHideShowArchive::_internal_set_hide_show_action(::TST::HideShowActionArchive value) {
  assert(::TST::HideShowActionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hide_show_action_ = value;
}
inline void CommandHideShowArchive::set_hide_show_action(::TST::HideShowActionArchive value) {
  _internal_set_hide_show_action(value);
  // @@protoc_insertion_point(field_set:TST.CommandHideShowArchive.hide_show_action)
}

// required uint32 hiding_action = 3;
inline bool CommandHideShowArchive::_internal_has_hiding_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandHideShowArchive::has_hiding_action() const {
  return _internal_has_hiding_action();
}
inline void CommandHideShowArchive::clear_hiding_action() {
  _impl_.hiding_action_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandHideShowArchive::_internal_hiding_action() const {
  return _impl_.hiding_action_;
}
inline uint32_t CommandHideShowArchive::hiding_action() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.hiding_action)
  return _internal_hiding_action();
}
inline void CommandHideShowArchive::_internal_set_hiding_action(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hiding_action_ = value;
}
inline void CommandHideShowArchive::set_hiding_action(uint32_t value) {
  _internal_set_hiding_action(value);
  // @@protoc_insertion_point(field_set:TST.CommandHideShowArchive.hiding_action)
}

// repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
inline int CommandHideShowArchive::_internal_hide_show_action_for_undo_size() const {
  return _impl_.hide_show_action_for_undo_.size();
}
inline int CommandHideShowArchive::hide_show_action_for_undo_size() const {
  return _internal_hide_show_action_for_undo_size();
}
inline void CommandHideShowArchive::clear_hide_show_action_for_undo() {
  _impl_.hide_show_action_for_undo_.Clear();
}
inline ::TST::HideShowActionArchive CommandHideShowArchive::_internal_hide_show_action_for_undo(int index) const {
  return static_cast< ::TST::HideShowActionArchive >(_impl_.hide_show_action_for_undo_.Get(index));
}
inline ::TST::HideShowActionArchive CommandHideShowArchive::hide_show_action_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.hide_show_action_for_undo)
  return _internal_hide_show_action_for_undo(index);
}
inline void CommandHideShowArchive::set_hide_show_action_for_undo(int index, ::TST::HideShowActionArchive value) {
  assert(::TST::HideShowActionArchive_IsValid(value));
  _impl_.hide_show_action_for_undo_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandHideShowArchive.hide_show_action_for_undo)
}
inline void CommandHideShowArchive::_internal_add_hide_show_action_for_undo(::TST::HideShowActionArchive value) {
  assert(::TST::HideShowActionArchive_IsValid(value));
  _impl_.hide_show_action_for_undo_.Add(value);
}
inline void CommandHideShowArchive::add_hide_show_action_for_undo(::TST::HideShowActionArchive value) {
  _internal_add_hide_show_action_for_undo(value);
  // @@protoc_insertion_point(field_add:TST.CommandHideShowArchive.hide_show_action_for_undo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CommandHideShowArchive::hide_show_action_for_undo() const {
  // @@protoc_insertion_point(field_list:TST.CommandHideShowArchive.hide_show_action_for_undo)
  return _impl_.hide_show_action_for_undo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CommandHideShowArchive::_internal_mutable_hide_show_action_for_undo() {
  return &_impl_.hide_show_action_for_undo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CommandHideShowArchive::mutable_hide_show_action_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandHideShowArchive.hide_show_action_for_undo)
  return _internal_mutable_hide_show_action_for_undo();
}

// -------------------------------------------------------------------

// CommandTextPreflightInsertCellArchive

// required .TST.TableCommandArchive super = 3;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandTextPreflightInsertCellArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandTextPreflightInsertCellArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandTextPreflightInsertCellArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.super)
  return _internal_super();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.super)
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.super)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.super)
}

// optional .TSP.Reference coalesced_textcommand = 6;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_coalesced_textcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coalesced_textcommand_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_coalesced_textcommand() const {
  return _internal_has_coalesced_textcommand();
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::_internal_coalesced_textcommand() const {
  const ::TSP::Reference* p = _impl_.coalesced_textcommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::coalesced_textcommand() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
  return _internal_coalesced_textcommand();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_coalesced_textcommand(
    ::TSP::Reference* coalesced_textcommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coalesced_textcommand_);
  }
  _impl_.coalesced_textcommand_ = coalesced_textcommand;
  if (coalesced_textcommand) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::release_coalesced_textcommand() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.coalesced_textcommand_;
  _impl_.coalesced_textcommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::unsafe_arena_release_coalesced_textcommand() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.coalesced_textcommand_;
  _impl_.coalesced_textcommand_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::_internal_mutable_coalesced_textcommand() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.coalesced_textcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.coalesced_textcommand_ = p;
  }
  return _impl_.coalesced_textcommand_;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::mutable_coalesced_textcommand() {
  ::TSP::Reference* _msg = _internal_mutable_coalesced_textcommand();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_coalesced_textcommand(::TSP::Reference* coalesced_textcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coalesced_textcommand_);
  }
  if (coalesced_textcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalesced_textcommand));
    if (message_arena != submessage_arena) {
      coalesced_textcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coalesced_textcommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.coalesced_textcommand_ = coalesced_textcommand;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
}

// optional .TSP.Reference postflightcommand = 8;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_postflightcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.postflightcommand_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_postflightcommand() const {
  return _internal_has_postflightcommand();
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::_internal_postflightcommand() const {
  const ::TSP::Reference* p = _impl_.postflightcommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::postflightcommand() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
  return _internal_postflightcommand();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_postflightcommand(
    ::TSP::Reference* postflightcommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postflightcommand_);
  }
  _impl_.postflightcommand_ = postflightcommand;
  if (postflightcommand) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::release_postflightcommand() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.postflightcommand_;
  _impl_.postflightcommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::unsafe_arena_release_postflightcommand() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.postflightcommand_;
  _impl_.postflightcommand_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::_internal_mutable_postflightcommand() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.postflightcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.postflightcommand_ = p;
  }
  return _impl_.postflightcommand_;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::mutable_postflightcommand() {
  ::TSP::Reference* _msg = _internal_mutable_postflightcommand();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_postflightcommand(::TSP::Reference* postflightcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postflightcommand_);
  }
  if (postflightcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postflightcommand));
    if (message_arena != submessage_arena) {
      postflightcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postflightcommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.postflightcommand_ = postflightcommand;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
}

// optional bool grouped_with_postflight = 9;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_grouped_with_postflight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_grouped_with_postflight() const {
  return _internal_has_grouped_with_postflight();
}
inline void CommandTextPreflightInsertCellArchive::clear_grouped_with_postflight() {
  _impl_.grouped_with_postflight_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CommandTextPreflightInsertCellArchive::_internal_grouped_with_postflight() const {
  return _impl_.grouped_with_postflight_;
}
inline bool CommandTextPreflightInsertCellArchive::grouped_with_postflight() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.grouped_with_postflight)
  return _internal_grouped_with_postflight();
}
inline void CommandTextPreflightInsertCellArchive::_internal_set_grouped_with_postflight(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.grouped_with_postflight_ = value;
}
inline void CommandTextPreflightInsertCellArchive::set_grouped_with_postflight(bool value) {
  _internal_set_grouped_with_postflight(value);
  // @@protoc_insertion_point(field_set:TST.CommandTextPreflightInsertCellArchive.grouped_with_postflight)
}

// required .TST.Cell editing_cell = 10;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_editing_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_cell_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_editing_cell() const {
  return _internal_has_editing_cell();
}
inline const ::TST::Cell& CommandTextPreflightInsertCellArchive::_internal_editing_cell() const {
  const ::TST::Cell* p = _impl_.editing_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandTextPreflightInsertCellArchive::editing_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.editing_cell)
  return _internal_editing_cell();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_editing_cell(
    ::TST::Cell* editing_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  _impl_.editing_cell_ = editing_cell;
  if (editing_cell) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_cell)
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::release_editing_cell() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::unsafe_arena_release_editing_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.editing_cell)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::_internal_mutable_editing_cell() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.editing_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.editing_cell_ = p;
  }
  return _impl_.editing_cell_;
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::mutable_editing_cell() {
  ::TST::Cell* _msg = _internal_mutable_editing_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.editing_cell)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_editing_cell(::TST::Cell* editing_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  if (editing_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_cell));
    if (message_arena != submessage_arena) {
      editing_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.editing_cell_ = editing_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_cell)
}

// required .TSP.Reference editing_storage = 11;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_editing_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_storage_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_editing_storage() const {
  return _internal_has_editing_storage();
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::_internal_editing_storage() const {
  const ::TSP::Reference* p = _impl_.editing_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::editing_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.editing_storage)
  return _internal_editing_storage();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_editing_storage(
    ::TSP::Reference* editing_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  _impl_.editing_storage_ = editing_storage;
  if (editing_storage) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_storage)
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::release_editing_storage() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::unsafe_arena_release_editing_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.editing_storage)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::_internal_mutable_editing_storage() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.editing_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.editing_storage_ = p;
  }
  return _impl_.editing_storage_;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::mutable_editing_storage() {
  ::TSP::Reference* _msg = _internal_mutable_editing_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.editing_storage)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_editing_storage(::TSP::Reference* editing_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  if (editing_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_storage));
    if (message_arena != submessage_arena) {
      editing_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.editing_storage_ = editing_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_storage)
}

// optional uint32 last_column_hit_by_tap = 12;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_last_column_hit_by_tap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_last_column_hit_by_tap() const {
  return _internal_has_last_column_hit_by_tap();
}
inline void CommandTextPreflightInsertCellArchive::clear_last_column_hit_by_tap() {
  _impl_.last_column_hit_by_tap_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CommandTextPreflightInsertCellArchive::_internal_last_column_hit_by_tap() const {
  return _impl_.last_column_hit_by_tap_;
}
inline uint32_t CommandTextPreflightInsertCellArchive::last_column_hit_by_tap() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.last_column_hit_by_tap)
  return _internal_last_column_hit_by_tap();
}
inline void CommandTextPreflightInsertCellArchive::_internal_set_last_column_hit_by_tap(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.last_column_hit_by_tap_ = value;
}
inline void CommandTextPreflightInsertCellArchive::set_last_column_hit_by_tap(uint32_t value) {
  _internal_set_last_column_hit_by_tap(value);
  // @@protoc_insertion_point(field_set:TST.CommandTextPreflightInsertCellArchive.last_column_hit_by_tap)
}

// required .TSP.UUIDCoordArchive cell_uid = 13;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_cell_uid() const {
  return _internal_has_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& CommandTextPreflightInsertCellArchive::_internal_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& CommandTextPreflightInsertCellArchive::cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.cell_uid)
  return _internal_cell_uid();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_cell_uid(
    ::TSP::UUIDCoordArchive* cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_);
  }
  _impl_.cell_uid_ = cell_uid;
  if (cell_uid) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.cell_uid)
}
inline ::TSP::UUIDCoordArchive* CommandTextPreflightInsertCellArchive::release_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cell_uid_;
  _impl_.cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandTextPreflightInsertCellArchive::unsafe_arena_release_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.cell_uid)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cell_uid_;
  _impl_.cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandTextPreflightInsertCellArchive::_internal_mutable_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.cell_uid_ = p;
  }
  return _impl_.cell_uid_;
}
inline ::TSP::UUIDCoordArchive* CommandTextPreflightInsertCellArchive::mutable_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.cell_uid)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_cell_uid(::TSP::UUIDCoordArchive* cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_);
  }
  if (cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid));
    if (message_arena != submessage_arena) {
      cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.cell_uid_ = cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.cell_uid)
}

// optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_archived_initial_selection_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_initial_selection_path_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_archived_initial_selection_path() const {
  return _internal_has_archived_initial_selection_path();
}
inline const ::TSK::SelectionPathArchive& CommandTextPreflightInsertCellArchive::_internal_archived_initial_selection_path() const {
  const ::TSK::SelectionPathArchive* p = _impl_.archived_initial_selection_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& CommandTextPreflightInsertCellArchive::archived_initial_selection_path() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.archived_initial_selection_path)
  return _internal_archived_initial_selection_path();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_archived_initial_selection_path(
    ::TSK::SelectionPathArchive* archived_initial_selection_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_initial_selection_path_);
  }
  _impl_.archived_initial_selection_path_ = archived_initial_selection_path;
  if (archived_initial_selection_path) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.archived_initial_selection_path)
}
inline ::TSK::SelectionPathArchive* CommandTextPreflightInsertCellArchive::release_archived_initial_selection_path() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSK::SelectionPathArchive* temp = _impl_.archived_initial_selection_path_;
  _impl_.archived_initial_selection_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandTextPreflightInsertCellArchive::unsafe_arena_release_archived_initial_selection_path() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.archived_initial_selection_path)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSK::SelectionPathArchive* temp = _impl_.archived_initial_selection_path_;
  _impl_.archived_initial_selection_path_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandTextPreflightInsertCellArchive::_internal_mutable_archived_initial_selection_path() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.archived_initial_selection_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArenaForAllocation());
    _impl_.archived_initial_selection_path_ = p;
  }
  return _impl_.archived_initial_selection_path_;
}
inline ::TSK::SelectionPathArchive* CommandTextPreflightInsertCellArchive::mutable_archived_initial_selection_path() {
  ::TSK::SelectionPathArchive* _msg = _internal_mutable_archived_initial_selection_path();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.archived_initial_selection_path)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_archived_initial_selection_path(::TSK::SelectionPathArchive* archived_initial_selection_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_initial_selection_path_);
  }
  if (archived_initial_selection_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_initial_selection_path));
    if (message_arena != submessage_arena) {
      archived_initial_selection_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_initial_selection_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.archived_initial_selection_path_ = archived_initial_selection_path;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.archived_initial_selection_path)
}

// -------------------------------------------------------------------

// CommandPostflightSetCellArchive

// required .TST.TableCommandArchive super = 3;
inline bool CommandPostflightSetCellArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPostflightSetCellArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandPostflightSetCellArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandPostflightSetCellArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.super)
  return _internal_super();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.super)
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.super)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.super)
}

// optional .TSP.Reference childcommandundo = 4;
inline bool CommandPostflightSetCellArchive::_internal_has_childcommandundo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childcommandundo_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_childcommandundo() const {
  return _internal_has_childcommandundo();
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::_internal_childcommandundo() const {
  const ::TSP::Reference* p = _impl_.childcommandundo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::childcommandundo() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.childcommandundo)
  return _internal_childcommandundo();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_childcommandundo(
    ::TSP::Reference* childcommandundo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childcommandundo_);
  }
  _impl_.childcommandundo_ = childcommandundo;
  if (childcommandundo) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.childcommandundo)
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::release_childcommandundo() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.childcommandundo_;
  _impl_.childcommandundo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::unsafe_arena_release_childcommandundo() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.childcommandundo)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.childcommandundo_;
  _impl_.childcommandundo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::_internal_mutable_childcommandundo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.childcommandundo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.childcommandundo_ = p;
  }
  return _impl_.childcommandundo_;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::mutable_childcommandundo() {
  ::TSP::Reference* _msg = _internal_mutable_childcommandundo();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.childcommandundo)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_childcommandundo(::TSP::Reference* childcommandundo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childcommandundo_);
  }
  if (childcommandundo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childcommandundo));
    if (message_arena != submessage_arena) {
      childcommandundo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childcommandundo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.childcommandundo_ = childcommandundo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.childcommandundo)
}

// required .TST.Cell editing_cell = 6;
inline bool CommandPostflightSetCellArchive::_internal_has_editing_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_cell_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_editing_cell() const {
  return _internal_has_editing_cell();
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::_internal_editing_cell() const {
  const ::TST::Cell* p = _impl_.editing_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::editing_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.editing_cell)
  return _internal_editing_cell();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_editing_cell(
    ::TST::Cell* editing_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  _impl_.editing_cell_ = editing_cell;
  if (editing_cell) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.editing_cell)
}
inline ::TST::Cell* CommandPostflightSetCellArchive::release_editing_cell() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::unsafe_arena_release_editing_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.editing_cell)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::_internal_mutable_editing_cell() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.editing_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.editing_cell_ = p;
  }
  return _impl_.editing_cell_;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::mutable_editing_cell() {
  ::TST::Cell* _msg = _internal_mutable_editing_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.editing_cell)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_editing_cell(::TST::Cell* editing_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  if (editing_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_cell));
    if (message_arena != submessage_arena) {
      editing_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.editing_cell_ = editing_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.editing_cell)
}

// required .TST.Cell new_cell = 7;
inline bool CommandPostflightSetCellArchive::_internal_has_new_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_cell_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_new_cell() const {
  return _internal_has_new_cell();
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::_internal_new_cell() const {
  const ::TST::Cell* p = _impl_.new_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::new_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.new_cell)
  return _internal_new_cell();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_new_cell(
    ::TST::Cell* new_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_cell_);
  }
  _impl_.new_cell_ = new_cell;
  if (new_cell) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.new_cell)
}
inline ::TST::Cell* CommandPostflightSetCellArchive::release_new_cell() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.new_cell_;
  _impl_.new_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::unsafe_arena_release_new_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.new_cell)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.new_cell_;
  _impl_.new_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::_internal_mutable_new_cell() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.new_cell_ = p;
  }
  return _impl_.new_cell_;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::mutable_new_cell() {
  ::TST::Cell* _msg = _internal_mutable_new_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.new_cell)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_new_cell(::TST::Cell* new_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_cell_);
  }
  if (new_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_cell));
    if (message_arena != submessage_arena) {
      new_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_cell_ = new_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.new_cell)
}

// required .TSP.Reference editing_storage = 8;
inline bool CommandPostflightSetCellArchive::_internal_has_editing_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_storage_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_editing_storage() const {
  return _internal_has_editing_storage();
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::_internal_editing_storage() const {
  const ::TSP::Reference* p = _impl_.editing_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::editing_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.editing_storage)
  return _internal_editing_storage();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_editing_storage(
    ::TSP::Reference* editing_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  _impl_.editing_storage_ = editing_storage;
  if (editing_storage) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.editing_storage)
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::release_editing_storage() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::unsafe_arena_release_editing_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.editing_storage)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::_internal_mutable_editing_storage() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.editing_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.editing_storage_ = p;
  }
  return _impl_.editing_storage_;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::mutable_editing_storage() {
  ::TSP::Reference* _msg = _internal_mutable_editing_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.editing_storage)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_editing_storage(::TSP::Reference* editing_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  if (editing_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_storage));
    if (message_arena != submessage_arena) {
      editing_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.editing_storage_ = editing_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.editing_storage)
}

// optional uint32 last_column_hit_by_tap = 9;
inline bool CommandPostflightSetCellArchive::_internal_has_last_column_hit_by_tap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandPostflightSetCellArchive::has_last_column_hit_by_tap() const {
  return _internal_has_last_column_hit_by_tap();
}
inline void CommandPostflightSetCellArchive::clear_last_column_hit_by_tap() {
  _impl_.last_column_hit_by_tap_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CommandPostflightSetCellArchive::_internal_last_column_hit_by_tap() const {
  return _impl_.last_column_hit_by_tap_;
}
inline uint32_t CommandPostflightSetCellArchive::last_column_hit_by_tap() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.last_column_hit_by_tap)
  return _internal_last_column_hit_by_tap();
}
inline void CommandPostflightSetCellArchive::_internal_set_last_column_hit_by_tap(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.last_column_hit_by_tap_ = value;
}
inline void CommandPostflightSetCellArchive::set_last_column_hit_by_tap(uint32_t value) {
  _internal_set_last_column_hit_by_tap(value);
  // @@protoc_insertion_point(field_set:TST.CommandPostflightSetCellArchive.last_column_hit_by_tap)
}

// required .TSP.UUIDCoordArchive cell_uid = 10;
inline bool CommandPostflightSetCellArchive::_internal_has_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_cell_uid() const {
  return _internal_has_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& CommandPostflightSetCellArchive::_internal_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& CommandPostflightSetCellArchive::cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.cell_uid)
  return _internal_cell_uid();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_cell_uid(
    ::TSP::UUIDCoordArchive* cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_);
  }
  _impl_.cell_uid_ = cell_uid;
  if (cell_uid) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.cell_uid)
}
inline ::TSP::UUIDCoordArchive* CommandPostflightSetCellArchive::release_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cell_uid_;
  _impl_.cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandPostflightSetCellArchive::unsafe_arena_release_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.cell_uid)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cell_uid_;
  _impl_.cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandPostflightSetCellArchive::_internal_mutable_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.cell_uid_ = p;
  }
  return _impl_.cell_uid_;
}
inline ::TSP::UUIDCoordArchive* CommandPostflightSetCellArchive::mutable_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.cell_uid)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_cell_uid(::TSP::UUIDCoordArchive* cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_);
  }
  if (cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid));
    if (message_arena != submessage_arena) {
      cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.cell_uid_ = cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.cell_uid)
}

// -------------------------------------------------------------------

// CommandChangeTableAreaForColumnOrRowArchive

// required .TST.CommandRowColumnRangeArchive super = 1;
inline bool CommandChangeTableAreaForColumnOrRowArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChangeTableAreaForColumnOrRowArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CommandRowColumnRangeArchive& CommandChangeTableAreaForColumnOrRowArchive::_internal_super() const {
  const ::TST::CommandRowColumnRangeArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandRowColumnRangeArchive&>(
      ::TST::_CommandRowColumnRangeArchive_default_instance_);
}
inline const ::TST::CommandRowColumnRangeArchive& CommandChangeTableAreaForColumnOrRowArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeTableAreaForColumnOrRowArchive.super)
  return _internal_super();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandRowColumnRangeArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.super)
}
inline ::TST::CommandRowColumnRangeArchive* CommandChangeTableAreaForColumnOrRowArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CommandRowColumnRangeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandRowColumnRangeArchive* CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandChangeTableAreaForColumnOrRowArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CommandRowColumnRangeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandRowColumnRangeArchive* CommandChangeTableAreaForColumnOrRowArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandRowColumnRangeArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandRowColumnRangeArchive* CommandChangeTableAreaForColumnOrRowArchive::mutable_super() {
  ::TST::CommandRowColumnRangeArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandChangeTableAreaForColumnOrRowArchive.super)
  return _msg;
}
inline void CommandChangeTableAreaForColumnOrRowArchive::set_allocated_super(::TST::CommandRowColumnRangeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.super)
}

// required .TST.TableAreaTransition table_area_transition = 2;
inline bool CommandChangeTableAreaForColumnOrRowArchive::_internal_has_table_area_transition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandChangeTableAreaForColumnOrRowArchive::has_table_area_transition() const {
  return _internal_has_table_area_transition();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::clear_table_area_transition() {
  _impl_.table_area_transition_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::TST::TableAreaTransition CommandChangeTableAreaForColumnOrRowArchive::_internal_table_area_transition() const {
  return static_cast< ::TST::TableAreaTransition >(_impl_.table_area_transition_);
}
inline ::TST::TableAreaTransition CommandChangeTableAreaForColumnOrRowArchive::table_area_transition() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeTableAreaForColumnOrRowArchive.table_area_transition)
  return _internal_table_area_transition();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::_internal_set_table_area_transition(::TST::TableAreaTransition value) {
  assert(::TST::TableAreaTransition_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.table_area_transition_ = value;
}
inline void CommandChangeTableAreaForColumnOrRowArchive::set_table_area_transition(::TST::TableAreaTransition value) {
  _internal_set_table_area_transition(value);
  // @@protoc_insertion_point(field_set:TST.CommandChangeTableAreaForColumnOrRowArchive.table_area_transition)
}

// optional .TSP.Reference cell_diff_map = 3;
inline bool CommandChangeTableAreaForColumnOrRowArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandChangeTableAreaForColumnOrRowArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandChangeTableAreaForColumnOrRowArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeTableAreaForColumnOrRowArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeTableAreaForColumnOrRowArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandChangeTableAreaForColumnOrRowArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandChangeTableAreaForColumnOrRowArchive.cell_diff_map)
  return _msg;
}
inline void CommandChangeTableAreaForColumnOrRowArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.cell_diff_map)
}

// optional .TSP.Reference undo_cell_diff_map = 4;
inline bool CommandChangeTableAreaForColumnOrRowArchive::_internal_has_undo_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandChangeTableAreaForColumnOrRowArchive::has_undo_cell_diff_map() const {
  return _internal_has_undo_cell_diff_map();
}
inline const ::TSP::Reference& CommandChangeTableAreaForColumnOrRowArchive::_internal_undo_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeTableAreaForColumnOrRowArchive::undo_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_cell_diff_map)
  return _internal_undo_cell_diff_map();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_set_allocated_undo_cell_diff_map(
    ::TSP::Reference* undo_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  if (undo_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_cell_diff_map)
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::release_undo_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_release_undo_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::_internal_mutable_undo_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_diff_map_ = p;
  }
  return _impl_.undo_cell_diff_map_;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::mutable_undo_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_cell_diff_map)
  return _msg;
}
inline void CommandChangeTableAreaForColumnOrRowArchive::set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  if (undo_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_diff_map));
    if (message_arena != submessage_arena) {
      undo_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_cell_diff_map)
}

// optional .TSP.Reference undo_commands = 5;
inline bool CommandChangeTableAreaForColumnOrRowArchive::_internal_has_undo_commands() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_commands_ != nullptr);
  return value;
}
inline bool CommandChangeTableAreaForColumnOrRowArchive::has_undo_commands() const {
  return _internal_has_undo_commands();
}
inline const ::TSP::Reference& CommandChangeTableAreaForColumnOrRowArchive::_internal_undo_commands() const {
  const ::TSP::Reference* p = _impl_.undo_commands_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeTableAreaForColumnOrRowArchive::undo_commands() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_commands)
  return _internal_undo_commands();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_set_allocated_undo_commands(
    ::TSP::Reference* undo_commands) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_commands_);
  }
  _impl_.undo_commands_ = undo_commands;
  if (undo_commands) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_commands)
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::release_undo_commands() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.undo_commands_;
  _impl_.undo_commands_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::unsafe_arena_release_undo_commands() {
  // @@protoc_insertion_point(field_release:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_commands)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.undo_commands_;
  _impl_.undo_commands_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::_internal_mutable_undo_commands() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.undo_commands_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_commands_ = p;
  }
  return _impl_.undo_commands_;
}
inline ::TSP::Reference* CommandChangeTableAreaForColumnOrRowArchive::mutable_undo_commands() {
  ::TSP::Reference* _msg = _internal_mutable_undo_commands();
  // @@protoc_insertion_point(field_mutable:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_commands)
  return _msg;
}
inline void CommandChangeTableAreaForColumnOrRowArchive::set_allocated_undo_commands(::TSP::Reference* undo_commands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_commands_);
  }
  if (undo_commands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_commands));
    if (message_arena != submessage_arena) {
      undo_commands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_commands, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.undo_commands_ = undo_commands;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.undo_commands)
}

// optional string action_string = 6;
inline bool CommandChangeTableAreaForColumnOrRowArchive::_internal_has_action_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandChangeTableAreaForColumnOrRowArchive::has_action_string() const {
  return _internal_has_action_string();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::clear_action_string() {
  _impl_.action_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandChangeTableAreaForColumnOrRowArchive::action_string() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeTableAreaForColumnOrRowArchive.action_string)
  return _internal_action_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandChangeTableAreaForColumnOrRowArchive::set_action_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.action_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandChangeTableAreaForColumnOrRowArchive.action_string)
}
inline std::string* CommandChangeTableAreaForColumnOrRowArchive::mutable_action_string() {
  std::string* _s = _internal_mutable_action_string();
  // @@protoc_insertion_point(field_mutable:TST.CommandChangeTableAreaForColumnOrRowArchive.action_string)
  return _s;
}
inline const std::string& CommandChangeTableAreaForColumnOrRowArchive::_internal_action_string() const {
  return _impl_.action_string_.Get();
}
inline void CommandChangeTableAreaForColumnOrRowArchive::_internal_set_action_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.action_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandChangeTableAreaForColumnOrRowArchive::_internal_mutable_action_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.action_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandChangeTableAreaForColumnOrRowArchive::release_action_string() {
  // @@protoc_insertion_point(field_release:TST.CommandChangeTableAreaForColumnOrRowArchive.action_string)
  if (!_internal_has_action_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.action_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_string_.IsDefault()) {
    _impl_.action_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandChangeTableAreaForColumnOrRowArchive::set_allocated_action_string(std::string* action_string) {
  if (action_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.action_string_.SetAllocated(action_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_string_.IsDefault()) {
    _impl_.action_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChangeTableAreaForColumnOrRowArchive.action_string)
}

// -------------------------------------------------------------------

// CommandSetPencilAnnotationsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetPencilAnnotationsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetPencilAnnotationsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetPencilAnnotationsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetPencilAnnotationsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetPencilAnnotationsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetPencilAnnotationsArchive.super)
  return _internal_super();
}
inline void CommandSetPencilAnnotationsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetPencilAnnotationsArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetPencilAnnotationsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetPencilAnnotationsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetPencilAnnotationsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetPencilAnnotationsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetPencilAnnotationsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetPencilAnnotationsArchive.super)
  return _msg;
}
inline void CommandSetPencilAnnotationsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetPencilAnnotationsArchive.super)
}

// repeated .TSP.Reference annotations = 2;
inline int CommandSetPencilAnnotationsArchive::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int CommandSetPencilAnnotationsArchive::annotations_size() const {
  return _internal_annotations_size();
}
inline ::TSP::Reference* CommandSetPencilAnnotationsArchive::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSetPencilAnnotationsArchive.annotations)
  return _impl_.annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSetPencilAnnotationsArchive::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetPencilAnnotationsArchive.annotations)
  return &_impl_.annotations_;
}
inline const ::TSP::Reference& CommandSetPencilAnnotationsArchive::_internal_annotations(int index) const {
  return _impl_.annotations_.Get(index);
}
inline const ::TSP::Reference& CommandSetPencilAnnotationsArchive::annotations(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetPencilAnnotationsArchive.annotations)
  return _internal_annotations(index);
}
inline ::TSP::Reference* CommandSetPencilAnnotationsArchive::_internal_add_annotations() {
  return _impl_.annotations_.Add();
}
inline ::TSP::Reference* CommandSetPencilAnnotationsArchive::add_annotations() {
  ::TSP::Reference* _add = _internal_add_annotations();
  // @@protoc_insertion_point(field_add:TST.CommandSetPencilAnnotationsArchive.annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSetPencilAnnotationsArchive::annotations() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetPencilAnnotationsArchive.annotations)
  return _impl_.annotations_;
}

// repeated .TSCE.FormulaArchive formulas = 3;
inline int CommandSetPencilAnnotationsArchive::_internal_formulas_size() const {
  return _impl_.formulas_.size();
}
inline int CommandSetPencilAnnotationsArchive::formulas_size() const {
  return _internal_formulas_size();
}
inline ::TSCE::FormulaArchive* CommandSetPencilAnnotationsArchive::mutable_formulas(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSetPencilAnnotationsArchive.formulas)
  return _impl_.formulas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
CommandSetPencilAnnotationsArchive::mutable_formulas() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetPencilAnnotationsArchive.formulas)
  return &_impl_.formulas_;
}
inline const ::TSCE::FormulaArchive& CommandSetPencilAnnotationsArchive::_internal_formulas(int index) const {
  return _impl_.formulas_.Get(index);
}
inline const ::TSCE::FormulaArchive& CommandSetPencilAnnotationsArchive::formulas(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetPencilAnnotationsArchive.formulas)
  return _internal_formulas(index);
}
inline ::TSCE::FormulaArchive* CommandSetPencilAnnotationsArchive::_internal_add_formulas() {
  return _impl_.formulas_.Add();
}
inline ::TSCE::FormulaArchive* CommandSetPencilAnnotationsArchive::add_formulas() {
  ::TSCE::FormulaArchive* _add = _internal_add_formulas();
  // @@protoc_insertion_point(field_add:TST.CommandSetPencilAnnotationsArchive.formulas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
CommandSetPencilAnnotationsArchive::formulas() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetPencilAnnotationsArchive.formulas)
  return _impl_.formulas_;
}

// repeated uint64 formula_indexes = 4;
inline int CommandSetPencilAnnotationsArchive::_internal_formula_indexes_size() const {
  return _impl_.formula_indexes_.size();
}
inline int CommandSetPencilAnnotationsArchive::formula_indexes_size() const {
  return _internal_formula_indexes_size();
}
inline void CommandSetPencilAnnotationsArchive::clear_formula_indexes() {
  _impl_.formula_indexes_.Clear();
}
inline uint64_t CommandSetPencilAnnotationsArchive::_internal_formula_indexes(int index) const {
  return _impl_.formula_indexes_.Get(index);
}
inline uint64_t CommandSetPencilAnnotationsArchive::formula_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetPencilAnnotationsArchive.formula_indexes)
  return _internal_formula_indexes(index);
}
inline void CommandSetPencilAnnotationsArchive::set_formula_indexes(int index, uint64_t value) {
  _impl_.formula_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandSetPencilAnnotationsArchive.formula_indexes)
}
inline void CommandSetPencilAnnotationsArchive::_internal_add_formula_indexes(uint64_t value) {
  _impl_.formula_indexes_.Add(value);
}
inline void CommandSetPencilAnnotationsArchive::add_formula_indexes(uint64_t value) {
  _internal_add_formula_indexes(value);
  // @@protoc_insertion_point(field_add:TST.CommandSetPencilAnnotationsArchive.formula_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CommandSetPencilAnnotationsArchive::_internal_formula_indexes() const {
  return _impl_.formula_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CommandSetPencilAnnotationsArchive::formula_indexes() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetPencilAnnotationsArchive.formula_indexes)
  return _internal_formula_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CommandSetPencilAnnotationsArchive::_internal_mutable_formula_indexes() {
  return &_impl_.formula_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CommandSetPencilAnnotationsArchive::mutable_formula_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetPencilAnnotationsArchive.formula_indexes)
  return _internal_mutable_formula_indexes();
}

// repeated .TSCE.FormulaArchive inverse_formulas = 5;
inline int CommandSetPencilAnnotationsArchive::_internal_inverse_formulas_size() const {
  return _impl_.inverse_formulas_.size();
}
inline int CommandSetPencilAnnotationsArchive::inverse_formulas_size() const {
  return _internal_inverse_formulas_size();
}
inline ::TSCE::FormulaArchive* CommandSetPencilAnnotationsArchive::mutable_inverse_formulas(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSetPencilAnnotationsArchive.inverse_formulas)
  return _impl_.inverse_formulas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
CommandSetPencilAnnotationsArchive::mutable_inverse_formulas() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetPencilAnnotationsArchive.inverse_formulas)
  return &_impl_.inverse_formulas_;
}
inline const ::TSCE::FormulaArchive& CommandSetPencilAnnotationsArchive::_internal_inverse_formulas(int index) const {
  return _impl_.inverse_formulas_.Get(index);
}
inline const ::TSCE::FormulaArchive& CommandSetPencilAnnotationsArchive::inverse_formulas(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetPencilAnnotationsArchive.inverse_formulas)
  return _internal_inverse_formulas(index);
}
inline ::TSCE::FormulaArchive* CommandSetPencilAnnotationsArchive::_internal_add_inverse_formulas() {
  return _impl_.inverse_formulas_.Add();
}
inline ::TSCE::FormulaArchive* CommandSetPencilAnnotationsArchive::add_inverse_formulas() {
  ::TSCE::FormulaArchive* _add = _internal_add_inverse_formulas();
  // @@protoc_insertion_point(field_add:TST.CommandSetPencilAnnotationsArchive.inverse_formulas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
CommandSetPencilAnnotationsArchive::inverse_formulas() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetPencilAnnotationsArchive.inverse_formulas)
  return _impl_.inverse_formulas_;
}

// repeated uint64 inverse_formula_indexes = 6;
inline int CommandSetPencilAnnotationsArchive::_internal_inverse_formula_indexes_size() const {
  return _impl_.inverse_formula_indexes_.size();
}
inline int CommandSetPencilAnnotationsArchive::inverse_formula_indexes_size() const {
  return _internal_inverse_formula_indexes_size();
}
inline void CommandSetPencilAnnotationsArchive::clear_inverse_formula_indexes() {
  _impl_.inverse_formula_indexes_.Clear();
}
inline uint64_t CommandSetPencilAnnotationsArchive::_internal_inverse_formula_indexes(int index) const {
  return _impl_.inverse_formula_indexes_.Get(index);
}
inline uint64_t CommandSetPencilAnnotationsArchive::inverse_formula_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetPencilAnnotationsArchive.inverse_formula_indexes)
  return _internal_inverse_formula_indexes(index);
}
inline void CommandSetPencilAnnotationsArchive::set_inverse_formula_indexes(int index, uint64_t value) {
  _impl_.inverse_formula_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandSetPencilAnnotationsArchive.inverse_formula_indexes)
}
inline void CommandSetPencilAnnotationsArchive::_internal_add_inverse_formula_indexes(uint64_t value) {
  _impl_.inverse_formula_indexes_.Add(value);
}
inline void CommandSetPencilAnnotationsArchive::add_inverse_formula_indexes(uint64_t value) {
  _internal_add_inverse_formula_indexes(value);
  // @@protoc_insertion_point(field_add:TST.CommandSetPencilAnnotationsArchive.inverse_formula_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CommandSetPencilAnnotationsArchive::_internal_inverse_formula_indexes() const {
  return _impl_.inverse_formula_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CommandSetPencilAnnotationsArchive::inverse_formula_indexes() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetPencilAnnotationsArchive.inverse_formula_indexes)
  return _internal_inverse_formula_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CommandSetPencilAnnotationsArchive::_internal_mutable_inverse_formula_indexes() {
  return &_impl_.inverse_formula_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CommandSetPencilAnnotationsArchive::mutable_inverse_formula_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetPencilAnnotationsArchive.inverse_formula_indexes)
  return _internal_mutable_inverse_formula_indexes();
}

// optional uint64 rollback_index = 7;
inline bool CommandSetPencilAnnotationsArchive::_internal_has_rollback_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetPencilAnnotationsArchive::has_rollback_index() const {
  return _internal_has_rollback_index();
}
inline void CommandSetPencilAnnotationsArchive::clear_rollback_index() {
  _impl_.rollback_index_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CommandSetPencilAnnotationsArchive::_internal_rollback_index() const {
  return _impl_.rollback_index_;
}
inline uint64_t CommandSetPencilAnnotationsArchive::rollback_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetPencilAnnotationsArchive.rollback_index)
  return _internal_rollback_index();
}
inline void CommandSetPencilAnnotationsArchive::_internal_set_rollback_index(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rollback_index_ = value;
}
inline void CommandSetPencilAnnotationsArchive::set_rollback_index(uint64_t value) {
  _internal_set_rollback_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetPencilAnnotationsArchive.rollback_index)
}

// -------------------------------------------------------------------

// CommandSetTableNameArchive

// required string newtablename = 1;
inline bool CommandSetTableNameArchive::_internal_has_newtablename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_newtablename() const {
  return _internal_has_newtablename();
}
inline void CommandSetTableNameArchive::clear_newtablename() {
  _impl_.newtablename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetTableNameArchive::newtablename() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.newtablename)
  return _internal_newtablename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableNameArchive::set_newtablename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.newtablename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.newtablename)
}
inline std::string* CommandSetTableNameArchive::mutable_newtablename() {
  std::string* _s = _internal_mutable_newtablename();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.newtablename)
  return _s;
}
inline const std::string& CommandSetTableNameArchive::_internal_newtablename() const {
  return _impl_.newtablename_.Get();
}
inline void CommandSetTableNameArchive::_internal_set_newtablename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.newtablename_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::_internal_mutable_newtablename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.newtablename_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::release_newtablename() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.newtablename)
  if (!_internal_has_newtablename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.newtablename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newtablename_.IsDefault()) {
    _impl_.newtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableNameArchive::set_allocated_newtablename(std::string* newtablename) {
  if (newtablename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.newtablename_.SetAllocated(newtablename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newtablename_.IsDefault()) {
    _impl_.newtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.newtablename)
}

// optional string oldtablename = 2;
inline bool CommandSetTableNameArchive::_internal_has_oldtablename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_oldtablename() const {
  return _internal_has_oldtablename();
}
inline void CommandSetTableNameArchive::clear_oldtablename() {
  _impl_.oldtablename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetTableNameArchive::oldtablename() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.oldtablename)
  return _internal_oldtablename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableNameArchive::set_oldtablename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.oldtablename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.oldtablename)
}
inline std::string* CommandSetTableNameArchive::mutable_oldtablename() {
  std::string* _s = _internal_mutable_oldtablename();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.oldtablename)
  return _s;
}
inline const std::string& CommandSetTableNameArchive::_internal_oldtablename() const {
  return _impl_.oldtablename_.Get();
}
inline void CommandSetTableNameArchive::_internal_set_oldtablename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.oldtablename_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::_internal_mutable_oldtablename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.oldtablename_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::release_oldtablename() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.oldtablename)
  if (!_internal_has_oldtablename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.oldtablename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldtablename_.IsDefault()) {
    _impl_.oldtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableNameArchive::set_allocated_oldtablename(std::string* oldtablename) {
  if (oldtablename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.oldtablename_.SetAllocated(oldtablename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldtablename_.IsDefault()) {
    _impl_.oldtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.oldtablename)
}

// optional .TSP.Reference newstyle = 3;
inline bool CommandSetTableNameArchive::_internal_has_newstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newstyle_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_newstyle() const {
  return _internal_has_newstyle();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_newstyle() const {
  const ::TSP::Reference* p = _impl_.newstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::newstyle() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.newstyle)
  return _internal_newstyle();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_newstyle(
    ::TSP::Reference* newstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newstyle_);
  }
  _impl_.newstyle_ = newstyle;
  if (newstyle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.newstyle)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_newstyle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.newstyle_;
  _impl_.newstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_newstyle() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.newstyle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.newstyle_;
  _impl_.newstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_newstyle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.newstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.newstyle_ = p;
  }
  return _impl_.newstyle_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_newstyle() {
  ::TSP::Reference* _msg = _internal_mutable_newstyle();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.newstyle)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_newstyle(::TSP::Reference* newstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newstyle_);
  }
  if (newstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newstyle));
    if (message_arena != submessage_arena) {
      newstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.newstyle_ = newstyle;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.newstyle)
}

// optional .TSP.Reference oldstyle = 4;
inline bool CommandSetTableNameArchive::_internal_has_oldstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldstyle_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_oldstyle() const {
  return _internal_has_oldstyle();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_oldstyle() const {
  const ::TSP::Reference* p = _impl_.oldstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::oldstyle() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.oldstyle)
  return _internal_oldstyle();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_oldstyle(
    ::TSP::Reference* oldstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldstyle_);
  }
  _impl_.oldstyle_ = oldstyle;
  if (oldstyle) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.oldstyle)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_oldstyle() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.oldstyle_;
  _impl_.oldstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_oldstyle() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.oldstyle)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.oldstyle_;
  _impl_.oldstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_oldstyle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.oldstyle_ = p;
  }
  return _impl_.oldstyle_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_oldstyle() {
  ::TSP::Reference* _msg = _internal_mutable_oldstyle();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.oldstyle)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_oldstyle(::TSP::Reference* oldstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldstyle_);
  }
  if (oldstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldstyle));
    if (message_arena != submessage_arena) {
      oldstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldstyle_ = oldstyle;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.oldstyle)
}

// required .TST.TableCommandArchive super = 5;
inline bool CommandSetTableNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::TableCommandArchive& CommandSetTableNameArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.super)
  return _internal_super();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.super)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.super)
}

// optional .TSP.Reference old_shape_style = 6;
inline bool CommandSetTableNameArchive::_internal_has_old_shape_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_shape_style_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_old_shape_style() const {
  return _internal_has_old_shape_style();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_old_shape_style() const {
  const ::TSP::Reference* p = _impl_.old_shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::old_shape_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.old_shape_style)
  return _internal_old_shape_style();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_old_shape_style(
    ::TSP::Reference* old_shape_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_shape_style_);
  }
  _impl_.old_shape_style_ = old_shape_style;
  if (old_shape_style) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.old_shape_style)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_old_shape_style() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_shape_style_;
  _impl_.old_shape_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_old_shape_style() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.old_shape_style)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_shape_style_;
  _impl_.old_shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_old_shape_style() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.old_shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_shape_style_ = p;
  }
  return _impl_.old_shape_style_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_old_shape_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_shape_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.old_shape_style)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_old_shape_style(::TSP::Reference* old_shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_shape_style_);
  }
  if (old_shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_shape_style));
    if (message_arena != submessage_arena) {
      old_shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_shape_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.old_shape_style_ = old_shape_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.old_shape_style)
}

// optional .TSP.Reference new_shape_style = 7;
inline bool CommandSetTableNameArchive::_internal_has_new_shape_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_shape_style_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_new_shape_style() const {
  return _internal_has_new_shape_style();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_new_shape_style() const {
  const ::TSP::Reference* p = _impl_.new_shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::new_shape_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.new_shape_style)
  return _internal_new_shape_style();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_new_shape_style(
    ::TSP::Reference* new_shape_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_shape_style_);
  }
  _impl_.new_shape_style_ = new_shape_style;
  if (new_shape_style) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.new_shape_style)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_new_shape_style() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.new_shape_style_;
  _impl_.new_shape_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_new_shape_style() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.new_shape_style)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.new_shape_style_;
  _impl_.new_shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_new_shape_style() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.new_shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_shape_style_ = p;
  }
  return _impl_.new_shape_style_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_new_shape_style() {
  ::TSP::Reference* _msg = _internal_mutable_new_shape_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.new_shape_style)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_new_shape_style(::TSP::Reference* new_shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_shape_style_);
  }
  if (new_shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_shape_style));
    if (message_arena != submessage_arena) {
      new_shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_shape_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.new_shape_style_ = new_shape_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.new_shape_style)
}

// optional bool old_table_name_border_enabled = 8;
inline bool CommandSetTableNameArchive::_internal_has_old_table_name_border_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_old_table_name_border_enabled() const {
  return _internal_has_old_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::clear_old_table_name_border_enabled() {
  _impl_.old_table_name_border_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CommandSetTableNameArchive::_internal_old_table_name_border_enabled() const {
  return _impl_.old_table_name_border_enabled_;
}
inline bool CommandSetTableNameArchive::old_table_name_border_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.old_table_name_border_enabled)
  return _internal_old_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::_internal_set_old_table_name_border_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.old_table_name_border_enabled_ = value;
}
inline void CommandSetTableNameArchive::set_old_table_name_border_enabled(bool value) {
  _internal_set_old_table_name_border_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.old_table_name_border_enabled)
}

// optional bool new_table_name_border_enabled = 9;
inline bool CommandSetTableNameArchive::_internal_has_new_table_name_border_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_new_table_name_border_enabled() const {
  return _internal_has_new_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::clear_new_table_name_border_enabled() {
  _impl_.new_table_name_border_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CommandSetTableNameArchive::_internal_new_table_name_border_enabled() const {
  return _impl_.new_table_name_border_enabled_;
}
inline bool CommandSetTableNameArchive::new_table_name_border_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.new_table_name_border_enabled)
  return _internal_new_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::_internal_set_new_table_name_border_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.new_table_name_border_enabled_ = value;
}
inline void CommandSetTableNameArchive::set_new_table_name_border_enabled(bool value) {
  _internal_set_new_table_name_border_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.new_table_name_border_enabled)
}

// -------------------------------------------------------------------

// CommandSetTableNameEnabledArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTableNameEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableNameEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableNameEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTableNameEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableNameEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetTableNameEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameEnabledArchive.super)
  return _msg;
}
inline void CommandSetTableNameEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameEnabledArchive.super)
}

// required bool table_name_enabled = 2;
inline bool CommandSetTableNameEnabledArchive::_internal_has_table_name_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableNameEnabledArchive::has_table_name_enabled() const {
  return _internal_has_table_name_enabled();
}
inline void CommandSetTableNameEnabledArchive::clear_table_name_enabled() {
  _impl_.table_name_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetTableNameEnabledArchive::_internal_table_name_enabled() const {
  return _impl_.table_name_enabled_;
}
inline bool CommandSetTableNameEnabledArchive::table_name_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameEnabledArchive.table_name_enabled)
  return _internal_table_name_enabled();
}
inline void CommandSetTableNameEnabledArchive::_internal_set_table_name_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.table_name_enabled_ = value;
}
inline void CommandSetTableNameEnabledArchive::set_table_name_enabled(bool value) {
  _internal_set_table_name_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameEnabledArchive.table_name_enabled)
}

// optional bool prev_table_name_enabled = 3;
inline bool CommandSetTableNameEnabledArchive::_internal_has_prev_table_name_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetTableNameEnabledArchive::has_prev_table_name_enabled() const {
  return _internal_has_prev_table_name_enabled();
}
inline void CommandSetTableNameEnabledArchive::clear_prev_table_name_enabled() {
  _impl_.prev_table_name_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetTableNameEnabledArchive::_internal_prev_table_name_enabled() const {
  return _impl_.prev_table_name_enabled_;
}
inline bool CommandSetTableNameEnabledArchive::prev_table_name_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameEnabledArchive.prev_table_name_enabled)
  return _internal_prev_table_name_enabled();
}
inline void CommandSetTableNameEnabledArchive::_internal_set_prev_table_name_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prev_table_name_enabled_ = value;
}
inline void CommandSetTableNameEnabledArchive::set_prev_table_name_enabled(bool value) {
  _internal_set_prev_table_name_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameEnabledArchive.prev_table_name_enabled)
}

// -------------------------------------------------------------------

// CommandSetTableFontSizeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTableFontSizeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableFontSizeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTableFontSizeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableFontSizeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.super)
  return _internal_super();
}
inline void CommandSetTableFontSizeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontSizeArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontSizeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontSizeArchive.super)
  return _msg;
}
inline void CommandSetTableFontSizeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontSizeArchive.super)
}

// required bool is_increase = 2;
inline bool CommandSetTableFontSizeArchive::_internal_has_is_increase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_is_increase() const {
  return _internal_has_is_increase();
}
inline void CommandSetTableFontSizeArchive::clear_is_increase() {
  _impl_.is_increase_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetTableFontSizeArchive::_internal_is_increase() const {
  return _impl_.is_increase_;
}
inline bool CommandSetTableFontSizeArchive::is_increase() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.is_increase)
  return _internal_is_increase();
}
inline void CommandSetTableFontSizeArchive::_internal_set_is_increase(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_increase_ = value;
}
inline void CommandSetTableFontSizeArchive::set_is_increase(bool value) {
  _internal_set_is_increase(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontSizeArchive.is_increase)
}

// required int32 font_size_diff = 3;
inline bool CommandSetTableFontSizeArchive::_internal_has_font_size_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_font_size_diff() const {
  return _internal_has_font_size_diff();
}
inline void CommandSetTableFontSizeArchive::clear_font_size_diff() {
  _impl_.font_size_diff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CommandSetTableFontSizeArchive::_internal_font_size_diff() const {
  return _impl_.font_size_diff_;
}
inline int32_t CommandSetTableFontSizeArchive::font_size_diff() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.font_size_diff)
  return _internal_font_size_diff();
}
inline void CommandSetTableFontSizeArchive::_internal_set_font_size_diff(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.font_size_diff_ = value;
}
inline void CommandSetTableFontSizeArchive::set_font_size_diff(int32_t value) {
  _internal_set_font_size_diff(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontSizeArchive.font_size_diff)
}

// repeated double font_size_list = 4;
inline int CommandSetTableFontSizeArchive::_internal_font_size_list_size() const {
  return _impl_.font_size_list_.size();
}
inline int CommandSetTableFontSizeArchive::font_size_list_size() const {
  return _internal_font_size_list_size();
}
inline void CommandSetTableFontSizeArchive::clear_font_size_list() {
  _impl_.font_size_list_.Clear();
}
inline double CommandSetTableFontSizeArchive::_internal_font_size_list(int index) const {
  return _impl_.font_size_list_.Get(index);
}
inline double CommandSetTableFontSizeArchive::font_size_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.font_size_list)
  return _internal_font_size_list(index);
}
inline void CommandSetTableFontSizeArchive::set_font_size_list(int index, double value) {
  _impl_.font_size_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontSizeArchive.font_size_list)
}
inline void CommandSetTableFontSizeArchive::_internal_add_font_size_list(double value) {
  _impl_.font_size_list_.Add(value);
}
inline void CommandSetTableFontSizeArchive::add_font_size_list(double value) {
  _internal_add_font_size_list(value);
  // @@protoc_insertion_point(field_add:TST.CommandSetTableFontSizeArchive.font_size_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetTableFontSizeArchive::_internal_font_size_list() const {
  return _impl_.font_size_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetTableFontSizeArchive::font_size_list() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetTableFontSizeArchive.font_size_list)
  return _internal_font_size_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetTableFontSizeArchive::_internal_mutable_font_size_list() {
  return &_impl_.font_size_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetTableFontSizeArchive::mutable_font_size_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetTableFontSizeArchive.font_size_list)
  return _internal_mutable_font_size_list();
}

// repeated double inverse_font_size_list = 5;
inline int CommandSetTableFontSizeArchive::_internal_inverse_font_size_list_size() const {
  return _impl_.inverse_font_size_list_.size();
}
inline int CommandSetTableFontSizeArchive::inverse_font_size_list_size() const {
  return _internal_inverse_font_size_list_size();
}
inline void CommandSetTableFontSizeArchive::clear_inverse_font_size_list() {
  _impl_.inverse_font_size_list_.Clear();
}
inline double CommandSetTableFontSizeArchive::_internal_inverse_font_size_list(int index) const {
  return _impl_.inverse_font_size_list_.Get(index);
}
inline double CommandSetTableFontSizeArchive::inverse_font_size_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.inverse_font_size_list)
  return _internal_inverse_font_size_list(index);
}
inline void CommandSetTableFontSizeArchive::set_inverse_font_size_list(int index, double value) {
  _impl_.inverse_font_size_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontSizeArchive.inverse_font_size_list)
}
inline void CommandSetTableFontSizeArchive::_internal_add_inverse_font_size_list(double value) {
  _impl_.inverse_font_size_list_.Add(value);
}
inline void CommandSetTableFontSizeArchive::add_inverse_font_size_list(double value) {
  _internal_add_inverse_font_size_list(value);
  // @@protoc_insertion_point(field_add:TST.CommandSetTableFontSizeArchive.inverse_font_size_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetTableFontSizeArchive::_internal_inverse_font_size_list() const {
  return _impl_.inverse_font_size_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetTableFontSizeArchive::inverse_font_size_list() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetTableFontSizeArchive.inverse_font_size_list)
  return _internal_inverse_font_size_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetTableFontSizeArchive::_internal_mutable_inverse_font_size_list() {
  return &_impl_.inverse_font_size_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetTableFontSizeArchive::mutable_inverse_font_size_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetTableFontSizeArchive.inverse_font_size_list)
  return _internal_mutable_inverse_font_size_list();
}

// optional .TSP.Reference cell_diff_map = 6;
inline bool CommandSetTableFontSizeArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTableFontSizeArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableFontSizeArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandSetTableFontSizeArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontSizeArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontSizeArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontSizeArchive.cell_diff_map)
  return _msg;
}
inline void CommandSetTableFontSizeArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontSizeArchive.cell_diff_map)
}

// optional .TSP.Reference inverse_cell_diff_map = 7;
inline bool CommandSetTableFontSizeArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTableFontSizeArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableFontSizeArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandSetTableFontSizeArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontSizeArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontSizeArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontSizeArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandSetTableFontSizeArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontSizeArchive.inverse_cell_diff_map)
}

// required bool styles_container_refresh_done = 8;
inline bool CommandSetTableFontSizeArchive::_internal_has_styles_container_refresh_done() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_styles_container_refresh_done() const {
  return _internal_has_styles_container_refresh_done();
}
inline void CommandSetTableFontSizeArchive::clear_styles_container_refresh_done() {
  _impl_.styles_container_refresh_done_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSetTableFontSizeArchive::_internal_styles_container_refresh_done() const {
  return _impl_.styles_container_refresh_done_;
}
inline bool CommandSetTableFontSizeArchive::styles_container_refresh_done() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.styles_container_refresh_done)
  return _internal_styles_container_refresh_done();
}
inline void CommandSetTableFontSizeArchive::_internal_set_styles_container_refresh_done(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.styles_container_refresh_done_ = value;
}
inline void CommandSetTableFontSizeArchive::set_styles_container_refresh_done(bool value) {
  _internal_set_styles_container_refresh_done(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontSizeArchive.styles_container_refresh_done)
}

// -------------------------------------------------------------------

// CommandSetTableFontNameArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTableFontNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableFontNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandSetTableFontNameArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableFontNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.super)
  return _internal_super();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.super)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.super)
}

// required string font_name = 2;
inline bool CommandSetTableFontNameArchive::_internal_has_font_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetTableFontNameArchive::has_font_name() const {
  return _internal_has_font_name();
}
inline void CommandSetTableFontNameArchive::clear_font_name() {
  _impl_.font_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetTableFontNameArchive::font_name() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.font_name)
  return _internal_font_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableFontNameArchive::set_font_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.font_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontNameArchive.font_name)
}
inline std::string* CommandSetTableFontNameArchive::mutable_font_name() {
  std::string* _s = _internal_mutable_font_name();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.font_name)
  return _s;
}
inline const std::string& CommandSetTableFontNameArchive::_internal_font_name() const {
  return _impl_.font_name_.Get();
}
inline void CommandSetTableFontNameArchive::_internal_set_font_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.font_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::_internal_mutable_font_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.font_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::release_font_name() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.font_name)
  if (!_internal_has_font_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.font_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.font_name_.IsDefault()) {
    _impl_.font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableFontNameArchive::set_allocated_font_name(std::string* font_name) {
  if (font_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.font_name_.SetAllocated(font_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.font_name_.IsDefault()) {
    _impl_.font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.font_name)
}

// required bool preserve_face = 3;
inline bool CommandSetTableFontNameArchive::_internal_has_preserve_face() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandSetTableFontNameArchive::has_preserve_face() const {
  return _internal_has_preserve_face();
}
inline void CommandSetTableFontNameArchive::clear_preserve_face() {
  _impl_.preserve_face_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CommandSetTableFontNameArchive::_internal_preserve_face() const {
  return _impl_.preserve_face_;
}
inline bool CommandSetTableFontNameArchive::preserve_face() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.preserve_face)
  return _internal_preserve_face();
}
inline void CommandSetTableFontNameArchive::_internal_set_preserve_face(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.preserve_face_ = value;
}
inline void CommandSetTableFontNameArchive::set_preserve_face(bool value) {
  _internal_set_preserve_face(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontNameArchive.preserve_face)
}

// optional string previous_font_name = 4;
inline bool CommandSetTableFontNameArchive::_internal_has_previous_font_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableFontNameArchive::has_previous_font_name() const {
  return _internal_has_previous_font_name();
}
inline void CommandSetTableFontNameArchive::clear_previous_font_name() {
  _impl_.previous_font_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetTableFontNameArchive::previous_font_name() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.previous_font_name)
  return _internal_previous_font_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableFontNameArchive::set_previous_font_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.previous_font_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontNameArchive.previous_font_name)
}
inline std::string* CommandSetTableFontNameArchive::mutable_previous_font_name() {
  std::string* _s = _internal_mutable_previous_font_name();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.previous_font_name)
  return _s;
}
inline const std::string& CommandSetTableFontNameArchive::_internal_previous_font_name() const {
  return _impl_.previous_font_name_.Get();
}
inline void CommandSetTableFontNameArchive::_internal_set_previous_font_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.previous_font_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::_internal_mutable_previous_font_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.previous_font_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::release_previous_font_name() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.previous_font_name)
  if (!_internal_has_previous_font_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.previous_font_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.previous_font_name_.IsDefault()) {
    _impl_.previous_font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableFontNameArchive::set_allocated_previous_font_name(std::string* previous_font_name) {
  if (previous_font_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.previous_font_name_.SetAllocated(previous_font_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.previous_font_name_.IsDefault()) {
    _impl_.previous_font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.previous_font_name)
}

// optional .TSP.Reference previous_table_style = 5;
inline bool CommandSetTableFontNameArchive::_internal_has_previous_table_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.previous_table_style_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_previous_table_style() const {
  return _internal_has_previous_table_style();
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::_internal_previous_table_style() const {
  const ::TSP::Reference* p = _impl_.previous_table_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::previous_table_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.previous_table_style)
  return _internal_previous_table_style();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_previous_table_style(
    ::TSP::Reference* previous_table_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.previous_table_style_);
  }
  _impl_.previous_table_style_ = previous_table_style;
  if (previous_table_style) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.previous_table_style)
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::release_previous_table_style() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.previous_table_style_;
  _impl_.previous_table_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::unsafe_arena_release_previous_table_style() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.previous_table_style)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.previous_table_style_;
  _impl_.previous_table_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::_internal_mutable_previous_table_style() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.previous_table_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.previous_table_style_ = p;
  }
  return _impl_.previous_table_style_;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::mutable_previous_table_style() {
  ::TSP::Reference* _msg = _internal_mutable_previous_table_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.previous_table_style)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_previous_table_style(::TSP::Reference* previous_table_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.previous_table_style_);
  }
  if (previous_table_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_table_style));
    if (message_arena != submessage_arena) {
      previous_table_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_table_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.previous_table_style_ = previous_table_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.previous_table_style)
}

// repeated .TSP.Reference previous_text_styles = 6;
inline int CommandSetTableFontNameArchive::_internal_previous_text_styles_size() const {
  return _impl_.previous_text_styles_.size();
}
inline int CommandSetTableFontNameArchive::previous_text_styles_size() const {
  return _internal_previous_text_styles_size();
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::mutable_previous_text_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.previous_text_styles)
  return _impl_.previous_text_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSetTableFontNameArchive::mutable_previous_text_styles() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetTableFontNameArchive.previous_text_styles)
  return &_impl_.previous_text_styles_;
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::_internal_previous_text_styles(int index) const {
  return _impl_.previous_text_styles_.Get(index);
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::previous_text_styles(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.previous_text_styles)
  return _internal_previous_text_styles(index);
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::_internal_add_previous_text_styles() {
  return _impl_.previous_text_styles_.Add();
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::add_previous_text_styles() {
  ::TSP::Reference* _add = _internal_add_previous_text_styles();
  // @@protoc_insertion_point(field_add:TST.CommandSetTableFontNameArchive.previous_text_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSetTableFontNameArchive::previous_text_styles() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetTableFontNameArchive.previous_text_styles)
  return _impl_.previous_text_styles_;
}

// required .TSP.Reference cell_diff_map = 7;
inline bool CommandSetTableFontNameArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.cell_diff_map)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.cell_diff_map)
}

// optional .TSP.Reference inverse_cell_diff_map = 8;
inline bool CommandSetTableFontNameArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.inverse_cell_diff_map)
}

// -------------------------------------------------------------------

// CommandSetTableNameHeightArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTableNameHeightArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableNameHeightArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableNameHeightArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTableNameHeightArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableNameHeightArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameHeightArchive.super)
  return _internal_super();
}
inline void CommandSetTableNameHeightArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameHeightArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameHeightArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameHeightArchive.super)
  return _msg;
}
inline void CommandSetTableNameHeightArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameHeightArchive.super)
}

// required double old_table_name_height = 2;
inline bool CommandSetTableNameHeightArchive::_internal_has_old_table_name_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableNameHeightArchive::has_old_table_name_height() const {
  return _internal_has_old_table_name_height();
}
inline void CommandSetTableNameHeightArchive::clear_old_table_name_height() {
  _impl_.old_table_name_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommandSetTableNameHeightArchive::_internal_old_table_name_height() const {
  return _impl_.old_table_name_height_;
}
inline double CommandSetTableNameHeightArchive::old_table_name_height() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameHeightArchive.old_table_name_height)
  return _internal_old_table_name_height();
}
inline void CommandSetTableNameHeightArchive::_internal_set_old_table_name_height(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_table_name_height_ = value;
}
inline void CommandSetTableNameHeightArchive::set_old_table_name_height(double value) {
  _internal_set_old_table_name_height(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameHeightArchive.old_table_name_height)
}

// required double new_table_name_height = 3;
inline bool CommandSetTableNameHeightArchive::_internal_has_new_table_name_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetTableNameHeightArchive::has_new_table_name_height() const {
  return _internal_has_new_table_name_height();
}
inline void CommandSetTableNameHeightArchive::clear_new_table_name_height() {
  _impl_.new_table_name_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CommandSetTableNameHeightArchive::_internal_new_table_name_height() const {
  return _impl_.new_table_name_height_;
}
inline double CommandSetTableNameHeightArchive::new_table_name_height() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameHeightArchive.new_table_name_height)
  return _internal_new_table_name_height();
}
inline void CommandSetTableNameHeightArchive::_internal_set_new_table_name_height(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_table_name_height_ = value;
}
inline void CommandSetTableNameHeightArchive::set_new_table_name_height(double value) {
  _internal_set_new_table_name_height(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameHeightArchive.new_table_name_height)
}

// -------------------------------------------------------------------

// CommandSetNowArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetNowArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetNowArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetNowArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetNowArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetNowArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNowArchive.super)
  return _internal_super();
}
inline void CommandSetNowArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetNowArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetNowArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetNowArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetNowArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetNowArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetNowArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetNowArchive.super)
  return _msg;
}
inline void CommandSetNowArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetNowArchive.super)
}

// -------------------------------------------------------------------

// CommandSetWasCutArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetWasCutArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetWasCutArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetWasCutArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetWasCutArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetWasCutArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetWasCutArchive.super)
  return _internal_super();
}
inline void CommandSetWasCutArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetWasCutArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetWasCutArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetWasCutArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetWasCutArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetWasCutArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetWasCutArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetWasCutArchive.super)
  return _msg;
}
inline void CommandSetWasCutArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetWasCutArchive.super)
}

// required .TSP.UUID from_table_uid = 2;
inline bool CommandSetWasCutArchive::_internal_has_from_table_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_table_uid_ != nullptr);
  return value;
}
inline bool CommandSetWasCutArchive::has_from_table_uid() const {
  return _internal_has_from_table_uid();
}
inline const ::TSP::UUID& CommandSetWasCutArchive::_internal_from_table_uid() const {
  const ::TSP::UUID* p = _impl_.from_table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetWasCutArchive::from_table_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetWasCutArchive.from_table_uid)
  return _internal_from_table_uid();
}
inline void CommandSetWasCutArchive::unsafe_arena_set_allocated_from_table_uid(
    ::TSP::UUID* from_table_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_table_uid_);
  }
  _impl_.from_table_uid_ = from_table_uid;
  if (from_table_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetWasCutArchive.from_table_uid)
}
inline ::TSP::UUID* CommandSetWasCutArchive::release_from_table_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.from_table_uid_;
  _impl_.from_table_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::unsafe_arena_release_from_table_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandSetWasCutArchive.from_table_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.from_table_uid_;
  _impl_.from_table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::_internal_mutable_from_table_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.from_table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.from_table_uid_ = p;
  }
  return _impl_.from_table_uid_;
}
inline ::TSP::UUID* CommandSetWasCutArchive::mutable_from_table_uid() {
  ::TSP::UUID* _msg = _internal_mutable_from_table_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetWasCutArchive.from_table_uid)
  return _msg;
}
inline void CommandSetWasCutArchive::set_allocated_from_table_uid(::TSP::UUID* from_table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_table_uid_);
  }
  if (from_table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_table_uid));
    if (message_arena != submessage_arena) {
      from_table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_table_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.from_table_uid_ = from_table_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetWasCutArchive.from_table_uid)
}

// required .TSP.UUID prev_from_table_uid = 3;
inline bool CommandSetWasCutArchive::_internal_has_prev_from_table_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prev_from_table_uid_ != nullptr);
  return value;
}
inline bool CommandSetWasCutArchive::has_prev_from_table_uid() const {
  return _internal_has_prev_from_table_uid();
}
inline const ::TSP::UUID& CommandSetWasCutArchive::_internal_prev_from_table_uid() const {
  const ::TSP::UUID* p = _impl_.prev_from_table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetWasCutArchive::prev_from_table_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetWasCutArchive.prev_from_table_uid)
  return _internal_prev_from_table_uid();
}
inline void CommandSetWasCutArchive::unsafe_arena_set_allocated_prev_from_table_uid(
    ::TSP::UUID* prev_from_table_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_from_table_uid_);
  }
  _impl_.prev_from_table_uid_ = prev_from_table_uid;
  if (prev_from_table_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetWasCutArchive.prev_from_table_uid)
}
inline ::TSP::UUID* CommandSetWasCutArchive::release_prev_from_table_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.prev_from_table_uid_;
  _impl_.prev_from_table_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::unsafe_arena_release_prev_from_table_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandSetWasCutArchive.prev_from_table_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.prev_from_table_uid_;
  _impl_.prev_from_table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::_internal_mutable_prev_from_table_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.prev_from_table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.prev_from_table_uid_ = p;
  }
  return _impl_.prev_from_table_uid_;
}
inline ::TSP::UUID* CommandSetWasCutArchive::mutable_prev_from_table_uid() {
  ::TSP::UUID* _msg = _internal_mutable_prev_from_table_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetWasCutArchive.prev_from_table_uid)
  return _msg;
}
inline void CommandSetWasCutArchive::set_allocated_prev_from_table_uid(::TSP::UUID* prev_from_table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_from_table_uid_);
  }
  if (prev_from_table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_from_table_uid));
    if (message_arena != submessage_arena) {
      prev_from_table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_from_table_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.prev_from_table_uid_ = prev_from_table_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetWasCutArchive.prev_from_table_uid)
}

// required bool was_cut = 4;
inline bool CommandSetWasCutArchive::_internal_has_was_cut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetWasCutArchive::has_was_cut() const {
  return _internal_has_was_cut();
}
inline void CommandSetWasCutArchive::clear_was_cut() {
  _impl_.was_cut_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSetWasCutArchive::_internal_was_cut() const {
  return _impl_.was_cut_;
}
inline bool CommandSetWasCutArchive::was_cut() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetWasCutArchive.was_cut)
  return _internal_was_cut();
}
inline void CommandSetWasCutArchive::_internal_set_was_cut(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.was_cut_ = value;
}
inline void CommandSetWasCutArchive::set_was_cut(bool value) {
  _internal_set_was_cut(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetWasCutArchive.was_cut)
}

// required bool prev_was_cut = 5;
inline bool CommandSetWasCutArchive::_internal_has_prev_was_cut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandSetWasCutArchive::has_prev_was_cut() const {
  return _internal_has_prev_was_cut();
}
inline void CommandSetWasCutArchive::clear_prev_was_cut() {
  _impl_.prev_was_cut_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CommandSetWasCutArchive::_internal_prev_was_cut() const {
  return _impl_.prev_was_cut_;
}
inline bool CommandSetWasCutArchive::prev_was_cut() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetWasCutArchive.prev_was_cut)
  return _internal_prev_was_cut();
}
inline void CommandSetWasCutArchive::_internal_set_prev_was_cut(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.prev_was_cut_ = value;
}
inline void CommandSetWasCutArchive::set_prev_was_cut(bool value) {
  _internal_set_prev_was_cut(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetWasCutArchive.prev_was_cut)
}

// required .TSP.UUID from_group_by_uid = 6;
inline bool CommandSetWasCutArchive::_internal_has_from_group_by_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_group_by_uid_ != nullptr);
  return value;
}
inline bool CommandSetWasCutArchive::has_from_group_by_uid() const {
  return _internal_has_from_group_by_uid();
}
inline const ::TSP::UUID& CommandSetWasCutArchive::_internal_from_group_by_uid() const {
  const ::TSP::UUID* p = _impl_.from_group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetWasCutArchive::from_group_by_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetWasCutArchive.from_group_by_uid)
  return _internal_from_group_by_uid();
}
inline void CommandSetWasCutArchive::unsafe_arena_set_allocated_from_group_by_uid(
    ::TSP::UUID* from_group_by_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_group_by_uid_);
  }
  _impl_.from_group_by_uid_ = from_group_by_uid;
  if (from_group_by_uid) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetWasCutArchive.from_group_by_uid)
}
inline ::TSP::UUID* CommandSetWasCutArchive::release_from_group_by_uid() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = _impl_.from_group_by_uid_;
  _impl_.from_group_by_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::unsafe_arena_release_from_group_by_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandSetWasCutArchive.from_group_by_uid)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = _impl_.from_group_by_uid_;
  _impl_.from_group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::_internal_mutable_from_group_by_uid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.from_group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.from_group_by_uid_ = p;
  }
  return _impl_.from_group_by_uid_;
}
inline ::TSP::UUID* CommandSetWasCutArchive::mutable_from_group_by_uid() {
  ::TSP::UUID* _msg = _internal_mutable_from_group_by_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetWasCutArchive.from_group_by_uid)
  return _msg;
}
inline void CommandSetWasCutArchive::set_allocated_from_group_by_uid(::TSP::UUID* from_group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_group_by_uid_);
  }
  if (from_group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_group_by_uid));
    if (message_arena != submessage_arena) {
      from_group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_group_by_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.from_group_by_uid_ = from_group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetWasCutArchive.from_group_by_uid)
}

// required .TSP.UUID prev_from_group_by_uid = 7;
inline bool CommandSetWasCutArchive::_internal_has_prev_from_group_by_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prev_from_group_by_uid_ != nullptr);
  return value;
}
inline bool CommandSetWasCutArchive::has_prev_from_group_by_uid() const {
  return _internal_has_prev_from_group_by_uid();
}
inline const ::TSP::UUID& CommandSetWasCutArchive::_internal_prev_from_group_by_uid() const {
  const ::TSP::UUID* p = _impl_.prev_from_group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetWasCutArchive::prev_from_group_by_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetWasCutArchive.prev_from_group_by_uid)
  return _internal_prev_from_group_by_uid();
}
inline void CommandSetWasCutArchive::unsafe_arena_set_allocated_prev_from_group_by_uid(
    ::TSP::UUID* prev_from_group_by_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_from_group_by_uid_);
  }
  _impl_.prev_from_group_by_uid_ = prev_from_group_by_uid;
  if (prev_from_group_by_uid) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetWasCutArchive.prev_from_group_by_uid)
}
inline ::TSP::UUID* CommandSetWasCutArchive::release_prev_from_group_by_uid() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = _impl_.prev_from_group_by_uid_;
  _impl_.prev_from_group_by_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::unsafe_arena_release_prev_from_group_by_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandSetWasCutArchive.prev_from_group_by_uid)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = _impl_.prev_from_group_by_uid_;
  _impl_.prev_from_group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetWasCutArchive::_internal_mutable_prev_from_group_by_uid() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.prev_from_group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.prev_from_group_by_uid_ = p;
  }
  return _impl_.prev_from_group_by_uid_;
}
inline ::TSP::UUID* CommandSetWasCutArchive::mutable_prev_from_group_by_uid() {
  ::TSP::UUID* _msg = _internal_mutable_prev_from_group_by_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetWasCutArchive.prev_from_group_by_uid)
  return _msg;
}
inline void CommandSetWasCutArchive::set_allocated_prev_from_group_by_uid(::TSP::UUID* prev_from_group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_from_group_by_uid_);
  }
  if (prev_from_group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_from_group_by_uid));
    if (message_arena != submessage_arena) {
      prev_from_group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_from_group_by_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.prev_from_group_by_uid_ = prev_from_group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetWasCutArchive.prev_from_group_by_uid)
}

// -------------------------------------------------------------------

// CommandStyleCellsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandStyleCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandStyleCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandStyleCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandStyleCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.super)
  return _internal_super();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.super)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.super)
}

// optional .TSP.ReferenceDictionary format_properties = 2;
inline bool CommandStyleCellsArchive::_internal_has_format_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.format_properties_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_format_properties() const {
  return _internal_has_format_properties();
}
inline const ::TSP::ReferenceDictionary& CommandStyleCellsArchive::_internal_format_properties() const {
  const ::TSP::ReferenceDictionary* p = _impl_.format_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::ReferenceDictionary&>(
      ::TSP::_ReferenceDictionary_default_instance_);
}
inline const ::TSP::ReferenceDictionary& CommandStyleCellsArchive::format_properties() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.format_properties)
  return _internal_format_properties();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_format_properties(
    ::TSP::ReferenceDictionary* format_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  _impl_.format_properties_ = format_properties;
  if (format_properties) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.format_properties)
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::release_format_properties() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::unsafe_arena_release_format_properties() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.format_properties)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::_internal_mutable_format_properties() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.format_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::ReferenceDictionary>(GetArenaForAllocation());
    _impl_.format_properties_ = p;
  }
  return _impl_.format_properties_;
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::mutable_format_properties() {
  ::TSP::ReferenceDictionary* _msg = _internal_mutable_format_properties();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.format_properties)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  if (format_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_properties));
    if (message_arena != submessage_arena) {
      format_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_properties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.format_properties_ = format_properties;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.format_properties)
}

// required .TST.SelectionArchive selection = 3;
inline bool CommandStyleCellsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandStyleCellsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandStyleCellsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.selection)
  return _internal_selection();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.selection)
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.selection)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.selection)
}

// required .TSP.Reference undo_cell_map = 4;
inline bool CommandStyleCellsArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TSP::Reference& CommandStyleCellsArchive::_internal_undo_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandStyleCellsArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TSP::Reference* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.undo_cell_map)
}
inline ::TSP::Reference* CommandStyleCellsArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TSP::Reference* CommandStyleCellsArchive::mutable_undo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.undo_cell_map)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.undo_cell_map)
}

// required .TSP.Reference redo_cell_map = 5;
inline bool CommandStyleCellsArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TSP::Reference& CommandStyleCellsArchive::_internal_redo_cell_map() const {
  const ::TSP::Reference* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandStyleCellsArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TSP::Reference* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.redo_cell_map)
}
inline ::TSP::Reference* CommandStyleCellsArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TSP::Reference* CommandStyleCellsArchive::mutable_redo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.redo_cell_map)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_redo_cell_map(::TSP::Reference* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.redo_cell_map)
}

// optional .TSP.Reference text_undo = 6;
inline bool CommandStyleCellsArchive::_internal_has_text_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_undo_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_text_undo() const {
  return _internal_has_text_undo();
}
inline const ::TSP::Reference& CommandStyleCellsArchive::_internal_text_undo() const {
  const ::TSP::Reference* p = _impl_.text_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandStyleCellsArchive::text_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.text_undo)
  return _internal_text_undo();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_text_undo(
    ::TSP::Reference* text_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  _impl_.text_undo_ = text_undo;
  if (text_undo) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.text_undo)
}
inline ::TSP::Reference* CommandStyleCellsArchive::release_text_undo() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::unsafe_arena_release_text_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.text_undo)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::_internal_mutable_text_undo() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.text_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.text_undo_ = p;
  }
  return _impl_.text_undo_;
}
inline ::TSP::Reference* CommandStyleCellsArchive::mutable_text_undo() {
  ::TSP::Reference* _msg = _internal_mutable_text_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.text_undo)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_text_undo(::TSP::Reference* text_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  if (text_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_undo));
    if (message_arena != submessage_arena) {
      text_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.text_undo_ = text_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.text_undo)
}

// -------------------------------------------------------------------

// CommandStyleTableArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandStyleTableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandStyleTableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandStyleTableArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandStyleTableArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.super)
  return _internal_super();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.super)
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.super)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.super)
}

// optional .TSP.ReferenceDictionary format_properties = 2;
inline bool CommandStyleTableArchive::_internal_has_format_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.format_properties_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_format_properties() const {
  return _internal_has_format_properties();
}
inline const ::TSP::ReferenceDictionary& CommandStyleTableArchive::_internal_format_properties() const {
  const ::TSP::ReferenceDictionary* p = _impl_.format_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::ReferenceDictionary&>(
      ::TSP::_ReferenceDictionary_default_instance_);
}
inline const ::TSP::ReferenceDictionary& CommandStyleTableArchive::format_properties() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.format_properties)
  return _internal_format_properties();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_format_properties(
    ::TSP::ReferenceDictionary* format_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  _impl_.format_properties_ = format_properties;
  if (format_properties) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.format_properties)
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::release_format_properties() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::unsafe_arena_release_format_properties() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.format_properties)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::_internal_mutable_format_properties() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.format_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::ReferenceDictionary>(GetArenaForAllocation());
    _impl_.format_properties_ = p;
  }
  return _impl_.format_properties_;
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::mutable_format_properties() {
  ::TSP::ReferenceDictionary* _msg = _internal_mutable_format_properties();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.format_properties)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  if (format_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_properties));
    if (message_arena != submessage_arena) {
      format_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_properties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.format_properties_ = format_properties;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.format_properties)
}

// optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
inline bool CommandStyleTableArchive::_internal_has_old_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_style_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_old_style() const {
  return _internal_has_old_style();
}
inline const ::TSTSOS::TableStylePropertyChangeSetArchive& CommandStyleTableArchive::_internal_old_style() const {
  const ::TSTSOS::TableStylePropertyChangeSetArchive* p = _impl_.old_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSTSOS::TableStylePropertyChangeSetArchive&>(
      ::TSTSOS::_TableStylePropertyChangeSetArchive_default_instance_);
}
inline const ::TSTSOS::TableStylePropertyChangeSetArchive& CommandStyleTableArchive::old_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.old_style)
  return _internal_old_style();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_old_style(
    ::TSTSOS::TableStylePropertyChangeSetArchive* old_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  _impl_.old_style_ = old_style;
  if (old_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.old_style)
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::release_old_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSTSOS::TableStylePropertyChangeSetArchive* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::unsafe_arena_release_old_style() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.old_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSTSOS::TableStylePropertyChangeSetArchive* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
  return temp;
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::_internal_mutable_old_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSTSOS::TableStylePropertyChangeSetArchive>(GetArenaForAllocation());
    _impl_.old_style_ = p;
  }
  return _impl_.old_style_;
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::mutable_old_style() {
  ::TSTSOS::TableStylePropertyChangeSetArchive* _msg = _internal_mutable_old_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.old_style)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_old_style(::TSTSOS::TableStylePropertyChangeSetArchive* old_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  if (old_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style));
    if (message_arena != submessage_arena) {
      old_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_style_ = old_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.old_style)
}

// optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
inline bool CommandStyleTableArchive::_internal_has_new_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_style_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSTSOS::TableStylePropertyChangeSetArchive& CommandStyleTableArchive::_internal_new_style() const {
  const ::TSTSOS::TableStylePropertyChangeSetArchive* p = _impl_.new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSTSOS::TableStylePropertyChangeSetArchive&>(
      ::TSTSOS::_TableStylePropertyChangeSetArchive_default_instance_);
}
inline const ::TSTSOS::TableStylePropertyChangeSetArchive& CommandStyleTableArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.new_style)
  return _internal_new_style();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_new_style(
    ::TSTSOS::TableStylePropertyChangeSetArchive* new_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  _impl_.new_style_ = new_style;
  if (new_style) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.new_style)
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::release_new_style() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSTSOS::TableStylePropertyChangeSetArchive* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.new_style)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSTSOS::TableStylePropertyChangeSetArchive* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
  return temp;
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::_internal_mutable_new_style() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSTSOS::TableStylePropertyChangeSetArchive>(GetArenaForAllocation());
    _impl_.new_style_ = p;
  }
  return _impl_.new_style_;
}
inline ::TSTSOS::TableStylePropertyChangeSetArchive* CommandStyleTableArchive::mutable_new_style() {
  ::TSTSOS::TableStylePropertyChangeSetArchive* _msg = _internal_mutable_new_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.new_style)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_new_style(::TSTSOS::TableStylePropertyChangeSetArchive* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style));
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.new_style)
}

// -------------------------------------------------------------------

// CommandSetRepeatingHeaderEnabledArchive

// required bool repeating_header_enabled = 1;
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_has_repeating_header_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::has_repeating_header_enabled() const {
  return _internal_has_repeating_header_enabled();
}
inline void CommandSetRepeatingHeaderEnabledArchive::clear_repeating_header_enabled() {
  _impl_.repeating_header_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_repeating_header_enabled() const {
  return _impl_.repeating_header_enabled_;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::repeating_header_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRepeatingHeaderEnabledArchive.repeating_header_enabled)
  return _internal_repeating_header_enabled();
}
inline void CommandSetRepeatingHeaderEnabledArchive::_internal_set_repeating_header_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.repeating_header_enabled_ = value;
}
inline void CommandSetRepeatingHeaderEnabledArchive::set_repeating_header_enabled(bool value) {
  _internal_set_repeating_header_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRepeatingHeaderEnabledArchive.repeating_header_enabled)
}

// required .TST.TableDimensionArchive direction = 2;
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandSetRepeatingHeaderEnabledArchive::clear_direction() {
  _impl_.direction_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TST::TableDimensionArchive CommandSetRepeatingHeaderEnabledArchive::_internal_direction() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.direction_);
}
inline ::TST::TableDimensionArchive CommandSetRepeatingHeaderEnabledArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRepeatingHeaderEnabledArchive.direction)
  return _internal_direction();
}
inline void CommandSetRepeatingHeaderEnabledArchive::_internal_set_direction(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.direction_ = value;
}
inline void CommandSetRepeatingHeaderEnabledArchive::set_direction(::TST::TableDimensionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRepeatingHeaderEnabledArchive.direction)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetRepeatingHeaderEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetRepeatingHeaderEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetRepeatingHeaderEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRepeatingHeaderEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetRepeatingHeaderEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetRepeatingHeaderEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetRepeatingHeaderEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetRepeatingHeaderEnabledArchive.super)
  return _msg;
}
inline void CommandSetRepeatingHeaderEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetRepeatingHeaderEnabledArchive.super)
}

// optional bool prev_repeating_header_enabled = 4;
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_has_prev_repeating_header_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::has_prev_repeating_header_enabled() const {
  return _internal_has_prev_repeating_header_enabled();
}
inline void CommandSetRepeatingHeaderEnabledArchive::clear_prev_repeating_header_enabled() {
  _impl_.prev_repeating_header_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_prev_repeating_header_enabled() const {
  return _impl_.prev_repeating_header_enabled_;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::prev_repeating_header_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRepeatingHeaderEnabledArchive.prev_repeating_header_enabled)
  return _internal_prev_repeating_header_enabled();
}
inline void CommandSetRepeatingHeaderEnabledArchive::_internal_set_prev_repeating_header_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prev_repeating_header_enabled_ = value;
}
inline void CommandSetRepeatingHeaderEnabledArchive::set_prev_repeating_header_enabled(bool value) {
  _internal_set_prev_repeating_header_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRepeatingHeaderEnabledArchive.prev_repeating_header_enabled)
}

// -------------------------------------------------------------------

// CommandSetFiltersEnabledArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetFiltersEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFiltersEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFiltersEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetFiltersEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetFiltersEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFiltersEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetFiltersEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFiltersEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFiltersEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFiltersEnabledArchive.super)
  return _msg;
}
inline void CommandSetFiltersEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFiltersEnabledArchive.super)
}

// required bool new_filters_enabled = 2;
inline bool CommandSetFiltersEnabledArchive::_internal_has_new_filters_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFiltersEnabledArchive::has_new_filters_enabled() const {
  return _internal_has_new_filters_enabled();
}
inline void CommandSetFiltersEnabledArchive::clear_new_filters_enabled() {
  _impl_.new_filters_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetFiltersEnabledArchive::_internal_new_filters_enabled() const {
  return _impl_.new_filters_enabled_;
}
inline bool CommandSetFiltersEnabledArchive::new_filters_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFiltersEnabledArchive.new_filters_enabled)
  return _internal_new_filters_enabled();
}
inline void CommandSetFiltersEnabledArchive::_internal_set_new_filters_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_filters_enabled_ = value;
}
inline void CommandSetFiltersEnabledArchive::set_new_filters_enabled(bool value) {
  _internal_set_new_filters_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFiltersEnabledArchive.new_filters_enabled)
}

// optional bool old_filters_enabled = 3;
inline bool CommandSetFiltersEnabledArchive::_internal_has_old_filters_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetFiltersEnabledArchive::has_old_filters_enabled() const {
  return _internal_has_old_filters_enabled();
}
inline void CommandSetFiltersEnabledArchive::clear_old_filters_enabled() {
  _impl_.old_filters_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetFiltersEnabledArchive::_internal_old_filters_enabled() const {
  return _impl_.old_filters_enabled_;
}
inline bool CommandSetFiltersEnabledArchive::old_filters_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFiltersEnabledArchive.old_filters_enabled)
  return _internal_old_filters_enabled();
}
inline void CommandSetFiltersEnabledArchive::_internal_set_old_filters_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.old_filters_enabled_ = value;
}
inline void CommandSetFiltersEnabledArchive::set_old_filters_enabled(bool value) {
  _internal_set_old_filters_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFiltersEnabledArchive.old_filters_enabled)
}

// repeated .TSP.UUID rollback_uid_list = 4;
inline int CommandSetFiltersEnabledArchive::_internal_rollback_uid_list_size() const {
  return _impl_.rollback_uid_list_.size();
}
inline int CommandSetFiltersEnabledArchive::rollback_uid_list_size() const {
  return _internal_rollback_uid_list_size();
}
inline ::TSP::UUID* CommandSetFiltersEnabledArchive::mutable_rollback_uid_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFiltersEnabledArchive.rollback_uid_list)
  return _impl_.rollback_uid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetFiltersEnabledArchive::mutable_rollback_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetFiltersEnabledArchive.rollback_uid_list)
  return &_impl_.rollback_uid_list_;
}
inline const ::TSP::UUID& CommandSetFiltersEnabledArchive::_internal_rollback_uid_list(int index) const {
  return _impl_.rollback_uid_list_.Get(index);
}
inline const ::TSP::UUID& CommandSetFiltersEnabledArchive::rollback_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFiltersEnabledArchive.rollback_uid_list)
  return _internal_rollback_uid_list(index);
}
inline ::TSP::UUID* CommandSetFiltersEnabledArchive::_internal_add_rollback_uid_list() {
  return _impl_.rollback_uid_list_.Add();
}
inline ::TSP::UUID* CommandSetFiltersEnabledArchive::add_rollback_uid_list() {
  ::TSP::UUID* _add = _internal_add_rollback_uid_list();
  // @@protoc_insertion_point(field_add:TST.CommandSetFiltersEnabledArchive.rollback_uid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetFiltersEnabledArchive::rollback_uid_list() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetFiltersEnabledArchive.rollback_uid_list)
  return _impl_.rollback_uid_list_;
}

// -------------------------------------------------------------------

// CommandAddTableStylePresetArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandAddTableStylePresetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandAddTableStylePresetArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAddTableStylePresetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandAddTableStylePresetArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandAddTableStylePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandAddTableStylePresetArchive.super)
  return _internal_super();
}
inline void CommandAddTableStylePresetArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandAddTableStylePresetArchive.super)
}
inline ::TST::TableCommandArchive* CommandAddTableStylePresetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandAddTableStylePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandAddTableStylePresetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandAddTableStylePresetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandAddTableStylePresetArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandAddTableStylePresetArchive.super)
  return _msg;
}
inline void CommandAddTableStylePresetArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandAddTableStylePresetArchive.super)
}

// required int32 preset_index = 2;
inline bool CommandAddTableStylePresetArchive::_internal_has_preset_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandAddTableStylePresetArchive::has_preset_index() const {
  return _internal_has_preset_index();
}
inline void CommandAddTableStylePresetArchive::clear_preset_index() {
  _impl_.preset_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CommandAddTableStylePresetArchive::_internal_preset_index() const {
  return _impl_.preset_index_;
}
inline int32_t CommandAddTableStylePresetArchive::preset_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandAddTableStylePresetArchive.preset_index)
  return _internal_preset_index();
}
inline void CommandAddTableStylePresetArchive::_internal_set_preset_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.preset_index_ = value;
}
inline void CommandAddTableStylePresetArchive::set_preset_index(int32_t value) {
  _internal_set_preset_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandAddTableStylePresetArchive.preset_index)
}

// required .TSP.Reference table_styles = 3;
inline bool CommandAddTableStylePresetArchive::_internal_has_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_styles_ != nullptr);
  return value;
}
inline bool CommandAddTableStylePresetArchive::has_table_styles() const {
  return _internal_has_table_styles();
}
inline const ::TSP::Reference& CommandAddTableStylePresetArchive::_internal_table_styles() const {
  const ::TSP::Reference* p = _impl_.table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandAddTableStylePresetArchive::table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandAddTableStylePresetArchive.table_styles)
  return _internal_table_styles();
}
inline void CommandAddTableStylePresetArchive::unsafe_arena_set_allocated_table_styles(
    ::TSP::Reference* table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_styles_);
  }
  _impl_.table_styles_ = table_styles;
  if (table_styles) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandAddTableStylePresetArchive.table_styles)
}
inline ::TSP::Reference* CommandAddTableStylePresetArchive::release_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.table_styles_;
  _impl_.table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandAddTableStylePresetArchive::unsafe_arena_release_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandAddTableStylePresetArchive.table_styles)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.table_styles_;
  _impl_.table_styles_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandAddTableStylePresetArchive::_internal_mutable_table_styles() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.table_styles_ = p;
  }
  return _impl_.table_styles_;
}
inline ::TSP::Reference* CommandAddTableStylePresetArchive::mutable_table_styles() {
  ::TSP::Reference* _msg = _internal_mutable_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandAddTableStylePresetArchive.table_styles)
  return _msg;
}
inline void CommandAddTableStylePresetArchive::set_allocated_table_styles(::TSP::Reference* table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_styles_);
  }
  if (table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_styles));
    if (message_arena != submessage_arena) {
      table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.table_styles_ = table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandAddTableStylePresetArchive.table_styles)
}

// required bool send_notification = 4;
inline bool CommandAddTableStylePresetArchive::_internal_has_send_notification() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandAddTableStylePresetArchive::has_send_notification() const {
  return _internal_has_send_notification();
}
inline void CommandAddTableStylePresetArchive::clear_send_notification() {
  _impl_.send_notification_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandAddTableStylePresetArchive::_internal_send_notification() const {
  return _impl_.send_notification_;
}
inline bool CommandAddTableStylePresetArchive::send_notification() const {
  // @@protoc_insertion_point(field_get:TST.CommandAddTableStylePresetArchive.send_notification)
  return _internal_send_notification();
}
inline void CommandAddTableStylePresetArchive::_internal_set_send_notification(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.send_notification_ = value;
}
inline void CommandAddTableStylePresetArchive::set_send_notification(bool value) {
  _internal_set_send_notification(value);
  // @@protoc_insertion_point(field_set:TST.CommandAddTableStylePresetArchive.send_notification)
}

// -------------------------------------------------------------------

// CommandRemoveTableStylePresetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandRemoveTableStylePresetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRemoveTableStylePresetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandRemoveTableStylePresetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandRemoveTableStylePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveTableStylePresetArchive.super)
  return _internal_super();
}
inline void CommandRemoveTableStylePresetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveTableStylePresetArchive.super)
}
inline ::TSK::CommandArchive* CommandRemoveTableStylePresetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandRemoveTableStylePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveTableStylePresetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandRemoveTableStylePresetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandRemoveTableStylePresetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveTableStylePresetArchive.super)
  return _msg;
}
inline void CommandRemoveTableStylePresetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveTableStylePresetArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool CommandRemoveTableStylePresetArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool CommandRemoveTableStylePresetArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandRemoveTableStylePresetArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveTableStylePresetArchive::theme() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveTableStylePresetArchive.theme)
  return _internal_theme();
}
inline void CommandRemoveTableStylePresetArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveTableStylePresetArchive.theme)
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveTableStylePresetArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveTableStylePresetArchive.theme)
  return _msg;
}
inline void CommandRemoveTableStylePresetArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveTableStylePresetArchive.theme)
}

// required .TSP.Reference removed_table_styles = 3;
inline bool CommandRemoveTableStylePresetArchive::_internal_has_removed_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.removed_table_styles_ != nullptr);
  return value;
}
inline bool CommandRemoveTableStylePresetArchive::has_removed_table_styles() const {
  return _internal_has_removed_table_styles();
}
inline const ::TSP::Reference& CommandRemoveTableStylePresetArchive::_internal_removed_table_styles() const {
  const ::TSP::Reference* p = _impl_.removed_table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveTableStylePresetArchive::removed_table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveTableStylePresetArchive.removed_table_styles)
  return _internal_removed_table_styles();
}
inline void CommandRemoveTableStylePresetArchive::unsafe_arena_set_allocated_removed_table_styles(
    ::TSP::Reference* removed_table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_table_styles_);
  }
  _impl_.removed_table_styles_ = removed_table_styles;
  if (removed_table_styles) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveTableStylePresetArchive.removed_table_styles)
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::release_removed_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.removed_table_styles_;
  _impl_.removed_table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::unsafe_arena_release_removed_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveTableStylePresetArchive.removed_table_styles)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.removed_table_styles_;
  _impl_.removed_table_styles_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::_internal_mutable_removed_table_styles() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.removed_table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.removed_table_styles_ = p;
  }
  return _impl_.removed_table_styles_;
}
inline ::TSP::Reference* CommandRemoveTableStylePresetArchive::mutable_removed_table_styles() {
  ::TSP::Reference* _msg = _internal_mutable_removed_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveTableStylePresetArchive.removed_table_styles)
  return _msg;
}
inline void CommandRemoveTableStylePresetArchive::set_allocated_removed_table_styles(::TSP::Reference* removed_table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_table_styles_);
  }
  if (removed_table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_table_styles));
    if (message_arena != submessage_arena) {
      removed_table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removed_table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.removed_table_styles_ = removed_table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveTableStylePresetArchive.removed_table_styles)
}

// required int32 preset_id = 4;
inline bool CommandRemoveTableStylePresetArchive::_internal_has_preset_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandRemoveTableStylePresetArchive::has_preset_id() const {
  return _internal_has_preset_id();
}
inline void CommandRemoveTableStylePresetArchive::clear_preset_id() {
  _impl_.preset_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CommandRemoveTableStylePresetArchive::_internal_preset_id() const {
  return _impl_.preset_id_;
}
inline int32_t CommandRemoveTableStylePresetArchive::preset_id() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveTableStylePresetArchive.preset_id)
  return _internal_preset_id();
}
inline void CommandRemoveTableStylePresetArchive::_internal_set_preset_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.preset_id_ = value;
}
inline void CommandRemoveTableStylePresetArchive::set_preset_id(int32_t value) {
  _internal_set_preset_id(value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveTableStylePresetArchive.preset_id)
}

// required int32 preset_index_in_theme = 5;
inline bool CommandRemoveTableStylePresetArchive::_internal_has_preset_index_in_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandRemoveTableStylePresetArchive::has_preset_index_in_theme() const {
  return _internal_has_preset_index_in_theme();
}
inline void CommandRemoveTableStylePresetArchive::clear_preset_index_in_theme() {
  _impl_.preset_index_in_theme_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CommandRemoveTableStylePresetArchive::_internal_preset_index_in_theme() const {
  return _impl_.preset_index_in_theme_;
}
inline int32_t CommandRemoveTableStylePresetArchive::preset_index_in_theme() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveTableStylePresetArchive.preset_index_in_theme)
  return _internal_preset_index_in_theme();
}
inline void CommandRemoveTableStylePresetArchive::_internal_set_preset_index_in_theme(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.preset_index_in_theme_ = value;
}
inline void CommandRemoveTableStylePresetArchive::set_preset_index_in_theme(int32_t value) {
  _internal_set_preset_index_in_theme(value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveTableStylePresetArchive.preset_index_in_theme)
}

// -------------------------------------------------------------------

// CommandReplaceTableStylePresetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandReplaceTableStylePresetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandReplaceTableStylePresetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandReplaceTableStylePresetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandReplaceTableStylePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTableStylePresetArchive.super)
  return _internal_super();
}
inline void CommandReplaceTableStylePresetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTableStylePresetArchive.super)
}
inline ::TSK::CommandArchive* CommandReplaceTableStylePresetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandReplaceTableStylePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTableStylePresetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandReplaceTableStylePresetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandReplaceTableStylePresetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTableStylePresetArchive.super)
  return _msg;
}
inline void CommandReplaceTableStylePresetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTableStylePresetArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool CommandReplaceTableStylePresetArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool CommandReplaceTableStylePresetArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandReplaceTableStylePresetArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceTableStylePresetArchive::theme() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTableStylePresetArchive.theme)
  return _internal_theme();
}
inline void CommandReplaceTableStylePresetArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTableStylePresetArchive.theme)
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTableStylePresetArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTableStylePresetArchive.theme)
  return _msg;
}
inline void CommandReplaceTableStylePresetArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTableStylePresetArchive.theme)
}

// required .TSP.Reference old_table_styles = 3;
inline bool CommandReplaceTableStylePresetArchive::_internal_has_old_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_table_styles_ != nullptr);
  return value;
}
inline bool CommandReplaceTableStylePresetArchive::has_old_table_styles() const {
  return _internal_has_old_table_styles();
}
inline const ::TSP::Reference& CommandReplaceTableStylePresetArchive::_internal_old_table_styles() const {
  const ::TSP::Reference* p = _impl_.old_table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceTableStylePresetArchive::old_table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTableStylePresetArchive.old_table_styles)
  return _internal_old_table_styles();
}
inline void CommandReplaceTableStylePresetArchive::unsafe_arena_set_allocated_old_table_styles(
    ::TSP::Reference* old_table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_table_styles_);
  }
  _impl_.old_table_styles_ = old_table_styles;
  if (old_table_styles) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTableStylePresetArchive.old_table_styles)
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::release_old_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_table_styles_;
  _impl_.old_table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::unsafe_arena_release_old_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTableStylePresetArchive.old_table_styles)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_table_styles_;
  _impl_.old_table_styles_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::_internal_mutable_old_table_styles() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_table_styles_ = p;
  }
  return _impl_.old_table_styles_;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::mutable_old_table_styles() {
  ::TSP::Reference* _msg = _internal_mutable_old_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTableStylePresetArchive.old_table_styles)
  return _msg;
}
inline void CommandReplaceTableStylePresetArchive::set_allocated_old_table_styles(::TSP::Reference* old_table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_table_styles_);
  }
  if (old_table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_table_styles));
    if (message_arena != submessage_arena) {
      old_table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_table_styles_ = old_table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTableStylePresetArchive.old_table_styles)
}

// required .TSP.Reference new_table_styles = 4;
inline bool CommandReplaceTableStylePresetArchive::_internal_has_new_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_table_styles_ != nullptr);
  return value;
}
inline bool CommandReplaceTableStylePresetArchive::has_new_table_styles() const {
  return _internal_has_new_table_styles();
}
inline const ::TSP::Reference& CommandReplaceTableStylePresetArchive::_internal_new_table_styles() const {
  const ::TSP::Reference* p = _impl_.new_table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceTableStylePresetArchive::new_table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTableStylePresetArchive.new_table_styles)
  return _internal_new_table_styles();
}
inline void CommandReplaceTableStylePresetArchive::unsafe_arena_set_allocated_new_table_styles(
    ::TSP::Reference* new_table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_table_styles_);
  }
  _impl_.new_table_styles_ = new_table_styles;
  if (new_table_styles) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTableStylePresetArchive.new_table_styles)
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::release_new_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_table_styles_;
  _impl_.new_table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::unsafe_arena_release_new_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTableStylePresetArchive.new_table_styles)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_table_styles_;
  _impl_.new_table_styles_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::_internal_mutable_new_table_styles() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_table_styles_ = p;
  }
  return _impl_.new_table_styles_;
}
inline ::TSP::Reference* CommandReplaceTableStylePresetArchive::mutable_new_table_styles() {
  ::TSP::Reference* _msg = _internal_mutable_new_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTableStylePresetArchive.new_table_styles)
  return _msg;
}
inline void CommandReplaceTableStylePresetArchive::set_allocated_new_table_styles(::TSP::Reference* new_table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_table_styles_);
  }
  if (new_table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_table_styles));
    if (message_arena != submessage_arena) {
      new_table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_table_styles_ = new_table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTableStylePresetArchive.new_table_styles)
}

// -------------------------------------------------------------------

// CommandApplyTableStylePresetArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyTableStylePresetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyTableStylePresetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyTableStylePresetArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyTableStylePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.super)
  return _internal_super();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.super)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.super)
}

// optional .TSP.Reference preset = 2;
inline bool CommandApplyTableStylePresetArchive::_internal_has_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preset_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_preset() const {
  const ::TSP::Reference* p = _impl_.preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::preset() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.preset)
  return _internal_preset();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  _impl_.preset_ = preset;
  if (preset) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.preset)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_preset() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.preset)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_preset() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.preset_ = p;
  }
  return _impl_.preset_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_preset() {
  ::TSP::Reference* _msg = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.preset)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset));
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.preset)
}

// optional .TSP.Reference styles = 3;
inline bool CommandApplyTableStylePresetArchive::_internal_has_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.styles_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_styles() const {
  return _internal_has_styles();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_styles() const {
  const ::TSP::Reference* p = _impl_.styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.styles)
  return _internal_styles();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_styles(
    ::TSP::Reference* styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.styles_);
  }
  _impl_.styles_ = styles;
  if (styles) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.styles)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_styles() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.styles_;
  _impl_.styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.styles)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.styles_;
  _impl_.styles_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_styles() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.styles_ = p;
  }
  return _impl_.styles_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_styles() {
  ::TSP::Reference* _msg = _internal_mutable_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.styles)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_styles(::TSP::Reference* styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.styles_);
  }
  if (styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styles));
    if (message_arena != submessage_arena) {
      styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.styles_ = styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.styles)
}

// optional .TSP.Reference undo_preset = 4;
inline bool CommandApplyTableStylePresetArchive::_internal_has_undo_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_preset_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_undo_preset() const {
  return _internal_has_undo_preset();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_undo_preset() const {
  const ::TSP::Reference* p = _impl_.undo_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::undo_preset() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.undo_preset)
  return _internal_undo_preset();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_undo_preset(
    ::TSP::Reference* undo_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_preset_);
  }
  _impl_.undo_preset_ = undo_preset;
  if (undo_preset) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_preset)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_undo_preset() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_preset_;
  _impl_.undo_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_undo_preset() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.undo_preset)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_preset_;
  _impl_.undo_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_undo_preset() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_preset_ = p;
  }
  return _impl_.undo_preset_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_undo_preset() {
  ::TSP::Reference* _msg = _internal_mutable_undo_preset();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.undo_preset)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_undo_preset(::TSP::Reference* undo_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_preset_);
  }
  if (undo_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_preset));
    if (message_arena != submessage_arena) {
      undo_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_preset_ = undo_preset;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_preset)
}

// optional .TSP.Reference undo_styles = 5;
inline bool CommandApplyTableStylePresetArchive::_internal_has_undo_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_styles_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_undo_styles() const {
  return _internal_has_undo_styles();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_undo_styles() const {
  const ::TSP::Reference* p = _impl_.undo_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::undo_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.undo_styles)
  return _internal_undo_styles();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_undo_styles(
    ::TSP::Reference* undo_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_styles_);
  }
  _impl_.undo_styles_ = undo_styles;
  if (undo_styles) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_styles)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_undo_styles() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.undo_styles_;
  _impl_.undo_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_undo_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.undo_styles)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.undo_styles_;
  _impl_.undo_styles_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_undo_styles() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.undo_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_styles_ = p;
  }
  return _impl_.undo_styles_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_undo_styles() {
  ::TSP::Reference* _msg = _internal_mutable_undo_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.undo_styles)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_undo_styles(::TSP::Reference* undo_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_styles_);
  }
  if (undo_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_styles));
    if (message_arena != submessage_arena) {
      undo_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.undo_styles_ = undo_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_styles)
}

// optional .TSP.Reference cell_diff_map = 6;
inline bool CommandApplyTableStylePresetArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.cell_diff_map)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.cell_diff_map)
}

// optional .TSP.Reference undo_cell_diff_map = 7;
inline bool CommandApplyTableStylePresetArchive::_internal_has_undo_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_undo_cell_diff_map() const {
  return _internal_has_undo_cell_diff_map();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_undo_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::undo_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.undo_cell_diff_map)
  return _internal_undo_cell_diff_map();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_undo_cell_diff_map(
    ::TSP::Reference* undo_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  if (undo_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_cell_diff_map)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_undo_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_undo_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.undo_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_undo_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.undo_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_diff_map_ = p;
  }
  return _impl_.undo_cell_diff_map_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_undo_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.undo_cell_diff_map)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  if (undo_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_diff_map));
    if (message_arena != submessage_arena) {
      undo_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_cell_diff_map)
}

// required int32 apply_preset_option = 8;
inline bool CommandApplyTableStylePresetArchive::_internal_has_apply_preset_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_apply_preset_option() const {
  return _internal_has_apply_preset_option();
}
inline void CommandApplyTableStylePresetArchive::clear_apply_preset_option() {
  _impl_.apply_preset_option_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CommandApplyTableStylePresetArchive::_internal_apply_preset_option() const {
  return _impl_.apply_preset_option_;
}
inline int32_t CommandApplyTableStylePresetArchive::apply_preset_option() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.apply_preset_option)
  return _internal_apply_preset_option();
}
inline void CommandApplyTableStylePresetArchive::_internal_set_apply_preset_option(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.apply_preset_option_ = value;
}
inline void CommandApplyTableStylePresetArchive::set_apply_preset_option(int32_t value) {
  _internal_set_apply_preset_option(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyTableStylePresetArchive.apply_preset_option)
}

// required bool table_clears_all_flag = 11;
inline bool CommandApplyTableStylePresetArchive::_internal_has_table_clears_all_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_table_clears_all_flag() const {
  return _internal_has_table_clears_all_flag();
}
inline void CommandApplyTableStylePresetArchive::clear_table_clears_all_flag() {
  _impl_.table_clears_all_flag_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CommandApplyTableStylePresetArchive::_internal_table_clears_all_flag() const {
  return _impl_.table_clears_all_flag_;
}
inline bool CommandApplyTableStylePresetArchive::table_clears_all_flag() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.table_clears_all_flag)
  return _internal_table_clears_all_flag();
}
inline void CommandApplyTableStylePresetArchive::_internal_set_table_clears_all_flag(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.table_clears_all_flag_ = value;
}
inline void CommandApplyTableStylePresetArchive::set_table_clears_all_flag(bool value) {
  _internal_set_table_clears_all_flag(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyTableStylePresetArchive.table_clears_all_flag)
}

// required bool undo_table_clears_all_flag = 12;
inline bool CommandApplyTableStylePresetArchive::_internal_has_undo_table_clears_all_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_undo_table_clears_all_flag() const {
  return _internal_has_undo_table_clears_all_flag();
}
inline void CommandApplyTableStylePresetArchive::clear_undo_table_clears_all_flag() {
  _impl_.undo_table_clears_all_flag_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CommandApplyTableStylePresetArchive::_internal_undo_table_clears_all_flag() const {
  return _impl_.undo_table_clears_all_flag_;
}
inline bool CommandApplyTableStylePresetArchive::undo_table_clears_all_flag() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.undo_table_clears_all_flag)
  return _internal_undo_table_clears_all_flag();
}
inline void CommandApplyTableStylePresetArchive::_internal_set_undo_table_clears_all_flag(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.undo_table_clears_all_flag_ = value;
}
inline void CommandApplyTableStylePresetArchive::set_undo_table_clears_all_flag(bool value) {
  _internal_set_undo_table_clears_all_flag(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyTableStylePresetArchive.undo_table_clears_all_flag)
}

// repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
inline int CommandApplyTableStylePresetArchive::_internal_row_col_styles_size() const {
  return _impl_.row_col_styles_.size();
}
inline int CommandApplyTableStylePresetArchive::row_col_styles_size() const {
  return _internal_row_col_styles_size();
}
inline void CommandApplyTableStylePresetArchive::clear_row_col_styles() {
  _impl_.row_col_styles_.Clear();
}
inline ::TST::ColumnRowMetadataArchive* CommandApplyTableStylePresetArchive::mutable_row_col_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.row_col_styles)
  return _impl_.row_col_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
CommandApplyTableStylePresetArchive::mutable_row_col_styles() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyTableStylePresetArchive.row_col_styles)
  return &_impl_.row_col_styles_;
}
inline const ::TST::ColumnRowMetadataArchive& CommandApplyTableStylePresetArchive::_internal_row_col_styles(int index) const {
  return _impl_.row_col_styles_.Get(index);
}
inline const ::TST::ColumnRowMetadataArchive& CommandApplyTableStylePresetArchive::row_col_styles(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.row_col_styles)
  return _internal_row_col_styles(index);
}
inline ::TST::ColumnRowMetadataArchive* CommandApplyTableStylePresetArchive::_internal_add_row_col_styles() {
  return _impl_.row_col_styles_.Add();
}
inline ::TST::ColumnRowMetadataArchive* CommandApplyTableStylePresetArchive::add_row_col_styles() {
  ::TST::ColumnRowMetadataArchive* _add = _internal_add_row_col_styles();
  // @@protoc_insertion_point(field_add:TST.CommandApplyTableStylePresetArchive.row_col_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
CommandApplyTableStylePresetArchive::row_col_styles() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyTableStylePresetArchive.row_col_styles)
  return _impl_.row_col_styles_;
}

// repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
inline int CommandApplyTableStylePresetArchive::_internal_undo_row_col_styles_size() const {
  return _impl_.undo_row_col_styles_.size();
}
inline int CommandApplyTableStylePresetArchive::undo_row_col_styles_size() const {
  return _internal_undo_row_col_styles_size();
}
inline void CommandApplyTableStylePresetArchive::clear_undo_row_col_styles() {
  _impl_.undo_row_col_styles_.Clear();
}
inline ::TST::ColumnRowMetadataArchive* CommandApplyTableStylePresetArchive::mutable_undo_row_col_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.undo_row_col_styles)
  return _impl_.undo_row_col_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
CommandApplyTableStylePresetArchive::mutable_undo_row_col_styles() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyTableStylePresetArchive.undo_row_col_styles)
  return &_impl_.undo_row_col_styles_;
}
inline const ::TST::ColumnRowMetadataArchive& CommandApplyTableStylePresetArchive::_internal_undo_row_col_styles(int index) const {
  return _impl_.undo_row_col_styles_.Get(index);
}
inline const ::TST::ColumnRowMetadataArchive& CommandApplyTableStylePresetArchive::undo_row_col_styles(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.undo_row_col_styles)
  return _internal_undo_row_col_styles(index);
}
inline ::TST::ColumnRowMetadataArchive* CommandApplyTableStylePresetArchive::_internal_add_undo_row_col_styles() {
  return _impl_.undo_row_col_styles_.Add();
}
inline ::TST::ColumnRowMetadataArchive* CommandApplyTableStylePresetArchive::add_undo_row_col_styles() {
  ::TST::ColumnRowMetadataArchive* _add = _internal_add_undo_row_col_styles();
  // @@protoc_insertion_point(field_add:TST.CommandApplyTableStylePresetArchive.undo_row_col_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
CommandApplyTableStylePresetArchive::undo_row_col_styles() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyTableStylePresetArchive.undo_row_col_styles)
  return _impl_.undo_row_col_styles_;
}

// optional .TSP.Reference change_prop_map_wrapper = 15;
inline bool CommandApplyTableStylePresetArchive::_internal_has_change_prop_map_wrapper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_prop_map_wrapper_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_change_prop_map_wrapper() const {
  return _internal_has_change_prop_map_wrapper();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_change_prop_map_wrapper() const {
  const ::TSP::Reference* p = _impl_.change_prop_map_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::change_prop_map_wrapper() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.change_prop_map_wrapper)
  return _internal_change_prop_map_wrapper();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_change_prop_map_wrapper(
    ::TSP::Reference* change_prop_map_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_prop_map_wrapper_);
  }
  _impl_.change_prop_map_wrapper_ = change_prop_map_wrapper;
  if (change_prop_map_wrapper) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.change_prop_map_wrapper)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_change_prop_map_wrapper() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.change_prop_map_wrapper_;
  _impl_.change_prop_map_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_change_prop_map_wrapper() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.change_prop_map_wrapper)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.change_prop_map_wrapper_;
  _impl_.change_prop_map_wrapper_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_change_prop_map_wrapper() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.change_prop_map_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.change_prop_map_wrapper_ = p;
  }
  return _impl_.change_prop_map_wrapper_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_change_prop_map_wrapper() {
  ::TSP::Reference* _msg = _internal_mutable_change_prop_map_wrapper();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.change_prop_map_wrapper)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_change_prop_map_wrapper(::TSP::Reference* change_prop_map_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_prop_map_wrapper_);
  }
  if (change_prop_map_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_prop_map_wrapper));
    if (message_arena != submessage_arena) {
      change_prop_map_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_prop_map_wrapper, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.change_prop_map_wrapper_ = change_prop_map_wrapper;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.change_prop_map_wrapper)
}

// -------------------------------------------------------------------

// CommandSetBaseArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetBaseArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetBaseArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetBaseArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetBaseArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetBaseArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseArchive.super)
  return _internal_super();
}
inline void CommandSetBaseArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetBaseArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetBaseArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetBaseArchive.super)
  return _msg;
}
inline void CommandSetBaseArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetBaseArchive.super)
}

// required uint32 base = 2;
inline bool CommandSetBaseArchive::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetBaseArchive::has_base() const {
  return _internal_has_base();
}
inline void CommandSetBaseArchive::clear_base() {
  _impl_.base_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetBaseArchive::_internal_base() const {
  return _impl_.base_;
}
inline uint32_t CommandSetBaseArchive::base() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseArchive.base)
  return _internal_base();
}
inline void CommandSetBaseArchive::_internal_set_base(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_ = value;
}
inline void CommandSetBaseArchive::set_base(uint32_t value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetBaseArchive.base)
}

// -------------------------------------------------------------------

// CommandSetBasePlacesArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetBasePlacesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetBasePlacesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetBasePlacesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetBasePlacesArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetBasePlacesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBasePlacesArchive.super)
  return _internal_super();
}
inline void CommandSetBasePlacesArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetBasePlacesArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBasePlacesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBasePlacesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetBasePlacesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBasePlacesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBasePlacesArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetBasePlacesArchive.super)
  return _msg;
}
inline void CommandSetBasePlacesArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetBasePlacesArchive.super)
}

// required uint32 base_places = 2;
inline bool CommandSetBasePlacesArchive::_internal_has_base_places() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetBasePlacesArchive::has_base_places() const {
  return _internal_has_base_places();
}
inline void CommandSetBasePlacesArchive::clear_base_places() {
  _impl_.base_places_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetBasePlacesArchive::_internal_base_places() const {
  return _impl_.base_places_;
}
inline uint32_t CommandSetBasePlacesArchive::base_places() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBasePlacesArchive.base_places)
  return _internal_base_places();
}
inline void CommandSetBasePlacesArchive::_internal_set_base_places(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_places_ = value;
}
inline void CommandSetBasePlacesArchive::set_base_places(uint32_t value) {
  _internal_set_base_places(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetBasePlacesArchive.base_places)
}

// -------------------------------------------------------------------

// CommandSetBaseUseMinusSignArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetBaseUseMinusSignArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetBaseUseMinusSignArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetBaseUseMinusSignArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetBaseUseMinusSignArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetBaseUseMinusSignArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseUseMinusSignArchive.super)
  return _internal_super();
}
inline void CommandSetBaseUseMinusSignArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetBaseUseMinusSignArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseUseMinusSignArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseUseMinusSignArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetBaseUseMinusSignArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseUseMinusSignArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetBaseUseMinusSignArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetBaseUseMinusSignArchive.super)
  return _msg;
}
inline void CommandSetBaseUseMinusSignArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetBaseUseMinusSignArchive.super)
}

// required bool base_use_minus_sign = 2;
inline bool CommandSetBaseUseMinusSignArchive::_internal_has_base_use_minus_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetBaseUseMinusSignArchive::has_base_use_minus_sign() const {
  return _internal_has_base_use_minus_sign();
}
inline void CommandSetBaseUseMinusSignArchive::clear_base_use_minus_sign() {
  _impl_.base_use_minus_sign_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetBaseUseMinusSignArchive::_internal_base_use_minus_sign() const {
  return _impl_.base_use_minus_sign_;
}
inline bool CommandSetBaseUseMinusSignArchive::base_use_minus_sign() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseUseMinusSignArchive.base_use_minus_sign)
  return _internal_base_use_minus_sign();
}
inline void CommandSetBaseUseMinusSignArchive::_internal_set_base_use_minus_sign(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_use_minus_sign_ = value;
}
inline void CommandSetBaseUseMinusSignArchive::set_base_use_minus_sign(bool value) {
  _internal_set_base_use_minus_sign(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetBaseUseMinusSignArchive.base_use_minus_sign)
}

// -------------------------------------------------------------------

// CommandSetCurrencyCodeArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetCurrencyCodeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetCurrencyCodeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetCurrencyCodeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetCurrencyCodeArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetCurrencyCodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCurrencyCodeArchive.super)
  return _internal_super();
}
inline void CommandSetCurrencyCodeArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetCurrencyCodeArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetCurrencyCodeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetCurrencyCodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCurrencyCodeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetCurrencyCodeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetCurrencyCodeArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCurrencyCodeArchive.super)
  return _msg;
}
inline void CommandSetCurrencyCodeArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCurrencyCodeArchive.super)
}

// required string currency_code = 2;
inline bool CommandSetCurrencyCodeArchive::_internal_has_currency_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetCurrencyCodeArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void CommandSetCurrencyCodeArchive::clear_currency_code() {
  _impl_.currency_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetCurrencyCodeArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCurrencyCodeArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetCurrencyCodeArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.currency_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetCurrencyCodeArchive.currency_code)
}
inline std::string* CommandSetCurrencyCodeArchive::mutable_currency_code() {
  std::string* _s = _internal_mutable_currency_code();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCurrencyCodeArchive.currency_code)
  return _s;
}
inline const std::string& CommandSetCurrencyCodeArchive::_internal_currency_code() const {
  return _impl_.currency_code_.Get();
}
inline void CommandSetCurrencyCodeArchive::_internal_set_currency_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.currency_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetCurrencyCodeArchive::_internal_mutable_currency_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.currency_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetCurrencyCodeArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCurrencyCodeArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.currency_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetCurrencyCodeArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.currency_code_.SetAllocated(currency_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCurrencyCodeArchive.currency_code)
}

// -------------------------------------------------------------------

// CommandSetFractionAccuracyArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetFractionAccuracyArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFractionAccuracyArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFractionAccuracyArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetFractionAccuracyArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetFractionAccuracyArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFractionAccuracyArchive.super)
  return _internal_super();
}
inline void CommandSetFractionAccuracyArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFractionAccuracyArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetFractionAccuracyArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetFractionAccuracyArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFractionAccuracyArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetFractionAccuracyArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetFractionAccuracyArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFractionAccuracyArchive.super)
  return _msg;
}
inline void CommandSetFractionAccuracyArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFractionAccuracyArchive.super)
}

// required uint32 fraction_accuracy = 2;
inline bool CommandSetFractionAccuracyArchive::_internal_has_fraction_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFractionAccuracyArchive::has_fraction_accuracy() const {
  return _internal_has_fraction_accuracy();
}
inline void CommandSetFractionAccuracyArchive::clear_fraction_accuracy() {
  _impl_.fraction_accuracy_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetFractionAccuracyArchive::_internal_fraction_accuracy() const {
  return _impl_.fraction_accuracy_;
}
inline uint32_t CommandSetFractionAccuracyArchive::fraction_accuracy() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFractionAccuracyArchive.fraction_accuracy)
  return _internal_fraction_accuracy();
}
inline void CommandSetFractionAccuracyArchive::_internal_set_fraction_accuracy(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fraction_accuracy_ = value;
}
inline void CommandSetFractionAccuracyArchive::set_fraction_accuracy(uint32_t value) {
  _internal_set_fraction_accuracy(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFractionAccuracyArchive.fraction_accuracy)
}

// -------------------------------------------------------------------

// CommandSetNegativeNumberStyleArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetNegativeNumberStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetNegativeNumberStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetNegativeNumberStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetNegativeNumberStyleArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetNegativeNumberStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNegativeNumberStyleArchive.super)
  return _internal_super();
}
inline void CommandSetNegativeNumberStyleArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetNegativeNumberStyleArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNegativeNumberStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNegativeNumberStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetNegativeNumberStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNegativeNumberStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNegativeNumberStyleArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetNegativeNumberStyleArchive.super)
  return _msg;
}
inline void CommandSetNegativeNumberStyleArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetNegativeNumberStyleArchive.super)
}

// required uint32 negative_number_style = 2;
inline bool CommandSetNegativeNumberStyleArchive::_internal_has_negative_number_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetNegativeNumberStyleArchive::has_negative_number_style() const {
  return _internal_has_negative_number_style();
}
inline void CommandSetNegativeNumberStyleArchive::clear_negative_number_style() {
  _impl_.negative_number_style_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetNegativeNumberStyleArchive::_internal_negative_number_style() const {
  return _impl_.negative_number_style_;
}
inline uint32_t CommandSetNegativeNumberStyleArchive::negative_number_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNegativeNumberStyleArchive.negative_number_style)
  return _internal_negative_number_style();
}
inline void CommandSetNegativeNumberStyleArchive::_internal_set_negative_number_style(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.negative_number_style_ = value;
}
inline void CommandSetNegativeNumberStyleArchive::set_negative_number_style(uint32_t value) {
  _internal_set_negative_number_style(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetNegativeNumberStyleArchive.negative_number_style)
}

// -------------------------------------------------------------------

// CommandSetNumberOfDecimalPlacesArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetNumberOfDecimalPlacesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetNumberOfDecimalPlacesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetNumberOfDecimalPlacesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetNumberOfDecimalPlacesArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetNumberOfDecimalPlacesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfDecimalPlacesArchive.super)
  return _internal_super();
}
inline void CommandSetNumberOfDecimalPlacesArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetNumberOfDecimalPlacesArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNumberOfDecimalPlacesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNumberOfDecimalPlacesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetNumberOfDecimalPlacesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNumberOfDecimalPlacesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetNumberOfDecimalPlacesArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetNumberOfDecimalPlacesArchive.super)
  return _msg;
}
inline void CommandSetNumberOfDecimalPlacesArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetNumberOfDecimalPlacesArchive.super)
}

// required uint32 decimal_places = 2;
inline bool CommandSetNumberOfDecimalPlacesArchive::_internal_has_decimal_places() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetNumberOfDecimalPlacesArchive::has_decimal_places() const {
  return _internal_has_decimal_places();
}
inline void CommandSetNumberOfDecimalPlacesArchive::clear_decimal_places() {
  _impl_.decimal_places_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetNumberOfDecimalPlacesArchive::_internal_decimal_places() const {
  return _impl_.decimal_places_;
}
inline uint32_t CommandSetNumberOfDecimalPlacesArchive::decimal_places() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfDecimalPlacesArchive.decimal_places)
  return _internal_decimal_places();
}
inline void CommandSetNumberOfDecimalPlacesArchive::_internal_set_decimal_places(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.decimal_places_ = value;
}
inline void CommandSetNumberOfDecimalPlacesArchive::set_decimal_places(uint32_t value) {
  _internal_set_decimal_places(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetNumberOfDecimalPlacesArchive.decimal_places)
}

// -------------------------------------------------------------------

// CommandSetDateTimeFormatArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetDateTimeFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetDateTimeFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetDateTimeFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetDateTimeFormatArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetDateTimeFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDateTimeFormatArchive.super)
  return _internal_super();
}
inline void CommandSetDateTimeFormatArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetDateTimeFormatArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDateTimeFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDateTimeFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetDateTimeFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDateTimeFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetDateTimeFormatArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetDateTimeFormatArchive.super)
  return _msg;
}
inline void CommandSetDateTimeFormatArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetDateTimeFormatArchive.super)
}

// optional string date_format_string = 2;
inline bool CommandSetDateTimeFormatArchive::_internal_has_date_format_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetDateTimeFormatArchive::has_date_format_string() const {
  return _internal_has_date_format_string();
}
inline void CommandSetDateTimeFormatArchive::clear_date_format_string() {
  _impl_.date_format_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetDateTimeFormatArchive::date_format_string() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDateTimeFormatArchive.date_format_string)
  return _internal_date_format_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetDateTimeFormatArchive::set_date_format_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.date_format_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetDateTimeFormatArchive.date_format_string)
}
inline std::string* CommandSetDateTimeFormatArchive::mutable_date_format_string() {
  std::string* _s = _internal_mutable_date_format_string();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetDateTimeFormatArchive.date_format_string)
  return _s;
}
inline const std::string& CommandSetDateTimeFormatArchive::_internal_date_format_string() const {
  return _impl_.date_format_string_.Get();
}
inline void CommandSetDateTimeFormatArchive::_internal_set_date_format_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.date_format_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetDateTimeFormatArchive::_internal_mutable_date_format_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.date_format_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetDateTimeFormatArchive::release_date_format_string() {
  // @@protoc_insertion_point(field_release:TST.CommandSetDateTimeFormatArchive.date_format_string)
  if (!_internal_has_date_format_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.date_format_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_format_string_.IsDefault()) {
    _impl_.date_format_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetDateTimeFormatArchive::set_allocated_date_format_string(std::string* date_format_string) {
  if (date_format_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.date_format_string_.SetAllocated(date_format_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_format_string_.IsDefault()) {
    _impl_.date_format_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetDateTimeFormatArchive.date_format_string)
}

// optional string time_format_string = 3;
inline bool CommandSetDateTimeFormatArchive::_internal_has_time_format_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetDateTimeFormatArchive::has_time_format_string() const {
  return _internal_has_time_format_string();
}
inline void CommandSetDateTimeFormatArchive::clear_time_format_string() {
  _impl_.time_format_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetDateTimeFormatArchive::time_format_string() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDateTimeFormatArchive.time_format_string)
  return _internal_time_format_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetDateTimeFormatArchive::set_time_format_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.time_format_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetDateTimeFormatArchive.time_format_string)
}
inline std::string* CommandSetDateTimeFormatArchive::mutable_time_format_string() {
  std::string* _s = _internal_mutable_time_format_string();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetDateTimeFormatArchive.time_format_string)
  return _s;
}
inline const std::string& CommandSetDateTimeFormatArchive::_internal_time_format_string() const {
  return _impl_.time_format_string_.Get();
}
inline void CommandSetDateTimeFormatArchive::_internal_set_time_format_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.time_format_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetDateTimeFormatArchive::_internal_mutable_time_format_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.time_format_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetDateTimeFormatArchive::release_time_format_string() {
  // @@protoc_insertion_point(field_release:TST.CommandSetDateTimeFormatArchive.time_format_string)
  if (!_internal_has_time_format_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.time_format_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_format_string_.IsDefault()) {
    _impl_.time_format_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetDateTimeFormatArchive::set_allocated_time_format_string(std::string* time_format_string) {
  if (time_format_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.time_format_string_.SetAllocated(time_format_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_format_string_.IsDefault()) {
    _impl_.time_format_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetDateTimeFormatArchive.time_format_string)
}

// -------------------------------------------------------------------

// CommandSetShowThousandsSeparatorArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetShowThousandsSeparatorArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetShowThousandsSeparatorArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetShowThousandsSeparatorArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetShowThousandsSeparatorArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetShowThousandsSeparatorArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetShowThousandsSeparatorArchive.super)
  return _internal_super();
}
inline void CommandSetShowThousandsSeparatorArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetShowThousandsSeparatorArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetShowThousandsSeparatorArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetShowThousandsSeparatorArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetShowThousandsSeparatorArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetShowThousandsSeparatorArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetShowThousandsSeparatorArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetShowThousandsSeparatorArchive.super)
  return _msg;
}
inline void CommandSetShowThousandsSeparatorArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetShowThousandsSeparatorArchive.super)
}

// required bool show_thousands_separator = 2;
inline bool CommandSetShowThousandsSeparatorArchive::_internal_has_show_thousands_separator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetShowThousandsSeparatorArchive::has_show_thousands_separator() const {
  return _internal_has_show_thousands_separator();
}
inline void CommandSetShowThousandsSeparatorArchive::clear_show_thousands_separator() {
  _impl_.show_thousands_separator_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetShowThousandsSeparatorArchive::_internal_show_thousands_separator() const {
  return _impl_.show_thousands_separator_;
}
inline bool CommandSetShowThousandsSeparatorArchive::show_thousands_separator() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetShowThousandsSeparatorArchive.show_thousands_separator)
  return _internal_show_thousands_separator();
}
inline void CommandSetShowThousandsSeparatorArchive::_internal_set_show_thousands_separator(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.show_thousands_separator_ = value;
}
inline void CommandSetShowThousandsSeparatorArchive::set_show_thousands_separator(bool value) {
  _internal_set_show_thousands_separator(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetShowThousandsSeparatorArchive.show_thousands_separator)
}

// -------------------------------------------------------------------

// CommandSetUseAccountingStyleArchive

// required .TST.CommandMutateCellFormatArchive super = 1;
inline bool CommandSetUseAccountingStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetUseAccountingStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetUseAccountingStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetUseAccountingStyleArchive::_internal_super() const {
  const ::TST::CommandMutateCellFormatArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandMutateCellFormatArchive&>(
      ::TST::_CommandMutateCellFormatArchive_default_instance_);
}
inline const ::TST::CommandMutateCellFormatArchive& CommandSetUseAccountingStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetUseAccountingStyleArchive.super)
  return _internal_super();
}
inline void CommandSetUseAccountingStyleArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandMutateCellFormatArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetUseAccountingStyleArchive.super)
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetUseAccountingStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetUseAccountingStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetUseAccountingStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandMutateCellFormatArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetUseAccountingStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandMutateCellFormatArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandMutateCellFormatArchive* CommandSetUseAccountingStyleArchive::mutable_super() {
  ::TST::CommandMutateCellFormatArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetUseAccountingStyleArchive.super)
  return _msg;
}
inline void CommandSetUseAccountingStyleArchive::set_allocated_super(::TST::CommandMutateCellFormatArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetUseAccountingStyleArchive.super)
}

// required bool use_accounting_style = 2;
inline bool CommandSetUseAccountingStyleArchive::_internal_has_use_accounting_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetUseAccountingStyleArchive::has_use_accounting_style() const {
  return _internal_has_use_accounting_style();
}
inline void CommandSetUseAccountingStyleArchive::clear_use_accounting_style() {
  _impl_.use_accounting_style_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetUseAccountingStyleArchive::_internal_use_accounting_style() const {
  return _impl_.use_accounting_style_;
}
inline bool CommandSetUseAccountingStyleArchive::use_accounting_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetUseAccountingStyleArchive.use_accounting_style)
  return _internal_use_accounting_style();
}
inline void CommandSetUseAccountingStyleArchive::_internal_set_use_accounting_style(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.use_accounting_style_ = value;
}
inline void CommandSetUseAccountingStyleArchive::set_use_accounting_style(bool value) {
  _internal_set_use_accounting_style(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetUseAccountingStyleArchive.use_accounting_style)
}

// -------------------------------------------------------------------

// CommandSetRangeControlMinMaxIncArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetRangeControlMinMaxIncArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetRangeControlMinMaxIncArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetRangeControlMinMaxIncArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.super)
  return _internal_super();
}
inline void CommandSetRangeControlMinMaxIncArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetRangeControlMinMaxIncArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetRangeControlMinMaxIncArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetRangeControlMinMaxIncArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetRangeControlMinMaxIncArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetRangeControlMinMaxIncArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetRangeControlMinMaxIncArchive.super)
  return _msg;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.super)
}

// optional double minimum = 2;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_minimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_minimum() const {
  return _internal_has_minimum();
}
inline void CommandSetRangeControlMinMaxIncArchive::clear_minimum() {
  _impl_.minimum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double CommandSetRangeControlMinMaxIncArchive::_internal_minimum() const {
  return _impl_.minimum_;
}
inline double CommandSetRangeControlMinMaxIncArchive::minimum() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.minimum)
  return _internal_minimum();
}
inline void CommandSetRangeControlMinMaxIncArchive::_internal_set_minimum(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.minimum_ = value;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_minimum(double value) {
  _internal_set_minimum(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRangeControlMinMaxIncArchive.minimum)
}

// optional double maximum = 3;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_maximum() const {
  return _internal_has_maximum();
}
inline void CommandSetRangeControlMinMaxIncArchive::clear_maximum() {
  _impl_.maximum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double CommandSetRangeControlMinMaxIncArchive::_internal_maximum() const {
  return _impl_.maximum_;
}
inline double CommandSetRangeControlMinMaxIncArchive::maximum() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.maximum)
  return _internal_maximum();
}
inline void CommandSetRangeControlMinMaxIncArchive::_internal_set_maximum(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.maximum_ = value;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_maximum(double value) {
  _internal_set_maximum(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRangeControlMinMaxIncArchive.maximum)
}

// optional double increment = 4;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_increment() const {
  return _internal_has_increment();
}
inline void CommandSetRangeControlMinMaxIncArchive::clear_increment() {
  _impl_.increment_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double CommandSetRangeControlMinMaxIncArchive::_internal_increment() const {
  return _impl_.increment_;
}
inline double CommandSetRangeControlMinMaxIncArchive::increment() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.increment)
  return _internal_increment();
}
inline void CommandSetRangeControlMinMaxIncArchive::_internal_set_increment(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.increment_ = value;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_increment(double value) {
  _internal_set_increment(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRangeControlMinMaxIncArchive.increment)
}

// optional .TSP.Reference cell_diff_map = 5;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetRangeControlMinMaxIncArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetRangeControlMinMaxIncArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandSetRangeControlMinMaxIncArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetRangeControlMinMaxIncArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetRangeControlMinMaxIncArchive.cell_diff_map)
  return _msg;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.cell_diff_map)
}

// optional .TST.CellUIDListArchive cell_uid_list = 6;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_cell_uid_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_list_ != nullptr);
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_cell_uid_list() const {
  return _internal_has_cell_uid_list();
}
inline const ::TST::CellUIDListArchive& CommandSetRangeControlMinMaxIncArchive::_internal_cell_uid_list() const {
  const ::TST::CellUIDListArchive* p = _impl_.cell_uid_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CommandSetRangeControlMinMaxIncArchive::cell_uid_list() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.cell_uid_list)
  return _internal_cell_uid_list();
}
inline void CommandSetRangeControlMinMaxIncArchive::unsafe_arena_set_allocated_cell_uid_list(
    ::TST::CellUIDListArchive* cell_uid_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  if (cell_uid_list) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.cell_uid_list)
}
inline ::TST::CellUIDListArchive* CommandSetRangeControlMinMaxIncArchive::release_cell_uid_list() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* CommandSetRangeControlMinMaxIncArchive::unsafe_arena_release_cell_uid_list() {
  // @@protoc_insertion_point(field_release:TST.CommandSetRangeControlMinMaxIncArchive.cell_uid_list)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CommandSetRangeControlMinMaxIncArchive::_internal_mutable_cell_uid_list() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cell_uid_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.cell_uid_list_ = p;
  }
  return _impl_.cell_uid_list_;
}
inline ::TST::CellUIDListArchive* CommandSetRangeControlMinMaxIncArchive::mutable_cell_uid_list() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_cell_uid_list();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetRangeControlMinMaxIncArchive.cell_uid_list)
  return _msg;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  if (cell_uid_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_list));
    if (message_arena != submessage_arena) {
      cell_uid_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.cell_uid_list)
}

// optional .TSP.Reference inverse_cell_diff_map = 7;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetRangeControlMinMaxIncArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetRangeControlMinMaxIncArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandSetRangeControlMinMaxIncArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetRangeControlMinMaxIncArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandSetRangeControlMinMaxIncArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetRangeControlMinMaxIncArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetRangeControlMinMaxIncArchive.inverse_cell_diff_map)
}

// required bool is_first_commit = 8;
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_has_is_first_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandSetRangeControlMinMaxIncArchive::has_is_first_commit() const {
  return _internal_has_is_first_commit();
}
inline void CommandSetRangeControlMinMaxIncArchive::clear_is_first_commit() {
  _impl_.is_first_commit_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CommandSetRangeControlMinMaxIncArchive::_internal_is_first_commit() const {
  return _impl_.is_first_commit_;
}
inline bool CommandSetRangeControlMinMaxIncArchive::is_first_commit() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRangeControlMinMaxIncArchive.is_first_commit)
  return _internal_is_first_commit();
}
inline void CommandSetRangeControlMinMaxIncArchive::_internal_set_is_first_commit(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_first_commit_ = value;
}
inline void CommandSetRangeControlMinMaxIncArchive::set_is_first_commit(bool value) {
  _internal_set_is_first_commit(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRangeControlMinMaxIncArchive.is_first_commit)
}

// -------------------------------------------------------------------

// CommandMoveColumnsOrRowsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMoveColumnsOrRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsOrRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveColumnsOrRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMoveColumnsOrRowsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMoveColumnsOrRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.super)
  return _internal_super();
}
inline void CommandMoveColumnsOrRowsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsOrRowsArchive.super)
}
inline ::TST::TableCommandArchive* CommandMoveColumnsOrRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveColumnsOrRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsOrRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveColumnsOrRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMoveColumnsOrRowsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsOrRowsArchive.super)
  return _msg;
}
inline void CommandMoveColumnsOrRowsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsOrRowsArchive.super)
}

// required .TSP.UUID dest_uid = 2;
inline bool CommandMoveColumnsOrRowsArchive::_internal_has_dest_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dest_uid_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsOrRowsArchive::has_dest_uid() const {
  return _internal_has_dest_uid();
}
inline const ::TSP::UUID& CommandMoveColumnsOrRowsArchive::_internal_dest_uid() const {
  const ::TSP::UUID* p = _impl_.dest_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveColumnsOrRowsArchive::dest_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.dest_uid)
  return _internal_dest_uid();
}
inline void CommandMoveColumnsOrRowsArchive::unsafe_arena_set_allocated_dest_uid(
    ::TSP::UUID* dest_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dest_uid_);
  }
  _impl_.dest_uid_ = dest_uid;
  if (dest_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsOrRowsArchive.dest_uid)
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::release_dest_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.dest_uid_;
  _impl_.dest_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::unsafe_arena_release_dest_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsOrRowsArchive.dest_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.dest_uid_;
  _impl_.dest_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::_internal_mutable_dest_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dest_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.dest_uid_ = p;
  }
  return _impl_.dest_uid_;
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::mutable_dest_uid() {
  ::TSP::UUID* _msg = _internal_mutable_dest_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsOrRowsArchive.dest_uid)
  return _msg;
}
inline void CommandMoveColumnsOrRowsArchive::set_allocated_dest_uid(::TSP::UUID* dest_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dest_uid_);
  }
  if (dest_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_uid));
    if (message_arena != submessage_arena) {
      dest_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dest_uid_ = dest_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsOrRowsArchive.dest_uid)
}

// required bool before = 3;
inline bool CommandMoveColumnsOrRowsArchive::_internal_has_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandMoveColumnsOrRowsArchive::has_before() const {
  return _internal_has_before();
}
inline void CommandMoveColumnsOrRowsArchive::clear_before() {
  _impl_.before_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandMoveColumnsOrRowsArchive::_internal_before() const {
  return _impl_.before_;
}
inline bool CommandMoveColumnsOrRowsArchive::before() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.before)
  return _internal_before();
}
inline void CommandMoveColumnsOrRowsArchive::_internal_set_before(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.before_ = value;
}
inline void CommandMoveColumnsOrRowsArchive::set_before(bool value) {
  _internal_set_before(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveColumnsOrRowsArchive.before)
}

// required .TSP.UUID undo_dest_uid = 4;
inline bool CommandMoveColumnsOrRowsArchive::_internal_has_undo_dest_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_dest_uid_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsOrRowsArchive::has_undo_dest_uid() const {
  return _internal_has_undo_dest_uid();
}
inline const ::TSP::UUID& CommandMoveColumnsOrRowsArchive::_internal_undo_dest_uid() const {
  const ::TSP::UUID* p = _impl_.undo_dest_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveColumnsOrRowsArchive::undo_dest_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.undo_dest_uid)
  return _internal_undo_dest_uid();
}
inline void CommandMoveColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_dest_uid(
    ::TSP::UUID* undo_dest_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_dest_uid_);
  }
  _impl_.undo_dest_uid_ = undo_dest_uid;
  if (undo_dest_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsOrRowsArchive.undo_dest_uid)
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::release_undo_dest_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.undo_dest_uid_;
  _impl_.undo_dest_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::unsafe_arena_release_undo_dest_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsOrRowsArchive.undo_dest_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.undo_dest_uid_;
  _impl_.undo_dest_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::_internal_mutable_undo_dest_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_dest_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.undo_dest_uid_ = p;
  }
  return _impl_.undo_dest_uid_;
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::mutable_undo_dest_uid() {
  ::TSP::UUID* _msg = _internal_mutable_undo_dest_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsOrRowsArchive.undo_dest_uid)
  return _msg;
}
inline void CommandMoveColumnsOrRowsArchive::set_allocated_undo_dest_uid(::TSP::UUID* undo_dest_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_dest_uid_);
  }
  if (undo_dest_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_dest_uid));
    if (message_arena != submessage_arena) {
      undo_dest_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_dest_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_dest_uid_ = undo_dest_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsOrRowsArchive.undo_dest_uid)
}

// required bool undo_before = 5;
inline bool CommandMoveColumnsOrRowsArchive::_internal_has_undo_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandMoveColumnsOrRowsArchive::has_undo_before() const {
  return _internal_has_undo_before();
}
inline void CommandMoveColumnsOrRowsArchive::clear_undo_before() {
  _impl_.undo_before_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandMoveColumnsOrRowsArchive::_internal_undo_before() const {
  return _impl_.undo_before_;
}
inline bool CommandMoveColumnsOrRowsArchive::undo_before() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.undo_before)
  return _internal_undo_before();
}
inline void CommandMoveColumnsOrRowsArchive::_internal_set_undo_before(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.undo_before_ = value;
}
inline void CommandMoveColumnsOrRowsArchive::set_undo_before(bool value) {
  _internal_set_undo_before(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveColumnsOrRowsArchive.undo_before)
}

// repeated .TSP.UUID uids = 6;
inline int CommandMoveColumnsOrRowsArchive::_internal_uids_size() const {
  return _impl_.uids_.size();
}
inline int CommandMoveColumnsOrRowsArchive::uids_size() const {
  return _internal_uids_size();
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::mutable_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsOrRowsArchive.uids)
  return _impl_.uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandMoveColumnsOrRowsArchive::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandMoveColumnsOrRowsArchive.uids)
  return &_impl_.uids_;
}
inline const ::TSP::UUID& CommandMoveColumnsOrRowsArchive::_internal_uids(int index) const {
  return _impl_.uids_.Get(index);
}
inline const ::TSP::UUID& CommandMoveColumnsOrRowsArchive::uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.uids)
  return _internal_uids(index);
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::_internal_add_uids() {
  return _impl_.uids_.Add();
}
inline ::TSP::UUID* CommandMoveColumnsOrRowsArchive::add_uids() {
  ::TSP::UUID* _add = _internal_add_uids();
  // @@protoc_insertion_point(field_add:TST.CommandMoveColumnsOrRowsArchive.uids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandMoveColumnsOrRowsArchive::uids() const {
  // @@protoc_insertion_point(field_list:TST.CommandMoveColumnsOrRowsArchive.uids)
  return _impl_.uids_;
}

// required .TST.TableDimensionArchive direction = 7;
inline bool CommandMoveColumnsOrRowsArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandMoveColumnsOrRowsArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandMoveColumnsOrRowsArchive::clear_direction() {
  _impl_.direction_ = -1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::TST::TableDimensionArchive CommandMoveColumnsOrRowsArchive::_internal_direction() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.direction_);
}
inline ::TST::TableDimensionArchive CommandMoveColumnsOrRowsArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.direction)
  return _internal_direction();
}
inline void CommandMoveColumnsOrRowsArchive::_internal_set_direction(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.direction_ = value;
}
inline void CommandMoveColumnsOrRowsArchive::set_direction(::TST::TableDimensionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveColumnsOrRowsArchive.direction)
}

// optional .TSP.Reference formula_rewrite_command = 8;
inline bool CommandMoveColumnsOrRowsArchive::_internal_has_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsOrRowsArchive::has_formula_rewrite_command() const {
  return _internal_has_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandMoveColumnsOrRowsArchive::_internal_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveColumnsOrRowsArchive::formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsOrRowsArchive.formula_rewrite_command)
  return _internal_formula_rewrite_command();
}
inline void CommandMoveColumnsOrRowsArchive::unsafe_arena_set_allocated_formula_rewrite_command(
    ::TSP::Reference* formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  if (formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsOrRowsArchive.formula_rewrite_command)
}
inline ::TSP::Reference* CommandMoveColumnsOrRowsArchive::release_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveColumnsOrRowsArchive::unsafe_arena_release_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsOrRowsArchive.formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveColumnsOrRowsArchive::_internal_mutable_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_ = p;
  }
  return _impl_.formula_rewrite_command_;
}
inline ::TSP::Reference* CommandMoveColumnsOrRowsArchive::mutable_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsOrRowsArchive.formula_rewrite_command)
  return _msg;
}
inline void CommandMoveColumnsOrRowsArchive::set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  if (formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command));
    if (message_arena != submessage_arena) {
      formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsOrRowsArchive.formula_rewrite_command)
}

// -------------------------------------------------------------------

// CommandSortArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSortArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSortArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSortArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSortArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSortArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSortArchive.super)
  return _internal_super();
}
inline void CommandSortArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSortArchive.super)
}
inline ::TST::TableCommandArchive* CommandSortArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSortArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSortArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSortArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSortArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSortArchive.super)
  return _msg;
}
inline void CommandSortArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSortArchive.super)
}

// repeated .TSP.UUID from_row_uids = 2;
inline int CommandSortArchive::_internal_from_row_uids_size() const {
  return _impl_.from_row_uids_.size();
}
inline int CommandSortArchive::from_row_uids_size() const {
  return _internal_from_row_uids_size();
}
inline ::TSP::UUID* CommandSortArchive::mutable_from_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSortArchive.from_row_uids)
  return _impl_.from_row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSortArchive::mutable_from_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSortArchive.from_row_uids)
  return &_impl_.from_row_uids_;
}
inline const ::TSP::UUID& CommandSortArchive::_internal_from_row_uids(int index) const {
  return _impl_.from_row_uids_.Get(index);
}
inline const ::TSP::UUID& CommandSortArchive::from_row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSortArchive.from_row_uids)
  return _internal_from_row_uids(index);
}
inline ::TSP::UUID* CommandSortArchive::_internal_add_from_row_uids() {
  return _impl_.from_row_uids_.Add();
}
inline ::TSP::UUID* CommandSortArchive::add_from_row_uids() {
  ::TSP::UUID* _add = _internal_add_from_row_uids();
  // @@protoc_insertion_point(field_add:TST.CommandSortArchive.from_row_uids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSortArchive::from_row_uids() const {
  // @@protoc_insertion_point(field_list:TST.CommandSortArchive.from_row_uids)
  return _impl_.from_row_uids_;
}

// repeated .TSP.UUID to_row_uids = 3;
inline int CommandSortArchive::_internal_to_row_uids_size() const {
  return _impl_.to_row_uids_.size();
}
inline int CommandSortArchive::to_row_uids_size() const {
  return _internal_to_row_uids_size();
}
inline ::TSP::UUID* CommandSortArchive::mutable_to_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSortArchive.to_row_uids)
  return _impl_.to_row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSortArchive::mutable_to_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSortArchive.to_row_uids)
  return &_impl_.to_row_uids_;
}
inline const ::TSP::UUID& CommandSortArchive::_internal_to_row_uids(int index) const {
  return _impl_.to_row_uids_.Get(index);
}
inline const ::TSP::UUID& CommandSortArchive::to_row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSortArchive.to_row_uids)
  return _internal_to_row_uids(index);
}
inline ::TSP::UUID* CommandSortArchive::_internal_add_to_row_uids() {
  return _impl_.to_row_uids_.Add();
}
inline ::TSP::UUID* CommandSortArchive::add_to_row_uids() {
  ::TSP::UUID* _add = _internal_add_to_row_uids();
  // @@protoc_insertion_point(field_add:TST.CommandSortArchive.to_row_uids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSortArchive::to_row_uids() const {
  // @@protoc_insertion_point(field_list:TST.CommandSortArchive.to_row_uids)
  return _impl_.to_row_uids_;
}

// optional .TSP.Reference formula_rewrite_command = 4;
inline bool CommandSortArchive::_internal_has_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandSortArchive::has_formula_rewrite_command() const {
  return _internal_has_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandSortArchive::_internal_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSortArchive::formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandSortArchive.formula_rewrite_command)
  return _internal_formula_rewrite_command();
}
inline void CommandSortArchive::unsafe_arena_set_allocated_formula_rewrite_command(
    ::TSP::Reference* formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  if (formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSortArchive.formula_rewrite_command)
}
inline ::TSP::Reference* CommandSortArchive::release_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSortArchive::unsafe_arena_release_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandSortArchive.formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSortArchive::_internal_mutable_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_ = p;
  }
  return _impl_.formula_rewrite_command_;
}
inline ::TSP::Reference* CommandSortArchive::mutable_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandSortArchive.formula_rewrite_command)
  return _msg;
}
inline void CommandSortArchive::set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  if (formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command));
    if (message_arena != submessage_arena) {
      formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSortArchive.formula_rewrite_command)
}

// -------------------------------------------------------------------

// FormulaRewriteSpecArchive

// required uint32 rewrite_type = 1;
inline bool FormulaRewriteSpecArchive::_internal_has_rewrite_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FormulaRewriteSpecArchive::has_rewrite_type() const {
  return _internal_has_rewrite_type();
}
inline void FormulaRewriteSpecArchive::clear_rewrite_type() {
  _impl_.rewrite_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t FormulaRewriteSpecArchive::_internal_rewrite_type() const {
  return _impl_.rewrite_type_;
}
inline uint32_t FormulaRewriteSpecArchive::rewrite_type() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.rewrite_type)
  return _internal_rewrite_type();
}
inline void FormulaRewriteSpecArchive::_internal_set_rewrite_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.rewrite_type_ = value;
}
inline void FormulaRewriteSpecArchive::set_rewrite_type(uint32_t value) {
  _internal_set_rewrite_type(value);
  // @@protoc_insertion_point(field_set:TST.FormulaRewriteSpecArchive.rewrite_type)
}

// optional .TSP.UUID table_uid = 2;
inline bool FormulaRewriteSpecArchive::_internal_has_table_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_uid_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = _impl_.table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.table_uid)
  return _internal_table_uid();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_uid_);
  }
  _impl_.table_uid_ = table_uid;
  if (table_uid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.table_uid)
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::release_table_uid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = _impl_.table_uid_;
  _impl_.table_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.table_uid)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = _impl_.table_uid_;
  _impl_.table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::_internal_mutable_table_uid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.table_uid_ = p;
  }
  return _impl_.table_uid_;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::mutable_table_uid() {
  ::TSP::UUID* _msg = _internal_mutable_table_uid();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.table_uid)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid));
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.table_uid)
}

// optional .TSP.UUID cond_style_owner_uid = 3;
inline bool FormulaRewriteSpecArchive::_internal_has_cond_style_owner_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cond_style_owner_uid_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_cond_style_owner_uid() const {
  return _internal_has_cond_style_owner_uid();
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::_internal_cond_style_owner_uid() const {
  const ::TSP::UUID* p = _impl_.cond_style_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::cond_style_owner_uid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.cond_style_owner_uid)
  return _internal_cond_style_owner_uid();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_cond_style_owner_uid(
    ::TSP::UUID* cond_style_owner_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cond_style_owner_uid_);
  }
  _impl_.cond_style_owner_uid_ = cond_style_owner_uid;
  if (cond_style_owner_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.cond_style_owner_uid)
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::release_cond_style_owner_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.cond_style_owner_uid_;
  _impl_.cond_style_owner_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::unsafe_arena_release_cond_style_owner_uid() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.cond_style_owner_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.cond_style_owner_uid_;
  _impl_.cond_style_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::_internal_mutable_cond_style_owner_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cond_style_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.cond_style_owner_uid_ = p;
  }
  return _impl_.cond_style_owner_uid_;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::mutable_cond_style_owner_uid() {
  ::TSP::UUID* _msg = _internal_mutable_cond_style_owner_uid();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.cond_style_owner_uid)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_cond_style_owner_uid(::TSP::UUID* cond_style_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cond_style_owner_uid_);
  }
  if (cond_style_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cond_style_owner_uid));
    if (message_arena != submessage_arena) {
      cond_style_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cond_style_owner_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cond_style_owner_uid_ = cond_style_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.cond_style_owner_uid)
}

// optional .TSP.UUID group_by_uid = 4;
inline bool FormulaRewriteSpecArchive::_internal_has_group_by_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_by_uid_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = _impl_.group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_by_uid_);
  }
  _impl_.group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.group_by_uid)
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::release_group_by_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.group_by_uid_;
  _impl_.group_by_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.group_by_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.group_by_uid_;
  _impl_.group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::_internal_mutable_group_by_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.group_by_uid_ = p;
  }
  return _impl_.group_by_uid_;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::mutable_group_by_uid() {
  ::TSP::UUID* _msg = _internal_mutable_group_by_uid();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.group_by_uid)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid));
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.group_by_uid)
}

// optional bool is_inverse = 5;
inline bool FormulaRewriteSpecArchive::_internal_has_is_inverse() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FormulaRewriteSpecArchive::has_is_inverse() const {
  return _internal_has_is_inverse();
}
inline void FormulaRewriteSpecArchive::clear_is_inverse() {
  _impl_.is_inverse_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool FormulaRewriteSpecArchive::_internal_is_inverse() const {
  return _impl_.is_inverse_;
}
inline bool FormulaRewriteSpecArchive::is_inverse() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.is_inverse)
  return _internal_is_inverse();
}
inline void FormulaRewriteSpecArchive::_internal_set_is_inverse(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.is_inverse_ = value;
}
inline void FormulaRewriteSpecArchive::set_is_inverse(bool value) {
  _internal_set_is_inverse(value);
  // @@protoc_insertion_point(field_set:TST.FormulaRewriteSpecArchive.is_inverse)
}

// optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 6;
inline bool FormulaRewriteSpecArchive::_internal_has_column_or_row_uuids_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column_or_row_uuids_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_column_or_row_uuids_info() const {
  return _internal_has_column_or_row_uuids_info();
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::_internal_column_or_row_uuids_info() const {
  const ::TSCE::ColumnOrRowUuidsInfoArchive* p = _impl_.column_or_row_uuids_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ColumnOrRowUuidsInfoArchive&>(
      ::TSCE::_ColumnOrRowUuidsInfoArchive_default_instance_);
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::column_or_row_uuids_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.column_or_row_uuids_info)
  return _internal_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_column_or_row_uuids_info(
    ::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_or_row_uuids_info_);
  }
  _impl_.column_or_row_uuids_info_ = column_or_row_uuids_info;
  if (column_or_row_uuids_info) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.column_or_row_uuids_info)
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::release_column_or_row_uuids_info() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = _impl_.column_or_row_uuids_info_;
  _impl_.column_or_row_uuids_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_column_or_row_uuids_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.column_or_row_uuids_info)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = _impl_.column_or_row_uuids_info_;
  _impl_.column_or_row_uuids_info_ = nullptr;
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_column_or_row_uuids_info() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.column_or_row_uuids_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ColumnOrRowUuidsInfoArchive>(GetArenaForAllocation());
    _impl_.column_or_row_uuids_info_ = p;
  }
  return _impl_.column_or_row_uuids_info_;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::mutable_column_or_row_uuids_info() {
  ::TSCE::ColumnOrRowUuidsInfoArchive* _msg = _internal_mutable_column_or_row_uuids_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.column_or_row_uuids_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_or_row_uuids_info_);
  }
  if (column_or_row_uuids_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_or_row_uuids_info));
    if (message_arena != submessage_arena) {
      column_or_row_uuids_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_or_row_uuids_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.column_or_row_uuids_info_ = column_or_row_uuids_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.column_or_row_uuids_info)
}

// optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 7;
inline bool FormulaRewriteSpecArchive::_internal_has_aux_column_or_row_uuids_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aux_column_or_row_uuids_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_aux_column_or_row_uuids_info() const {
  return _internal_has_aux_column_or_row_uuids_info();
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::_internal_aux_column_or_row_uuids_info() const {
  const ::TSCE::ColumnOrRowUuidsInfoArchive* p = _impl_.aux_column_or_row_uuids_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ColumnOrRowUuidsInfoArchive&>(
      ::TSCE::_ColumnOrRowUuidsInfoArchive_default_instance_);
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::aux_column_or_row_uuids_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
  return _internal_aux_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_aux_column_or_row_uuids_info(
    ::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aux_column_or_row_uuids_info_);
  }
  _impl_.aux_column_or_row_uuids_info_ = aux_column_or_row_uuids_info;
  if (aux_column_or_row_uuids_info) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::release_aux_column_or_row_uuids_info() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = _impl_.aux_column_or_row_uuids_info_;
  _impl_.aux_column_or_row_uuids_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_aux_column_or_row_uuids_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = _impl_.aux_column_or_row_uuids_info_;
  _impl_.aux_column_or_row_uuids_info_ = nullptr;
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_aux_column_or_row_uuids_info() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.aux_column_or_row_uuids_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ColumnOrRowUuidsInfoArchive>(GetArenaForAllocation());
    _impl_.aux_column_or_row_uuids_info_ = p;
  }
  return _impl_.aux_column_or_row_uuids_info_;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::mutable_aux_column_or_row_uuids_info() {
  ::TSCE::ColumnOrRowUuidsInfoArchive* _msg = _internal_mutable_aux_column_or_row_uuids_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_aux_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aux_column_or_row_uuids_info_);
  }
  if (aux_column_or_row_uuids_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux_column_or_row_uuids_info));
    if (message_arena != submessage_arena) {
      aux_column_or_row_uuids_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aux_column_or_row_uuids_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.aux_column_or_row_uuids_info_ = aux_column_or_row_uuids_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
}

// optional .TSCE.RegionMovedInfoArchive region_moved_info = 8;
inline bool FormulaRewriteSpecArchive::_internal_has_region_moved_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.region_moved_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_region_moved_info() const {
  return _internal_has_region_moved_info();
}
inline const ::TSCE::RegionMovedInfoArchive& FormulaRewriteSpecArchive::_internal_region_moved_info() const {
  const ::TSCE::RegionMovedInfoArchive* p = _impl_.region_moved_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RegionMovedInfoArchive&>(
      ::TSCE::_RegionMovedInfoArchive_default_instance_);
}
inline const ::TSCE::RegionMovedInfoArchive& FormulaRewriteSpecArchive::region_moved_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.region_moved_info)
  return _internal_region_moved_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_region_moved_info(
    ::TSCE::RegionMovedInfoArchive* region_moved_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_moved_info_);
  }
  _impl_.region_moved_info_ = region_moved_info;
  if (region_moved_info) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.region_moved_info)
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::release_region_moved_info() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::RegionMovedInfoArchive* temp = _impl_.region_moved_info_;
  _impl_.region_moved_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_region_moved_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.region_moved_info)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::RegionMovedInfoArchive* temp = _impl_.region_moved_info_;
  _impl_.region_moved_info_ = nullptr;
  return temp;
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_region_moved_info() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.region_moved_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RegionMovedInfoArchive>(GetArenaForAllocation());
    _impl_.region_moved_info_ = p;
  }
  return _impl_.region_moved_info_;
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::mutable_region_moved_info() {
  ::TSCE::RegionMovedInfoArchive* _msg = _internal_mutable_region_moved_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.region_moved_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_region_moved_info(::TSCE::RegionMovedInfoArchive* region_moved_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_moved_info_);
  }
  if (region_moved_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_moved_info));
    if (message_arena != submessage_arena) {
      region_moved_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_moved_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.region_moved_info_ = region_moved_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.region_moved_info)
}

// optional .TSCE.RegionInfoArchive region_info = 9;
inline bool FormulaRewriteSpecArchive::_internal_has_region_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.region_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_region_info() const {
  return _internal_has_region_info();
}
inline const ::TSCE::RegionInfoArchive& FormulaRewriteSpecArchive::_internal_region_info() const {
  const ::TSCE::RegionInfoArchive* p = _impl_.region_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RegionInfoArchive&>(
      ::TSCE::_RegionInfoArchive_default_instance_);
}
inline const ::TSCE::RegionInfoArchive& FormulaRewriteSpecArchive::region_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.region_info)
  return _internal_region_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_region_info(
    ::TSCE::RegionInfoArchive* region_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_info_);
  }
  _impl_.region_info_ = region_info;
  if (region_info) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.region_info)
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::release_region_info() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCE::RegionInfoArchive* temp = _impl_.region_info_;
  _impl_.region_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_region_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.region_info)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCE::RegionInfoArchive* temp = _impl_.region_info_;
  _impl_.region_info_ = nullptr;
  return temp;
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_region_info() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.region_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RegionInfoArchive>(GetArenaForAllocation());
    _impl_.region_info_ = p;
  }
  return _impl_.region_info_;
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::mutable_region_info() {
  ::TSCE::RegionInfoArchive* _msg = _internal_mutable_region_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.region_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_region_info(::TSCE::RegionInfoArchive* region_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_info_);
  }
  if (region_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_info));
    if (message_arena != submessage_arena) {
      region_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.region_info)
}

// optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 10;
inline bool FormulaRewriteSpecArchive::_internal_has_rewrite_table_id_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_table_id_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_rewrite_table_id_info() const {
  return _internal_has_rewrite_table_id_info();
}
inline const ::TSCE::RewriteTableUIDInfoArchive& FormulaRewriteSpecArchive::_internal_rewrite_table_id_info() const {
  const ::TSCE::RewriteTableUIDInfoArchive* p = _impl_.rewrite_table_id_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteTableUIDInfoArchive&>(
      ::TSCE::_RewriteTableUIDInfoArchive_default_instance_);
}
inline const ::TSCE::RewriteTableUIDInfoArchive& FormulaRewriteSpecArchive::rewrite_table_id_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.rewrite_table_id_info)
  return _internal_rewrite_table_id_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_rewrite_table_id_info(
    ::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_table_id_info_);
  }
  _impl_.rewrite_table_id_info_ = rewrite_table_id_info;
  if (rewrite_table_id_info) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.rewrite_table_id_info)
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::release_rewrite_table_id_info() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = _impl_.rewrite_table_id_info_;
  _impl_.rewrite_table_id_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_rewrite_table_id_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.rewrite_table_id_info)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = _impl_.rewrite_table_id_info_;
  _impl_.rewrite_table_id_info_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_rewrite_table_id_info() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.rewrite_table_id_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteTableUIDInfoArchive>(GetArenaForAllocation());
    _impl_.rewrite_table_id_info_ = p;
  }
  return _impl_.rewrite_table_id_info_;
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::mutable_rewrite_table_id_info() {
  ::TSCE::RewriteTableUIDInfoArchive* _msg = _internal_mutable_rewrite_table_id_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.rewrite_table_id_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_rewrite_table_id_info(::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_table_id_info_);
  }
  if (rewrite_table_id_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewrite_table_id_info));
    if (message_arena != submessage_arena) {
      rewrite_table_id_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_table_id_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.rewrite_table_id_info_ = rewrite_table_id_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.rewrite_table_id_info)
}

// optional .TSCE.TableTransposeInfoArchive transposed_table_info = 11;
inline bool FormulaRewriteSpecArchive::_internal_has_transposed_table_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transposed_table_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_transposed_table_info() const {
  return _internal_has_transposed_table_info();
}
inline const ::TSCE::TableTransposeInfoArchive& FormulaRewriteSpecArchive::_internal_transposed_table_info() const {
  const ::TSCE::TableTransposeInfoArchive* p = _impl_.transposed_table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::TableTransposeInfoArchive&>(
      ::TSCE::_TableTransposeInfoArchive_default_instance_);
}
inline const ::TSCE::TableTransposeInfoArchive& FormulaRewriteSpecArchive::transposed_table_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.transposed_table_info)
  return _internal_transposed_table_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_transposed_table_info(
    ::TSCE::TableTransposeInfoArchive* transposed_table_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transposed_table_info_);
  }
  _impl_.transposed_table_info_ = transposed_table_info;
  if (transposed_table_info) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.transposed_table_info)
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::release_transposed_table_info() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCE::TableTransposeInfoArchive* temp = _impl_.transposed_table_info_;
  _impl_.transposed_table_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_transposed_table_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.transposed_table_info)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCE::TableTransposeInfoArchive* temp = _impl_.transposed_table_info_;
  _impl_.transposed_table_info_ = nullptr;
  return temp;
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_transposed_table_info() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.transposed_table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::TableTransposeInfoArchive>(GetArenaForAllocation());
    _impl_.transposed_table_info_ = p;
  }
  return _impl_.transposed_table_info_;
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::mutable_transposed_table_info() {
  ::TSCE::TableTransposeInfoArchive* _msg = _internal_mutable_transposed_table_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.transposed_table_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_transposed_table_info(::TSCE::TableTransposeInfoArchive* transposed_table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transposed_table_info_);
  }
  if (transposed_table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transposed_table_info));
    if (message_arena != submessage_arena) {
      transposed_table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transposed_table_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.transposed_table_info_ = transposed_table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.transposed_table_info)
}

// optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 12;
inline bool FormulaRewriteSpecArchive::_internal_has_merge_origin_moved_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merge_origin_moved_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_merge_origin_moved_info() const {
  return _internal_has_merge_origin_moved_info();
}
inline const ::TSCE::MergeOriginMovedArchive& FormulaRewriteSpecArchive::_internal_merge_origin_moved_info() const {
  const ::TSCE::MergeOriginMovedArchive* p = _impl_.merge_origin_moved_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::MergeOriginMovedArchive&>(
      ::TSCE::_MergeOriginMovedArchive_default_instance_);
}
inline const ::TSCE::MergeOriginMovedArchive& FormulaRewriteSpecArchive::merge_origin_moved_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.merge_origin_moved_info)
  return _internal_merge_origin_moved_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_merge_origin_moved_info(
    ::TSCE::MergeOriginMovedArchive* merge_origin_moved_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_origin_moved_info_);
  }
  _impl_.merge_origin_moved_info_ = merge_origin_moved_info;
  if (merge_origin_moved_info) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.merge_origin_moved_info)
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::release_merge_origin_moved_info() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCE::MergeOriginMovedArchive* temp = _impl_.merge_origin_moved_info_;
  _impl_.merge_origin_moved_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::unsafe_arena_release_merge_origin_moved_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.merge_origin_moved_info)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCE::MergeOriginMovedArchive* temp = _impl_.merge_origin_moved_info_;
  _impl_.merge_origin_moved_info_ = nullptr;
  return temp;
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::_internal_mutable_merge_origin_moved_info() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.merge_origin_moved_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::MergeOriginMovedArchive>(GetArenaForAllocation());
    _impl_.merge_origin_moved_info_ = p;
  }
  return _impl_.merge_origin_moved_info_;
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::mutable_merge_origin_moved_info() {
  ::TSCE::MergeOriginMovedArchive* _msg = _internal_mutable_merge_origin_moved_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.merge_origin_moved_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_merge_origin_moved_info(::TSCE::MergeOriginMovedArchive* merge_origin_moved_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_origin_moved_info_);
  }
  if (merge_origin_moved_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_origin_moved_info));
    if (message_arena != submessage_arena) {
      merge_origin_moved_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_origin_moved_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.merge_origin_moved_info_ = merge_origin_moved_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.merge_origin_moved_info)
}

// optional .TSCE.MergeSourceArchive merge_source = 13;
inline bool FormulaRewriteSpecArchive::_internal_has_merge_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merge_source_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_merge_source() const {
  return _internal_has_merge_source();
}
inline const ::TSCE::MergeSourceArchive& FormulaRewriteSpecArchive::_internal_merge_source() const {
  const ::TSCE::MergeSourceArchive* p = _impl_.merge_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::MergeSourceArchive&>(
      ::TSCE::_MergeSourceArchive_default_instance_);
}
inline const ::TSCE::MergeSourceArchive& FormulaRewriteSpecArchive::merge_source() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.merge_source)
  return _internal_merge_source();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_merge_source(
    ::TSCE::MergeSourceArchive* merge_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_source_);
  }
  _impl_.merge_source_ = merge_source;
  if (merge_source) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.merge_source)
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::release_merge_source() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSCE::MergeSourceArchive* temp = _impl_.merge_source_;
  _impl_.merge_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::unsafe_arena_release_merge_source() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.merge_source)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSCE::MergeSourceArchive* temp = _impl_.merge_source_;
  _impl_.merge_source_ = nullptr;
  return temp;
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::_internal_mutable_merge_source() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.merge_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::MergeSourceArchive>(GetArenaForAllocation());
    _impl_.merge_source_ = p;
  }
  return _impl_.merge_source_;
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::mutable_merge_source() {
  ::TSCE::MergeSourceArchive* _msg = _internal_mutable_merge_source();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.merge_source)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_merge_source(::TSCE::MergeSourceArchive* merge_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_source_);
  }
  if (merge_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_source));
    if (message_arena != submessage_arena) {
      merge_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.merge_source_ = merge_source;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.merge_source)
}

// optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 14;
inline bool FormulaRewriteSpecArchive::_internal_has_group_node_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_node_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_group_node_info() const {
  return _internal_has_group_node_info();
}
inline const ::TSCE::RewriteGroupNodeUIDInfoArchive& FormulaRewriteSpecArchive::_internal_group_node_info() const {
  const ::TSCE::RewriteGroupNodeUIDInfoArchive* p = _impl_.group_node_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteGroupNodeUIDInfoArchive&>(
      ::TSCE::_RewriteGroupNodeUIDInfoArchive_default_instance_);
}
inline const ::TSCE::RewriteGroupNodeUIDInfoArchive& FormulaRewriteSpecArchive::group_node_info() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.group_node_info)
  return _internal_group_node_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_group_node_info(
    ::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_node_info_);
  }
  _impl_.group_node_info_ = group_node_info;
  if (group_node_info) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.group_node_info)
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::release_group_node_info() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSCE::RewriteGroupNodeUIDInfoArchive* temp = _impl_.group_node_info_;
  _impl_.group_node_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_group_node_info() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.group_node_info)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSCE::RewriteGroupNodeUIDInfoArchive* temp = _impl_.group_node_info_;
  _impl_.group_node_info_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_group_node_info() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.group_node_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteGroupNodeUIDInfoArchive>(GetArenaForAllocation());
    _impl_.group_node_info_ = p;
  }
  return _impl_.group_node_info_;
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::mutable_group_node_info() {
  ::TSCE::RewriteGroupNodeUIDInfoArchive* _msg = _internal_mutable_group_node_info();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.group_node_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_group_node_info(::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_node_info_);
  }
  if (group_node_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_info));
    if (message_arena != submessage_arena) {
      group_node_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_node_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.group_node_info_ = group_node_info;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.group_node_info)
}

// optional .TSCE.GroupByChangeArchive groupby_change = 15;
inline bool FormulaRewriteSpecArchive::_internal_has_groupby_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.groupby_change_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_groupby_change() const {
  return _internal_has_groupby_change();
}
inline const ::TSCE::GroupByChangeArchive& FormulaRewriteSpecArchive::_internal_groupby_change() const {
  const ::TSCE::GroupByChangeArchive* p = _impl_.groupby_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::GroupByChangeArchive&>(
      ::TSCE::_GroupByChangeArchive_default_instance_);
}
inline const ::TSCE::GroupByChangeArchive& FormulaRewriteSpecArchive::groupby_change() const {
  // @@protoc_insertion_point(field_get:TST.FormulaRewriteSpecArchive.groupby_change)
  return _internal_groupby_change();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_groupby_change(
    ::TSCE::GroupByChangeArchive* groupby_change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.groupby_change_);
  }
  _impl_.groupby_change_ = groupby_change;
  if (groupby_change) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaRewriteSpecArchive.groupby_change)
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::release_groupby_change() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSCE::GroupByChangeArchive* temp = _impl_.groupby_change_;
  _impl_.groupby_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::unsafe_arena_release_groupby_change() {
  // @@protoc_insertion_point(field_release:TST.FormulaRewriteSpecArchive.groupby_change)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSCE::GroupByChangeArchive* temp = _impl_.groupby_change_;
  _impl_.groupby_change_ = nullptr;
  return temp;
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::_internal_mutable_groupby_change() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.groupby_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::GroupByChangeArchive>(GetArenaForAllocation());
    _impl_.groupby_change_ = p;
  }
  return _impl_.groupby_change_;
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::mutable_groupby_change() {
  ::TSCE::GroupByChangeArchive* _msg = _internal_mutable_groupby_change();
  // @@protoc_insertion_point(field_mutable:TST.FormulaRewriteSpecArchive.groupby_change)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_groupby_change(::TSCE::GroupByChangeArchive* groupby_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.groupby_change_);
  }
  if (groupby_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupby_change));
    if (message_arena != submessage_arena) {
      groupby_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupby_change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.groupby_change_ = groupby_change;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaRewriteSpecArchive.groupby_change)
}

// -------------------------------------------------------------------

// CommandRewriteFormulasForTransposeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFormulasForTransposeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForTransposeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFormulasForTransposeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForTransposeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForTransposeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForTransposeArchive.super)
  return _internal_super();
}
inline void CommandRewriteFormulasForTransposeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTransposeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTransposeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForTransposeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTransposeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTransposeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForTransposeArchive.super)
  return _msg;
}
inline void CommandRewriteFormulasForTransposeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewriteFormulasForTransposeArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForTransposeArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteFormulasForTransposeArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteFormulasForTransposeArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteFormulasForTransposeArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForTransposeArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteFormulasForTransposeArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFormulasForTransposeArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFormulasForTransposeArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForTransposeArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFormulasForTransposeArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFormulasForTransposeArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForTransposeArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteFormulasForTransposeArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.rewrite_spec)
}

// required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
inline bool CommandRewriteFormulasForTransposeArchive::_internal_has_formulas_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formulas_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForTransposeArchive::has_formulas_to_rewrite() const {
  return _internal_has_formulas_to_rewrite();
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteFormulasForTransposeArchive::_internal_formulas_to_rewrite() const {
  const ::TSCE::FormulasForUndoArchive* p = _impl_.formulas_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulasForUndoArchive&>(
      ::TSCE::_FormulasForUndoArchive_default_instance_);
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteFormulasForTransposeArchive::formulas_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForTransposeArchive.formulas_to_rewrite)
  return _internal_formulas_to_rewrite();
}
inline void CommandRewriteFormulasForTransposeArchive::unsafe_arena_set_allocated_formulas_to_rewrite(
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  if (formulas_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.formulas_to_rewrite)
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteFormulasForTransposeArchive::release_formulas_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteFormulasForTransposeArchive::unsafe_arena_release_formulas_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForTransposeArchive.formulas_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteFormulasForTransposeArchive::_internal_mutable_formulas_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formulas_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(GetArenaForAllocation());
    _impl_.formulas_to_rewrite_ = p;
  }
  return _impl_.formulas_to_rewrite_;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteFormulasForTransposeArchive::mutable_formulas_to_rewrite() {
  ::TSCE::FormulasForUndoArchive* _msg = _internal_mutable_formulas_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForTransposeArchive.formulas_to_rewrite)
  return _msg;
}
inline void CommandRewriteFormulasForTransposeArchive::set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  if (formulas_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_to_rewrite));
    if (message_arena != submessage_arena) {
      formulas_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.formulas_to_rewrite)
}

// optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
inline bool CommandRewriteFormulasForTransposeArchive::_internal_has_warningset_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.warningset_map_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForTransposeArchive::has_warningset_map() const {
  return _internal_has_warningset_map();
}
inline const ::TST::ImportWarningSetByCellRefArchive& CommandRewriteFormulasForTransposeArchive::_internal_warningset_map() const {
  const ::TST::ImportWarningSetByCellRefArchive* p = _impl_.warningset_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ImportWarningSetByCellRefArchive&>(
      ::TST::_ImportWarningSetByCellRefArchive_default_instance_);
}
inline const ::TST::ImportWarningSetByCellRefArchive& CommandRewriteFormulasForTransposeArchive::warningset_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForTransposeArchive.warningset_map)
  return _internal_warningset_map();
}
inline void CommandRewriteFormulasForTransposeArchive::unsafe_arena_set_allocated_warningset_map(
    ::TST::ImportWarningSetByCellRefArchive* warningset_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.warningset_map_);
  }
  _impl_.warningset_map_ = warningset_map;
  if (warningset_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.warningset_map)
}
inline ::TST::ImportWarningSetByCellRefArchive* CommandRewriteFormulasForTransposeArchive::release_warningset_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::ImportWarningSetByCellRefArchive* temp = _impl_.warningset_map_;
  _impl_.warningset_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ImportWarningSetByCellRefArchive* CommandRewriteFormulasForTransposeArchive::unsafe_arena_release_warningset_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForTransposeArchive.warningset_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::ImportWarningSetByCellRefArchive* temp = _impl_.warningset_map_;
  _impl_.warningset_map_ = nullptr;
  return temp;
}
inline ::TST::ImportWarningSetByCellRefArchive* CommandRewriteFormulasForTransposeArchive::_internal_mutable_warningset_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.warningset_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ImportWarningSetByCellRefArchive>(GetArenaForAllocation());
    _impl_.warningset_map_ = p;
  }
  return _impl_.warningset_map_;
}
inline ::TST::ImportWarningSetByCellRefArchive* CommandRewriteFormulasForTransposeArchive::mutable_warningset_map() {
  ::TST::ImportWarningSetByCellRefArchive* _msg = _internal_mutable_warningset_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForTransposeArchive.warningset_map)
  return _msg;
}
inline void CommandRewriteFormulasForTransposeArchive::set_allocated_warningset_map(::TST::ImportWarningSetByCellRefArchive* warningset_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.warningset_map_);
  }
  if (warningset_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(warningset_map));
    if (message_arena != submessage_arena) {
      warningset_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warningset_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.warningset_map_ = warningset_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForTransposeArchive.warningset_map)
}

// -------------------------------------------------------------------

// CommandRewriteTableFormulasForRewriteSpecArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteTableFormulasForRewriteSpecArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteTableFormulasForRewriteSpecArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteTableFormulasForRewriteSpecArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteTableFormulasForRewriteSpecArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteTableFormulasForRewriteSpecArchive.super)
  return _internal_super();
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteTableFormulasForRewriteSpecArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteTableFormulasForRewriteSpecArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteTableFormulasForRewriteSpecArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteTableFormulasForRewriteSpecArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteTableFormulasForRewriteSpecArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteTableFormulasForRewriteSpecArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteTableFormulasForRewriteSpecArchive.super)
  return _msg;
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteTableFormulasForRewriteSpecArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewriteTableFormulasForRewriteSpecArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteTableFormulasForRewriteSpecArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteTableFormulasForRewriteSpecArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteTableFormulasForRewriteSpecArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteTableFormulasForRewriteSpecArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteTableFormulasForRewriteSpecArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTableFormulasForRewriteSpecArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTableFormulasForRewriteSpecArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteTableFormulasForRewriteSpecArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTableFormulasForRewriteSpecArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTableFormulasForRewriteSpecArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteTableFormulasForRewriteSpecArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteTableFormulasForRewriteSpecArchive.rewrite_spec)
}

// required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
inline bool CommandRewriteTableFormulasForRewriteSpecArchive::_internal_has_formulas_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formulas_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteTableFormulasForRewriteSpecArchive::has_formulas_to_rewrite() const {
  return _internal_has_formulas_to_rewrite();
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteTableFormulasForRewriteSpecArchive::_internal_formulas_to_rewrite() const {
  const ::TSCE::FormulasForUndoArchive* p = _impl_.formulas_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulasForUndoArchive&>(
      ::TSCE::_FormulasForUndoArchive_default_instance_);
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteTableFormulasForRewriteSpecArchive::formulas_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteTableFormulasForRewriteSpecArchive.formulas_to_rewrite)
  return _internal_formulas_to_rewrite();
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::unsafe_arena_set_allocated_formulas_to_rewrite(
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  if (formulas_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteTableFormulasForRewriteSpecArchive.formulas_to_rewrite)
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteTableFormulasForRewriteSpecArchive::release_formulas_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteTableFormulasForRewriteSpecArchive::unsafe_arena_release_formulas_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteTableFormulasForRewriteSpecArchive.formulas_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteTableFormulasForRewriteSpecArchive::_internal_mutable_formulas_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formulas_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(GetArenaForAllocation());
    _impl_.formulas_to_rewrite_ = p;
  }
  return _impl_.formulas_to_rewrite_;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteTableFormulasForRewriteSpecArchive::mutable_formulas_to_rewrite() {
  ::TSCE::FormulasForUndoArchive* _msg = _internal_mutable_formulas_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteTableFormulasForRewriteSpecArchive.formulas_to_rewrite)
  return _msg;
}
inline void CommandRewriteTableFormulasForRewriteSpecArchive::set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  if (formulas_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_to_rewrite));
    if (message_arena != submessage_arena) {
      formulas_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteTableFormulasForRewriteSpecArchive.formulas_to_rewrite)
}

// -------------------------------------------------------------------

// CommandRewriteMergeFormulasArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteMergeFormulasArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteMergeFormulasArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteMergeFormulasArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteMergeFormulasArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteMergeFormulasArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteMergeFormulasArchive.super)
  return _internal_super();
}
inline void CommandRewriteMergeFormulasArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteMergeFormulasArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteMergeFormulasArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteMergeFormulasArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteMergeFormulasArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteMergeFormulasArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteMergeFormulasArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteMergeFormulasArchive.super)
  return _msg;
}
inline void CommandRewriteMergeFormulasArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteMergeFormulasArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewriteMergeFormulasArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteMergeFormulasArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteMergeFormulasArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteMergeFormulasArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteMergeFormulasArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteMergeFormulasArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteMergeFormulasArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteMergeFormulasArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteMergeFormulasArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteMergeFormulasArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteMergeFormulasArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteMergeFormulasArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteMergeFormulasArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteMergeFormulasArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteMergeFormulasArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteMergeFormulasArchive.rewrite_spec)
}

// required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
inline bool CommandRewriteMergeFormulasArchive::_internal_has_formulas_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formulas_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteMergeFormulasArchive::has_formulas_to_rewrite() const {
  return _internal_has_formulas_to_rewrite();
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteMergeFormulasArchive::_internal_formulas_to_rewrite() const {
  const ::TSCE::FormulasForUndoArchive* p = _impl_.formulas_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulasForUndoArchive&>(
      ::TSCE::_FormulasForUndoArchive_default_instance_);
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteMergeFormulasArchive::formulas_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteMergeFormulasArchive.formulas_to_rewrite)
  return _internal_formulas_to_rewrite();
}
inline void CommandRewriteMergeFormulasArchive::unsafe_arena_set_allocated_formulas_to_rewrite(
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  if (formulas_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteMergeFormulasArchive.formulas_to_rewrite)
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteMergeFormulasArchive::release_formulas_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteMergeFormulasArchive::unsafe_arena_release_formulas_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteMergeFormulasArchive.formulas_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteMergeFormulasArchive::_internal_mutable_formulas_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formulas_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(GetArenaForAllocation());
    _impl_.formulas_to_rewrite_ = p;
  }
  return _impl_.formulas_to_rewrite_;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteMergeFormulasArchive::mutable_formulas_to_rewrite() {
  ::TSCE::FormulasForUndoArchive* _msg = _internal_mutable_formulas_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteMergeFormulasArchive.formulas_to_rewrite)
  return _msg;
}
inline void CommandRewriteMergeFormulasArchive::set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  if (formulas_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_to_rewrite));
    if (message_arena != submessage_arena) {
      formulas_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteMergeFormulasArchive.formulas_to_rewrite)
}

// -------------------------------------------------------------------

// CommandRewriteCategoryFormulasArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteCategoryFormulasArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteCategoryFormulasArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteCategoryFormulasArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteCategoryFormulasArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteCategoryFormulasArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteCategoryFormulasArchive.super)
  return _internal_super();
}
inline void CommandRewriteCategoryFormulasArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteCategoryFormulasArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteCategoryFormulasArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteCategoryFormulasArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteCategoryFormulasArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteCategoryFormulasArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteCategoryFormulasArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteCategoryFormulasArchive.super)
  return _msg;
}
inline void CommandRewriteCategoryFormulasArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteCategoryFormulasArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewriteCategoryFormulasArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteCategoryFormulasArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteCategoryFormulasArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteCategoryFormulasArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteCategoryFormulasArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteCategoryFormulasArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteCategoryFormulasArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteCategoryFormulasArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteCategoryFormulasArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteCategoryFormulasArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteCategoryFormulasArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteCategoryFormulasArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteCategoryFormulasArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteCategoryFormulasArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteCategoryFormulasArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteCategoryFormulasArchive.rewrite_spec)
}

// required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
inline bool CommandRewriteCategoryFormulasArchive::_internal_has_formulas_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formulas_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteCategoryFormulasArchive::has_formulas_to_rewrite() const {
  return _internal_has_formulas_to_rewrite();
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteCategoryFormulasArchive::_internal_formulas_to_rewrite() const {
  const ::TSCE::FormulasForUndoArchive* p = _impl_.formulas_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulasForUndoArchive&>(
      ::TSCE::_FormulasForUndoArchive_default_instance_);
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteCategoryFormulasArchive::formulas_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteCategoryFormulasArchive.formulas_to_rewrite)
  return _internal_formulas_to_rewrite();
}
inline void CommandRewriteCategoryFormulasArchive::unsafe_arena_set_allocated_formulas_to_rewrite(
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  if (formulas_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteCategoryFormulasArchive.formulas_to_rewrite)
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteCategoryFormulasArchive::release_formulas_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteCategoryFormulasArchive::unsafe_arena_release_formulas_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteCategoryFormulasArchive.formulas_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteCategoryFormulasArchive::_internal_mutable_formulas_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formulas_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(GetArenaForAllocation());
    _impl_.formulas_to_rewrite_ = p;
  }
  return _impl_.formulas_to_rewrite_;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteCategoryFormulasArchive::mutable_formulas_to_rewrite() {
  ::TSCE::FormulasForUndoArchive* _msg = _internal_mutable_formulas_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteCategoryFormulasArchive.formulas_to_rewrite)
  return _msg;
}
inline void CommandRewriteCategoryFormulasArchive::set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  if (formulas_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_to_rewrite));
    if (message_arena != submessage_arena) {
      formulas_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteCategoryFormulasArchive.formulas_to_rewrite)
}

// -------------------------------------------------------------------

// CommandRewriteFilterFormulasForTableResizeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFilterFormulasForTableResizeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForTableResizeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFilterFormulasForTableResizeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForTableResizeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForTableResizeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
  return _internal_super();
}
inline void CommandRewriteFilterFormulasForTableResizeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
  return _msg;
}
inline void CommandRewriteFilterFormulasForTableResizeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
}

// -------------------------------------------------------------------

// CommandRewriteFilterFormulasForRewriteSpecArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForRewriteSpecArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForRewriteSpecArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.super)
  return _internal_super();
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.super)
  return _msg;
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.super)
}

// required .TSP.Reference filter_set = 2;
inline bool CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_has_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_set_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForRewriteSpecArchive::has_filter_set() const {
  return _internal_has_filter_set();
}
inline const ::TSP::Reference& CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_filter_set() const {
  const ::TSP::Reference* p = _impl_.filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRewriteFilterFormulasForRewriteSpecArchive::filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.filter_set)
  return _internal_filter_set();
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::unsafe_arena_set_allocated_filter_set(
    ::TSP::Reference* filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  _impl_.filter_set_ = filter_set;
  if (filter_set) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.filter_set)
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForRewriteSpecArchive::release_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForRewriteSpecArchive::unsafe_arena_release_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.filter_set)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_mutable_filter_set() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.filter_set_ = p;
  }
  return _impl_.filter_set_;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForRewriteSpecArchive::mutable_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.filter_set)
  return _msg;
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::set_allocated_filter_set(::TSP::Reference* filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  if (filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_set));
    if (message_arena != submessage_arena) {
      filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filter_set_ = filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.filter_set)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 3;
inline bool CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForRewriteSpecArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteFilterFormulasForRewriteSpecArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteFilterFormulasForRewriteSpecArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteFilterFormulasForRewriteSpecArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForRewriteSpecArchive.rewrite_spec)
}

// -------------------------------------------------------------------

// CommandRewriteConditionalStylesForRewriteSpecArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.super)
  return _internal_super();
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.super)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.rewrite_spec)
}

// optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_has_formulas_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formulas_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::has_formulas_to_rewrite() const {
  return _internal_has_formulas_to_rewrite();
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_formulas_to_rewrite() const {
  const ::TSCE::FormulasForUndoArchive* p = _impl_.formulas_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulasForUndoArchive&>(
      ::TSCE::_FormulasForUndoArchive_default_instance_);
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::formulas_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.formulas_to_rewrite)
  return _internal_formulas_to_rewrite();
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_set_allocated_formulas_to_rewrite(
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  if (formulas_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.formulas_to_rewrite)
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::release_formulas_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_release_formulas_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.formulas_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_mutable_formulas_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formulas_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(GetArenaForAllocation());
    _impl_.formulas_to_rewrite_ = p;
  }
  return _impl_.formulas_to_rewrite_;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::mutable_formulas_to_rewrite() {
  ::TSCE::FormulasForUndoArchive* _msg = _internal_mutable_formulas_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.formulas_to_rewrite)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  if (formulas_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_to_rewrite));
    if (message_arena != submessage_arena) {
      formulas_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.formulas_to_rewrite)
}

// optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_has_conditional_style_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conditional_style_sets_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRewriteSpecArchive::has_conditional_style_sets() const {
  return _internal_has_conditional_style_sets();
}
inline const ::TSCE::ExpandedCellRefObjectMapArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_conditional_style_sets() const {
  const ::TSCE::ExpandedCellRefObjectMapArchive* p = _impl_.conditional_style_sets_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ExpandedCellRefObjectMapArchive&>(
      ::TSCE::_ExpandedCellRefObjectMapArchive_default_instance_);
}
inline const ::TSCE::ExpandedCellRefObjectMapArchive& CommandRewriteConditionalStylesForRewriteSpecArchive::conditional_style_sets() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.conditional_style_sets)
  return _internal_conditional_style_sets();
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_set_allocated_conditional_style_sets(
    ::TSCE::ExpandedCellRefObjectMapArchive* conditional_style_sets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  if (conditional_style_sets) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.conditional_style_sets)
}
inline ::TSCE::ExpandedCellRefObjectMapArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::release_conditional_style_sets() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::ExpandedCellRefObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ExpandedCellRefObjectMapArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::unsafe_arena_release_conditional_style_sets() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.conditional_style_sets)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::ExpandedCellRefObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
  return temp;
}
inline ::TSCE::ExpandedCellRefObjectMapArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::_internal_mutable_conditional_style_sets() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.conditional_style_sets_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ExpandedCellRefObjectMapArchive>(GetArenaForAllocation());
    _impl_.conditional_style_sets_ = p;
  }
  return _impl_.conditional_style_sets_;
}
inline ::TSCE::ExpandedCellRefObjectMapArchive* CommandRewriteConditionalStylesForRewriteSpecArchive::mutable_conditional_style_sets() {
  ::TSCE::ExpandedCellRefObjectMapArchive* _msg = _internal_mutable_conditional_style_sets();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.conditional_style_sets)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRewriteSpecArchive::set_allocated_conditional_style_sets(::TSCE::ExpandedCellRefObjectMapArchive* conditional_style_sets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  if (conditional_style_sets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_sets));
    if (message_arena != submessage_arena) {
      conditional_style_sets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style_sets, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRewriteSpecArchive.conditional_style_sets)
}

// -------------------------------------------------------------------

// CommandRewritePivotOwnerFormulasArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewritePivotOwnerFormulasArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewritePivotOwnerFormulasArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewritePivotOwnerFormulasArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewritePivotOwnerFormulasArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewritePivotOwnerFormulasArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePivotOwnerFormulasArchive.super)
  return _internal_super();
}
inline void CommandRewritePivotOwnerFormulasArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewritePivotOwnerFormulasArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewritePivotOwnerFormulasArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewritePivotOwnerFormulasArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewritePivotOwnerFormulasArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewritePivotOwnerFormulasArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewritePivotOwnerFormulasArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePivotOwnerFormulasArchive.super)
  return _msg;
}
inline void CommandRewritePivotOwnerFormulasArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewritePivotOwnerFormulasArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewritePivotOwnerFormulasArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewritePivotOwnerFormulasArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewritePivotOwnerFormulasArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewritePivotOwnerFormulasArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewritePivotOwnerFormulasArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePivotOwnerFormulasArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewritePivotOwnerFormulasArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewritePivotOwnerFormulasArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePivotOwnerFormulasArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePivotOwnerFormulasArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewritePivotOwnerFormulasArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePivotOwnerFormulasArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePivotOwnerFormulasArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePivotOwnerFormulasArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewritePivotOwnerFormulasArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewritePivotOwnerFormulasArchive.rewrite_spec)
}

// required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
inline bool CommandRewritePivotOwnerFormulasArchive::_internal_has_formulas_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formulas_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewritePivotOwnerFormulasArchive::has_formulas_to_rewrite() const {
  return _internal_has_formulas_to_rewrite();
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewritePivotOwnerFormulasArchive::_internal_formulas_to_rewrite() const {
  const ::TSCE::FormulasForUndoArchive* p = _impl_.formulas_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulasForUndoArchive&>(
      ::TSCE::_FormulasForUndoArchive_default_instance_);
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewritePivotOwnerFormulasArchive::formulas_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePivotOwnerFormulasArchive.formulas_to_rewrite)
  return _internal_formulas_to_rewrite();
}
inline void CommandRewritePivotOwnerFormulasArchive::unsafe_arena_set_allocated_formulas_to_rewrite(
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  if (formulas_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewritePivotOwnerFormulasArchive.formulas_to_rewrite)
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePivotOwnerFormulasArchive::release_formulas_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePivotOwnerFormulasArchive::unsafe_arena_release_formulas_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewritePivotOwnerFormulasArchive.formulas_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePivotOwnerFormulasArchive::_internal_mutable_formulas_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formulas_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(GetArenaForAllocation());
    _impl_.formulas_to_rewrite_ = p;
  }
  return _impl_.formulas_to_rewrite_;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePivotOwnerFormulasArchive::mutable_formulas_to_rewrite() {
  ::TSCE::FormulasForUndoArchive* _msg = _internal_mutable_formulas_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePivotOwnerFormulasArchive.formulas_to_rewrite)
  return _msg;
}
inline void CommandRewritePivotOwnerFormulasArchive::set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  if (formulas_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_to_rewrite));
    if (message_arena != submessage_arena) {
      formulas_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewritePivotOwnerFormulasArchive.formulas_to_rewrite)
}

// -------------------------------------------------------------------

// CommandMergeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMergeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMergeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMergeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMergeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMergeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeArchive.super)
  return _internal_super();
}
inline void CommandMergeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeArchive.super)
}
inline ::TST::TableCommandArchive* CommandMergeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMergeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMergeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMergeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeArchive.super)
  return _msg;
}
inline void CommandMergeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeArchive.super)
}

// required .TST.CellUIDListArchive cell_uid_list = 2;
inline bool CommandMergeArchive::_internal_has_cell_uid_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_list_ != nullptr);
  return value;
}
inline bool CommandMergeArchive::has_cell_uid_list() const {
  return _internal_has_cell_uid_list();
}
inline const ::TST::CellUIDListArchive& CommandMergeArchive::_internal_cell_uid_list() const {
  const ::TST::CellUIDListArchive* p = _impl_.cell_uid_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CommandMergeArchive::cell_uid_list() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeArchive.cell_uid_list)
  return _internal_cell_uid_list();
}
inline void CommandMergeArchive::unsafe_arena_set_allocated_cell_uid_list(
    ::TST::CellUIDListArchive* cell_uid_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  if (cell_uid_list) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeArchive.cell_uid_list)
}
inline ::TST::CellUIDListArchive* CommandMergeArchive::release_cell_uid_list() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* CommandMergeArchive::unsafe_arena_release_cell_uid_list() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeArchive.cell_uid_list)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uid_list_;
  _impl_.cell_uid_list_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CommandMergeArchive::_internal_mutable_cell_uid_list() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uid_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.cell_uid_list_ = p;
  }
  return _impl_.cell_uid_list_;
}
inline ::TST::CellUIDListArchive* CommandMergeArchive::mutable_cell_uid_list() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_cell_uid_list();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeArchive.cell_uid_list)
  return _msg;
}
inline void CommandMergeArchive::set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_list_);
  }
  if (cell_uid_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_list));
    if (message_arena != submessage_arena) {
      cell_uid_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uid_list_ = cell_uid_list;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeArchive.cell_uid_list)
}

// optional .TSP.Reference undo_cell_map = 3;
inline bool CommandMergeArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandMergeArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TSP::Reference& CommandMergeArchive::_internal_undo_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMergeArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandMergeArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TSP::Reference* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeArchive.undo_cell_map)
}
inline ::TSP::Reference* CommandMergeArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMergeArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMergeArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TSP::Reference* CommandMergeArchive::mutable_undo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeArchive.undo_cell_map)
  return _msg;
}
inline void CommandMergeArchive::set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeArchive.undo_cell_map)
}

// optional .TSP.Reference undo_formula_rewrite_command = 4;
inline bool CommandMergeArchive::_internal_has_undo_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandMergeArchive::has_undo_formula_rewrite_command() const {
  return _internal_has_undo_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandMergeArchive::_internal_undo_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMergeArchive::undo_formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeArchive.undo_formula_rewrite_command)
  return _internal_undo_formula_rewrite_command();
}
inline void CommandMergeArchive::unsafe_arena_set_allocated_undo_formula_rewrite_command(
    ::TSP::Reference* undo_formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  if (undo_formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeArchive.undo_formula_rewrite_command)
}
inline ::TSP::Reference* CommandMergeArchive::release_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMergeArchive::unsafe_arena_release_undo_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeArchive.undo_formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMergeArchive::_internal_mutable_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_formula_rewrite_command_ = p;
  }
  return _impl_.undo_formula_rewrite_command_;
}
inline ::TSP::Reference* CommandMergeArchive::mutable_undo_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeArchive.undo_formula_rewrite_command)
  return _msg;
}
inline void CommandMergeArchive::set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  if (undo_formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_formula_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeArchive.undo_formula_rewrite_command)
}

// optional uint32 merge_owner_rollback = 5;
inline bool CommandMergeArchive::_internal_has_merge_owner_rollback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandMergeArchive::has_merge_owner_rollback() const {
  return _internal_has_merge_owner_rollback();
}
inline void CommandMergeArchive::clear_merge_owner_rollback() {
  _impl_.merge_owner_rollback_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandMergeArchive::_internal_merge_owner_rollback() const {
  return _impl_.merge_owner_rollback_;
}
inline uint32_t CommandMergeArchive::merge_owner_rollback() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeArchive.merge_owner_rollback)
  return _internal_merge_owner_rollback();
}
inline void CommandMergeArchive::_internal_set_merge_owner_rollback(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.merge_owner_rollback_ = value;
}
inline void CommandMergeArchive::set_merge_owner_rollback(uint32_t value) {
  _internal_set_merge_owner_rollback(value);
  // @@protoc_insertion_point(field_set:TST.CommandMergeArchive.merge_owner_rollback)
}

// optional .TSP.Reference commit_cell_map = 6;
inline bool CommandMergeArchive::_internal_has_commit_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commit_cell_map_ != nullptr);
  return value;
}
inline bool CommandMergeArchive::has_commit_cell_map() const {
  return _internal_has_commit_cell_map();
}
inline const ::TSP::Reference& CommandMergeArchive::_internal_commit_cell_map() const {
  const ::TSP::Reference* p = _impl_.commit_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMergeArchive::commit_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeArchive.commit_cell_map)
  return _internal_commit_cell_map();
}
inline void CommandMergeArchive::unsafe_arena_set_allocated_commit_cell_map(
    ::TSP::Reference* commit_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_cell_map_);
  }
  _impl_.commit_cell_map_ = commit_cell_map;
  if (commit_cell_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeArchive.commit_cell_map)
}
inline ::TSP::Reference* CommandMergeArchive::release_commit_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.commit_cell_map_;
  _impl_.commit_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMergeArchive::unsafe_arena_release_commit_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeArchive.commit_cell_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.commit_cell_map_;
  _impl_.commit_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMergeArchive::_internal_mutable_commit_cell_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.commit_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.commit_cell_map_ = p;
  }
  return _impl_.commit_cell_map_;
}
inline ::TSP::Reference* CommandMergeArchive::mutable_commit_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_commit_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeArchive.commit_cell_map)
  return _msg;
}
inline void CommandMergeArchive::set_allocated_commit_cell_map(::TSP::Reference* commit_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_cell_map_);
  }
  if (commit_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_cell_map));
    if (message_arena != submessage_arena) {
      commit_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.commit_cell_map_ = commit_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeArchive.commit_cell_map)
}

// -------------------------------------------------------------------

// CommandInverseMergeArchive

// required .TST.CommandApplyCellMapArchive super = 1;
inline bool CommandInverseMergeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandInverseMergeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandInverseMergeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandApplyCellMapArchive& CommandInverseMergeArchive::_internal_super() const {
  const ::TST::CommandApplyCellMapArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandApplyCellMapArchive&>(
      ::TST::_CommandApplyCellMapArchive_default_instance_);
}
inline const ::TST::CommandApplyCellMapArchive& CommandInverseMergeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandInverseMergeArchive.super)
  return _internal_super();
}
inline void CommandInverseMergeArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandApplyCellMapArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInverseMergeArchive.super)
}
inline ::TST::CommandApplyCellMapArchive* CommandInverseMergeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandApplyCellMapArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandApplyCellMapArchive* CommandInverseMergeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandInverseMergeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandApplyCellMapArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandApplyCellMapArchive* CommandInverseMergeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandApplyCellMapArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandApplyCellMapArchive* CommandInverseMergeArchive::mutable_super() {
  ::TST::CommandApplyCellMapArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandInverseMergeArchive.super)
  return _msg;
}
inline void CommandInverseMergeArchive::set_allocated_super(::TST::CommandApplyCellMapArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInverseMergeArchive.super)
}

// required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
inline bool CommandInverseMergeArchive::_internal_has_merge_source_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merge_source_cell_uid_ != nullptr);
  return value;
}
inline bool CommandInverseMergeArchive::has_merge_source_cell_uid() const {
  return _internal_has_merge_source_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& CommandInverseMergeArchive::_internal_merge_source_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.merge_source_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& CommandInverseMergeArchive::merge_source_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandInverseMergeArchive.merge_source_cell_uid)
  return _internal_merge_source_cell_uid();
}
inline void CommandInverseMergeArchive::unsafe_arena_set_allocated_merge_source_cell_uid(
    ::TSP::UUIDCoordArchive* merge_source_cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_source_cell_uid_);
  }
  _impl_.merge_source_cell_uid_ = merge_source_cell_uid;
  if (merge_source_cell_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInverseMergeArchive.merge_source_cell_uid)
}
inline ::TSP::UUIDCoordArchive* CommandInverseMergeArchive::release_merge_source_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDCoordArchive* temp = _impl_.merge_source_cell_uid_;
  _impl_.merge_source_cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandInverseMergeArchive::unsafe_arena_release_merge_source_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandInverseMergeArchive.merge_source_cell_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDCoordArchive* temp = _impl_.merge_source_cell_uid_;
  _impl_.merge_source_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandInverseMergeArchive::_internal_mutable_merge_source_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.merge_source_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.merge_source_cell_uid_ = p;
  }
  return _impl_.merge_source_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* CommandInverseMergeArchive::mutable_merge_source_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_merge_source_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandInverseMergeArchive.merge_source_cell_uid)
  return _msg;
}
inline void CommandInverseMergeArchive::set_allocated_merge_source_cell_uid(::TSP::UUIDCoordArchive* merge_source_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merge_source_cell_uid_);
  }
  if (merge_source_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_source_cell_uid));
    if (message_arena != submessage_arena) {
      merge_source_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_source_cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.merge_source_cell_uid_ = merge_source_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInverseMergeArchive.merge_source_cell_uid)
}

// -------------------------------------------------------------------

// CommandUnmergeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandUnmergeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandUnmergeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandUnmergeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandUnmergeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandUnmergeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandUnmergeArchive.super)
  return _internal_super();
}
inline void CommandUnmergeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandUnmergeArchive.super)
}
inline ::TST::TableCommandArchive* CommandUnmergeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandUnmergeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandUnmergeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandUnmergeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandUnmergeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandUnmergeArchive.super)
  return _msg;
}
inline void CommandUnmergeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandUnmergeArchive.super)
}

// repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
inline int CommandUnmergeArchive::_internal_unmerge_uid_ranges_size() const {
  return _impl_.unmerge_uid_ranges_.size();
}
inline int CommandUnmergeArchive::unmerge_uid_ranges_size() const {
  return _internal_unmerge_uid_ranges_size();
}
inline ::TSP::UUIDRectArchive* CommandUnmergeArchive::mutable_unmerge_uid_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandUnmergeArchive.unmerge_uid_ranges)
  return _impl_.unmerge_uid_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
CommandUnmergeArchive::mutable_unmerge_uid_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandUnmergeArchive.unmerge_uid_ranges)
  return &_impl_.unmerge_uid_ranges_;
}
inline const ::TSP::UUIDRectArchive& CommandUnmergeArchive::_internal_unmerge_uid_ranges(int index) const {
  return _impl_.unmerge_uid_ranges_.Get(index);
}
inline const ::TSP::UUIDRectArchive& CommandUnmergeArchive::unmerge_uid_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandUnmergeArchive.unmerge_uid_ranges)
  return _internal_unmerge_uid_ranges(index);
}
inline ::TSP::UUIDRectArchive* CommandUnmergeArchive::_internal_add_unmerge_uid_ranges() {
  return _impl_.unmerge_uid_ranges_.Add();
}
inline ::TSP::UUIDRectArchive* CommandUnmergeArchive::add_unmerge_uid_ranges() {
  ::TSP::UUIDRectArchive* _add = _internal_add_unmerge_uid_ranges();
  // @@protoc_insertion_point(field_add:TST.CommandUnmergeArchive.unmerge_uid_ranges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
CommandUnmergeArchive::unmerge_uid_ranges() const {
  // @@protoc_insertion_point(field_list:TST.CommandUnmergeArchive.unmerge_uid_ranges)
  return _impl_.unmerge_uid_ranges_;
}

// optional .TSP.Reference undo_cell_map = 3;
inline bool CommandUnmergeArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandUnmergeArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TSP::Reference& CommandUnmergeArchive::_internal_undo_cell_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandUnmergeArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandUnmergeArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandUnmergeArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TSP::Reference* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandUnmergeArchive.undo_cell_map)
}
inline ::TSP::Reference* CommandUnmergeArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandUnmergeArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandUnmergeArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandUnmergeArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TSP::Reference* CommandUnmergeArchive::mutable_undo_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandUnmergeArchive.undo_cell_map)
  return _msg;
}
inline void CommandUnmergeArchive::set_allocated_undo_cell_map(::TSP::Reference* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandUnmergeArchive.undo_cell_map)
}

// optional .TSP.Reference undo_formula_rewrite_command = 4;
inline bool CommandUnmergeArchive::_internal_has_undo_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandUnmergeArchive::has_undo_formula_rewrite_command() const {
  return _internal_has_undo_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandUnmergeArchive::_internal_undo_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandUnmergeArchive::undo_formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandUnmergeArchive.undo_formula_rewrite_command)
  return _internal_undo_formula_rewrite_command();
}
inline void CommandUnmergeArchive::unsafe_arena_set_allocated_undo_formula_rewrite_command(
    ::TSP::Reference* undo_formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  if (undo_formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandUnmergeArchive.undo_formula_rewrite_command)
}
inline ::TSP::Reference* CommandUnmergeArchive::release_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandUnmergeArchive::unsafe_arena_release_undo_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandUnmergeArchive.undo_formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandUnmergeArchive::_internal_mutable_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_formula_rewrite_command_ = p;
  }
  return _impl_.undo_formula_rewrite_command_;
}
inline ::TSP::Reference* CommandUnmergeArchive::mutable_undo_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandUnmergeArchive.undo_formula_rewrite_command)
  return _msg;
}
inline void CommandUnmergeArchive::set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  if (undo_formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_formula_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandUnmergeArchive.undo_formula_rewrite_command)
}

// -------------------------------------------------------------------

// CommandChooseTableIdRemapperArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandChooseTableIdRemapperArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChooseTableIdRemapperArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandChooseTableIdRemapperArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandChooseTableIdRemapperArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandChooseTableIdRemapperArchive.super)
  return _internal_super();
}
inline void CommandChooseTableIdRemapperArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChooseTableIdRemapperArchive.super)
}
inline ::TSK::CommandArchive* CommandChooseTableIdRemapperArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandChooseTableIdRemapperArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandChooseTableIdRemapperArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandChooseTableIdRemapperArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandChooseTableIdRemapperArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandChooseTableIdRemapperArchive.super)
  return _msg;
}
inline void CommandChooseTableIdRemapperArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChooseTableIdRemapperArchive.super)
}

// required .TST.MultiTableRemapperArchive table_id_mapper = 2;
inline bool CommandChooseTableIdRemapperArchive::_internal_has_table_id_mapper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_mapper_ != nullptr);
  return value;
}
inline bool CommandChooseTableIdRemapperArchive::has_table_id_mapper() const {
  return _internal_has_table_id_mapper();
}
inline const ::TST::MultiTableRemapperArchive& CommandChooseTableIdRemapperArchive::_internal_table_id_mapper() const {
  const ::TST::MultiTableRemapperArchive* p = _impl_.table_id_mapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::MultiTableRemapperArchive&>(
      ::TST::_MultiTableRemapperArchive_default_instance_);
}
inline const ::TST::MultiTableRemapperArchive& CommandChooseTableIdRemapperArchive::table_id_mapper() const {
  // @@protoc_insertion_point(field_get:TST.CommandChooseTableIdRemapperArchive.table_id_mapper)
  return _internal_table_id_mapper();
}
inline void CommandChooseTableIdRemapperArchive::unsafe_arena_set_allocated_table_id_mapper(
    ::TST::MultiTableRemapperArchive* table_id_mapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_mapper_);
  }
  _impl_.table_id_mapper_ = table_id_mapper;
  if (table_id_mapper) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChooseTableIdRemapperArchive.table_id_mapper)
}
inline ::TST::MultiTableRemapperArchive* CommandChooseTableIdRemapperArchive::release_table_id_mapper() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::MultiTableRemapperArchive* temp = _impl_.table_id_mapper_;
  _impl_.table_id_mapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::MultiTableRemapperArchive* CommandChooseTableIdRemapperArchive::unsafe_arena_release_table_id_mapper() {
  // @@protoc_insertion_point(field_release:TST.CommandChooseTableIdRemapperArchive.table_id_mapper)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::MultiTableRemapperArchive* temp = _impl_.table_id_mapper_;
  _impl_.table_id_mapper_ = nullptr;
  return temp;
}
inline ::TST::MultiTableRemapperArchive* CommandChooseTableIdRemapperArchive::_internal_mutable_table_id_mapper() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.table_id_mapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::MultiTableRemapperArchive>(GetArenaForAllocation());
    _impl_.table_id_mapper_ = p;
  }
  return _impl_.table_id_mapper_;
}
inline ::TST::MultiTableRemapperArchive* CommandChooseTableIdRemapperArchive::mutable_table_id_mapper() {
  ::TST::MultiTableRemapperArchive* _msg = _internal_mutable_table_id_mapper();
  // @@protoc_insertion_point(field_mutable:TST.CommandChooseTableIdRemapperArchive.table_id_mapper)
  return _msg;
}
inline void CommandChooseTableIdRemapperArchive::set_allocated_table_id_mapper(::TST::MultiTableRemapperArchive* table_id_mapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_mapper_);
  }
  if (table_id_mapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_mapper));
    if (message_arena != submessage_arena) {
      table_id_mapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id_mapper, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.table_id_mapper_ = table_id_mapper;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChooseTableIdRemapperArchive.table_id_mapper)
}

// optional .TSP.Reference formula_rewrite_command_for_undo = 3;
inline bool CommandChooseTableIdRemapperArchive::_internal_has_formula_rewrite_command_for_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_for_undo_ != nullptr);
  return value;
}
inline bool CommandChooseTableIdRemapperArchive::has_formula_rewrite_command_for_undo() const {
  return _internal_has_formula_rewrite_command_for_undo();
}
inline const ::TSP::Reference& CommandChooseTableIdRemapperArchive::_internal_formula_rewrite_command_for_undo() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_for_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChooseTableIdRemapperArchive::formula_rewrite_command_for_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandChooseTableIdRemapperArchive.formula_rewrite_command_for_undo)
  return _internal_formula_rewrite_command_for_undo();
}
inline void CommandChooseTableIdRemapperArchive::unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
    ::TSP::Reference* formula_rewrite_command_for_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  if (formula_rewrite_command_for_undo) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChooseTableIdRemapperArchive.formula_rewrite_command_for_undo)
}
inline ::TSP::Reference* CommandChooseTableIdRemapperArchive::release_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChooseTableIdRemapperArchive::unsafe_arena_release_formula_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandChooseTableIdRemapperArchive.formula_rewrite_command_for_undo)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChooseTableIdRemapperArchive::_internal_mutable_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formula_rewrite_command_for_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_for_undo_ = p;
  }
  return _impl_.formula_rewrite_command_for_undo_;
}
inline ::TSP::Reference* CommandChooseTableIdRemapperArchive::mutable_formula_rewrite_command_for_undo() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command_for_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandChooseTableIdRemapperArchive.formula_rewrite_command_for_undo)
  return _msg;
}
inline void CommandChooseTableIdRemapperArchive::set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  if (formula_rewrite_command_for_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo));
    if (message_arena != submessage_arena) {
      formula_rewrite_command_for_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command_for_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChooseTableIdRemapperArchive.formula_rewrite_command_for_undo)
}

// required bool apply_and_clear = 4;
inline bool CommandChooseTableIdRemapperArchive::_internal_has_apply_and_clear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandChooseTableIdRemapperArchive::has_apply_and_clear() const {
  return _internal_has_apply_and_clear();
}
inline void CommandChooseTableIdRemapperArchive::clear_apply_and_clear() {
  _impl_.apply_and_clear_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandChooseTableIdRemapperArchive::_internal_apply_and_clear() const {
  return _impl_.apply_and_clear_;
}
inline bool CommandChooseTableIdRemapperArchive::apply_and_clear() const {
  // @@protoc_insertion_point(field_get:TST.CommandChooseTableIdRemapperArchive.apply_and_clear)
  return _internal_apply_and_clear();
}
inline void CommandChooseTableIdRemapperArchive::_internal_set_apply_and_clear(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.apply_and_clear_ = value;
}
inline void CommandChooseTableIdRemapperArchive::set_apply_and_clear(bool value) {
  _internal_set_apply_and_clear(value);
  // @@protoc_insertion_point(field_set:TST.CommandChooseTableIdRemapperArchive.apply_and_clear)
}

// -------------------------------------------------------------------

// CommandCategorySetGroupingColumnsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandCategorySetGroupingColumnsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCategorySetGroupingColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.super)
  return _internal_super();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.super)
}
inline ::TST::TableCommandArchive* CommandCategorySetGroupingColumnsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategorySetGroupingColumnsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCategorySetGroupingColumnsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.super)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.super)
}

// required int32 new_enabled_changing = 2;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_new_enabled_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_new_enabled_changing() const {
  return _internal_has_new_enabled_changing();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_new_enabled_changing() {
  _impl_.new_enabled_changing_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t CommandCategorySetGroupingColumnsArchive::_internal_new_enabled_changing() const {
  return _impl_.new_enabled_changing_;
}
inline int32_t CommandCategorySetGroupingColumnsArchive::new_enabled_changing() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.new_enabled_changing)
  return _internal_new_enabled_changing();
}
inline void CommandCategorySetGroupingColumnsArchive::_internal_set_new_enabled_changing(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.new_enabled_changing_ = value;
}
inline void CommandCategorySetGroupingColumnsArchive::set_new_enabled_changing(int32_t value) {
  _internal_set_new_enabled_changing(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetGroupingColumnsArchive.new_enabled_changing)
}

// required int32 old_enabled_changing = 3;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_old_enabled_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_old_enabled_changing() const {
  return _internal_has_old_enabled_changing();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_old_enabled_changing() {
  _impl_.old_enabled_changing_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CommandCategorySetGroupingColumnsArchive::_internal_old_enabled_changing() const {
  return _impl_.old_enabled_changing_;
}
inline int32_t CommandCategorySetGroupingColumnsArchive::old_enabled_changing() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.old_enabled_changing)
  return _internal_old_enabled_changing();
}
inline void CommandCategorySetGroupingColumnsArchive::_internal_set_old_enabled_changing(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.old_enabled_changing_ = value;
}
inline void CommandCategorySetGroupingColumnsArchive::set_old_enabled_changing(int32_t value) {
  _internal_set_old_enabled_changing(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetGroupingColumnsArchive.old_enabled_changing)
}

// required .TST.GroupColumnListArchive new_grouping_columns = 4;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_new_grouping_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_grouping_columns_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_new_grouping_columns() const {
  return _internal_has_new_grouping_columns();
}
inline const ::TST::GroupColumnListArchive& CommandCategorySetGroupingColumnsArchive::_internal_new_grouping_columns() const {
  const ::TST::GroupColumnListArchive* p = _impl_.new_grouping_columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandCategorySetGroupingColumnsArchive::new_grouping_columns() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.new_grouping_columns)
  return _internal_new_grouping_columns();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_new_grouping_columns(
    ::TST::GroupColumnListArchive* new_grouping_columns) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_grouping_columns_);
  }
  _impl_.new_grouping_columns_ = new_grouping_columns;
  if (new_grouping_columns) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.new_grouping_columns)
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::release_new_grouping_columns() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::GroupColumnListArchive* temp = _impl_.new_grouping_columns_;
  _impl_.new_grouping_columns_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_new_grouping_columns() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.new_grouping_columns)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::GroupColumnListArchive* temp = _impl_.new_grouping_columns_;
  _impl_.new_grouping_columns_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::_internal_mutable_new_grouping_columns() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.new_grouping_columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.new_grouping_columns_ = p;
  }
  return _impl_.new_grouping_columns_;
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::mutable_new_grouping_columns() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_new_grouping_columns();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.new_grouping_columns)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_new_grouping_columns(::TST::GroupColumnListArchive* new_grouping_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_grouping_columns_);
  }
  if (new_grouping_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_grouping_columns));
    if (message_arena != submessage_arena) {
      new_grouping_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_grouping_columns, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_grouping_columns_ = new_grouping_columns;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.new_grouping_columns)
}

// optional .TST.GroupColumnListArchive old_grouping_columns = 5;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_old_grouping_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_grouping_columns_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_old_grouping_columns() const {
  return _internal_has_old_grouping_columns();
}
inline const ::TST::GroupColumnListArchive& CommandCategorySetGroupingColumnsArchive::_internal_old_grouping_columns() const {
  const ::TST::GroupColumnListArchive* p = _impl_.old_grouping_columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandCategorySetGroupingColumnsArchive::old_grouping_columns() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.old_grouping_columns)
  return _internal_old_grouping_columns();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_old_grouping_columns(
    ::TST::GroupColumnListArchive* old_grouping_columns) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_grouping_columns_);
  }
  _impl_.old_grouping_columns_ = old_grouping_columns;
  if (old_grouping_columns) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.old_grouping_columns)
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::release_old_grouping_columns() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::GroupColumnListArchive* temp = _impl_.old_grouping_columns_;
  _impl_.old_grouping_columns_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_old_grouping_columns() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.old_grouping_columns)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::GroupColumnListArchive* temp = _impl_.old_grouping_columns_;
  _impl_.old_grouping_columns_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::_internal_mutable_old_grouping_columns() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_grouping_columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.old_grouping_columns_ = p;
  }
  return _impl_.old_grouping_columns_;
}
inline ::TST::GroupColumnListArchive* CommandCategorySetGroupingColumnsArchive::mutable_old_grouping_columns() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_old_grouping_columns();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.old_grouping_columns)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_old_grouping_columns(::TST::GroupColumnListArchive* old_grouping_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_grouping_columns_);
  }
  if (old_grouping_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_grouping_columns));
    if (message_arena != submessage_arena) {
      old_grouping_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_grouping_columns, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_grouping_columns_ = old_grouping_columns;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.old_grouping_columns)
}

// required bool restore_base_order = 6;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_restore_base_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_restore_base_order() const {
  return _internal_has_restore_base_order();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_restore_base_order() {
  _impl_.restore_base_order_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool CommandCategorySetGroupingColumnsArchive::_internal_restore_base_order() const {
  return _impl_.restore_base_order_;
}
inline bool CommandCategorySetGroupingColumnsArchive::restore_base_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.restore_base_order)
  return _internal_restore_base_order();
}
inline void CommandCategorySetGroupingColumnsArchive::_internal_set_restore_base_order(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.restore_base_order_ = value;
}
inline void CommandCategorySetGroupingColumnsArchive::set_restore_base_order(bool value) {
  _internal_set_restore_base_order(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetGroupingColumnsArchive.restore_base_order)
}

// repeated .TSP.UUID base_row_order = 7;
inline int CommandCategorySetGroupingColumnsArchive::_internal_base_row_order_size() const {
  return _impl_.base_row_order_.size();
}
inline int CommandCategorySetGroupingColumnsArchive::base_row_order_size() const {
  return _internal_base_row_order_size();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::mutable_base_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.base_row_order)
  return _impl_.base_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategorySetGroupingColumnsArchive::mutable_base_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategorySetGroupingColumnsArchive.base_row_order)
  return &_impl_.base_row_order_;
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::_internal_base_row_order(int index) const {
  return _impl_.base_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::base_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.base_row_order)
  return _internal_base_row_order(index);
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::_internal_add_base_row_order() {
  return _impl_.base_row_order_.Add();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::add_base_row_order() {
  ::TSP::UUID* _add = _internal_add_base_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandCategorySetGroupingColumnsArchive.base_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategorySetGroupingColumnsArchive::base_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategorySetGroupingColumnsArchive.base_row_order)
  return _impl_.base_row_order_;
}

// required bool undo_restore_base_order = 8;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_undo_restore_base_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_undo_restore_base_order() const {
  return _internal_has_undo_restore_base_order();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_undo_restore_base_order() {
  _impl_.undo_restore_base_order_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CommandCategorySetGroupingColumnsArchive::_internal_undo_restore_base_order() const {
  return _impl_.undo_restore_base_order_;
}
inline bool CommandCategorySetGroupingColumnsArchive::undo_restore_base_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_restore_base_order)
  return _internal_undo_restore_base_order();
}
inline void CommandCategorySetGroupingColumnsArchive::_internal_set_undo_restore_base_order(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.undo_restore_base_order_ = value;
}
inline void CommandCategorySetGroupingColumnsArchive::set_undo_restore_base_order(bool value) {
  _internal_set_undo_restore_base_order(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetGroupingColumnsArchive.undo_restore_base_order)
}

// repeated .TSP.UUID undo_base_row_order = 9;
inline int CommandCategorySetGroupingColumnsArchive::_internal_undo_base_row_order_size() const {
  return _impl_.undo_base_row_order_.size();
}
inline int CommandCategorySetGroupingColumnsArchive::undo_base_row_order_size() const {
  return _internal_undo_base_row_order_size();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::mutable_undo_base_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_base_row_order)
  return _impl_.undo_base_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategorySetGroupingColumnsArchive::mutable_undo_base_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategorySetGroupingColumnsArchive.undo_base_row_order)
  return &_impl_.undo_base_row_order_;
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::_internal_undo_base_row_order(int index) const {
  return _impl_.undo_base_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::undo_base_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_base_row_order)
  return _internal_undo_base_row_order(index);
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::_internal_add_undo_base_row_order() {
  return _impl_.undo_base_row_order_.Add();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::add_undo_base_row_order() {
  ::TSP::UUID* _add = _internal_add_undo_base_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandCategorySetGroupingColumnsArchive.undo_base_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategorySetGroupingColumnsArchive::undo_base_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategorySetGroupingColumnsArchive.undo_base_row_order)
  return _impl_.undo_base_row_order_;
}

// required bool restore_view_order = 10;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_restore_view_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_restore_view_order() const {
  return _internal_has_restore_view_order();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_restore_view_order() {
  _impl_.restore_view_order_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CommandCategorySetGroupingColumnsArchive::_internal_restore_view_order() const {
  return _impl_.restore_view_order_;
}
inline bool CommandCategorySetGroupingColumnsArchive::restore_view_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.restore_view_order)
  return _internal_restore_view_order();
}
inline void CommandCategorySetGroupingColumnsArchive::_internal_set_restore_view_order(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.restore_view_order_ = value;
}
inline void CommandCategorySetGroupingColumnsArchive::set_restore_view_order(bool value) {
  _internal_set_restore_view_order(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetGroupingColumnsArchive.restore_view_order)
}

// repeated .TSP.UUID view_row_order = 11;
inline int CommandCategorySetGroupingColumnsArchive::_internal_view_row_order_size() const {
  return _impl_.view_row_order_.size();
}
inline int CommandCategorySetGroupingColumnsArchive::view_row_order_size() const {
  return _internal_view_row_order_size();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::mutable_view_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.view_row_order)
  return _impl_.view_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategorySetGroupingColumnsArchive::mutable_view_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategorySetGroupingColumnsArchive.view_row_order)
  return &_impl_.view_row_order_;
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::_internal_view_row_order(int index) const {
  return _impl_.view_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::view_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.view_row_order)
  return _internal_view_row_order(index);
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::_internal_add_view_row_order() {
  return _impl_.view_row_order_.Add();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::add_view_row_order() {
  ::TSP::UUID* _add = _internal_add_view_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandCategorySetGroupingColumnsArchive.view_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategorySetGroupingColumnsArchive::view_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategorySetGroupingColumnsArchive.view_row_order)
  return _impl_.view_row_order_;
}

// required bool undo_restore_view_order = 12;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_undo_restore_view_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_undo_restore_view_order() const {
  return _internal_has_undo_restore_view_order();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_undo_restore_view_order() {
  _impl_.undo_restore_view_order_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool CommandCategorySetGroupingColumnsArchive::_internal_undo_restore_view_order() const {
  return _impl_.undo_restore_view_order_;
}
inline bool CommandCategorySetGroupingColumnsArchive::undo_restore_view_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_restore_view_order)
  return _internal_undo_restore_view_order();
}
inline void CommandCategorySetGroupingColumnsArchive::_internal_set_undo_restore_view_order(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.undo_restore_view_order_ = value;
}
inline void CommandCategorySetGroupingColumnsArchive::set_undo_restore_view_order(bool value) {
  _internal_set_undo_restore_view_order(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetGroupingColumnsArchive.undo_restore_view_order)
}

// repeated .TSP.UUID undo_view_row_order = 13;
inline int CommandCategorySetGroupingColumnsArchive::_internal_undo_view_row_order_size() const {
  return _impl_.undo_view_row_order_.size();
}
inline int CommandCategorySetGroupingColumnsArchive::undo_view_row_order_size() const {
  return _internal_undo_view_row_order_size();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::mutable_undo_view_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_view_row_order)
  return _impl_.undo_view_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategorySetGroupingColumnsArchive::mutable_undo_view_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategorySetGroupingColumnsArchive.undo_view_row_order)
  return &_impl_.undo_view_row_order_;
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::_internal_undo_view_row_order(int index) const {
  return _impl_.undo_view_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::undo_view_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_view_row_order)
  return _internal_undo_view_row_order(index);
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::_internal_add_undo_view_row_order() {
  return _impl_.undo_view_row_order_.Add();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::add_undo_view_row_order() {
  ::TSP::UUID* _add = _internal_add_undo_view_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandCategorySetGroupingColumnsArchive.undo_view_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategorySetGroupingColumnsArchive::undo_view_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategorySetGroupingColumnsArchive.undo_view_row_order)
  return _impl_.undo_view_row_order_;
}

// repeated .TSP.UUID collapse_state = 14;
inline int CommandCategorySetGroupingColumnsArchive::_internal_collapse_state_size() const {
  return _impl_.collapse_state_.size();
}
inline int CommandCategorySetGroupingColumnsArchive::collapse_state_size() const {
  return _internal_collapse_state_size();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::mutable_collapse_state(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.collapse_state)
  return _impl_.collapse_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategorySetGroupingColumnsArchive::mutable_collapse_state() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategorySetGroupingColumnsArchive.collapse_state)
  return &_impl_.collapse_state_;
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::_internal_collapse_state(int index) const {
  return _impl_.collapse_state_.Get(index);
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::collapse_state(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.collapse_state)
  return _internal_collapse_state(index);
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::_internal_add_collapse_state() {
  return _impl_.collapse_state_.Add();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::add_collapse_state() {
  ::TSP::UUID* _add = _internal_add_collapse_state();
  // @@protoc_insertion_point(field_add:TST.CommandCategorySetGroupingColumnsArchive.collapse_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategorySetGroupingColumnsArchive::collapse_state() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategorySetGroupingColumnsArchive.collapse_state)
  return _impl_.collapse_state_;
}

// repeated .TSP.UUID undo_collapse_state = 15;
inline int CommandCategorySetGroupingColumnsArchive::_internal_undo_collapse_state_size() const {
  return _impl_.undo_collapse_state_.size();
}
inline int CommandCategorySetGroupingColumnsArchive::undo_collapse_state_size() const {
  return _internal_undo_collapse_state_size();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::mutable_undo_collapse_state(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_collapse_state)
  return _impl_.undo_collapse_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategorySetGroupingColumnsArchive::mutable_undo_collapse_state() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategorySetGroupingColumnsArchive.undo_collapse_state)
  return &_impl_.undo_collapse_state_;
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::_internal_undo_collapse_state(int index) const {
  return _impl_.undo_collapse_state_.Get(index);
}
inline const ::TSP::UUID& CommandCategorySetGroupingColumnsArchive::undo_collapse_state(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_collapse_state)
  return _internal_undo_collapse_state(index);
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::_internal_add_undo_collapse_state() {
  return _impl_.undo_collapse_state_.Add();
}
inline ::TSP::UUID* CommandCategorySetGroupingColumnsArchive::add_undo_collapse_state() {
  ::TSP::UUID* _add = _internal_add_undo_collapse_state();
  // @@protoc_insertion_point(field_add:TST.CommandCategorySetGroupingColumnsArchive.undo_collapse_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategorySetGroupingColumnsArchive::undo_collapse_state() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategorySetGroupingColumnsArchive.undo_collapse_state)
  return _impl_.undo_collapse_state_;
}

// optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_summary_change_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.summary_change_state_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_summary_change_state() const {
  return _internal_has_summary_change_state();
}
inline const ::TST::SummaryModelGroupByChangeStateArchive& CommandCategorySetGroupingColumnsArchive::_internal_summary_change_state() const {
  const ::TST::SummaryModelGroupByChangeStateArchive* p = _impl_.summary_change_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SummaryModelGroupByChangeStateArchive&>(
      ::TST::_SummaryModelGroupByChangeStateArchive_default_instance_);
}
inline const ::TST::SummaryModelGroupByChangeStateArchive& CommandCategorySetGroupingColumnsArchive::summary_change_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.summary_change_state)
  return _internal_summary_change_state();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_summary_change_state(
    ::TST::SummaryModelGroupByChangeStateArchive* summary_change_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.summary_change_state_);
  }
  _impl_.summary_change_state_ = summary_change_state;
  if (summary_change_state) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.summary_change_state)
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::release_summary_change_state() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::SummaryModelGroupByChangeStateArchive* temp = _impl_.summary_change_state_;
  _impl_.summary_change_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_summary_change_state() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.summary_change_state)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::SummaryModelGroupByChangeStateArchive* temp = _impl_.summary_change_state_;
  _impl_.summary_change_state_ = nullptr;
  return temp;
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::_internal_mutable_summary_change_state() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.summary_change_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SummaryModelGroupByChangeStateArchive>(GetArenaForAllocation());
    _impl_.summary_change_state_ = p;
  }
  return _impl_.summary_change_state_;
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::mutable_summary_change_state() {
  ::TST::SummaryModelGroupByChangeStateArchive* _msg = _internal_mutable_summary_change_state();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.summary_change_state)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_summary_change_state(::TST::SummaryModelGroupByChangeStateArchive* summary_change_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.summary_change_state_);
  }
  if (summary_change_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_change_state));
    if (message_arena != submessage_arena) {
      summary_change_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary_change_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.summary_change_state_ = summary_change_state;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.summary_change_state)
}

// optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_undo_summary_change_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_summary_change_state_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_undo_summary_change_state() const {
  return _internal_has_undo_summary_change_state();
}
inline const ::TST::SummaryModelGroupByChangeStateArchive& CommandCategorySetGroupingColumnsArchive::_internal_undo_summary_change_state() const {
  const ::TST::SummaryModelGroupByChangeStateArchive* p = _impl_.undo_summary_change_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SummaryModelGroupByChangeStateArchive&>(
      ::TST::_SummaryModelGroupByChangeStateArchive_default_instance_);
}
inline const ::TST::SummaryModelGroupByChangeStateArchive& CommandCategorySetGroupingColumnsArchive::undo_summary_change_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_summary_change_state)
  return _internal_undo_summary_change_state();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_undo_summary_change_state(
    ::TST::SummaryModelGroupByChangeStateArchive* undo_summary_change_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_summary_change_state_);
  }
  _impl_.undo_summary_change_state_ = undo_summary_change_state;
  if (undo_summary_change_state) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_summary_change_state)
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::release_undo_summary_change_state() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::SummaryModelGroupByChangeStateArchive* temp = _impl_.undo_summary_change_state_;
  _impl_.undo_summary_change_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_undo_summary_change_state() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.undo_summary_change_state)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::SummaryModelGroupByChangeStateArchive* temp = _impl_.undo_summary_change_state_;
  _impl_.undo_summary_change_state_ = nullptr;
  return temp;
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::_internal_mutable_undo_summary_change_state() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.undo_summary_change_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SummaryModelGroupByChangeStateArchive>(GetArenaForAllocation());
    _impl_.undo_summary_change_state_ = p;
  }
  return _impl_.undo_summary_change_state_;
}
inline ::TST::SummaryModelGroupByChangeStateArchive* CommandCategorySetGroupingColumnsArchive::mutable_undo_summary_change_state() {
  ::TST::SummaryModelGroupByChangeStateArchive* _msg = _internal_mutable_undo_summary_change_state();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_summary_change_state)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_undo_summary_change_state(::TST::SummaryModelGroupByChangeStateArchive* undo_summary_change_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_summary_change_state_);
  }
  if (undo_summary_change_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_summary_change_state));
    if (message_arena != submessage_arena) {
      undo_summary_change_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_summary_change_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.undo_summary_change_state_ = undo_summary_change_state;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_summary_change_state)
}

// optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_new_column_aggregates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_column_aggregates_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_new_column_aggregates() const {
  return _internal_has_new_column_aggregates();
}
inline const ::TST::ColumnAggregateListArchive& CommandCategorySetGroupingColumnsArchive::_internal_new_column_aggregates() const {
  const ::TST::ColumnAggregateListArchive* p = _impl_.new_column_aggregates_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnAggregateListArchive&>(
      ::TST::_ColumnAggregateListArchive_default_instance_);
}
inline const ::TST::ColumnAggregateListArchive& CommandCategorySetGroupingColumnsArchive::new_column_aggregates() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.new_column_aggregates)
  return _internal_new_column_aggregates();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_new_column_aggregates(
    ::TST::ColumnAggregateListArchive* new_column_aggregates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_column_aggregates_);
  }
  _impl_.new_column_aggregates_ = new_column_aggregates;
  if (new_column_aggregates) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.new_column_aggregates)
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::release_new_column_aggregates() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.new_column_aggregates_;
  _impl_.new_column_aggregates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_new_column_aggregates() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.new_column_aggregates)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.new_column_aggregates_;
  _impl_.new_column_aggregates_ = nullptr;
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::_internal_mutable_new_column_aggregates() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.new_column_aggregates_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnAggregateListArchive>(GetArenaForAllocation());
    _impl_.new_column_aggregates_ = p;
  }
  return _impl_.new_column_aggregates_;
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::mutable_new_column_aggregates() {
  ::TST::ColumnAggregateListArchive* _msg = _internal_mutable_new_column_aggregates();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.new_column_aggregates)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_new_column_aggregates(::TST::ColumnAggregateListArchive* new_column_aggregates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_column_aggregates_);
  }
  if (new_column_aggregates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_column_aggregates));
    if (message_arena != submessage_arena) {
      new_column_aggregates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_column_aggregates, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.new_column_aggregates_ = new_column_aggregates;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.new_column_aggregates)
}

// optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_old_column_aggregates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_column_aggregates_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_old_column_aggregates() const {
  return _internal_has_old_column_aggregates();
}
inline const ::TST::ColumnAggregateListArchive& CommandCategorySetGroupingColumnsArchive::_internal_old_column_aggregates() const {
  const ::TST::ColumnAggregateListArchive* p = _impl_.old_column_aggregates_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnAggregateListArchive&>(
      ::TST::_ColumnAggregateListArchive_default_instance_);
}
inline const ::TST::ColumnAggregateListArchive& CommandCategorySetGroupingColumnsArchive::old_column_aggregates() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.old_column_aggregates)
  return _internal_old_column_aggregates();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_old_column_aggregates(
    ::TST::ColumnAggregateListArchive* old_column_aggregates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_column_aggregates_);
  }
  _impl_.old_column_aggregates_ = old_column_aggregates;
  if (old_column_aggregates) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.old_column_aggregates)
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::release_old_column_aggregates() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.old_column_aggregates_;
  _impl_.old_column_aggregates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_old_column_aggregates() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.old_column_aggregates)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.old_column_aggregates_;
  _impl_.old_column_aggregates_ = nullptr;
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::_internal_mutable_old_column_aggregates() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.old_column_aggregates_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnAggregateListArchive>(GetArenaForAllocation());
    _impl_.old_column_aggregates_ = p;
  }
  return _impl_.old_column_aggregates_;
}
inline ::TST::ColumnAggregateListArchive* CommandCategorySetGroupingColumnsArchive::mutable_old_column_aggregates() {
  ::TST::ColumnAggregateListArchive* _msg = _internal_mutable_old_column_aggregates();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.old_column_aggregates)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_old_column_aggregates(::TST::ColumnAggregateListArchive* old_column_aggregates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_column_aggregates_);
  }
  if (old_column_aggregates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_column_aggregates));
    if (message_arena != submessage_arena) {
      old_column_aggregates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_column_aggregates, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.old_column_aggregates_ = old_column_aggregates;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.old_column_aggregates)
}

// optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_undo_set_enabled_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_set_enabled_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_undo_set_enabled_rewrite_command() const {
  return _internal_has_undo_set_enabled_rewrite_command();
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::_internal_undo_set_enabled_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_set_enabled_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::undo_set_enabled_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_set_enabled_rewrite_command)
  return _internal_undo_set_enabled_rewrite_command();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_undo_set_enabled_rewrite_command(
    ::TSP::Reference* undo_set_enabled_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_set_enabled_rewrite_command_);
  }
  _impl_.undo_set_enabled_rewrite_command_ = undo_set_enabled_rewrite_command;
  if (undo_set_enabled_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_set_enabled_rewrite_command)
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::release_undo_set_enabled_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.undo_set_enabled_rewrite_command_;
  _impl_.undo_set_enabled_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_undo_set_enabled_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.undo_set_enabled_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.undo_set_enabled_rewrite_command_;
  _impl_.undo_set_enabled_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::_internal_mutable_undo_set_enabled_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.undo_set_enabled_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_set_enabled_rewrite_command_ = p;
  }
  return _impl_.undo_set_enabled_rewrite_command_;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::mutable_undo_set_enabled_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_set_enabled_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_set_enabled_rewrite_command)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_undo_set_enabled_rewrite_command(::TSP::Reference* undo_set_enabled_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_set_enabled_rewrite_command_);
  }
  if (undo_set_enabled_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_set_enabled_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_set_enabled_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_set_enabled_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.undo_set_enabled_rewrite_command_ = undo_set_enabled_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_set_enabled_rewrite_command)
}

// optional .TSP.Reference undo_set_columns_rewrite_command = 21;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_undo_set_columns_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_set_columns_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_undo_set_columns_rewrite_command() const {
  return _internal_has_undo_set_columns_rewrite_command();
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::_internal_undo_set_columns_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_set_columns_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::undo_set_columns_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_set_columns_rewrite_command)
  return _internal_undo_set_columns_rewrite_command();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_undo_set_columns_rewrite_command(
    ::TSP::Reference* undo_set_columns_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_set_columns_rewrite_command_);
  }
  _impl_.undo_set_columns_rewrite_command_ = undo_set_columns_rewrite_command;
  if (undo_set_columns_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_set_columns_rewrite_command)
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::release_undo_set_columns_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.undo_set_columns_rewrite_command_;
  _impl_.undo_set_columns_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_undo_set_columns_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.undo_set_columns_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.undo_set_columns_rewrite_command_;
  _impl_.undo_set_columns_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::_internal_mutable_undo_set_columns_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.undo_set_columns_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_set_columns_rewrite_command_ = p;
  }
  return _impl_.undo_set_columns_rewrite_command_;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::mutable_undo_set_columns_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_set_columns_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_set_columns_rewrite_command)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_undo_set_columns_rewrite_command(::TSP::Reference* undo_set_columns_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_set_columns_rewrite_command_);
  }
  if (undo_set_columns_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_set_columns_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_set_columns_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_set_columns_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.undo_set_columns_rewrite_command_ = undo_set_columns_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_set_columns_rewrite_command)
}

// required bool force_restore_all_states = 22;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_force_restore_all_states() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_force_restore_all_states() const {
  return _internal_has_force_restore_all_states();
}
inline void CommandCategorySetGroupingColumnsArchive::clear_force_restore_all_states() {
  _impl_.force_restore_all_states_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool CommandCategorySetGroupingColumnsArchive::_internal_force_restore_all_states() const {
  return _impl_.force_restore_all_states_;
}
inline bool CommandCategorySetGroupingColumnsArchive::force_restore_all_states() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.force_restore_all_states)
  return _internal_force_restore_all_states();
}
inline void CommandCategorySetGroupingColumnsArchive::_internal_set_force_restore_all_states(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.force_restore_all_states_ = value;
}
inline void CommandCategorySetGroupingColumnsArchive::set_force_restore_all_states(bool value) {
  _internal_set_force_restore_all_states(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetGroupingColumnsArchive.force_restore_all_states)
}

// optional .TSP.Reference cell_diff_map = 23;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.cell_diff_map)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.cell_diff_map)
}

// optional .TSP.Reference undo_cell_diff_map = 24;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_undo_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_undo_cell_diff_map() const {
  return _internal_has_undo_cell_diff_map();
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::_internal_undo_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::undo_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_cell_diff_map)
  return _internal_undo_cell_diff_map();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_undo_cell_diff_map(
    ::TSP::Reference* undo_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  if (undo_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_cell_diff_map)
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::release_undo_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_undo_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.undo_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::_internal_mutable_undo_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.undo_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_diff_map_ = p;
  }
  return _impl_.undo_cell_diff_map_;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::mutable_undo_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_cell_diff_map)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  if (undo_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_diff_map));
    if (message_arena != submessage_arena) {
      undo_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_cell_diff_map)
}

// optional .TSP.Reference undo_set_group_sort_order_command = 25;
inline bool CommandCategorySetGroupingColumnsArchive::_internal_has_undo_set_group_sort_order_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_set_group_sort_order_command_ != nullptr);
  return value;
}
inline bool CommandCategorySetGroupingColumnsArchive::has_undo_set_group_sort_order_command() const {
  return _internal_has_undo_set_group_sort_order_command();
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::_internal_undo_set_group_sort_order_command() const {
  const ::TSP::Reference* p = _impl_.undo_set_group_sort_order_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategorySetGroupingColumnsArchive::undo_set_group_sort_order_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetGroupingColumnsArchive.undo_set_group_sort_order_command)
  return _internal_undo_set_group_sort_order_command();
}
inline void CommandCategorySetGroupingColumnsArchive::unsafe_arena_set_allocated_undo_set_group_sort_order_command(
    ::TSP::Reference* undo_set_group_sort_order_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_set_group_sort_order_command_);
  }
  _impl_.undo_set_group_sort_order_command_ = undo_set_group_sort_order_command;
  if (undo_set_group_sort_order_command) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_set_group_sort_order_command)
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::release_undo_set_group_sort_order_command() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = _impl_.undo_set_group_sort_order_command_;
  _impl_.undo_set_group_sort_order_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::unsafe_arena_release_undo_set_group_sort_order_command() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetGroupingColumnsArchive.undo_set_group_sort_order_command)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = _impl_.undo_set_group_sort_order_command_;
  _impl_.undo_set_group_sort_order_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::_internal_mutable_undo_set_group_sort_order_command() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.undo_set_group_sort_order_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_set_group_sort_order_command_ = p;
  }
  return _impl_.undo_set_group_sort_order_command_;
}
inline ::TSP::Reference* CommandCategorySetGroupingColumnsArchive::mutable_undo_set_group_sort_order_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_set_group_sort_order_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetGroupingColumnsArchive.undo_set_group_sort_order_command)
  return _msg;
}
inline void CommandCategorySetGroupingColumnsArchive::set_allocated_undo_set_group_sort_order_command(::TSP::Reference* undo_set_group_sort_order_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_set_group_sort_order_command_);
  }
  if (undo_set_group_sort_order_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_set_group_sort_order_command));
    if (message_arena != submessage_arena) {
      undo_set_group_sort_order_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_set_group_sort_order_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.undo_set_group_sort_order_command_ = undo_set_group_sort_order_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetGroupingColumnsArchive.undo_set_group_sort_order_command)
}

// -------------------------------------------------------------------

// FormulaEditingCommandGroupArchive

// required .TSK.ProgressiveCommandGroupArchive super = 1;
inline bool FormulaEditingCommandGroupArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::ProgressiveCommandGroupArchive& FormulaEditingCommandGroupArchive::_internal_super() const {
  const ::TSK::ProgressiveCommandGroupArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ProgressiveCommandGroupArchive&>(
      ::TSK::_ProgressiveCommandGroupArchive_default_instance_);
}
inline const ::TSK::ProgressiveCommandGroupArchive& FormulaEditingCommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.super)
  return _internal_super();
}
inline void FormulaEditingCommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::ProgressiveCommandGroupArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaEditingCommandGroupArchive.super)
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::ProgressiveCommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.FormulaEditingCommandGroupArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::ProgressiveCommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ProgressiveCommandGroupArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::mutable_super() {
  ::TSK::ProgressiveCommandGroupArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.FormulaEditingCommandGroupArchive.super)
  return _msg;
}
inline void FormulaEditingCommandGroupArchive::set_allocated_super(::TSK::ProgressiveCommandGroupArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaEditingCommandGroupArchive.super)
}

// required bool undoSelectionValid = 2;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoselectionvalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoselectionvalid() const {
  return _internal_has_undoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::clear_undoselectionvalid() {
  _impl_.undoselectionvalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FormulaEditingCommandGroupArchive::_internal_undoselectionvalid() const {
  return _impl_.undoselectionvalid_;
}
inline bool FormulaEditingCommandGroupArchive::undoselectionvalid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoSelectionValid)
  return _internal_undoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoselectionvalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.undoselectionvalid_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoselectionvalid(bool value) {
  _internal_set_undoselectionvalid(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoSelectionValid)
}

// required uint32 undoSelectionStart = 3;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoselectionstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoselectionstart() const {
  return _internal_has_undoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::clear_undoselectionstart() {
  _impl_.undoselectionstart_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_undoselectionstart() const {
  return _impl_.undoselectionstart_;
}
inline uint32_t FormulaEditingCommandGroupArchive::undoselectionstart() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoSelectionStart)
  return _internal_undoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoselectionstart(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.undoselectionstart_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoselectionstart(uint32_t value) {
  _internal_set_undoselectionstart(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoSelectionStart)
}

// required uint32 undoSelectionLength = 4;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoselectionlength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoselectionlength() const {
  return _internal_has_undoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::clear_undoselectionlength() {
  _impl_.undoselectionlength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_undoselectionlength() const {
  return _impl_.undoselectionlength_;
}
inline uint32_t FormulaEditingCommandGroupArchive::undoselectionlength() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoSelectionLength)
  return _internal_undoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoselectionlength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.undoselectionlength_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoselectionlength(uint32_t value) {
  _internal_set_undoselectionlength(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoSelectionLength)
}

// required uint32 undoActiveToken = 5;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoactivetoken() const {
  return _internal_has_undoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::clear_undoactivetoken() {
  _impl_.undoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_undoactivetoken() const {
  return _impl_.undoactivetoken_;
}
inline uint32_t FormulaEditingCommandGroupArchive::undoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoActiveToken)
  return _internal_undoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.undoactivetoken_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoactivetoken(uint32_t value) {
  _internal_set_undoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoActiveToken)
}

// required bool redoSelectionValid = 6;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoselectionvalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoselectionvalid() const {
  return _internal_has_redoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::clear_redoselectionvalid() {
  _impl_.redoselectionvalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FormulaEditingCommandGroupArchive::_internal_redoselectionvalid() const {
  return _impl_.redoselectionvalid_;
}
inline bool FormulaEditingCommandGroupArchive::redoselectionvalid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoSelectionValid)
  return _internal_redoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoselectionvalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.redoselectionvalid_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoselectionvalid(bool value) {
  _internal_set_redoselectionvalid(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoSelectionValid)
}

// required uint32 redoSelectionStart = 7;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoselectionstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoselectionstart() const {
  return _internal_has_redoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::clear_redoselectionstart() {
  _impl_.redoselectionstart_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_redoselectionstart() const {
  return _impl_.redoselectionstart_;
}
inline uint32_t FormulaEditingCommandGroupArchive::redoselectionstart() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoSelectionStart)
  return _internal_redoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoselectionstart(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.redoselectionstart_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoselectionstart(uint32_t value) {
  _internal_set_redoselectionstart(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoSelectionStart)
}

// required uint32 redoSelectionLength = 8;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoselectionlength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoselectionlength() const {
  return _internal_has_redoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::clear_redoselectionlength() {
  _impl_.redoselectionlength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_redoselectionlength() const {
  return _impl_.redoselectionlength_;
}
inline uint32_t FormulaEditingCommandGroupArchive::redoselectionlength() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoSelectionLength)
  return _internal_redoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoselectionlength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.redoselectionlength_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoselectionlength(uint32_t value) {
  _internal_set_redoselectionlength(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoSelectionLength)
}

// required uint32 redoActiveToken = 9;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoactivetoken() const {
  return _internal_has_redoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::clear_redoactivetoken() {
  _impl_.redoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_redoactivetoken() const {
  return _impl_.redoactivetoken_;
}
inline uint32_t FormulaEditingCommandGroupArchive::redoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoActiveToken)
  return _internal_redoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.redoactivetoken_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoactivetoken(uint32_t value) {
  _internal_set_redoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoActiveToken)
}

// -------------------------------------------------------------------

// FormulaEditingCommandSelectionBehaviorArchive

// required .TSK.CommandSelectionBehaviorArchive super = 1;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandSelectionBehaviorArchive& FormulaEditingCommandSelectionBehaviorArchive::_internal_super() const {
  const ::TSK::CommandSelectionBehaviorArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandSelectionBehaviorArchive&>(
      ::TSK::_CommandSelectionBehaviorArchive_default_instance_);
}
inline const ::TSK::CommandSelectionBehaviorArchive& FormulaEditingCommandSelectionBehaviorArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.super)
  return _internal_super();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandSelectionBehaviorArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaEditingCommandSelectionBehaviorArchive.super)
}
inline ::TSK::CommandSelectionBehaviorArchive* FormulaEditingCommandSelectionBehaviorArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandSelectionBehaviorArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandSelectionBehaviorArchive* FormulaEditingCommandSelectionBehaviorArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.FormulaEditingCommandSelectionBehaviorArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandSelectionBehaviorArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandSelectionBehaviorArchive* FormulaEditingCommandSelectionBehaviorArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandSelectionBehaviorArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandSelectionBehaviorArchive* FormulaEditingCommandSelectionBehaviorArchive::mutable_super() {
  ::TSK::CommandSelectionBehaviorArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.FormulaEditingCommandSelectionBehaviorArchive.super)
  return _msg;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_allocated_super(::TSK::CommandSelectionBehaviorArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaEditingCommandSelectionBehaviorArchive.super)
}

// optional uint32 undoActiveToken = 2;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_undoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_undoactivetoken() const {
  return _internal_has_undoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_undoactivetoken() {
  _impl_.undoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_undoactivetoken() const {
  return _impl_.undoactivetoken_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::undoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.undoActiveToken)
  return _internal_undoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_undoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.undoactivetoken_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_undoactivetoken(uint32_t value) {
  _internal_set_undoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.undoActiveToken)
}

// optional uint32 redoActiveToken = 3;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_redoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_redoactivetoken() const {
  return _internal_has_redoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_redoactivetoken() {
  _impl_.redoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_redoactivetoken() const {
  return _impl_.redoactivetoken_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::redoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.redoActiveToken)
  return _internal_redoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_redoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.redoactivetoken_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_redoactivetoken(uint32_t value) {
  _internal_set_redoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.redoActiveToken)
}

// -------------------------------------------------------------------

// TableCommandSelectionBehaviorArchive

// required .TSK.CommandSelectionBehaviorArchive super = 1;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandSelectionBehaviorArchive& TableCommandSelectionBehaviorArchive::_internal_super() const {
  const ::TSK::CommandSelectionBehaviorArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandSelectionBehaviorArchive&>(
      ::TSK::_CommandSelectionBehaviorArchive_default_instance_);
}
inline const ::TSK::CommandSelectionBehaviorArchive& TableCommandSelectionBehaviorArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.super)
  return _internal_super();
}
inline void TableCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandSelectionBehaviorArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandSelectionBehaviorArchive.super)
}
inline ::TSK::CommandSelectionBehaviorArchive* TableCommandSelectionBehaviorArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandSelectionBehaviorArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandSelectionBehaviorArchive* TableCommandSelectionBehaviorArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TableCommandSelectionBehaviorArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandSelectionBehaviorArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandSelectionBehaviorArchive* TableCommandSelectionBehaviorArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandSelectionBehaviorArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandSelectionBehaviorArchive* TableCommandSelectionBehaviorArchive::mutable_super() {
  ::TSK::CommandSelectionBehaviorArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandSelectionBehaviorArchive.super)
  return _msg;
}
inline void TableCommandSelectionBehaviorArchive::set_allocated_super(::TSK::CommandSelectionBehaviorArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandSelectionBehaviorArchive.super)
}

// optional .TSP.Reference table_info = 2;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_table_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_info_ != nullptr);
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& TableCommandSelectionBehaviorArchive::_internal_table_info() const {
  const ::TSP::Reference* p = _impl_.table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableCommandSelectionBehaviorArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.table_info)
  return _internal_table_info();
}
inline void TableCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  _impl_.table_info_ = table_info;
  if (table_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandSelectionBehaviorArchive.table_info)
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::release_table_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.TableCommandSelectionBehaviorArchive.table_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::_internal_mutable_table_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.table_info_ = p;
  }
  return _impl_.table_info_;
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::mutable_table_info() {
  ::TSP::Reference* _msg = _internal_mutable_table_info();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandSelectionBehaviorArchive.table_info)
  return _msg;
}
inline void TableCommandSelectionBehaviorArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info));
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandSelectionBehaviorArchive.table_info)
}

// optional .TSP.UUID last_column_uid_hit_by_tap = 3;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_last_column_uid_hit_by_tap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_column_uid_hit_by_tap_ != nullptr);
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_last_column_uid_hit_by_tap() const {
  return _internal_has_last_column_uid_hit_by_tap();
}
inline const ::TSP::UUID& TableCommandSelectionBehaviorArchive::_internal_last_column_uid_hit_by_tap() const {
  const ::TSP::UUID* p = _impl_.last_column_uid_hit_by_tap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& TableCommandSelectionBehaviorArchive::last_column_uid_hit_by_tap() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.last_column_uid_hit_by_tap)
  return _internal_last_column_uid_hit_by_tap();
}
inline void TableCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_last_column_uid_hit_by_tap(
    ::TSP::UUID* last_column_uid_hit_by_tap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_column_uid_hit_by_tap_);
  }
  _impl_.last_column_uid_hit_by_tap_ = last_column_uid_hit_by_tap;
  if (last_column_uid_hit_by_tap) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandSelectionBehaviorArchive.last_column_uid_hit_by_tap)
}
inline ::TSP::UUID* TableCommandSelectionBehaviorArchive::release_last_column_uid_hit_by_tap() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.last_column_uid_hit_by_tap_;
  _impl_.last_column_uid_hit_by_tap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* TableCommandSelectionBehaviorArchive::unsafe_arena_release_last_column_uid_hit_by_tap() {
  // @@protoc_insertion_point(field_release:TST.TableCommandSelectionBehaviorArchive.last_column_uid_hit_by_tap)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.last_column_uid_hit_by_tap_;
  _impl_.last_column_uid_hit_by_tap_ = nullptr;
  return temp;
}
inline ::TSP::UUID* TableCommandSelectionBehaviorArchive::_internal_mutable_last_column_uid_hit_by_tap() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.last_column_uid_hit_by_tap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.last_column_uid_hit_by_tap_ = p;
  }
  return _impl_.last_column_uid_hit_by_tap_;
}
inline ::TSP::UUID* TableCommandSelectionBehaviorArchive::mutable_last_column_uid_hit_by_tap() {
  ::TSP::UUID* _msg = _internal_mutable_last_column_uid_hit_by_tap();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandSelectionBehaviorArchive.last_column_uid_hit_by_tap)
  return _msg;
}
inline void TableCommandSelectionBehaviorArchive::set_allocated_last_column_uid_hit_by_tap(::TSP::UUID* last_column_uid_hit_by_tap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_column_uid_hit_by_tap_);
  }
  if (last_column_uid_hit_by_tap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_column_uid_hit_by_tap));
    if (message_arena != submessage_arena) {
      last_column_uid_hit_by_tap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_column_uid_hit_by_tap, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.last_column_uid_hit_by_tap_ = last_column_uid_hit_by_tap;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandSelectionBehaviorArchive.last_column_uid_hit_by_tap)
}

// optional uint32 invalidate_comments = 4;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_invalidate_comments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_invalidate_comments() const {
  return _internal_has_invalidate_comments();
}
inline void TableCommandSelectionBehaviorArchive::clear_invalidate_comments() {
  _impl_.invalidate_comments_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t TableCommandSelectionBehaviorArchive::_internal_invalidate_comments() const {
  return _impl_.invalidate_comments_;
}
inline uint32_t TableCommandSelectionBehaviorArchive::invalidate_comments() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.invalidate_comments)
  return _internal_invalidate_comments();
}
inline void TableCommandSelectionBehaviorArchive::_internal_set_invalidate_comments(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.invalidate_comments_ = value;
}
inline void TableCommandSelectionBehaviorArchive::set_invalidate_comments(uint32_t value) {
  _internal_set_invalidate_comments(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandSelectionBehaviorArchive.invalidate_comments)
}

// -------------------------------------------------------------------

// CommandApplyCellCommentArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyCellCommentArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyCellCommentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyCellCommentArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyCellCommentArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.super)
  return _internal_super();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.super)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.super)
}

// required .TSP.UUIDCoordArchive cell_uid = 2;
inline bool CommandApplyCellCommentArchive::_internal_has_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uid_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_cell_uid() const {
  return _internal_has_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& CommandApplyCellCommentArchive::_internal_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& CommandApplyCellCommentArchive::cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.cell_uid)
  return _internal_cell_uid();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_cell_uid(
    ::TSP::UUIDCoordArchive* cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_);
  }
  _impl_.cell_uid_ = cell_uid;
  if (cell_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.cell_uid)
}
inline ::TSP::UUIDCoordArchive* CommandApplyCellCommentArchive::release_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cell_uid_;
  _impl_.cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandApplyCellCommentArchive::unsafe_arena_release_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.cell_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cell_uid_;
  _impl_.cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* CommandApplyCellCommentArchive::_internal_mutable_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.cell_uid_ = p;
  }
  return _impl_.cell_uid_;
}
inline ::TSP::UUIDCoordArchive* CommandApplyCellCommentArchive::mutable_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.cell_uid)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_cell_uid(::TSP::UUIDCoordArchive* cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uid_);
  }
  if (cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid));
    if (message_arena != submessage_arena) {
      cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uid_ = cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.cell_uid)
}

// optional .TSP.Reference old_comment_storage = 3;
inline bool CommandApplyCellCommentArchive::_internal_has_old_comment_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_comment_storage_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_old_comment_storage() const {
  return _internal_has_old_comment_storage();
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::_internal_old_comment_storage() const {
  const ::TSP::Reference* p = _impl_.old_comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::old_comment_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.old_comment_storage)
  return _internal_old_comment_storage();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_old_comment_storage(
    ::TSP::Reference* old_comment_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_comment_storage_);
  }
  _impl_.old_comment_storage_ = old_comment_storage;
  if (old_comment_storage) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.old_comment_storage)
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::release_old_comment_storage() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_comment_storage_;
  _impl_.old_comment_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::unsafe_arena_release_old_comment_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.old_comment_storage)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_comment_storage_;
  _impl_.old_comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::_internal_mutable_old_comment_storage() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_comment_storage_ = p;
  }
  return _impl_.old_comment_storage_;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::mutable_old_comment_storage() {
  ::TSP::Reference* _msg = _internal_mutable_old_comment_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.old_comment_storage)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_old_comment_storage(::TSP::Reference* old_comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_comment_storage_);
  }
  if (old_comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_comment_storage));
    if (message_arena != submessage_arena) {
      old_comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_comment_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_comment_storage_ = old_comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.old_comment_storage)
}

// optional .TSP.Reference new_comment_storage = 4;
inline bool CommandApplyCellCommentArchive::_internal_has_new_comment_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_comment_storage_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_new_comment_storage() const {
  return _internal_has_new_comment_storage();
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::_internal_new_comment_storage() const {
  const ::TSP::Reference* p = _impl_.new_comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::new_comment_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.new_comment_storage)
  return _internal_new_comment_storage();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_new_comment_storage(
    ::TSP::Reference* new_comment_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_comment_storage_);
  }
  _impl_.new_comment_storage_ = new_comment_storage;
  if (new_comment_storage) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.new_comment_storage)
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::release_new_comment_storage() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_comment_storage_;
  _impl_.new_comment_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::unsafe_arena_release_new_comment_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.new_comment_storage)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_comment_storage_;
  _impl_.new_comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::_internal_mutable_new_comment_storage() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_comment_storage_ = p;
  }
  return _impl_.new_comment_storage_;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::mutable_new_comment_storage() {
  ::TSP::Reference* _msg = _internal_mutable_new_comment_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.new_comment_storage)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_new_comment_storage(::TSP::Reference* new_comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_comment_storage_);
  }
  if (new_comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_comment_storage));
    if (message_arena != submessage_arena) {
      new_comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_comment_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_comment_storage_ = new_comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.new_comment_storage)
}

// optional .TSD.CommentCommandVariant forward_variant = 5;
inline bool CommandApplyCellCommentArchive::_internal_has_forward_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandApplyCellCommentArchive::has_forward_variant() const {
  return _internal_has_forward_variant();
}
inline void CommandApplyCellCommentArchive::clear_forward_variant() {
  _impl_.forward_variant_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSD::CommentCommandVariant CommandApplyCellCommentArchive::_internal_forward_variant() const {
  return static_cast< ::TSD::CommentCommandVariant >(_impl_.forward_variant_);
}
inline ::TSD::CommentCommandVariant CommandApplyCellCommentArchive::forward_variant() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.forward_variant)
  return _internal_forward_variant();
}
inline void CommandApplyCellCommentArchive::_internal_set_forward_variant(::TSD::CommentCommandVariant value) {
  assert(::TSD::CommentCommandVariant_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.forward_variant_ = value;
}
inline void CommandApplyCellCommentArchive::set_forward_variant(::TSD::CommentCommandVariant value) {
  _internal_set_forward_variant(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyCellCommentArchive.forward_variant)
}

// optional .TSD.CommentCommandVariant inverse_variant = 6;
inline bool CommandApplyCellCommentArchive::_internal_has_inverse_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandApplyCellCommentArchive::has_inverse_variant() const {
  return _internal_has_inverse_variant();
}
inline void CommandApplyCellCommentArchive::clear_inverse_variant() {
  _impl_.inverse_variant_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::TSD::CommentCommandVariant CommandApplyCellCommentArchive::_internal_inverse_variant() const {
  return static_cast< ::TSD::CommentCommandVariant >(_impl_.inverse_variant_);
}
inline ::TSD::CommentCommandVariant CommandApplyCellCommentArchive::inverse_variant() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.inverse_variant)
  return _internal_inverse_variant();
}
inline void CommandApplyCellCommentArchive::_internal_set_inverse_variant(::TSD::CommentCommandVariant value) {
  assert(::TSD::CommentCommandVariant_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.inverse_variant_ = value;
}
inline void CommandApplyCellCommentArchive::set_inverse_variant(::TSD::CommentCommandVariant value) {
  _internal_set_inverse_variant(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyCellCommentArchive.inverse_variant)
}

// -------------------------------------------------------------------

// CommandSetFormulaTokenizationArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetFormulaTokenizationArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFormulaTokenizationArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetFormulaTokenizationArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetFormulaTokenizationArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFormulaTokenizationArchive.super)
  return _internal_super();
}
inline void CommandSetFormulaTokenizationArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFormulaTokenizationArchive.super)
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFormulaTokenizationArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFormulaTokenizationArchive.super)
  return _msg;
}
inline void CommandSetFormulaTokenizationArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFormulaTokenizationArchive.super)
}

// required bool tokenization = 2;
inline bool CommandSetFormulaTokenizationArchive::_internal_has_tokenization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFormulaTokenizationArchive::has_tokenization() const {
  return _internal_has_tokenization();
}
inline void CommandSetFormulaTokenizationArchive::clear_tokenization() {
  _impl_.tokenization_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetFormulaTokenizationArchive::_internal_tokenization() const {
  return _impl_.tokenization_;
}
inline bool CommandSetFormulaTokenizationArchive::tokenization() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFormulaTokenizationArchive.tokenization)
  return _internal_tokenization();
}
inline void CommandSetFormulaTokenizationArchive::_internal_set_tokenization(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tokenization_ = value;
}
inline void CommandSetFormulaTokenizationArchive::set_tokenization(bool value) {
  _internal_set_tokenization(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFormulaTokenizationArchive.tokenization)
}

// -------------------------------------------------------------------

// CommandSetFilterSetTypeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetFilterSetTypeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFilterSetTypeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFilterSetTypeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetFilterSetTypeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetFilterSetTypeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetTypeArchive.super)
  return _internal_super();
}
inline void CommandSetFilterSetTypeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFilterSetTypeArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFilterSetTypeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterSetTypeArchive.super)
  return _msg;
}
inline void CommandSetFilterSetTypeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFilterSetTypeArchive.super)
}

// optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
inline bool CommandSetFilterSetTypeArchive::_internal_has_old_filter_set_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFilterSetTypeArchive::has_old_filter_set_type() const {
  return _internal_has_old_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::clear_old_filter_set_type() {
  _impl_.old_filter_set_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::_internal_old_filter_set_type() const {
  return static_cast< ::TST::FilterSetArchive_FilterSetType >(_impl_.old_filter_set_type_);
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::old_filter_set_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetTypeArchive.old_filter_set_type)
  return _internal_old_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::_internal_set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  assert(::TST::FilterSetArchive_FilterSetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_filter_set_type_ = value;
}
inline void CommandSetFilterSetTypeArchive::set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  _internal_set_old_filter_set_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterSetTypeArchive.old_filter_set_type)
}

// required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
inline bool CommandSetFilterSetTypeArchive::_internal_has_new_filter_set_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetFilterSetTypeArchive::has_new_filter_set_type() const {
  return _internal_has_new_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::clear_new_filter_set_type() {
  _impl_.new_filter_set_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::_internal_new_filter_set_type() const {
  return static_cast< ::TST::FilterSetArchive_FilterSetType >(_impl_.new_filter_set_type_);
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::new_filter_set_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetTypeArchive.new_filter_set_type)
  return _internal_new_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::_internal_set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  assert(::TST::FilterSetArchive_FilterSetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_filter_set_type_ = value;
}
inline void CommandSetFilterSetTypeArchive::set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  _internal_set_new_filter_set_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterSetTypeArchive.new_filter_set_type)
}

// repeated .TSP.UUID rollback_uid_list = 4;
inline int CommandSetFilterSetTypeArchive::_internal_rollback_uid_list_size() const {
  return _impl_.rollback_uid_list_.size();
}
inline int CommandSetFilterSetTypeArchive::rollback_uid_list_size() const {
  return _internal_rollback_uid_list_size();
}
inline ::TSP::UUID* CommandSetFilterSetTypeArchive::mutable_rollback_uid_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterSetTypeArchive.rollback_uid_list)
  return _impl_.rollback_uid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetFilterSetTypeArchive::mutable_rollback_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetFilterSetTypeArchive.rollback_uid_list)
  return &_impl_.rollback_uid_list_;
}
inline const ::TSP::UUID& CommandSetFilterSetTypeArchive::_internal_rollback_uid_list(int index) const {
  return _impl_.rollback_uid_list_.Get(index);
}
inline const ::TSP::UUID& CommandSetFilterSetTypeArchive::rollback_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetTypeArchive.rollback_uid_list)
  return _internal_rollback_uid_list(index);
}
inline ::TSP::UUID* CommandSetFilterSetTypeArchive::_internal_add_rollback_uid_list() {
  return _impl_.rollback_uid_list_.Add();
}
inline ::TSP::UUID* CommandSetFilterSetTypeArchive::add_rollback_uid_list() {
  ::TSP::UUID* _add = _internal_add_rollback_uid_list();
  // @@protoc_insertion_point(field_add:TST.CommandSetFilterSetTypeArchive.rollback_uid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetFilterSetTypeArchive::rollback_uid_list() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetFilterSetTypeArchive.rollback_uid_list)
  return _impl_.rollback_uid_list_;
}

// -------------------------------------------------------------------

// CommandSetTextStyleArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTextStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTextStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTextStyleArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTextStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.super)
  return _internal_super();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.super)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.super)
}

// required .TSP.Reference cell_diff_map = 2;
inline bool CommandSetTextStyleArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTextStyleArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTextStyleArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandSetTextStyleArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.cell_diff_map)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.cell_diff_map)
}

// optional .TSP.Reference inverse_cell_diff_map = 3;
inline bool CommandSetTextStyleArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTextStyleArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTextStyleArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandSetTextStyleArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.inverse_cell_diff_map)
}

// -------------------------------------------------------------------

// CommandSetTextStylePropertiesArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTextStylePropertiesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTextStylePropertiesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTextStylePropertiesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTextStylePropertiesArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTextStylePropertiesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStylePropertiesArchive.super)
  return _internal_super();
}
inline void CommandSetTextStylePropertiesArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStylePropertiesArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTextStylePropertiesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTextStylePropertiesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStylePropertiesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTextStylePropertiesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTextStylePropertiesArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStylePropertiesArchive.super)
  return _msg;
}
inline void CommandSetTextStylePropertiesArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStylePropertiesArchive.super)
}

// required .TSP.Reference cell_diff_map = 2;
inline bool CommandSetTextStylePropertiesArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTextStylePropertiesArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTextStylePropertiesArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTextStylePropertiesArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStylePropertiesArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandSetTextStylePropertiesArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStylePropertiesArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStylePropertiesArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStylePropertiesArchive.cell_diff_map)
  return _msg;
}
inline void CommandSetTextStylePropertiesArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStylePropertiesArchive.cell_diff_map)
}

// repeated bool cell_was_rich_text = 3;
inline int CommandSetTextStylePropertiesArchive::_internal_cell_was_rich_text_size() const {
  return _impl_.cell_was_rich_text_.size();
}
inline int CommandSetTextStylePropertiesArchive::cell_was_rich_text_size() const {
  return _internal_cell_was_rich_text_size();
}
inline void CommandSetTextStylePropertiesArchive::clear_cell_was_rich_text() {
  _impl_.cell_was_rich_text_.Clear();
}
inline bool CommandSetTextStylePropertiesArchive::_internal_cell_was_rich_text(int index) const {
  return _impl_.cell_was_rich_text_.Get(index);
}
inline bool CommandSetTextStylePropertiesArchive::cell_was_rich_text(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStylePropertiesArchive.cell_was_rich_text)
  return _internal_cell_was_rich_text(index);
}
inline void CommandSetTextStylePropertiesArchive::set_cell_was_rich_text(int index, bool value) {
  _impl_.cell_was_rich_text_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTextStylePropertiesArchive.cell_was_rich_text)
}
inline void CommandSetTextStylePropertiesArchive::_internal_add_cell_was_rich_text(bool value) {
  _impl_.cell_was_rich_text_.Add(value);
}
inline void CommandSetTextStylePropertiesArchive::add_cell_was_rich_text(bool value) {
  _internal_add_cell_was_rich_text(value);
  // @@protoc_insertion_point(field_add:TST.CommandSetTextStylePropertiesArchive.cell_was_rich_text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandSetTextStylePropertiesArchive::_internal_cell_was_rich_text() const {
  return _impl_.cell_was_rich_text_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandSetTextStylePropertiesArchive::cell_was_rich_text() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetTextStylePropertiesArchive.cell_was_rich_text)
  return _internal_cell_was_rich_text();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandSetTextStylePropertiesArchive::_internal_mutable_cell_was_rich_text() {
  return &_impl_.cell_was_rich_text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandSetTextStylePropertiesArchive::mutable_cell_was_rich_text() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetTextStylePropertiesArchive.cell_was_rich_text)
  return _internal_mutable_cell_was_rich_text();
}

// optional .TSP.Reference inverse_cell_diff_map = 4;
inline bool CommandSetTextStylePropertiesArchive::_internal_has_inverse_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inverse_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandSetTextStylePropertiesArchive::has_inverse_cell_diff_map() const {
  return _internal_has_inverse_cell_diff_map();
}
inline const ::TSP::Reference& CommandSetTextStylePropertiesArchive::_internal_inverse_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.inverse_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTextStylePropertiesArchive::inverse_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStylePropertiesArchive.inverse_cell_diff_map)
  return _internal_inverse_cell_diff_map();
}
inline void CommandSetTextStylePropertiesArchive::unsafe_arena_set_allocated_inverse_cell_diff_map(
    ::TSP::Reference* inverse_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  if (inverse_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStylePropertiesArchive.inverse_cell_diff_map)
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::release_inverse_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::unsafe_arena_release_inverse_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStylePropertiesArchive.inverse_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.inverse_cell_diff_map_;
  _impl_.inverse_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::_internal_mutable_inverse_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inverse_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.inverse_cell_diff_map_ = p;
  }
  return _impl_.inverse_cell_diff_map_;
}
inline ::TSP::Reference* CommandSetTextStylePropertiesArchive::mutable_inverse_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStylePropertiesArchive.inverse_cell_diff_map)
  return _msg;
}
inline void CommandSetTextStylePropertiesArchive::set_allocated_inverse_cell_diff_map(::TSP::Reference* inverse_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inverse_cell_diff_map_);
  }
  if (inverse_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_cell_diff_map));
    if (message_arena != submessage_arena) {
      inverse_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inverse_cell_diff_map_ = inverse_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStylePropertiesArchive.inverse_cell_diff_map)
}

// -------------------------------------------------------------------

// CommandJustForNotifyingArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandJustForNotifyingArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandJustForNotifyingArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandJustForNotifyingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandJustForNotifyingArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandJustForNotifyingArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandJustForNotifyingArchive.super)
  return _internal_super();
}
inline void CommandJustForNotifyingArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandJustForNotifyingArchive.super)
}
inline ::TST::TableCommandArchive* CommandJustForNotifyingArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandJustForNotifyingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandJustForNotifyingArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandJustForNotifyingArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandJustForNotifyingArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandJustForNotifyingArchive.super)
  return _msg;
}
inline void CommandJustForNotifyingArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandJustForNotifyingArchive.super)
}

// required uint32 change_descriptor_type = 2;
inline bool CommandJustForNotifyingArchive::_internal_has_change_descriptor_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandJustForNotifyingArchive::has_change_descriptor_type() const {
  return _internal_has_change_descriptor_type();
}
inline void CommandJustForNotifyingArchive::clear_change_descriptor_type() {
  _impl_.change_descriptor_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandJustForNotifyingArchive::_internal_change_descriptor_type() const {
  return _impl_.change_descriptor_type_;
}
inline uint32_t CommandJustForNotifyingArchive::change_descriptor_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandJustForNotifyingArchive.change_descriptor_type)
  return _internal_change_descriptor_type();
}
inline void CommandJustForNotifyingArchive::_internal_set_change_descriptor_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.change_descriptor_type_ = value;
}
inline void CommandJustForNotifyingArchive::set_change_descriptor_type(uint32_t value) {
  _internal_set_change_descriptor_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandJustForNotifyingArchive.change_descriptor_type)
}

// -------------------------------------------------------------------

// CommandSetStorageLanguageArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetStorageLanguageArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetStorageLanguageArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetStorageLanguageArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.super)
  return _internal_super();
}
inline void CommandSetStorageLanguageArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStorageLanguageArchive.super)
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.super)
  return _msg;
}
inline void CommandSetStorageLanguageArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.super)
}

// required .TSP.Reference storage = 2;
inline bool CommandSetStorageLanguageArchive::_internal_has_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.storage_ != nullptr);
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& CommandSetStorageLanguageArchive::_internal_storage() const {
  const ::TSP::Reference* p = _impl_.storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetStorageLanguageArchive::storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.storage)
  return _internal_storage();
}
inline void CommandSetStorageLanguageArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  _impl_.storage_ = storage;
  if (storage) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStorageLanguageArchive.storage)
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::release_storage() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.storage)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::_internal_mutable_storage() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.storage_ = p;
  }
  return _impl_.storage_;
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.storage)
  return _msg;
}
inline void CommandSetStorageLanguageArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.storage)
}

// required string language = 3;
inline bool CommandSetStorageLanguageArchive::_internal_has_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_language() const {
  return _internal_has_language();
}
inline void CommandSetStorageLanguageArchive::clear_language() {
  _impl_.language_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetStorageLanguageArchive::language() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetStorageLanguageArchive::set_language(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetStorageLanguageArchive.language)
}
inline std::string* CommandSetStorageLanguageArchive::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.language)
  return _s;
}
inline const std::string& CommandSetStorageLanguageArchive::_internal_language() const {
  return _impl_.language_.Get();
}
inline void CommandSetStorageLanguageArchive::_internal_set_language(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetStorageLanguageArchive::_internal_mutable_language() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetStorageLanguageArchive::release_language() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetStorageLanguageArchive::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.language)
}

// required uint32 range_location = 4;
inline bool CommandSetStorageLanguageArchive::_internal_has_range_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_range_location() const {
  return _internal_has_range_location();
}
inline void CommandSetStorageLanguageArchive::clear_range_location() {
  _impl_.range_location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandSetStorageLanguageArchive::_internal_range_location() const {
  return _impl_.range_location_;
}
inline uint32_t CommandSetStorageLanguageArchive::range_location() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.range_location)
  return _internal_range_location();
}
inline void CommandSetStorageLanguageArchive::_internal_set_range_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.range_location_ = value;
}
inline void CommandSetStorageLanguageArchive::set_range_location(uint32_t value) {
  _internal_set_range_location(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetStorageLanguageArchive.range_location)
}

// required uint32 range_length = 5;
inline bool CommandSetStorageLanguageArchive::_internal_has_range_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_range_length() const {
  return _internal_has_range_length();
}
inline void CommandSetStorageLanguageArchive::clear_range_length() {
  _impl_.range_length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandSetStorageLanguageArchive::_internal_range_length() const {
  return _impl_.range_length_;
}
inline uint32_t CommandSetStorageLanguageArchive::range_length() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.range_length)
  return _internal_range_length();
}
inline void CommandSetStorageLanguageArchive::_internal_set_range_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.range_length_ = value;
}
inline void CommandSetStorageLanguageArchive::set_range_length(uint32_t value) {
  _internal_set_range_length(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetStorageLanguageArchive.range_length)
}

// optional .TSWP.UndoTransaction undo_transaction = 6;
inline bool CommandSetStorageLanguageArchive::_internal_has_undo_transaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_transaction_ != nullptr);
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& CommandSetStorageLanguageArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = _impl_.undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& CommandSetStorageLanguageArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void CommandSetStorageLanguageArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_transaction_);
  }
  _impl_.undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStorageLanguageArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::release_undo_transaction() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = _impl_.undo_transaction_;
  _impl_.undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.undo_transaction)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = _impl_.undo_transaction_;
  _impl_.undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::_internal_mutable_undo_transaction() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    _impl_.undo_transaction_ = p;
  }
  return _impl_.undo_transaction_;
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.undo_transaction)
  return _msg;
}
inline void CommandSetStorageLanguageArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.undo_transaction)
}

// -------------------------------------------------------------------

// CommandSetSortOrderArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetSortOrderArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetSortOrderArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetSortOrderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetSortOrderArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetSortOrderArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetSortOrderArchive.super)
  return _internal_super();
}
inline void CommandSetSortOrderArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetSortOrderArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetSortOrderArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetSortOrderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetSortOrderArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetSortOrderArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetSortOrderArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetSortOrderArchive.super)
  return _msg;
}
inline void CommandSetSortOrderArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetSortOrderArchive.super)
}

// optional .TST.TableSortOrderArchive old_sort_order = 2;
inline bool CommandSetSortOrderArchive::_internal_has_old_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_sort_order_ != nullptr);
  return value;
}
inline bool CommandSetSortOrderArchive::has_old_sort_order() const {
  return _internal_has_old_sort_order();
}
inline const ::TST::TableSortOrderArchive& CommandSetSortOrderArchive::_internal_old_sort_order() const {
  const ::TST::TableSortOrderArchive* p = _impl_.old_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderArchive&>(
      ::TST::_TableSortOrderArchive_default_instance_);
}
inline const ::TST::TableSortOrderArchive& CommandSetSortOrderArchive::old_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetSortOrderArchive.old_sort_order)
  return _internal_old_sort_order();
}
inline void CommandSetSortOrderArchive::unsafe_arena_set_allocated_old_sort_order(
    ::TST::TableSortOrderArchive* old_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_sort_order_);
  }
  _impl_.old_sort_order_ = old_sort_order;
  if (old_sort_order) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetSortOrderArchive.old_sort_order)
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::release_old_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableSortOrderArchive* temp = _impl_.old_sort_order_;
  _impl_.old_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::unsafe_arena_release_old_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandSetSortOrderArchive.old_sort_order)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableSortOrderArchive* temp = _impl_.old_sort_order_;
  _impl_.old_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::_internal_mutable_old_sort_order() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderArchive>(GetArenaForAllocation());
    _impl_.old_sort_order_ = p;
  }
  return _impl_.old_sort_order_;
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::mutable_old_sort_order() {
  ::TST::TableSortOrderArchive* _msg = _internal_mutable_old_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetSortOrderArchive.old_sort_order)
  return _msg;
}
inline void CommandSetSortOrderArchive::set_allocated_old_sort_order(::TST::TableSortOrderArchive* old_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_sort_order_);
  }
  if (old_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_sort_order));
    if (message_arena != submessage_arena) {
      old_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_sort_order_ = old_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetSortOrderArchive.old_sort_order)
}

// optional .TST.TableSortOrderArchive new_sort_order = 3;
inline bool CommandSetSortOrderArchive::_internal_has_new_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_sort_order_ != nullptr);
  return value;
}
inline bool CommandSetSortOrderArchive::has_new_sort_order() const {
  return _internal_has_new_sort_order();
}
inline const ::TST::TableSortOrderArchive& CommandSetSortOrderArchive::_internal_new_sort_order() const {
  const ::TST::TableSortOrderArchive* p = _impl_.new_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderArchive&>(
      ::TST::_TableSortOrderArchive_default_instance_);
}
inline const ::TST::TableSortOrderArchive& CommandSetSortOrderArchive::new_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetSortOrderArchive.new_sort_order)
  return _internal_new_sort_order();
}
inline void CommandSetSortOrderArchive::unsafe_arena_set_allocated_new_sort_order(
    ::TST::TableSortOrderArchive* new_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sort_order_);
  }
  _impl_.new_sort_order_ = new_sort_order;
  if (new_sort_order) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetSortOrderArchive.new_sort_order)
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::release_new_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableSortOrderArchive* temp = _impl_.new_sort_order_;
  _impl_.new_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::unsafe_arena_release_new_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandSetSortOrderArchive.new_sort_order)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableSortOrderArchive* temp = _impl_.new_sort_order_;
  _impl_.new_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::_internal_mutable_new_sort_order() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderArchive>(GetArenaForAllocation());
    _impl_.new_sort_order_ = p;
  }
  return _impl_.new_sort_order_;
}
inline ::TST::TableSortOrderArchive* CommandSetSortOrderArchive::mutable_new_sort_order() {
  ::TST::TableSortOrderArchive* _msg = _internal_mutable_new_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetSortOrderArchive.new_sort_order)
  return _msg;
}
inline void CommandSetSortOrderArchive::set_allocated_new_sort_order(::TST::TableSortOrderArchive* new_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sort_order_);
  }
  if (new_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_sort_order));
    if (message_arena != submessage_arena) {
      new_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_sort_order_ = new_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetSortOrderArchive.new_sort_order)
}

// -------------------------------------------------------------------

// CommandSetGroupSortOrderArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetGroupSortOrderArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetGroupSortOrderArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetGroupSortOrderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetGroupSortOrderArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetGroupSortOrderArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetGroupSortOrderArchive.super)
  return _internal_super();
}
inline void CommandSetGroupSortOrderArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetGroupSortOrderArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetGroupSortOrderArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetGroupSortOrderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetGroupSortOrderArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetGroupSortOrderArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetGroupSortOrderArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetGroupSortOrderArchive.super)
  return _msg;
}
inline void CommandSetGroupSortOrderArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetGroupSortOrderArchive.super)
}

// optional .TST.TableGroupSortOrderUIDArchive old_group_sort_order = 2;
inline bool CommandSetGroupSortOrderArchive::_internal_has_old_group_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_group_sort_order_ != nullptr);
  return value;
}
inline bool CommandSetGroupSortOrderArchive::has_old_group_sort_order() const {
  return _internal_has_old_group_sort_order();
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandSetGroupSortOrderArchive::_internal_old_group_sort_order() const {
  const ::TST::TableGroupSortOrderUIDArchive* p = _impl_.old_group_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableGroupSortOrderUIDArchive&>(
      ::TST::_TableGroupSortOrderUIDArchive_default_instance_);
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandSetGroupSortOrderArchive::old_group_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetGroupSortOrderArchive.old_group_sort_order)
  return _internal_old_group_sort_order();
}
inline void CommandSetGroupSortOrderArchive::unsafe_arena_set_allocated_old_group_sort_order(
    ::TST::TableGroupSortOrderUIDArchive* old_group_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_group_sort_order_);
  }
  _impl_.old_group_sort_order_ = old_group_sort_order;
  if (old_group_sort_order) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetGroupSortOrderArchive.old_group_sort_order)
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::release_old_group_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.old_group_sort_order_;
  _impl_.old_group_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::unsafe_arena_release_old_group_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandSetGroupSortOrderArchive.old_group_sort_order)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.old_group_sort_order_;
  _impl_.old_group_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::_internal_mutable_old_group_sort_order() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_group_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableGroupSortOrderUIDArchive>(GetArenaForAllocation());
    _impl_.old_group_sort_order_ = p;
  }
  return _impl_.old_group_sort_order_;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::mutable_old_group_sort_order() {
  ::TST::TableGroupSortOrderUIDArchive* _msg = _internal_mutable_old_group_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetGroupSortOrderArchive.old_group_sort_order)
  return _msg;
}
inline void CommandSetGroupSortOrderArchive::set_allocated_old_group_sort_order(::TST::TableGroupSortOrderUIDArchive* old_group_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_group_sort_order_);
  }
  if (old_group_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_group_sort_order));
    if (message_arena != submessage_arena) {
      old_group_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_group_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_group_sort_order_ = old_group_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetGroupSortOrderArchive.old_group_sort_order)
}

// optional .TST.TableGroupSortOrderUIDArchive new_group_sort_order = 3;
inline bool CommandSetGroupSortOrderArchive::_internal_has_new_group_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_group_sort_order_ != nullptr);
  return value;
}
inline bool CommandSetGroupSortOrderArchive::has_new_group_sort_order() const {
  return _internal_has_new_group_sort_order();
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandSetGroupSortOrderArchive::_internal_new_group_sort_order() const {
  const ::TST::TableGroupSortOrderUIDArchive* p = _impl_.new_group_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableGroupSortOrderUIDArchive&>(
      ::TST::_TableGroupSortOrderUIDArchive_default_instance_);
}
inline const ::TST::TableGroupSortOrderUIDArchive& CommandSetGroupSortOrderArchive::new_group_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetGroupSortOrderArchive.new_group_sort_order)
  return _internal_new_group_sort_order();
}
inline void CommandSetGroupSortOrderArchive::unsafe_arena_set_allocated_new_group_sort_order(
    ::TST::TableGroupSortOrderUIDArchive* new_group_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_group_sort_order_);
  }
  _impl_.new_group_sort_order_ = new_group_sort_order;
  if (new_group_sort_order) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetGroupSortOrderArchive.new_group_sort_order)
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::release_new_group_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.new_group_sort_order_;
  _impl_.new_group_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::unsafe_arena_release_new_group_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandSetGroupSortOrderArchive.new_group_sort_order)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableGroupSortOrderUIDArchive* temp = _impl_.new_group_sort_order_;
  _impl_.new_group_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::_internal_mutable_new_group_sort_order() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_group_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableGroupSortOrderUIDArchive>(GetArenaForAllocation());
    _impl_.new_group_sort_order_ = p;
  }
  return _impl_.new_group_sort_order_;
}
inline ::TST::TableGroupSortOrderUIDArchive* CommandSetGroupSortOrderArchive::mutable_new_group_sort_order() {
  ::TST::TableGroupSortOrderUIDArchive* _msg = _internal_mutable_new_group_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetGroupSortOrderArchive.new_group_sort_order)
  return _msg;
}
inline void CommandSetGroupSortOrderArchive::set_allocated_new_group_sort_order(::TST::TableGroupSortOrderUIDArchive* new_group_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_group_sort_order_);
  }
  if (new_group_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_group_sort_order));
    if (message_arena != submessage_arena) {
      new_group_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_group_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_group_sort_order_ = new_group_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetGroupSortOrderArchive.new_group_sort_order)
}

// -------------------------------------------------------------------

// CommandRewriteSortOrderForTableResizeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteSortOrderForTableResizeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteSortOrderForTableResizeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteSortOrderForTableResizeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteSortOrderForTableResizeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteSortOrderForTableResizeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteSortOrderForTableResizeArchive.super)
  return _internal_super();
}
inline void CommandRewriteSortOrderForTableResizeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteSortOrderForTableResizeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForTableResizeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForTableResizeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteSortOrderForTableResizeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForTableResizeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForTableResizeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteSortOrderForTableResizeArchive.super)
  return _msg;
}
inline void CommandRewriteSortOrderForTableResizeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteSortOrderForTableResizeArchive.super)
}

// optional .TST.TableSortOrderArchive old_sort_order = 2;
inline bool CommandRewriteSortOrderForTableResizeArchive::_internal_has_old_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_sort_order_ != nullptr);
  return value;
}
inline bool CommandRewriteSortOrderForTableResizeArchive::has_old_sort_order() const {
  return _internal_has_old_sort_order();
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForTableResizeArchive::_internal_old_sort_order() const {
  const ::TST::TableSortOrderArchive* p = _impl_.old_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderArchive&>(
      ::TST::_TableSortOrderArchive_default_instance_);
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForTableResizeArchive::old_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteSortOrderForTableResizeArchive.old_sort_order)
  return _internal_old_sort_order();
}
inline void CommandRewriteSortOrderForTableResizeArchive::unsafe_arena_set_allocated_old_sort_order(
    ::TST::TableSortOrderArchive* old_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_sort_order_);
  }
  _impl_.old_sort_order_ = old_sort_order;
  if (old_sort_order) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteSortOrderForTableResizeArchive.old_sort_order)
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::release_old_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableSortOrderArchive* temp = _impl_.old_sort_order_;
  _impl_.old_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::unsafe_arena_release_old_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteSortOrderForTableResizeArchive.old_sort_order)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableSortOrderArchive* temp = _impl_.old_sort_order_;
  _impl_.old_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::_internal_mutable_old_sort_order() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderArchive>(GetArenaForAllocation());
    _impl_.old_sort_order_ = p;
  }
  return _impl_.old_sort_order_;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::mutable_old_sort_order() {
  ::TST::TableSortOrderArchive* _msg = _internal_mutable_old_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteSortOrderForTableResizeArchive.old_sort_order)
  return _msg;
}
inline void CommandRewriteSortOrderForTableResizeArchive::set_allocated_old_sort_order(::TST::TableSortOrderArchive* old_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_sort_order_);
  }
  if (old_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_sort_order));
    if (message_arena != submessage_arena) {
      old_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_sort_order_ = old_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteSortOrderForTableResizeArchive.old_sort_order)
}

// optional .TST.TableSortOrderArchive new_sort_order = 3;
inline bool CommandRewriteSortOrderForTableResizeArchive::_internal_has_new_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_sort_order_ != nullptr);
  return value;
}
inline bool CommandRewriteSortOrderForTableResizeArchive::has_new_sort_order() const {
  return _internal_has_new_sort_order();
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForTableResizeArchive::_internal_new_sort_order() const {
  const ::TST::TableSortOrderArchive* p = _impl_.new_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderArchive&>(
      ::TST::_TableSortOrderArchive_default_instance_);
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForTableResizeArchive::new_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteSortOrderForTableResizeArchive.new_sort_order)
  return _internal_new_sort_order();
}
inline void CommandRewriteSortOrderForTableResizeArchive::unsafe_arena_set_allocated_new_sort_order(
    ::TST::TableSortOrderArchive* new_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sort_order_);
  }
  _impl_.new_sort_order_ = new_sort_order;
  if (new_sort_order) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteSortOrderForTableResizeArchive.new_sort_order)
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::release_new_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableSortOrderArchive* temp = _impl_.new_sort_order_;
  _impl_.new_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::unsafe_arena_release_new_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteSortOrderForTableResizeArchive.new_sort_order)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableSortOrderArchive* temp = _impl_.new_sort_order_;
  _impl_.new_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::_internal_mutable_new_sort_order() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderArchive>(GetArenaForAllocation());
    _impl_.new_sort_order_ = p;
  }
  return _impl_.new_sort_order_;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForTableResizeArchive::mutable_new_sort_order() {
  ::TST::TableSortOrderArchive* _msg = _internal_mutable_new_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteSortOrderForTableResizeArchive.new_sort_order)
  return _msg;
}
inline void CommandRewriteSortOrderForTableResizeArchive::set_allocated_new_sort_order(::TST::TableSortOrderArchive* new_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sort_order_);
  }
  if (new_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_sort_order));
    if (message_arena != submessage_arena) {
      new_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_sort_order_ = new_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteSortOrderForTableResizeArchive.new_sort_order)
}

// -------------------------------------------------------------------

// CommandRewriteSortOrderForRewriteSpecArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteSortOrderForRewriteSpecArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteSortOrderForRewriteSpecArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteSortOrderForRewriteSpecArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteSortOrderForRewriteSpecArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteSortOrderForRewriteSpecArchive.super)
  return _internal_super();
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForRewriteSpecArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteSortOrderForRewriteSpecArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForRewriteSpecArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteSortOrderForRewriteSpecArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteSortOrderForRewriteSpecArchive.super)
  return _msg;
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewriteSortOrderForRewriteSpecArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteSortOrderForRewriteSpecArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteSortOrderForRewriteSpecArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteSortOrderForRewriteSpecArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteSortOrderForRewriteSpecArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteSortOrderForRewriteSpecArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteSortOrderForRewriteSpecArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteSortOrderForRewriteSpecArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteSortOrderForRewriteSpecArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteSortOrderForRewriteSpecArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.rewrite_spec)
}

// optional .TST.TableSortOrderArchive old_sort_order = 3;
inline bool CommandRewriteSortOrderForRewriteSpecArchive::_internal_has_old_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_sort_order_ != nullptr);
  return value;
}
inline bool CommandRewriteSortOrderForRewriteSpecArchive::has_old_sort_order() const {
  return _internal_has_old_sort_order();
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForRewriteSpecArchive::_internal_old_sort_order() const {
  const ::TST::TableSortOrderArchive* p = _impl_.old_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderArchive&>(
      ::TST::_TableSortOrderArchive_default_instance_);
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForRewriteSpecArchive::old_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteSortOrderForRewriteSpecArchive.old_sort_order)
  return _internal_old_sort_order();
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_set_allocated_old_sort_order(
    ::TST::TableSortOrderArchive* old_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_sort_order_);
  }
  _impl_.old_sort_order_ = old_sort_order;
  if (old_sort_order) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.old_sort_order)
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::release_old_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableSortOrderArchive* temp = _impl_.old_sort_order_;
  _impl_.old_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_release_old_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteSortOrderForRewriteSpecArchive.old_sort_order)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableSortOrderArchive* temp = _impl_.old_sort_order_;
  _impl_.old_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::_internal_mutable_old_sort_order() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderArchive>(GetArenaForAllocation());
    _impl_.old_sort_order_ = p;
  }
  return _impl_.old_sort_order_;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::mutable_old_sort_order() {
  ::TST::TableSortOrderArchive* _msg = _internal_mutable_old_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteSortOrderForRewriteSpecArchive.old_sort_order)
  return _msg;
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::set_allocated_old_sort_order(::TST::TableSortOrderArchive* old_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_sort_order_);
  }
  if (old_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_sort_order));
    if (message_arena != submessage_arena) {
      old_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_sort_order_ = old_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.old_sort_order)
}

// optional .TST.TableSortOrderArchive new_sort_order = 4;
inline bool CommandRewriteSortOrderForRewriteSpecArchive::_internal_has_new_sort_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_sort_order_ != nullptr);
  return value;
}
inline bool CommandRewriteSortOrderForRewriteSpecArchive::has_new_sort_order() const {
  return _internal_has_new_sort_order();
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForRewriteSpecArchive::_internal_new_sort_order() const {
  const ::TST::TableSortOrderArchive* p = _impl_.new_sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderArchive&>(
      ::TST::_TableSortOrderArchive_default_instance_);
}
inline const ::TST::TableSortOrderArchive& CommandRewriteSortOrderForRewriteSpecArchive::new_sort_order() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteSortOrderForRewriteSpecArchive.new_sort_order)
  return _internal_new_sort_order();
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_set_allocated_new_sort_order(
    ::TST::TableSortOrderArchive* new_sort_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sort_order_);
  }
  _impl_.new_sort_order_ = new_sort_order;
  if (new_sort_order) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.new_sort_order)
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::release_new_sort_order() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableSortOrderArchive* temp = _impl_.new_sort_order_;
  _impl_.new_sort_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::unsafe_arena_release_new_sort_order() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteSortOrderForRewriteSpecArchive.new_sort_order)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableSortOrderArchive* temp = _impl_.new_sort_order_;
  _impl_.new_sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::_internal_mutable_new_sort_order() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderArchive>(GetArenaForAllocation());
    _impl_.new_sort_order_ = p;
  }
  return _impl_.new_sort_order_;
}
inline ::TST::TableSortOrderArchive* CommandRewriteSortOrderForRewriteSpecArchive::mutable_new_sort_order() {
  ::TST::TableSortOrderArchive* _msg = _internal_mutable_new_sort_order();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteSortOrderForRewriteSpecArchive.new_sort_order)
  return _msg;
}
inline void CommandRewriteSortOrderForRewriteSpecArchive::set_allocated_new_sort_order(::TST::TableSortOrderArchive* new_sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sort_order_);
  }
  if (new_sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_sort_order));
    if (message_arena != submessage_arena) {
      new_sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_sort_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_sort_order_ = new_sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteSortOrderForRewriteSpecArchive.new_sort_order)
}

// -------------------------------------------------------------------

// CommandSetFilterSetArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetFilterSetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFilterSetArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFilterSetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetFilterSetArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetFilterSetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetArchive.super)
  return _internal_super();
}
inline void CommandSetFilterSetArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFilterSetArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetFilterSetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFilterSetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterSetArchive.super)
  return _msg;
}
inline void CommandSetFilterSetArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFilterSetArchive.super)
}

// required .TSP.Reference new_filter_set = 2;
inline bool CommandSetFilterSetArchive::_internal_has_new_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_filter_set_ != nullptr);
  return value;
}
inline bool CommandSetFilterSetArchive::has_new_filter_set() const {
  return _internal_has_new_filter_set();
}
inline const ::TSP::Reference& CommandSetFilterSetArchive::_internal_new_filter_set() const {
  const ::TSP::Reference* p = _impl_.new_filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetFilterSetArchive::new_filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetArchive.new_filter_set)
  return _internal_new_filter_set();
}
inline void CommandSetFilterSetArchive::unsafe_arena_set_allocated_new_filter_set(
    ::TSP::Reference* new_filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_filter_set_);
  }
  _impl_.new_filter_set_ = new_filter_set;
  if (new_filter_set) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFilterSetArchive.new_filter_set)
}
inline ::TSP::Reference* CommandSetFilterSetArchive::release_new_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.new_filter_set_;
  _impl_.new_filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetFilterSetArchive::unsafe_arena_release_new_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFilterSetArchive.new_filter_set)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.new_filter_set_;
  _impl_.new_filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetFilterSetArchive::_internal_mutable_new_filter_set() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.new_filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_filter_set_ = p;
  }
  return _impl_.new_filter_set_;
}
inline ::TSP::Reference* CommandSetFilterSetArchive::mutable_new_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_new_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterSetArchive.new_filter_set)
  return _msg;
}
inline void CommandSetFilterSetArchive::set_allocated_new_filter_set(::TSP::Reference* new_filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_filter_set_);
  }
  if (new_filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_filter_set));
    if (message_arena != submessage_arena) {
      new_filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_filter_set_ = new_filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFilterSetArchive.new_filter_set)
}

// optional .TSP.Reference old_filter_set = 3;
inline bool CommandSetFilterSetArchive::_internal_has_old_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_filter_set_ != nullptr);
  return value;
}
inline bool CommandSetFilterSetArchive::has_old_filter_set() const {
  return _internal_has_old_filter_set();
}
inline const ::TSP::Reference& CommandSetFilterSetArchive::_internal_old_filter_set() const {
  const ::TSP::Reference* p = _impl_.old_filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetFilterSetArchive::old_filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetArchive.old_filter_set)
  return _internal_old_filter_set();
}
inline void CommandSetFilterSetArchive::unsafe_arena_set_allocated_old_filter_set(
    ::TSP::Reference* old_filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_filter_set_);
  }
  _impl_.old_filter_set_ = old_filter_set;
  if (old_filter_set) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFilterSetArchive.old_filter_set)
}
inline ::TSP::Reference* CommandSetFilterSetArchive::release_old_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_filter_set_;
  _impl_.old_filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetFilterSetArchive::unsafe_arena_release_old_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFilterSetArchive.old_filter_set)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_filter_set_;
  _impl_.old_filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetFilterSetArchive::_internal_mutable_old_filter_set() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_filter_set_ = p;
  }
  return _impl_.old_filter_set_;
}
inline ::TSP::Reference* CommandSetFilterSetArchive::mutable_old_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_old_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterSetArchive.old_filter_set)
  return _msg;
}
inline void CommandSetFilterSetArchive::set_allocated_old_filter_set(::TSP::Reference* old_filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_filter_set_);
  }
  if (old_filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_filter_set));
    if (message_arena != submessage_arena) {
      old_filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_filter_set_ = old_filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFilterSetArchive.old_filter_set)
}

// repeated .TSP.UUID rollback_uid_list = 4;
inline int CommandSetFilterSetArchive::_internal_rollback_uid_list_size() const {
  return _impl_.rollback_uid_list_.size();
}
inline int CommandSetFilterSetArchive::rollback_uid_list_size() const {
  return _internal_rollback_uid_list_size();
}
inline ::TSP::UUID* CommandSetFilterSetArchive::mutable_rollback_uid_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterSetArchive.rollback_uid_list)
  return _impl_.rollback_uid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetFilterSetArchive::mutable_rollback_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandSetFilterSetArchive.rollback_uid_list)
  return &_impl_.rollback_uid_list_;
}
inline const ::TSP::UUID& CommandSetFilterSetArchive::_internal_rollback_uid_list(int index) const {
  return _impl_.rollback_uid_list_.Get(index);
}
inline const ::TSP::UUID& CommandSetFilterSetArchive::rollback_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetArchive.rollback_uid_list)
  return _internal_rollback_uid_list(index);
}
inline ::TSP::UUID* CommandSetFilterSetArchive::_internal_add_rollback_uid_list() {
  return _impl_.rollback_uid_list_.Add();
}
inline ::TSP::UUID* CommandSetFilterSetArchive::add_rollback_uid_list() {
  ::TSP::UUID* _add = _internal_add_rollback_uid_list();
  // @@protoc_insertion_point(field_add:TST.CommandSetFilterSetArchive.rollback_uid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetFilterSetArchive::rollback_uid_list() const {
  // @@protoc_insertion_point(field_list:TST.CommandSetFilterSetArchive.rollback_uid_list)
  return _impl_.rollback_uid_list_;
}

// -------------------------------------------------------------------

// ColumnRowRestoreDataArchive

// repeated .TSP.UUID uid_list = 1;
inline int ColumnRowRestoreDataArchive::_internal_uid_list_size() const {
  return _impl_.uid_list_.size();
}
inline int ColumnRowRestoreDataArchive::uid_list_size() const {
  return _internal_uid_list_size();
}
inline ::TSP::UUID* ColumnRowRestoreDataArchive::mutable_uid_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowRestoreDataArchive.uid_list)
  return _impl_.uid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ColumnRowRestoreDataArchive::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowRestoreDataArchive.uid_list)
  return &_impl_.uid_list_;
}
inline const ::TSP::UUID& ColumnRowRestoreDataArchive::_internal_uid_list(int index) const {
  return _impl_.uid_list_.Get(index);
}
inline const ::TSP::UUID& ColumnRowRestoreDataArchive::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowRestoreDataArchive.uid_list)
  return _internal_uid_list(index);
}
inline ::TSP::UUID* ColumnRowRestoreDataArchive::_internal_add_uid_list() {
  return _impl_.uid_list_.Add();
}
inline ::TSP::UUID* ColumnRowRestoreDataArchive::add_uid_list() {
  ::TSP::UUID* _add = _internal_add_uid_list();
  // @@protoc_insertion_point(field_add:TST.ColumnRowRestoreDataArchive.uid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ColumnRowRestoreDataArchive::uid_list() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowRestoreDataArchive.uid_list)
  return _impl_.uid_list_;
}

// repeated .TST.ColumnRowMetadataArchive metadatas = 2;
inline int ColumnRowRestoreDataArchive::_internal_metadatas_size() const {
  return _impl_.metadatas_.size();
}
inline int ColumnRowRestoreDataArchive::metadatas_size() const {
  return _internal_metadatas_size();
}
inline void ColumnRowRestoreDataArchive::clear_metadatas() {
  _impl_.metadatas_.Clear();
}
inline ::TST::ColumnRowMetadataArchive* ColumnRowRestoreDataArchive::mutable_metadatas(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowRestoreDataArchive.metadatas)
  return _impl_.metadatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >*
ColumnRowRestoreDataArchive::mutable_metadatas() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowRestoreDataArchive.metadatas)
  return &_impl_.metadatas_;
}
inline const ::TST::ColumnRowMetadataArchive& ColumnRowRestoreDataArchive::_internal_metadatas(int index) const {
  return _impl_.metadatas_.Get(index);
}
inline const ::TST::ColumnRowMetadataArchive& ColumnRowRestoreDataArchive::metadatas(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowRestoreDataArchive.metadatas)
  return _internal_metadatas(index);
}
inline ::TST::ColumnRowMetadataArchive* ColumnRowRestoreDataArchive::_internal_add_metadatas() {
  return _impl_.metadatas_.Add();
}
inline ::TST::ColumnRowMetadataArchive* ColumnRowRestoreDataArchive::add_metadatas() {
  ::TST::ColumnRowMetadataArchive* _add = _internal_add_metadatas();
  // @@protoc_insertion_point(field_add:TST.ColumnRowRestoreDataArchive.metadatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnRowMetadataArchive >&
ColumnRowRestoreDataArchive::metadatas() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowRestoreDataArchive.metadatas)
  return _impl_.metadatas_;
}

// -------------------------------------------------------------------

// CommandTransposeTableArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandTransposeTableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandTransposeTableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandTransposeTableArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandTransposeTableArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.super)
  return _internal_super();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.super)
}
inline ::TST::TableCommandArchive* CommandTransposeTableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandTransposeTableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandTransposeTableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandTransposeTableArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.super)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.super)
}

// required .TST.ExpandedCellRange original_table_range = 2;
inline bool CommandTransposeTableArchive::_internal_has_original_table_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_table_range_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_original_table_range() const {
  return _internal_has_original_table_range();
}
inline const ::TST::ExpandedCellRange& CommandTransposeTableArchive::_internal_original_table_range() const {
  const ::TST::ExpandedCellRange* p = _impl_.original_table_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpandedCellRange&>(
      ::TST::_ExpandedCellRange_default_instance_);
}
inline const ::TST::ExpandedCellRange& CommandTransposeTableArchive::original_table_range() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.original_table_range)
  return _internal_original_table_range();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_original_table_range(
    ::TST::ExpandedCellRange* original_table_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_table_range_);
  }
  _impl_.original_table_range_ = original_table_range;
  if (original_table_range) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.original_table_range)
}
inline ::TST::ExpandedCellRange* CommandTransposeTableArchive::release_original_table_range() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::ExpandedCellRange* temp = _impl_.original_table_range_;
  _impl_.original_table_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ExpandedCellRange* CommandTransposeTableArchive::unsafe_arena_release_original_table_range() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.original_table_range)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::ExpandedCellRange* temp = _impl_.original_table_range_;
  _impl_.original_table_range_ = nullptr;
  return temp;
}
inline ::TST::ExpandedCellRange* CommandTransposeTableArchive::_internal_mutable_original_table_range() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.original_table_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpandedCellRange>(GetArenaForAllocation());
    _impl_.original_table_range_ = p;
  }
  return _impl_.original_table_range_;
}
inline ::TST::ExpandedCellRange* CommandTransposeTableArchive::mutable_original_table_range() {
  ::TST::ExpandedCellRange* _msg = _internal_mutable_original_table_range();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.original_table_range)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_original_table_range(::TST::ExpandedCellRange* original_table_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_table_range_);
  }
  if (original_table_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_table_range));
    if (message_arena != submessage_arena) {
      original_table_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_table_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.original_table_range_ = original_table_range;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.original_table_range)
}

// required .TSP.Reference original_cell_map = 3;
inline bool CommandTransposeTableArchive::_internal_has_original_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_cell_map_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_original_cell_map() const {
  return _internal_has_original_cell_map();
}
inline const ::TSP::Reference& CommandTransposeTableArchive::_internal_original_cell_map() const {
  const ::TSP::Reference* p = _impl_.original_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTransposeTableArchive::original_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.original_cell_map)
  return _internal_original_cell_map();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_original_cell_map(
    ::TSP::Reference* original_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_cell_map_);
  }
  _impl_.original_cell_map_ = original_cell_map;
  if (original_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.original_cell_map)
}
inline ::TSP::Reference* CommandTransposeTableArchive::release_original_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.original_cell_map_;
  _impl_.original_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::unsafe_arena_release_original_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.original_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.original_cell_map_;
  _impl_.original_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::_internal_mutable_original_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.original_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.original_cell_map_ = p;
  }
  return _impl_.original_cell_map_;
}
inline ::TSP::Reference* CommandTransposeTableArchive::mutable_original_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_original_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.original_cell_map)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_original_cell_map(::TSP::Reference* original_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_cell_map_);
  }
  if (original_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_cell_map));
    if (message_arena != submessage_arena) {
      original_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.original_cell_map_ = original_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.original_cell_map)
}

// required uint32 original_footer_row_count = 4;
inline bool CommandTransposeTableArchive::_internal_has_original_footer_row_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandTransposeTableArchive::has_original_footer_row_count() const {
  return _internal_has_original_footer_row_count();
}
inline void CommandTransposeTableArchive::clear_original_footer_row_count() {
  _impl_.original_footer_row_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CommandTransposeTableArchive::_internal_original_footer_row_count() const {
  return _impl_.original_footer_row_count_;
}
inline uint32_t CommandTransposeTableArchive::original_footer_row_count() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.original_footer_row_count)
  return _internal_original_footer_row_count();
}
inline void CommandTransposeTableArchive::_internal_set_original_footer_row_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.original_footer_row_count_ = value;
}
inline void CommandTransposeTableArchive::set_original_footer_row_count(uint32_t value) {
  _internal_set_original_footer_row_count(value);
  // @@protoc_insertion_point(field_set:TST.CommandTransposeTableArchive.original_footer_row_count)
}

// repeated float original_column_widths = 5;
inline int CommandTransposeTableArchive::_internal_original_column_widths_size() const {
  return _impl_.original_column_widths_.size();
}
inline int CommandTransposeTableArchive::original_column_widths_size() const {
  return _internal_original_column_widths_size();
}
inline void CommandTransposeTableArchive::clear_original_column_widths() {
  _impl_.original_column_widths_.Clear();
}
inline float CommandTransposeTableArchive::_internal_original_column_widths(int index) const {
  return _impl_.original_column_widths_.Get(index);
}
inline float CommandTransposeTableArchive::original_column_widths(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.original_column_widths)
  return _internal_original_column_widths(index);
}
inline void CommandTransposeTableArchive::set_original_column_widths(int index, float value) {
  _impl_.original_column_widths_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandTransposeTableArchive.original_column_widths)
}
inline void CommandTransposeTableArchive::_internal_add_original_column_widths(float value) {
  _impl_.original_column_widths_.Add(value);
}
inline void CommandTransposeTableArchive::add_original_column_widths(float value) {
  _internal_add_original_column_widths(value);
  // @@protoc_insertion_point(field_add:TST.CommandTransposeTableArchive.original_column_widths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandTransposeTableArchive::_internal_original_column_widths() const {
  return _impl_.original_column_widths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandTransposeTableArchive::original_column_widths() const {
  // @@protoc_insertion_point(field_list:TST.CommandTransposeTableArchive.original_column_widths)
  return _internal_original_column_widths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandTransposeTableArchive::_internal_mutable_original_column_widths() {
  return &_impl_.original_column_widths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandTransposeTableArchive::mutable_original_column_widths() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandTransposeTableArchive.original_column_widths)
  return _internal_mutable_original_column_widths();
}

// repeated float original_row_heights = 6;
inline int CommandTransposeTableArchive::_internal_original_row_heights_size() const {
  return _impl_.original_row_heights_.size();
}
inline int CommandTransposeTableArchive::original_row_heights_size() const {
  return _internal_original_row_heights_size();
}
inline void CommandTransposeTableArchive::clear_original_row_heights() {
  _impl_.original_row_heights_.Clear();
}
inline float CommandTransposeTableArchive::_internal_original_row_heights(int index) const {
  return _impl_.original_row_heights_.Get(index);
}
inline float CommandTransposeTableArchive::original_row_heights(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.original_row_heights)
  return _internal_original_row_heights(index);
}
inline void CommandTransposeTableArchive::set_original_row_heights(int index, float value) {
  _impl_.original_row_heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandTransposeTableArchive.original_row_heights)
}
inline void CommandTransposeTableArchive::_internal_add_original_row_heights(float value) {
  _impl_.original_row_heights_.Add(value);
}
inline void CommandTransposeTableArchive::add_original_row_heights(float value) {
  _internal_add_original_row_heights(value);
  // @@protoc_insertion_point(field_add:TST.CommandTransposeTableArchive.original_row_heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandTransposeTableArchive::_internal_original_row_heights() const {
  return _impl_.original_row_heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandTransposeTableArchive::original_row_heights() const {
  // @@protoc_insertion_point(field_list:TST.CommandTransposeTableArchive.original_row_heights)
  return _internal_original_row_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandTransposeTableArchive::_internal_mutable_original_row_heights() {
  return &_impl_.original_row_heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandTransposeTableArchive::mutable_original_row_heights() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandTransposeTableArchive.original_row_heights)
  return _internal_mutable_original_row_heights();
}

// repeated .TST.CellRange ineligible_merge_list = 7;
inline int CommandTransposeTableArchive::_internal_ineligible_merge_list_size() const {
  return _impl_.ineligible_merge_list_.size();
}
inline int CommandTransposeTableArchive::ineligible_merge_list_size() const {
  return _internal_ineligible_merge_list_size();
}
inline ::TST::CellRange* CommandTransposeTableArchive::mutable_ineligible_merge_list(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.ineligible_merge_list)
  return _impl_.ineligible_merge_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
CommandTransposeTableArchive::mutable_ineligible_merge_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandTransposeTableArchive.ineligible_merge_list)
  return &_impl_.ineligible_merge_list_;
}
inline const ::TST::CellRange& CommandTransposeTableArchive::_internal_ineligible_merge_list(int index) const {
  return _impl_.ineligible_merge_list_.Get(index);
}
inline const ::TST::CellRange& CommandTransposeTableArchive::ineligible_merge_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.ineligible_merge_list)
  return _internal_ineligible_merge_list(index);
}
inline ::TST::CellRange* CommandTransposeTableArchive::_internal_add_ineligible_merge_list() {
  return _impl_.ineligible_merge_list_.Add();
}
inline ::TST::CellRange* CommandTransposeTableArchive::add_ineligible_merge_list() {
  ::TST::CellRange* _add = _internal_add_ineligible_merge_list();
  // @@protoc_insertion_point(field_add:TST.CommandTransposeTableArchive.ineligible_merge_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
CommandTransposeTableArchive::ineligible_merge_list() const {
  // @@protoc_insertion_point(field_list:TST.CommandTransposeTableArchive.ineligible_merge_list)
  return _impl_.ineligible_merge_list_;
}

// required .TSP.Reference transposed_cell_map = 8;
inline bool CommandTransposeTableArchive::_internal_has_transposed_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transposed_cell_map_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_transposed_cell_map() const {
  return _internal_has_transposed_cell_map();
}
inline const ::TSP::Reference& CommandTransposeTableArchive::_internal_transposed_cell_map() const {
  const ::TSP::Reference* p = _impl_.transposed_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTransposeTableArchive::transposed_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.transposed_cell_map)
  return _internal_transposed_cell_map();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_transposed_cell_map(
    ::TSP::Reference* transposed_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transposed_cell_map_);
  }
  _impl_.transposed_cell_map_ = transposed_cell_map;
  if (transposed_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.transposed_cell_map)
}
inline ::TSP::Reference* CommandTransposeTableArchive::release_transposed_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.transposed_cell_map_;
  _impl_.transposed_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::unsafe_arena_release_transposed_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.transposed_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.transposed_cell_map_;
  _impl_.transposed_cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::_internal_mutable_transposed_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.transposed_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.transposed_cell_map_ = p;
  }
  return _impl_.transposed_cell_map_;
}
inline ::TSP::Reference* CommandTransposeTableArchive::mutable_transposed_cell_map() {
  ::TSP::Reference* _msg = _internal_mutable_transposed_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.transposed_cell_map)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_transposed_cell_map(::TSP::Reference* transposed_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transposed_cell_map_);
  }
  if (transposed_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transposed_cell_map));
    if (message_arena != submessage_arena) {
      transposed_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transposed_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.transposed_cell_map_ = transposed_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.transposed_cell_map)
}

// optional .TSP.Reference undo_formula_rewrite_command = 9;
inline bool CommandTransposeTableArchive::_internal_has_undo_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_undo_formula_rewrite_command() const {
  return _internal_has_undo_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandTransposeTableArchive::_internal_undo_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTransposeTableArchive::undo_formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.undo_formula_rewrite_command)
  return _internal_undo_formula_rewrite_command();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_undo_formula_rewrite_command(
    ::TSP::Reference* undo_formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  if (undo_formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.undo_formula_rewrite_command)
}
inline ::TSP::Reference* CommandTransposeTableArchive::release_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::unsafe_arena_release_undo_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.undo_formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::_internal_mutable_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.undo_formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_formula_rewrite_command_ = p;
  }
  return _impl_.undo_formula_rewrite_command_;
}
inline ::TSP::Reference* CommandTransposeTableArchive::mutable_undo_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.undo_formula_rewrite_command)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  if (undo_formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_formula_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.undo_formula_rewrite_command)
}

// optional .TSP.Reference rich_text_subcommands = 10;
inline bool CommandTransposeTableArchive::_internal_has_rich_text_subcommands() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rich_text_subcommands_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_rich_text_subcommands() const {
  return _internal_has_rich_text_subcommands();
}
inline const ::TSP::Reference& CommandTransposeTableArchive::_internal_rich_text_subcommands() const {
  const ::TSP::Reference* p = _impl_.rich_text_subcommands_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTransposeTableArchive::rich_text_subcommands() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.rich_text_subcommands)
  return _internal_rich_text_subcommands();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_rich_text_subcommands(
    ::TSP::Reference* rich_text_subcommands) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rich_text_subcommands_);
  }
  _impl_.rich_text_subcommands_ = rich_text_subcommands;
  if (rich_text_subcommands) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.rich_text_subcommands)
}
inline ::TSP::Reference* CommandTransposeTableArchive::release_rich_text_subcommands() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.rich_text_subcommands_;
  _impl_.rich_text_subcommands_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::unsafe_arena_release_rich_text_subcommands() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.rich_text_subcommands)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.rich_text_subcommands_;
  _impl_.rich_text_subcommands_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTransposeTableArchive::_internal_mutable_rich_text_subcommands() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.rich_text_subcommands_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.rich_text_subcommands_ = p;
  }
  return _impl_.rich_text_subcommands_;
}
inline ::TSP::Reference* CommandTransposeTableArchive::mutable_rich_text_subcommands() {
  ::TSP::Reference* _msg = _internal_mutable_rich_text_subcommands();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.rich_text_subcommands)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_rich_text_subcommands(::TSP::Reference* rich_text_subcommands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rich_text_subcommands_);
  }
  if (rich_text_subcommands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rich_text_subcommands));
    if (message_arena != submessage_arena) {
      rich_text_subcommands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rich_text_subcommands, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.rich_text_subcommands_ = rich_text_subcommands;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.rich_text_subcommands)
}

// optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
inline bool CommandTransposeTableArchive::_internal_has_column_restore_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column_restore_data_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_column_restore_data() const {
  return _internal_has_column_restore_data();
}
inline void CommandTransposeTableArchive::clear_column_restore_data() {
  if (_impl_.column_restore_data_ != nullptr) _impl_.column_restore_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::TST::ColumnRowRestoreDataArchive& CommandTransposeTableArchive::_internal_column_restore_data() const {
  const ::TST::ColumnRowRestoreDataArchive* p = _impl_.column_restore_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnRowRestoreDataArchive&>(
      ::TST::_ColumnRowRestoreDataArchive_default_instance_);
}
inline const ::TST::ColumnRowRestoreDataArchive& CommandTransposeTableArchive::column_restore_data() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.column_restore_data)
  return _internal_column_restore_data();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_column_restore_data(
    ::TST::ColumnRowRestoreDataArchive* column_restore_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_restore_data_);
  }
  _impl_.column_restore_data_ = column_restore_data;
  if (column_restore_data) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.column_restore_data)
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::release_column_restore_data() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::ColumnRowRestoreDataArchive* temp = _impl_.column_restore_data_;
  _impl_.column_restore_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::unsafe_arena_release_column_restore_data() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.column_restore_data)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::ColumnRowRestoreDataArchive* temp = _impl_.column_restore_data_;
  _impl_.column_restore_data_ = nullptr;
  return temp;
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::_internal_mutable_column_restore_data() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.column_restore_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnRowRestoreDataArchive>(GetArenaForAllocation());
    _impl_.column_restore_data_ = p;
  }
  return _impl_.column_restore_data_;
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::mutable_column_restore_data() {
  ::TST::ColumnRowRestoreDataArchive* _msg = _internal_mutable_column_restore_data();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.column_restore_data)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_column_restore_data(::TST::ColumnRowRestoreDataArchive* column_restore_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.column_restore_data_;
  }
  if (column_restore_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(column_restore_data);
    if (message_arena != submessage_arena) {
      column_restore_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_restore_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.column_restore_data_ = column_restore_data;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.column_restore_data)
}

// optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
inline bool CommandTransposeTableArchive::_internal_has_row_restore_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.row_restore_data_ != nullptr);
  return value;
}
inline bool CommandTransposeTableArchive::has_row_restore_data() const {
  return _internal_has_row_restore_data();
}
inline void CommandTransposeTableArchive::clear_row_restore_data() {
  if (_impl_.row_restore_data_ != nullptr) _impl_.row_restore_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::TST::ColumnRowRestoreDataArchive& CommandTransposeTableArchive::_internal_row_restore_data() const {
  const ::TST::ColumnRowRestoreDataArchive* p = _impl_.row_restore_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnRowRestoreDataArchive&>(
      ::TST::_ColumnRowRestoreDataArchive_default_instance_);
}
inline const ::TST::ColumnRowRestoreDataArchive& CommandTransposeTableArchive::row_restore_data() const {
  // @@protoc_insertion_point(field_get:TST.CommandTransposeTableArchive.row_restore_data)
  return _internal_row_restore_data();
}
inline void CommandTransposeTableArchive::unsafe_arena_set_allocated_row_restore_data(
    ::TST::ColumnRowRestoreDataArchive* row_restore_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_restore_data_);
  }
  _impl_.row_restore_data_ = row_restore_data;
  if (row_restore_data) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTransposeTableArchive.row_restore_data)
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::release_row_restore_data() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::ColumnRowRestoreDataArchive* temp = _impl_.row_restore_data_;
  _impl_.row_restore_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::unsafe_arena_release_row_restore_data() {
  // @@protoc_insertion_point(field_release:TST.CommandTransposeTableArchive.row_restore_data)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::ColumnRowRestoreDataArchive* temp = _impl_.row_restore_data_;
  _impl_.row_restore_data_ = nullptr;
  return temp;
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::_internal_mutable_row_restore_data() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.row_restore_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnRowRestoreDataArchive>(GetArenaForAllocation());
    _impl_.row_restore_data_ = p;
  }
  return _impl_.row_restore_data_;
}
inline ::TST::ColumnRowRestoreDataArchive* CommandTransposeTableArchive::mutable_row_restore_data() {
  ::TST::ColumnRowRestoreDataArchive* _msg = _internal_mutable_row_restore_data();
  // @@protoc_insertion_point(field_mutable:TST.CommandTransposeTableArchive.row_restore_data)
  return _msg;
}
inline void CommandTransposeTableArchive::set_allocated_row_restore_data(::TST::ColumnRowRestoreDataArchive* row_restore_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.row_restore_data_;
  }
  if (row_restore_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(row_restore_data);
    if (message_arena != submessage_arena) {
      row_restore_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_restore_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.row_restore_data_ = row_restore_data;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTransposeTableArchive.row_restore_data)
}

// -------------------------------------------------------------------

// CommandSetStructuredTextImportRecordArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetStructuredTextImportRecordArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetStructuredTextImportRecordArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetStructuredTextImportRecordArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetStructuredTextImportRecordArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetStructuredTextImportRecordArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStructuredTextImportRecordArchive.super)
  return _internal_super();
}
inline void CommandSetStructuredTextImportRecordArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStructuredTextImportRecordArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetStructuredTextImportRecordArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetStructuredTextImportRecordArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStructuredTextImportRecordArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetStructuredTextImportRecordArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetStructuredTextImportRecordArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStructuredTextImportRecordArchive.super)
  return _msg;
}
inline void CommandSetStructuredTextImportRecordArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStructuredTextImportRecordArchive.super)
}

// optional .TST.StructuredTextImportRecord new_import_record = 2;
inline bool CommandSetStructuredTextImportRecordArchive::_internal_has_new_import_record() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_import_record_ != nullptr);
  return value;
}
inline bool CommandSetStructuredTextImportRecordArchive::has_new_import_record() const {
  return _internal_has_new_import_record();
}
inline const ::TST::StructuredTextImportRecord& CommandSetStructuredTextImportRecordArchive::_internal_new_import_record() const {
  const ::TST::StructuredTextImportRecord* p = _impl_.new_import_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::StructuredTextImportRecord&>(
      ::TST::_StructuredTextImportRecord_default_instance_);
}
inline const ::TST::StructuredTextImportRecord& CommandSetStructuredTextImportRecordArchive::new_import_record() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStructuredTextImportRecordArchive.new_import_record)
  return _internal_new_import_record();
}
inline void CommandSetStructuredTextImportRecordArchive::unsafe_arena_set_allocated_new_import_record(
    ::TST::StructuredTextImportRecord* new_import_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_import_record_);
  }
  _impl_.new_import_record_ = new_import_record;
  if (new_import_record) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStructuredTextImportRecordArchive.new_import_record)
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::release_new_import_record() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::StructuredTextImportRecord* temp = _impl_.new_import_record_;
  _impl_.new_import_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::unsafe_arena_release_new_import_record() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStructuredTextImportRecordArchive.new_import_record)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::StructuredTextImportRecord* temp = _impl_.new_import_record_;
  _impl_.new_import_record_ = nullptr;
  return temp;
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::_internal_mutable_new_import_record() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.new_import_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::StructuredTextImportRecord>(GetArenaForAllocation());
    _impl_.new_import_record_ = p;
  }
  return _impl_.new_import_record_;
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::mutable_new_import_record() {
  ::TST::StructuredTextImportRecord* _msg = _internal_mutable_new_import_record();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStructuredTextImportRecordArchive.new_import_record)
  return _msg;
}
inline void CommandSetStructuredTextImportRecordArchive::set_allocated_new_import_record(::TST::StructuredTextImportRecord* new_import_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_import_record_);
  }
  if (new_import_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_import_record));
    if (message_arena != submessage_arena) {
      new_import_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_import_record, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_import_record_ = new_import_record;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStructuredTextImportRecordArchive.new_import_record)
}

// optional .TST.StructuredTextImportRecord old_import_record = 3;
inline bool CommandSetStructuredTextImportRecordArchive::_internal_has_old_import_record() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_import_record_ != nullptr);
  return value;
}
inline bool CommandSetStructuredTextImportRecordArchive::has_old_import_record() const {
  return _internal_has_old_import_record();
}
inline const ::TST::StructuredTextImportRecord& CommandSetStructuredTextImportRecordArchive::_internal_old_import_record() const {
  const ::TST::StructuredTextImportRecord* p = _impl_.old_import_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::StructuredTextImportRecord&>(
      ::TST::_StructuredTextImportRecord_default_instance_);
}
inline const ::TST::StructuredTextImportRecord& CommandSetStructuredTextImportRecordArchive::old_import_record() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStructuredTextImportRecordArchive.old_import_record)
  return _internal_old_import_record();
}
inline void CommandSetStructuredTextImportRecordArchive::unsafe_arena_set_allocated_old_import_record(
    ::TST::StructuredTextImportRecord* old_import_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_import_record_);
  }
  _impl_.old_import_record_ = old_import_record;
  if (old_import_record) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStructuredTextImportRecordArchive.old_import_record)
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::release_old_import_record() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::StructuredTextImportRecord* temp = _impl_.old_import_record_;
  _impl_.old_import_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::unsafe_arena_release_old_import_record() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStructuredTextImportRecordArchive.old_import_record)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::StructuredTextImportRecord* temp = _impl_.old_import_record_;
  _impl_.old_import_record_ = nullptr;
  return temp;
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::_internal_mutable_old_import_record() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_import_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::StructuredTextImportRecord>(GetArenaForAllocation());
    _impl_.old_import_record_ = p;
  }
  return _impl_.old_import_record_;
}
inline ::TST::StructuredTextImportRecord* CommandSetStructuredTextImportRecordArchive::mutable_old_import_record() {
  ::TST::StructuredTextImportRecord* _msg = _internal_mutable_old_import_record();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStructuredTextImportRecordArchive.old_import_record)
  return _msg;
}
inline void CommandSetStructuredTextImportRecordArchive::set_allocated_old_import_record(::TST::StructuredTextImportRecord* old_import_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_import_record_);
  }
  if (old_import_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_import_record));
    if (message_arena != submessage_arena) {
      old_import_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_import_record, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_import_record_ = old_import_record;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStructuredTextImportRecordArchive.old_import_record)
}

// -------------------------------------------------------------------

// CommandCategoryCollapseExpandGroupArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandCategoryCollapseExpandGroupArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCategoryCollapseExpandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandCategoryCollapseExpandGroupArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandCategoryCollapseExpandGroupArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCategoryCollapseExpandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryCollapseExpandGroupArchive.super)
  return _internal_super();
}
inline void CommandCategoryCollapseExpandGroupArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.super)
}
inline ::TST::TableCommandArchive* CommandCategoryCollapseExpandGroupArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryCollapseExpandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryCollapseExpandGroupArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryCollapseExpandGroupArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCategoryCollapseExpandGroupArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryCollapseExpandGroupArchive.super)
  return _msg;
}
inline void CommandCategoryCollapseExpandGroupArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.super)
}

// required bool is_collapsing = 2;
inline bool CommandCategoryCollapseExpandGroupArchive::_internal_has_is_collapsing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandCategoryCollapseExpandGroupArchive::has_is_collapsing() const {
  return _internal_has_is_collapsing();
}
inline void CommandCategoryCollapseExpandGroupArchive::clear_is_collapsing() {
  _impl_.is_collapsing_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandCategoryCollapseExpandGroupArchive::_internal_is_collapsing() const {
  return _impl_.is_collapsing_;
}
inline bool CommandCategoryCollapseExpandGroupArchive::is_collapsing() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryCollapseExpandGroupArchive.is_collapsing)
  return _internal_is_collapsing();
}
inline void CommandCategoryCollapseExpandGroupArchive::_internal_set_is_collapsing(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_collapsing_ = value;
}
inline void CommandCategoryCollapseExpandGroupArchive::set_is_collapsing(bool value) {
  _internal_set_is_collapsing(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryCollapseExpandGroupArchive.is_collapsing)
}

// required .TST.GroupColumnListArchive grouping_columns = 3;
inline bool CommandCategoryCollapseExpandGroupArchive::_internal_has_grouping_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grouping_columns_ != nullptr);
  return value;
}
inline bool CommandCategoryCollapseExpandGroupArchive::has_grouping_columns() const {
  return _internal_has_grouping_columns();
}
inline const ::TST::GroupColumnListArchive& CommandCategoryCollapseExpandGroupArchive::_internal_grouping_columns() const {
  const ::TST::GroupColumnListArchive* p = _impl_.grouping_columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandCategoryCollapseExpandGroupArchive::grouping_columns() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryCollapseExpandGroupArchive.grouping_columns)
  return _internal_grouping_columns();
}
inline void CommandCategoryCollapseExpandGroupArchive::unsafe_arena_set_allocated_grouping_columns(
    ::TST::GroupColumnListArchive* grouping_columns) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_columns_);
  }
  _impl_.grouping_columns_ = grouping_columns;
  if (grouping_columns) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.grouping_columns)
}
inline ::TST::GroupColumnListArchive* CommandCategoryCollapseExpandGroupArchive::release_grouping_columns() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::GroupColumnListArchive* temp = _impl_.grouping_columns_;
  _impl_.grouping_columns_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategoryCollapseExpandGroupArchive::unsafe_arena_release_grouping_columns() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryCollapseExpandGroupArchive.grouping_columns)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::GroupColumnListArchive* temp = _impl_.grouping_columns_;
  _impl_.grouping_columns_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategoryCollapseExpandGroupArchive::_internal_mutable_grouping_columns() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.grouping_columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.grouping_columns_ = p;
  }
  return _impl_.grouping_columns_;
}
inline ::TST::GroupColumnListArchive* CommandCategoryCollapseExpandGroupArchive::mutable_grouping_columns() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_grouping_columns();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryCollapseExpandGroupArchive.grouping_columns)
  return _msg;
}
inline void CommandCategoryCollapseExpandGroupArchive::set_allocated_grouping_columns(::TST::GroupColumnListArchive* grouping_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_columns_);
  }
  if (grouping_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_columns));
    if (message_arena != submessage_arena) {
      grouping_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_columns, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.grouping_columns_ = grouping_columns;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.grouping_columns)
}

// required .TST.ExpandCollapseStateArchive collapse_state = 4;
inline bool CommandCategoryCollapseExpandGroupArchive::_internal_has_collapse_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.collapse_state_ != nullptr);
  return value;
}
inline bool CommandCategoryCollapseExpandGroupArchive::has_collapse_state() const {
  return _internal_has_collapse_state();
}
inline const ::TST::ExpandCollapseStateArchive& CommandCategoryCollapseExpandGroupArchive::_internal_collapse_state() const {
  const ::TST::ExpandCollapseStateArchive* p = _impl_.collapse_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpandCollapseStateArchive&>(
      ::TST::_ExpandCollapseStateArchive_default_instance_);
}
inline const ::TST::ExpandCollapseStateArchive& CommandCategoryCollapseExpandGroupArchive::collapse_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryCollapseExpandGroupArchive.collapse_state)
  return _internal_collapse_state();
}
inline void CommandCategoryCollapseExpandGroupArchive::unsafe_arena_set_allocated_collapse_state(
    ::TST::ExpandCollapseStateArchive* collapse_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collapse_state_);
  }
  _impl_.collapse_state_ = collapse_state;
  if (collapse_state) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.collapse_state)
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::release_collapse_state() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::ExpandCollapseStateArchive* temp = _impl_.collapse_state_;
  _impl_.collapse_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::unsafe_arena_release_collapse_state() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryCollapseExpandGroupArchive.collapse_state)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::ExpandCollapseStateArchive* temp = _impl_.collapse_state_;
  _impl_.collapse_state_ = nullptr;
  return temp;
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::_internal_mutable_collapse_state() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.collapse_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpandCollapseStateArchive>(GetArenaForAllocation());
    _impl_.collapse_state_ = p;
  }
  return _impl_.collapse_state_;
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::mutable_collapse_state() {
  ::TST::ExpandCollapseStateArchive* _msg = _internal_mutable_collapse_state();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryCollapseExpandGroupArchive.collapse_state)
  return _msg;
}
inline void CommandCategoryCollapseExpandGroupArchive::set_allocated_collapse_state(::TST::ExpandCollapseStateArchive* collapse_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collapse_state_);
  }
  if (collapse_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collapse_state));
    if (message_arena != submessage_arena) {
      collapse_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collapse_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.collapse_state_ = collapse_state;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.collapse_state)
}

// optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
inline bool CommandCategoryCollapseExpandGroupArchive::_internal_has_undo_collapse_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_collapse_state_ != nullptr);
  return value;
}
inline bool CommandCategoryCollapseExpandGroupArchive::has_undo_collapse_state() const {
  return _internal_has_undo_collapse_state();
}
inline const ::TST::ExpandCollapseStateArchive& CommandCategoryCollapseExpandGroupArchive::_internal_undo_collapse_state() const {
  const ::TST::ExpandCollapseStateArchive* p = _impl_.undo_collapse_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpandCollapseStateArchive&>(
      ::TST::_ExpandCollapseStateArchive_default_instance_);
}
inline const ::TST::ExpandCollapseStateArchive& CommandCategoryCollapseExpandGroupArchive::undo_collapse_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryCollapseExpandGroupArchive.undo_collapse_state)
  return _internal_undo_collapse_state();
}
inline void CommandCategoryCollapseExpandGroupArchive::unsafe_arena_set_allocated_undo_collapse_state(
    ::TST::ExpandCollapseStateArchive* undo_collapse_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_collapse_state_);
  }
  _impl_.undo_collapse_state_ = undo_collapse_state;
  if (undo_collapse_state) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.undo_collapse_state)
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::release_undo_collapse_state() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::ExpandCollapseStateArchive* temp = _impl_.undo_collapse_state_;
  _impl_.undo_collapse_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::unsafe_arena_release_undo_collapse_state() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryCollapseExpandGroupArchive.undo_collapse_state)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::ExpandCollapseStateArchive* temp = _impl_.undo_collapse_state_;
  _impl_.undo_collapse_state_ = nullptr;
  return temp;
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::_internal_mutable_undo_collapse_state() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_collapse_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpandCollapseStateArchive>(GetArenaForAllocation());
    _impl_.undo_collapse_state_ = p;
  }
  return _impl_.undo_collapse_state_;
}
inline ::TST::ExpandCollapseStateArchive* CommandCategoryCollapseExpandGroupArchive::mutable_undo_collapse_state() {
  ::TST::ExpandCollapseStateArchive* _msg = _internal_mutable_undo_collapse_state();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryCollapseExpandGroupArchive.undo_collapse_state)
  return _msg;
}
inline void CommandCategoryCollapseExpandGroupArchive::set_allocated_undo_collapse_state(::TST::ExpandCollapseStateArchive* undo_collapse_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_collapse_state_);
  }
  if (undo_collapse_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_collapse_state));
    if (message_arena != submessage_arena) {
      undo_collapse_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_collapse_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_collapse_state_ = undo_collapse_state;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryCollapseExpandGroupArchive.undo_collapse_state)
}

// -------------------------------------------------------------------

// CommandCategoryChangeSummaryAggregateType

// required .TST.TableCommandArchive super = 1;
inline bool CommandCategoryChangeSummaryAggregateType::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCategoryChangeSummaryAggregateType::has_super() const {
  return _internal_has_super();
}
inline void CommandCategoryChangeSummaryAggregateType::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandCategoryChangeSummaryAggregateType::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCategoryChangeSummaryAggregateType::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryChangeSummaryAggregateType.super)
  return _internal_super();
}
inline void CommandCategoryChangeSummaryAggregateType::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryChangeSummaryAggregateType.super)
}
inline ::TST::TableCommandArchive* CommandCategoryChangeSummaryAggregateType::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryChangeSummaryAggregateType::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryChangeSummaryAggregateType.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryChangeSummaryAggregateType::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCategoryChangeSummaryAggregateType::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryChangeSummaryAggregateType.super)
  return _msg;
}
inline void CommandCategoryChangeSummaryAggregateType::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryChangeSummaryAggregateType.super)
}

// required uint32 aggregate_type = 2;
inline bool CommandCategoryChangeSummaryAggregateType::_internal_has_aggregate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandCategoryChangeSummaryAggregateType::has_aggregate_type() const {
  return _internal_has_aggregate_type();
}
inline void CommandCategoryChangeSummaryAggregateType::clear_aggregate_type() {
  _impl_.aggregate_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandCategoryChangeSummaryAggregateType::_internal_aggregate_type() const {
  return _impl_.aggregate_type_;
}
inline uint32_t CommandCategoryChangeSummaryAggregateType::aggregate_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryChangeSummaryAggregateType.aggregate_type)
  return _internal_aggregate_type();
}
inline void CommandCategoryChangeSummaryAggregateType::_internal_set_aggregate_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.aggregate_type_ = value;
}
inline void CommandCategoryChangeSummaryAggregateType::set_aggregate_type(uint32_t value) {
  _internal_set_aggregate_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryChangeSummaryAggregateType.aggregate_type)
}

// required uint32 undo_aggregate_type = 3;
inline bool CommandCategoryChangeSummaryAggregateType::_internal_has_undo_aggregate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandCategoryChangeSummaryAggregateType::has_undo_aggregate_type() const {
  return _internal_has_undo_aggregate_type();
}
inline void CommandCategoryChangeSummaryAggregateType::clear_undo_aggregate_type() {
  _impl_.undo_aggregate_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandCategoryChangeSummaryAggregateType::_internal_undo_aggregate_type() const {
  return _impl_.undo_aggregate_type_;
}
inline uint32_t CommandCategoryChangeSummaryAggregateType::undo_aggregate_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryChangeSummaryAggregateType.undo_aggregate_type)
  return _internal_undo_aggregate_type();
}
inline void CommandCategoryChangeSummaryAggregateType::_internal_set_undo_aggregate_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.undo_aggregate_type_ = value;
}
inline void CommandCategoryChangeSummaryAggregateType::set_undo_aggregate_type(uint32_t value) {
  _internal_set_undo_aggregate_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryChangeSummaryAggregateType.undo_aggregate_type)
}

// required .TSP.UUID column_uid = 4;
inline bool CommandCategoryChangeSummaryAggregateType::_internal_has_column_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column_uid_ != nullptr);
  return value;
}
inline bool CommandCategoryChangeSummaryAggregateType::has_column_uid() const {
  return _internal_has_column_uid();
}
inline const ::TSP::UUID& CommandCategoryChangeSummaryAggregateType::_internal_column_uid() const {
  const ::TSP::UUID* p = _impl_.column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandCategoryChangeSummaryAggregateType::column_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryChangeSummaryAggregateType.column_uid)
  return _internal_column_uid();
}
inline void CommandCategoryChangeSummaryAggregateType::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_uid_);
  }
  _impl_.column_uid_ = column_uid;
  if (column_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryChangeSummaryAggregateType.column_uid)
}
inline ::TSP::UUID* CommandCategoryChangeSummaryAggregateType::release_column_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.column_uid_;
  _impl_.column_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandCategoryChangeSummaryAggregateType::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryChangeSummaryAggregateType.column_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.column_uid_;
  _impl_.column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandCategoryChangeSummaryAggregateType::_internal_mutable_column_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.column_uid_ = p;
  }
  return _impl_.column_uid_;
}
inline ::TSP::UUID* CommandCategoryChangeSummaryAggregateType::mutable_column_uid() {
  ::TSP::UUID* _msg = _internal_mutable_column_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryChangeSummaryAggregateType.column_uid)
  return _msg;
}
inline void CommandCategoryChangeSummaryAggregateType::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_uid_);
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid));
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryChangeSummaryAggregateType.column_uid)
}

// required sint32 group_level = 5;
inline bool CommandCategoryChangeSummaryAggregateType::_internal_has_group_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandCategoryChangeSummaryAggregateType::has_group_level() const {
  return _internal_has_group_level();
}
inline void CommandCategoryChangeSummaryAggregateType::clear_group_level() {
  _impl_.group_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CommandCategoryChangeSummaryAggregateType::_internal_group_level() const {
  return _impl_.group_level_;
}
inline int32_t CommandCategoryChangeSummaryAggregateType::group_level() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryChangeSummaryAggregateType.group_level)
  return _internal_group_level();
}
inline void CommandCategoryChangeSummaryAggregateType::_internal_set_group_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.group_level_ = value;
}
inline void CommandCategoryChangeSummaryAggregateType::set_group_level(int32_t value) {
  _internal_set_group_level(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryChangeSummaryAggregateType.group_level)
}

// -------------------------------------------------------------------

// CommandCategorySetLabelRowVisibility

// required .TST.TableCommandArchive super = 1;
inline bool CommandCategorySetLabelRowVisibility::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCategorySetLabelRowVisibility::has_super() const {
  return _internal_has_super();
}
inline void CommandCategorySetLabelRowVisibility::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandCategorySetLabelRowVisibility::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCategorySetLabelRowVisibility::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetLabelRowVisibility.super)
  return _internal_super();
}
inline void CommandCategorySetLabelRowVisibility::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategorySetLabelRowVisibility.super)
}
inline ::TST::TableCommandArchive* CommandCategorySetLabelRowVisibility::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategorySetLabelRowVisibility::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCategorySetLabelRowVisibility.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategorySetLabelRowVisibility::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCategorySetLabelRowVisibility::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategorySetLabelRowVisibility.super)
  return _msg;
}
inline void CommandCategorySetLabelRowVisibility::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategorySetLabelRowVisibility.super)
}

// required uint32 group_level = 2;
inline bool CommandCategorySetLabelRowVisibility::_internal_has_group_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandCategorySetLabelRowVisibility::has_group_level() const {
  return _internal_has_group_level();
}
inline void CommandCategorySetLabelRowVisibility::clear_group_level() {
  _impl_.group_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandCategorySetLabelRowVisibility::_internal_group_level() const {
  return _impl_.group_level_;
}
inline uint32_t CommandCategorySetLabelRowVisibility::group_level() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetLabelRowVisibility.group_level)
  return _internal_group_level();
}
inline void CommandCategorySetLabelRowVisibility::_internal_set_group_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_level_ = value;
}
inline void CommandCategorySetLabelRowVisibility::set_group_level(uint32_t value) {
  _internal_set_group_level(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetLabelRowVisibility.group_level)
}

// required uint32 label_row_visibility = 3;
inline bool CommandCategorySetLabelRowVisibility::_internal_has_label_row_visibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandCategorySetLabelRowVisibility::has_label_row_visibility() const {
  return _internal_has_label_row_visibility();
}
inline void CommandCategorySetLabelRowVisibility::clear_label_row_visibility() {
  _impl_.label_row_visibility_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandCategorySetLabelRowVisibility::_internal_label_row_visibility() const {
  return _impl_.label_row_visibility_;
}
inline uint32_t CommandCategorySetLabelRowVisibility::label_row_visibility() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetLabelRowVisibility.label_row_visibility)
  return _internal_label_row_visibility();
}
inline void CommandCategorySetLabelRowVisibility::_internal_set_label_row_visibility(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.label_row_visibility_ = value;
}
inline void CommandCategorySetLabelRowVisibility::set_label_row_visibility(uint32_t value) {
  _internal_set_label_row_visibility(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetLabelRowVisibility.label_row_visibility)
}

// required uint32 undo_label_row_visibility = 4;
inline bool CommandCategorySetLabelRowVisibility::_internal_has_undo_label_row_visibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandCategorySetLabelRowVisibility::has_undo_label_row_visibility() const {
  return _internal_has_undo_label_row_visibility();
}
inline void CommandCategorySetLabelRowVisibility::clear_undo_label_row_visibility() {
  _impl_.undo_label_row_visibility_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandCategorySetLabelRowVisibility::_internal_undo_label_row_visibility() const {
  return _impl_.undo_label_row_visibility_;
}
inline uint32_t CommandCategorySetLabelRowVisibility::undo_label_row_visibility() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategorySetLabelRowVisibility.undo_label_row_visibility)
  return _internal_undo_label_row_visibility();
}
inline void CommandCategorySetLabelRowVisibility::_internal_set_undo_label_row_visibility(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.undo_label_row_visibility_ = value;
}
inline void CommandCategorySetLabelRowVisibility::set_undo_label_row_visibility(uint32_t value) {
  _internal_set_undo_label_row_visibility(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategorySetLabelRowVisibility.undo_label_row_visibility)
}

// -------------------------------------------------------------------

// CommandCategoryWillChangeGroupValue

// required .TST.TableCommandArchive super = 1;
inline bool CommandCategoryWillChangeGroupValue::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCategoryWillChangeGroupValue::has_super() const {
  return _internal_has_super();
}
inline void CommandCategoryWillChangeGroupValue::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandCategoryWillChangeGroupValue::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCategoryWillChangeGroupValue::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryWillChangeGroupValue.super)
  return _internal_super();
}
inline void CommandCategoryWillChangeGroupValue::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryWillChangeGroupValue.super)
}
inline ::TST::TableCommandArchive* CommandCategoryWillChangeGroupValue::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryWillChangeGroupValue::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryWillChangeGroupValue.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryWillChangeGroupValue::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCategoryWillChangeGroupValue::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryWillChangeGroupValue.super)
  return _msg;
}
inline void CommandCategoryWillChangeGroupValue::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryWillChangeGroupValue.super)
}

// required .TSP.UUID group_node_uid = 2;
inline bool CommandCategoryWillChangeGroupValue::_internal_has_group_node_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_node_uid_ != nullptr);
  return value;
}
inline bool CommandCategoryWillChangeGroupValue::has_group_node_uid() const {
  return _internal_has_group_node_uid();
}
inline const ::TSP::UUID& CommandCategoryWillChangeGroupValue::_internal_group_node_uid() const {
  const ::TSP::UUID* p = _impl_.group_node_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandCategoryWillChangeGroupValue::group_node_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryWillChangeGroupValue.group_node_uid)
  return _internal_group_node_uid();
}
inline void CommandCategoryWillChangeGroupValue::unsafe_arena_set_allocated_group_node_uid(
    ::TSP::UUID* group_node_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_node_uid_);
  }
  _impl_.group_node_uid_ = group_node_uid;
  if (group_node_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryWillChangeGroupValue.group_node_uid)
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::release_group_node_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.group_node_uid_;
  _impl_.group_node_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::unsafe_arena_release_group_node_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryWillChangeGroupValue.group_node_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.group_node_uid_;
  _impl_.group_node_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::_internal_mutable_group_node_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.group_node_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.group_node_uid_ = p;
  }
  return _impl_.group_node_uid_;
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::mutable_group_node_uid() {
  ::TSP::UUID* _msg = _internal_mutable_group_node_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryWillChangeGroupValue.group_node_uid)
  return _msg;
}
inline void CommandCategoryWillChangeGroupValue::set_allocated_group_node_uid(::TSP::UUID* group_node_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_node_uid_);
  }
  if (group_node_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_uid));
    if (message_arena != submessage_arena) {
      group_node_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_node_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.group_node_uid_ = group_node_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryWillChangeGroupValue.group_node_uid)
}

// optional .TSP.UUID undo_group_node_uid = 3;
inline bool CommandCategoryWillChangeGroupValue::_internal_has_undo_group_node_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_group_node_uid_ != nullptr);
  return value;
}
inline bool CommandCategoryWillChangeGroupValue::has_undo_group_node_uid() const {
  return _internal_has_undo_group_node_uid();
}
inline const ::TSP::UUID& CommandCategoryWillChangeGroupValue::_internal_undo_group_node_uid() const {
  const ::TSP::UUID* p = _impl_.undo_group_node_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandCategoryWillChangeGroupValue::undo_group_node_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryWillChangeGroupValue.undo_group_node_uid)
  return _internal_undo_group_node_uid();
}
inline void CommandCategoryWillChangeGroupValue::unsafe_arena_set_allocated_undo_group_node_uid(
    ::TSP::UUID* undo_group_node_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_group_node_uid_);
  }
  _impl_.undo_group_node_uid_ = undo_group_node_uid;
  if (undo_group_node_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryWillChangeGroupValue.undo_group_node_uid)
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::release_undo_group_node_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.undo_group_node_uid_;
  _impl_.undo_group_node_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::unsafe_arena_release_undo_group_node_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryWillChangeGroupValue.undo_group_node_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.undo_group_node_uid_;
  _impl_.undo_group_node_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::_internal_mutable_undo_group_node_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_group_node_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.undo_group_node_uid_ = p;
  }
  return _impl_.undo_group_node_uid_;
}
inline ::TSP::UUID* CommandCategoryWillChangeGroupValue::mutable_undo_group_node_uid() {
  ::TSP::UUID* _msg = _internal_mutable_undo_group_node_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryWillChangeGroupValue.undo_group_node_uid)
  return _msg;
}
inline void CommandCategoryWillChangeGroupValue::set_allocated_undo_group_node_uid(::TSP::UUID* undo_group_node_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_group_node_uid_);
  }
  if (undo_group_node_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_group_node_uid));
    if (message_arena != submessage_arena) {
      undo_group_node_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_group_node_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_group_node_uid_ = undo_group_node_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryWillChangeGroupValue.undo_group_node_uid)
}

// optional .TSCE.CellValueArchive group_value = 4;
inline bool CommandCategoryWillChangeGroupValue::_internal_has_group_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_value_ != nullptr);
  return value;
}
inline bool CommandCategoryWillChangeGroupValue::has_group_value() const {
  return _internal_has_group_value();
}
inline const ::TSCE::CellValueArchive& CommandCategoryWillChangeGroupValue::_internal_group_value() const {
  const ::TSCE::CellValueArchive* p = _impl_.group_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& CommandCategoryWillChangeGroupValue::group_value() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryWillChangeGroupValue.group_value)
  return _internal_group_value();
}
inline void CommandCategoryWillChangeGroupValue::unsafe_arena_set_allocated_group_value(
    ::TSCE::CellValueArchive* group_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_value_);
  }
  _impl_.group_value_ = group_value;
  if (group_value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryWillChangeGroupValue.group_value)
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::release_group_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellValueArchive* temp = _impl_.group_value_;
  _impl_.group_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::unsafe_arena_release_group_value() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryWillChangeGroupValue.group_value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellValueArchive* temp = _impl_.group_value_;
  _impl_.group_value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::_internal_mutable_group_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.group_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArenaForAllocation());
    _impl_.group_value_ = p;
  }
  return _impl_.group_value_;
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::mutable_group_value() {
  ::TSCE::CellValueArchive* _msg = _internal_mutable_group_value();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryWillChangeGroupValue.group_value)
  return _msg;
}
inline void CommandCategoryWillChangeGroupValue::set_allocated_group_value(::TSCE::CellValueArchive* group_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_value_);
  }
  if (group_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_value));
    if (message_arena != submessage_arena) {
      group_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.group_value_ = group_value;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryWillChangeGroupValue.group_value)
}

// optional .TSCE.CellValueArchive undo_group_value = 5;
inline bool CommandCategoryWillChangeGroupValue::_internal_has_undo_group_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_group_value_ != nullptr);
  return value;
}
inline bool CommandCategoryWillChangeGroupValue::has_undo_group_value() const {
  return _internal_has_undo_group_value();
}
inline const ::TSCE::CellValueArchive& CommandCategoryWillChangeGroupValue::_internal_undo_group_value() const {
  const ::TSCE::CellValueArchive* p = _impl_.undo_group_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& CommandCategoryWillChangeGroupValue::undo_group_value() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryWillChangeGroupValue.undo_group_value)
  return _internal_undo_group_value();
}
inline void CommandCategoryWillChangeGroupValue::unsafe_arena_set_allocated_undo_group_value(
    ::TSCE::CellValueArchive* undo_group_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_group_value_);
  }
  _impl_.undo_group_value_ = undo_group_value;
  if (undo_group_value) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryWillChangeGroupValue.undo_group_value)
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::release_undo_group_value() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellValueArchive* temp = _impl_.undo_group_value_;
  _impl_.undo_group_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::unsafe_arena_release_undo_group_value() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryWillChangeGroupValue.undo_group_value)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellValueArchive* temp = _impl_.undo_group_value_;
  _impl_.undo_group_value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::_internal_mutable_undo_group_value() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.undo_group_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArenaForAllocation());
    _impl_.undo_group_value_ = p;
  }
  return _impl_.undo_group_value_;
}
inline ::TSCE::CellValueArchive* CommandCategoryWillChangeGroupValue::mutable_undo_group_value() {
  ::TSCE::CellValueArchive* _msg = _internal_mutable_undo_group_value();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryWillChangeGroupValue.undo_group_value)
  return _msg;
}
inline void CommandCategoryWillChangeGroupValue::set_allocated_undo_group_value(::TSCE::CellValueArchive* undo_group_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_group_value_);
  }
  if (undo_group_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_group_value));
    if (message_arena != submessage_arena) {
      undo_group_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_group_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.undo_group_value_ = undo_group_value;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryWillChangeGroupValue.undo_group_value)
}

// optional .TSP.Reference rewrite_command_for_undo = 6;
inline bool CommandCategoryWillChangeGroupValue::_internal_has_rewrite_command_for_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_command_for_undo_ != nullptr);
  return value;
}
inline bool CommandCategoryWillChangeGroupValue::has_rewrite_command_for_undo() const {
  return _internal_has_rewrite_command_for_undo();
}
inline const ::TSP::Reference& CommandCategoryWillChangeGroupValue::_internal_rewrite_command_for_undo() const {
  const ::TSP::Reference* p = _impl_.rewrite_command_for_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategoryWillChangeGroupValue::rewrite_command_for_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryWillChangeGroupValue.rewrite_command_for_undo)
  return _internal_rewrite_command_for_undo();
}
inline void CommandCategoryWillChangeGroupValue::unsafe_arena_set_allocated_rewrite_command_for_undo(
    ::TSP::Reference* rewrite_command_for_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_command_for_undo_);
  }
  _impl_.rewrite_command_for_undo_ = rewrite_command_for_undo;
  if (rewrite_command_for_undo) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryWillChangeGroupValue.rewrite_command_for_undo)
}
inline ::TSP::Reference* CommandCategoryWillChangeGroupValue::release_rewrite_command_for_undo() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.rewrite_command_for_undo_;
  _impl_.rewrite_command_for_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategoryWillChangeGroupValue::unsafe_arena_release_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryWillChangeGroupValue.rewrite_command_for_undo)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.rewrite_command_for_undo_;
  _impl_.rewrite_command_for_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategoryWillChangeGroupValue::_internal_mutable_rewrite_command_for_undo() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.rewrite_command_for_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.rewrite_command_for_undo_ = p;
  }
  return _impl_.rewrite_command_for_undo_;
}
inline ::TSP::Reference* CommandCategoryWillChangeGroupValue::mutable_rewrite_command_for_undo() {
  ::TSP::Reference* _msg = _internal_mutable_rewrite_command_for_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryWillChangeGroupValue.rewrite_command_for_undo)
  return _msg;
}
inline void CommandCategoryWillChangeGroupValue::set_allocated_rewrite_command_for_undo(::TSP::Reference* rewrite_command_for_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_command_for_undo_);
  }
  if (rewrite_command_for_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewrite_command_for_undo));
    if (message_arena != submessage_arena) {
      rewrite_command_for_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_command_for_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.rewrite_command_for_undo_ = rewrite_command_for_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryWillChangeGroupValue.rewrite_command_for_undo)
}

// -------------------------------------------------------------------

// IdempotentSelectionTransformerArchive

// required .TSP.Reference archived_selection = 1;
inline bool IdempotentSelectionTransformerArchive::_internal_has_archived_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_selection_ != nullptr);
  return value;
}
inline bool IdempotentSelectionTransformerArchive::has_archived_selection() const {
  return _internal_has_archived_selection();
}
inline const ::TSP::Reference& IdempotentSelectionTransformerArchive::_internal_archived_selection() const {
  const ::TSP::Reference* p = _impl_.archived_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& IdempotentSelectionTransformerArchive::archived_selection() const {
  // @@protoc_insertion_point(field_get:TST.IdempotentSelectionTransformerArchive.archived_selection)
  return _internal_archived_selection();
}
inline void IdempotentSelectionTransformerArchive::unsafe_arena_set_allocated_archived_selection(
    ::TSP::Reference* archived_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  _impl_.archived_selection_ = archived_selection;
  if (archived_selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.IdempotentSelectionTransformerArchive.archived_selection)
}
inline ::TSP::Reference* IdempotentSelectionTransformerArchive::release_archived_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* IdempotentSelectionTransformerArchive::unsafe_arena_release_archived_selection() {
  // @@protoc_insertion_point(field_release:TST.IdempotentSelectionTransformerArchive.archived_selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* IdempotentSelectionTransformerArchive::_internal_mutable_archived_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.archived_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archived_selection_ = p;
  }
  return _impl_.archived_selection_;
}
inline ::TSP::Reference* IdempotentSelectionTransformerArchive::mutable_archived_selection() {
  ::TSP::Reference* _msg = _internal_mutable_archived_selection();
  // @@protoc_insertion_point(field_mutable:TST.IdempotentSelectionTransformerArchive.archived_selection)
  return _msg;
}
inline void IdempotentSelectionTransformerArchive::set_allocated_archived_selection(::TSP::Reference* archived_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  if (archived_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_selection));
    if (message_arena != submessage_arena) {
      archived_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.archived_selection_ = archived_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.IdempotentSelectionTransformerArchive.archived_selection)
}

// -------------------------------------------------------------------

// WPSelectionTransformerArchive

// required .TST.TableSubSelectionTransformerBaseArchive super = 1;
inline bool WPSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool WPSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void WPSelectionTransformerArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& WPSelectionTransformerArchive::_internal_super() const {
  const ::TST::TableSubSelectionTransformerBaseArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSubSelectionTransformerBaseArchive&>(
      ::TST::_TableSubSelectionTransformerBaseArchive_default_instance_);
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& WPSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.WPSelectionTransformerArchive.super)
  return _internal_super();
}
inline void WPSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TST::TableSubSelectionTransformerBaseArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.WPSelectionTransformerArchive.super)
}
inline ::TST::TableSubSelectionTransformerBaseArchive* WPSelectionTransformerArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* WPSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.WPSelectionTransformerArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* WPSelectionTransformerArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* WPSelectionTransformerArchive::mutable_super() {
  ::TST::TableSubSelectionTransformerBaseArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.WPSelectionTransformerArchive.super)
  return _msg;
}
inline void WPSelectionTransformerArchive::set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.WPSelectionTransformerArchive.super)
}

// required .TSP.Reference archived_selection = 2;
inline bool WPSelectionTransformerArchive::_internal_has_archived_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_selection_ != nullptr);
  return value;
}
inline bool WPSelectionTransformerArchive::has_archived_selection() const {
  return _internal_has_archived_selection();
}
inline const ::TSP::Reference& WPSelectionTransformerArchive::_internal_archived_selection() const {
  const ::TSP::Reference* p = _impl_.archived_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& WPSelectionTransformerArchive::archived_selection() const {
  // @@protoc_insertion_point(field_get:TST.WPSelectionTransformerArchive.archived_selection)
  return _internal_archived_selection();
}
inline void WPSelectionTransformerArchive::unsafe_arena_set_allocated_archived_selection(
    ::TSP::Reference* archived_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  _impl_.archived_selection_ = archived_selection;
  if (archived_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.WPSelectionTransformerArchive.archived_selection)
}
inline ::TSP::Reference* WPSelectionTransformerArchive::release_archived_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* WPSelectionTransformerArchive::unsafe_arena_release_archived_selection() {
  // @@protoc_insertion_point(field_release:TST.WPSelectionTransformerArchive.archived_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* WPSelectionTransformerArchive::_internal_mutable_archived_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.archived_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archived_selection_ = p;
  }
  return _impl_.archived_selection_;
}
inline ::TSP::Reference* WPSelectionTransformerArchive::mutable_archived_selection() {
  ::TSP::Reference* _msg = _internal_mutable_archived_selection();
  // @@protoc_insertion_point(field_mutable:TST.WPSelectionTransformerArchive.archived_selection)
  return _msg;
}
inline void WPSelectionTransformerArchive::set_allocated_archived_selection(::TSP::Reference* archived_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  if (archived_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_selection));
    if (message_arena != submessage_arena) {
      archived_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.archived_selection_ = archived_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.WPSelectionTransformerArchive.archived_selection)
}

// optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
inline bool WPSelectionTransformerArchive::_internal_has_origin_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_cell_uid_ != nullptr);
  return value;
}
inline bool WPSelectionTransformerArchive::has_origin_cell_uid() const {
  return _internal_has_origin_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& WPSelectionTransformerArchive::_internal_origin_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.origin_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& WPSelectionTransformerArchive::origin_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.WPSelectionTransformerArchive.origin_cell_uid)
  return _internal_origin_cell_uid();
}
inline void WPSelectionTransformerArchive::unsafe_arena_set_allocated_origin_cell_uid(
    ::TSP::UUIDCoordArchive* origin_cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  if (origin_cell_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.WPSelectionTransformerArchive.origin_cell_uid)
}
inline ::TSP::UUIDCoordArchive* WPSelectionTransformerArchive::release_origin_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* WPSelectionTransformerArchive::unsafe_arena_release_origin_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.WPSelectionTransformerArchive.origin_cell_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* WPSelectionTransformerArchive::_internal_mutable_origin_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.origin_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.origin_cell_uid_ = p;
  }
  return _impl_.origin_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* WPSelectionTransformerArchive::mutable_origin_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_origin_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.WPSelectionTransformerArchive.origin_cell_uid)
  return _msg;
}
inline void WPSelectionTransformerArchive::set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  if (origin_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_cell_uid));
    if (message_arena != submessage_arena) {
      origin_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.WPSelectionTransformerArchive.origin_cell_uid)
}

// -------------------------------------------------------------------

// TableSubSelectionTransformerBaseArchive

// required .TSP.UUIDPath table_info_id_path = 1;
inline bool TableSubSelectionTransformerBaseArchive::_internal_has_table_info_id_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_info_id_path_ != nullptr);
  return value;
}
inline bool TableSubSelectionTransformerBaseArchive::has_table_info_id_path() const {
  return _internal_has_table_info_id_path();
}
inline const ::TSP::UUIDPath& TableSubSelectionTransformerBaseArchive::_internal_table_info_id_path() const {
  const ::TSP::UUIDPath* p = _impl_.table_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& TableSubSelectionTransformerBaseArchive::table_info_id_path() const {
  // @@protoc_insertion_point(field_get:TST.TableSubSelectionTransformerBaseArchive.table_info_id_path)
  return _internal_table_info_id_path();
}
inline void TableSubSelectionTransformerBaseArchive::unsafe_arena_set_allocated_table_info_id_path(
    ::TSP::UUIDPath* table_info_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_id_path_);
  }
  _impl_.table_info_id_path_ = table_info_id_path;
  if (table_info_id_path) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableSubSelectionTransformerBaseArchive.table_info_id_path)
}
inline ::TSP::UUIDPath* TableSubSelectionTransformerBaseArchive::release_table_info_id_path() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = _impl_.table_info_id_path_;
  _impl_.table_info_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* TableSubSelectionTransformerBaseArchive::unsafe_arena_release_table_info_id_path() {
  // @@protoc_insertion_point(field_release:TST.TableSubSelectionTransformerBaseArchive.table_info_id_path)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = _impl_.table_info_id_path_;
  _impl_.table_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* TableSubSelectionTransformerBaseArchive::_internal_mutable_table_info_id_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.table_info_id_path_ = p;
  }
  return _impl_.table_info_id_path_;
}
inline ::TSP::UUIDPath* TableSubSelectionTransformerBaseArchive::mutable_table_info_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_table_info_id_path();
  // @@protoc_insertion_point(field_mutable:TST.TableSubSelectionTransformerBaseArchive.table_info_id_path)
  return _msg;
}
inline void TableSubSelectionTransformerBaseArchive::set_allocated_table_info_id_path(::TSP::UUIDPath* table_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_id_path_);
  }
  if (table_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_id_path));
    if (message_arena != submessage_arena) {
      table_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info_id_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_info_id_path_ = table_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TST.TableSubSelectionTransformerBaseArchive.table_info_id_path)
}

// -------------------------------------------------------------------

// TableNameSelectionTransformerArchive

// required .TST.TableSubSelectionTransformerBaseArchive super = 1;
inline bool TableNameSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool TableNameSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void TableNameSelectionTransformerArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& TableNameSelectionTransformerArchive::_internal_super() const {
  const ::TST::TableSubSelectionTransformerBaseArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSubSelectionTransformerBaseArchive&>(
      ::TST::_TableSubSelectionTransformerBaseArchive_default_instance_);
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& TableNameSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TableNameSelectionTransformerArchive.super)
  return _internal_super();
}
inline void TableNameSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TST::TableSubSelectionTransformerBaseArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableNameSelectionTransformerArchive.super)
}
inline ::TST::TableSubSelectionTransformerBaseArchive* TableNameSelectionTransformerArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* TableNameSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TableNameSelectionTransformerArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* TableNameSelectionTransformerArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* TableNameSelectionTransformerArchive::mutable_super() {
  ::TST::TableSubSelectionTransformerBaseArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.TableNameSelectionTransformerArchive.super)
  return _msg;
}
inline void TableNameSelectionTransformerArchive::set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TableNameSelectionTransformerArchive.super)
}

// -------------------------------------------------------------------

// ControlCellSelectionTransformerArchive

// required .TST.TableSubSelectionTransformerBaseArchive super = 1;
inline bool ControlCellSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ControlCellSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void ControlCellSelectionTransformerArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& ControlCellSelectionTransformerArchive::_internal_super() const {
  const ::TST::TableSubSelectionTransformerBaseArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSubSelectionTransformerBaseArchive&>(
      ::TST::_TableSubSelectionTransformerBaseArchive_default_instance_);
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& ControlCellSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.ControlCellSelectionTransformerArchive.super)
  return _internal_super();
}
inline void ControlCellSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TST::TableSubSelectionTransformerBaseArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ControlCellSelectionTransformerArchive.super)
}
inline ::TST::TableSubSelectionTransformerBaseArchive* ControlCellSelectionTransformerArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* ControlCellSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.ControlCellSelectionTransformerArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* ControlCellSelectionTransformerArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* ControlCellSelectionTransformerArchive::mutable_super() {
  ::TST::TableSubSelectionTransformerBaseArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.ControlCellSelectionTransformerArchive.super)
  return _msg;
}
inline void ControlCellSelectionTransformerArchive::set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.ControlCellSelectionTransformerArchive.super)
}

// optional .TST.CellUIDListArchive cell_uids = 2;
inline bool ControlCellSelectionTransformerArchive::_internal_has_cell_uids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uids_ != nullptr);
  return value;
}
inline bool ControlCellSelectionTransformerArchive::has_cell_uids() const {
  return _internal_has_cell_uids();
}
inline const ::TST::CellUIDListArchive& ControlCellSelectionTransformerArchive::_internal_cell_uids() const {
  const ::TST::CellUIDListArchive* p = _impl_.cell_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& ControlCellSelectionTransformerArchive::cell_uids() const {
  // @@protoc_insertion_point(field_get:TST.ControlCellSelectionTransformerArchive.cell_uids)
  return _internal_cell_uids();
}
inline void ControlCellSelectionTransformerArchive::unsafe_arena_set_allocated_cell_uids(
    ::TST::CellUIDListArchive* cell_uids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uids_);
  }
  _impl_.cell_uids_ = cell_uids;
  if (cell_uids) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ControlCellSelectionTransformerArchive.cell_uids)
}
inline ::TST::CellUIDListArchive* ControlCellSelectionTransformerArchive::release_cell_uids() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uids_;
  _impl_.cell_uids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* ControlCellSelectionTransformerArchive::unsafe_arena_release_cell_uids() {
  // @@protoc_insertion_point(field_release:TST.ControlCellSelectionTransformerArchive.cell_uids)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uids_;
  _impl_.cell_uids_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* ControlCellSelectionTransformerArchive::_internal_mutable_cell_uids() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.cell_uids_ = p;
  }
  return _impl_.cell_uids_;
}
inline ::TST::CellUIDListArchive* ControlCellSelectionTransformerArchive::mutable_cell_uids() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_cell_uids();
  // @@protoc_insertion_point(field_mutable:TST.ControlCellSelectionTransformerArchive.cell_uids)
  return _msg;
}
inline void ControlCellSelectionTransformerArchive::set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uids_);
  }
  if (cell_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uids));
    if (message_arena != submessage_arena) {
      cell_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uids, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uids_ = cell_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.ControlCellSelectionTransformerArchive.cell_uids)
}

// optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
inline bool ControlCellSelectionTransformerArchive::_internal_has_origin_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_cell_uid_ != nullptr);
  return value;
}
inline bool ControlCellSelectionTransformerArchive::has_origin_cell_uid() const {
  return _internal_has_origin_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& ControlCellSelectionTransformerArchive::_internal_origin_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.origin_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& ControlCellSelectionTransformerArchive::origin_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.ControlCellSelectionTransformerArchive.origin_cell_uid)
  return _internal_origin_cell_uid();
}
inline void ControlCellSelectionTransformerArchive::unsafe_arena_set_allocated_origin_cell_uid(
    ::TSP::UUIDCoordArchive* origin_cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  if (origin_cell_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ControlCellSelectionTransformerArchive.origin_cell_uid)
}
inline ::TSP::UUIDCoordArchive* ControlCellSelectionTransformerArchive::release_origin_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* ControlCellSelectionTransformerArchive::unsafe_arena_release_origin_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.ControlCellSelectionTransformerArchive.origin_cell_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* ControlCellSelectionTransformerArchive::_internal_mutable_origin_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.origin_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.origin_cell_uid_ = p;
  }
  return _impl_.origin_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* ControlCellSelectionTransformerArchive::mutable_origin_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_origin_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.ControlCellSelectionTransformerArchive.origin_cell_uid)
  return _msg;
}
inline void ControlCellSelectionTransformerArchive::set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  if (origin_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_cell_uid));
    if (message_arena != submessage_arena) {
      origin_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.ControlCellSelectionTransformerArchive.origin_cell_uid)
}

// required .TSCE.CellCoordinateArchive origin_cell_id = 4;
inline bool ControlCellSelectionTransformerArchive::_internal_has_origin_cell_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_cell_id_ != nullptr);
  return value;
}
inline bool ControlCellSelectionTransformerArchive::has_origin_cell_id() const {
  return _internal_has_origin_cell_id();
}
inline const ::TSCE::CellCoordinateArchive& ControlCellSelectionTransformerArchive::_internal_origin_cell_id() const {
  const ::TSCE::CellCoordinateArchive* p = _impl_.origin_cell_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& ControlCellSelectionTransformerArchive::origin_cell_id() const {
  // @@protoc_insertion_point(field_get:TST.ControlCellSelectionTransformerArchive.origin_cell_id)
  return _internal_origin_cell_id();
}
inline void ControlCellSelectionTransformerArchive::unsafe_arena_set_allocated_origin_cell_id(
    ::TSCE::CellCoordinateArchive* origin_cell_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_id_);
  }
  _impl_.origin_cell_id_ = origin_cell_id;
  if (origin_cell_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ControlCellSelectionTransformerArchive.origin_cell_id)
}
inline ::TSCE::CellCoordinateArchive* ControlCellSelectionTransformerArchive::release_origin_cell_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.origin_cell_id_;
  _impl_.origin_cell_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateArchive* ControlCellSelectionTransformerArchive::unsafe_arena_release_origin_cell_id() {
  // @@protoc_insertion_point(field_release:TST.ControlCellSelectionTransformerArchive.origin_cell_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.origin_cell_id_;
  _impl_.origin_cell_id_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* ControlCellSelectionTransformerArchive::_internal_mutable_origin_cell_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.origin_cell_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArenaForAllocation());
    _impl_.origin_cell_id_ = p;
  }
  return _impl_.origin_cell_id_;
}
inline ::TSCE::CellCoordinateArchive* ControlCellSelectionTransformerArchive::mutable_origin_cell_id() {
  ::TSCE::CellCoordinateArchive* _msg = _internal_mutable_origin_cell_id();
  // @@protoc_insertion_point(field_mutable:TST.ControlCellSelectionTransformerArchive.origin_cell_id)
  return _msg;
}
inline void ControlCellSelectionTransformerArchive::set_allocated_origin_cell_id(::TSCE::CellCoordinateArchive* origin_cell_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_id_);
  }
  if (origin_cell_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_cell_id));
    if (message_arena != submessage_arena) {
      origin_cell_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_cell_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.origin_cell_id_ = origin_cell_id;
  // @@protoc_insertion_point(field_set_allocated:TST.ControlCellSelectionTransformerArchive.origin_cell_id)
}

// -------------------------------------------------------------------

// StockCellSelectionTransformerArchive

// required .TST.TableSubSelectionTransformerBaseArchive super = 1;
inline bool StockCellSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool StockCellSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void StockCellSelectionTransformerArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& StockCellSelectionTransformerArchive::_internal_super() const {
  const ::TST::TableSubSelectionTransformerBaseArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSubSelectionTransformerBaseArchive&>(
      ::TST::_TableSubSelectionTransformerBaseArchive_default_instance_);
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& StockCellSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.StockCellSelectionTransformerArchive.super)
  return _internal_super();
}
inline void StockCellSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TST::TableSubSelectionTransformerBaseArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StockCellSelectionTransformerArchive.super)
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StockCellSelectionTransformerArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StockCellSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.StockCellSelectionTransformerArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StockCellSelectionTransformerArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StockCellSelectionTransformerArchive::mutable_super() {
  ::TST::TableSubSelectionTransformerBaseArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.StockCellSelectionTransformerArchive.super)
  return _msg;
}
inline void StockCellSelectionTransformerArchive::set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.StockCellSelectionTransformerArchive.super)
}

// optional .TST.CellUIDListArchive cell_uids = 2;
inline bool StockCellSelectionTransformerArchive::_internal_has_cell_uids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uids_ != nullptr);
  return value;
}
inline bool StockCellSelectionTransformerArchive::has_cell_uids() const {
  return _internal_has_cell_uids();
}
inline const ::TST::CellUIDListArchive& StockCellSelectionTransformerArchive::_internal_cell_uids() const {
  const ::TST::CellUIDListArchive* p = _impl_.cell_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& StockCellSelectionTransformerArchive::cell_uids() const {
  // @@protoc_insertion_point(field_get:TST.StockCellSelectionTransformerArchive.cell_uids)
  return _internal_cell_uids();
}
inline void StockCellSelectionTransformerArchive::unsafe_arena_set_allocated_cell_uids(
    ::TST::CellUIDListArchive* cell_uids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uids_);
  }
  _impl_.cell_uids_ = cell_uids;
  if (cell_uids) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StockCellSelectionTransformerArchive.cell_uids)
}
inline ::TST::CellUIDListArchive* StockCellSelectionTransformerArchive::release_cell_uids() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uids_;
  _impl_.cell_uids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* StockCellSelectionTransformerArchive::unsafe_arena_release_cell_uids() {
  // @@protoc_insertion_point(field_release:TST.StockCellSelectionTransformerArchive.cell_uids)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uids_;
  _impl_.cell_uids_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* StockCellSelectionTransformerArchive::_internal_mutable_cell_uids() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.cell_uids_ = p;
  }
  return _impl_.cell_uids_;
}
inline ::TST::CellUIDListArchive* StockCellSelectionTransformerArchive::mutable_cell_uids() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_cell_uids();
  // @@protoc_insertion_point(field_mutable:TST.StockCellSelectionTransformerArchive.cell_uids)
  return _msg;
}
inline void StockCellSelectionTransformerArchive::set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uids_);
  }
  if (cell_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uids));
    if (message_arena != submessage_arena) {
      cell_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uids, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uids_ = cell_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.StockCellSelectionTransformerArchive.cell_uids)
}

// optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
inline bool StockCellSelectionTransformerArchive::_internal_has_origin_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_cell_uid_ != nullptr);
  return value;
}
inline bool StockCellSelectionTransformerArchive::has_origin_cell_uid() const {
  return _internal_has_origin_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& StockCellSelectionTransformerArchive::_internal_origin_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.origin_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& StockCellSelectionTransformerArchive::origin_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.StockCellSelectionTransformerArchive.origin_cell_uid)
  return _internal_origin_cell_uid();
}
inline void StockCellSelectionTransformerArchive::unsafe_arena_set_allocated_origin_cell_uid(
    ::TSP::UUIDCoordArchive* origin_cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  if (origin_cell_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StockCellSelectionTransformerArchive.origin_cell_uid)
}
inline ::TSP::UUIDCoordArchive* StockCellSelectionTransformerArchive::release_origin_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* StockCellSelectionTransformerArchive::unsafe_arena_release_origin_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.StockCellSelectionTransformerArchive.origin_cell_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* StockCellSelectionTransformerArchive::_internal_mutable_origin_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.origin_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.origin_cell_uid_ = p;
  }
  return _impl_.origin_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* StockCellSelectionTransformerArchive::mutable_origin_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_origin_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.StockCellSelectionTransformerArchive.origin_cell_uid)
  return _msg;
}
inline void StockCellSelectionTransformerArchive::set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  if (origin_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_cell_uid));
    if (message_arena != submessage_arena) {
      origin_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.StockCellSelectionTransformerArchive.origin_cell_uid)
}

// required .TSCE.CellCoordinateArchive origin_cell_id = 4;
inline bool StockCellSelectionTransformerArchive::_internal_has_origin_cell_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_cell_id_ != nullptr);
  return value;
}
inline bool StockCellSelectionTransformerArchive::has_origin_cell_id() const {
  return _internal_has_origin_cell_id();
}
inline const ::TSCE::CellCoordinateArchive& StockCellSelectionTransformerArchive::_internal_origin_cell_id() const {
  const ::TSCE::CellCoordinateArchive* p = _impl_.origin_cell_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& StockCellSelectionTransformerArchive::origin_cell_id() const {
  // @@protoc_insertion_point(field_get:TST.StockCellSelectionTransformerArchive.origin_cell_id)
  return _internal_origin_cell_id();
}
inline void StockCellSelectionTransformerArchive::unsafe_arena_set_allocated_origin_cell_id(
    ::TSCE::CellCoordinateArchive* origin_cell_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_id_);
  }
  _impl_.origin_cell_id_ = origin_cell_id;
  if (origin_cell_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StockCellSelectionTransformerArchive.origin_cell_id)
}
inline ::TSCE::CellCoordinateArchive* StockCellSelectionTransformerArchive::release_origin_cell_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.origin_cell_id_;
  _impl_.origin_cell_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateArchive* StockCellSelectionTransformerArchive::unsafe_arena_release_origin_cell_id() {
  // @@protoc_insertion_point(field_release:TST.StockCellSelectionTransformerArchive.origin_cell_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.origin_cell_id_;
  _impl_.origin_cell_id_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* StockCellSelectionTransformerArchive::_internal_mutable_origin_cell_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.origin_cell_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArenaForAllocation());
    _impl_.origin_cell_id_ = p;
  }
  return _impl_.origin_cell_id_;
}
inline ::TSCE::CellCoordinateArchive* StockCellSelectionTransformerArchive::mutable_origin_cell_id() {
  ::TSCE::CellCoordinateArchive* _msg = _internal_mutable_origin_cell_id();
  // @@protoc_insertion_point(field_mutable:TST.StockCellSelectionTransformerArchive.origin_cell_id)
  return _msg;
}
inline void StockCellSelectionTransformerArchive::set_allocated_origin_cell_id(::TSCE::CellCoordinateArchive* origin_cell_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_id_);
  }
  if (origin_cell_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_cell_id));
    if (message_arena != submessage_arena) {
      origin_cell_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_cell_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.origin_cell_id_ = origin_cell_id;
  // @@protoc_insertion_point(field_set_allocated:TST.StockCellSelectionTransformerArchive.origin_cell_id)
}

// -------------------------------------------------------------------

// RegionSelectionTransformerArchive

// required .TST.TableSubSelectionTransformerBaseArchive super = 1;
inline bool RegionSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool RegionSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void RegionSelectionTransformerArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& RegionSelectionTransformerArchive::_internal_super() const {
  const ::TST::TableSubSelectionTransformerBaseArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSubSelectionTransformerBaseArchive&>(
      ::TST::_TableSubSelectionTransformerBaseArchive_default_instance_);
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& RegionSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.RegionSelectionTransformerArchive.super)
  return _internal_super();
}
inline void RegionSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TST::TableSubSelectionTransformerBaseArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RegionSelectionTransformerArchive.super)
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RegionSelectionTransformerArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RegionSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.RegionSelectionTransformerArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RegionSelectionTransformerArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RegionSelectionTransformerArchive::mutable_super() {
  ::TST::TableSubSelectionTransformerBaseArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.RegionSelectionTransformerArchive.super)
  return _msg;
}
inline void RegionSelectionTransformerArchive::set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.RegionSelectionTransformerArchive.super)
}

// optional .TST.CellUIDListArchive cell_uids = 2;
inline bool RegionSelectionTransformerArchive::_internal_has_cell_uids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_uids_ != nullptr);
  return value;
}
inline bool RegionSelectionTransformerArchive::has_cell_uids() const {
  return _internal_has_cell_uids();
}
inline const ::TST::CellUIDListArchive& RegionSelectionTransformerArchive::_internal_cell_uids() const {
  const ::TST::CellUIDListArchive* p = _impl_.cell_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& RegionSelectionTransformerArchive::cell_uids() const {
  // @@protoc_insertion_point(field_get:TST.RegionSelectionTransformerArchive.cell_uids)
  return _internal_cell_uids();
}
inline void RegionSelectionTransformerArchive::unsafe_arena_set_allocated_cell_uids(
    ::TST::CellUIDListArchive* cell_uids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uids_);
  }
  _impl_.cell_uids_ = cell_uids;
  if (cell_uids) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RegionSelectionTransformerArchive.cell_uids)
}
inline ::TST::CellUIDListArchive* RegionSelectionTransformerArchive::release_cell_uids() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uids_;
  _impl_.cell_uids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellUIDListArchive* RegionSelectionTransformerArchive::unsafe_arena_release_cell_uids() {
  // @@protoc_insertion_point(field_release:TST.RegionSelectionTransformerArchive.cell_uids)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDListArchive* temp = _impl_.cell_uids_;
  _impl_.cell_uids_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* RegionSelectionTransformerArchive::_internal_mutable_cell_uids() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArenaForAllocation());
    _impl_.cell_uids_ = p;
  }
  return _impl_.cell_uids_;
}
inline ::TST::CellUIDListArchive* RegionSelectionTransformerArchive::mutable_cell_uids() {
  ::TST::CellUIDListArchive* _msg = _internal_mutable_cell_uids();
  // @@protoc_insertion_point(field_mutable:TST.RegionSelectionTransformerArchive.cell_uids)
  return _msg;
}
inline void RegionSelectionTransformerArchive::set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_uids_);
  }
  if (cell_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uids));
    if (message_arena != submessage_arena) {
      cell_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uids, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_uids_ = cell_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.RegionSelectionTransformerArchive.cell_uids)
}

// optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
inline bool RegionSelectionTransformerArchive::_internal_has_origin_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_cell_uid_ != nullptr);
  return value;
}
inline bool RegionSelectionTransformerArchive::has_origin_cell_uid() const {
  return _internal_has_origin_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& RegionSelectionTransformerArchive::_internal_origin_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.origin_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& RegionSelectionTransformerArchive::origin_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.RegionSelectionTransformerArchive.origin_cell_uid)
  return _internal_origin_cell_uid();
}
inline void RegionSelectionTransformerArchive::unsafe_arena_set_allocated_origin_cell_uid(
    ::TSP::UUIDCoordArchive* origin_cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  if (origin_cell_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RegionSelectionTransformerArchive.origin_cell_uid)
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::release_origin_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::unsafe_arena_release_origin_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.RegionSelectionTransformerArchive.origin_cell_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDCoordArchive* temp = _impl_.origin_cell_uid_;
  _impl_.origin_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::_internal_mutable_origin_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.origin_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.origin_cell_uid_ = p;
  }
  return _impl_.origin_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::mutable_origin_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_origin_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.RegionSelectionTransformerArchive.origin_cell_uid)
  return _msg;
}
inline void RegionSelectionTransformerArchive::set_allocated_origin_cell_uid(::TSP::UUIDCoordArchive* origin_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_cell_uid_);
  }
  if (origin_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_cell_uid));
    if (message_arena != submessage_arena) {
      origin_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.origin_cell_uid_ = origin_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.RegionSelectionTransformerArchive.origin_cell_uid)
}

// required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
inline bool RegionSelectionTransformerArchive::_internal_has_anchor_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anchor_cell_uid_ != nullptr);
  return value;
}
inline bool RegionSelectionTransformerArchive::has_anchor_cell_uid() const {
  return _internal_has_anchor_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& RegionSelectionTransformerArchive::_internal_anchor_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.anchor_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& RegionSelectionTransformerArchive::anchor_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.RegionSelectionTransformerArchive.anchor_cell_uid)
  return _internal_anchor_cell_uid();
}
inline void RegionSelectionTransformerArchive::unsafe_arena_set_allocated_anchor_cell_uid(
    ::TSP::UUIDCoordArchive* anchor_cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_cell_uid_);
  }
  _impl_.anchor_cell_uid_ = anchor_cell_uid;
  if (anchor_cell_uid) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RegionSelectionTransformerArchive.anchor_cell_uid)
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::release_anchor_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUIDCoordArchive* temp = _impl_.anchor_cell_uid_;
  _impl_.anchor_cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::unsafe_arena_release_anchor_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.RegionSelectionTransformerArchive.anchor_cell_uid)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUIDCoordArchive* temp = _impl_.anchor_cell_uid_;
  _impl_.anchor_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::_internal_mutable_anchor_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.anchor_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.anchor_cell_uid_ = p;
  }
  return _impl_.anchor_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::mutable_anchor_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_anchor_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.RegionSelectionTransformerArchive.anchor_cell_uid)
  return _msg;
}
inline void RegionSelectionTransformerArchive::set_allocated_anchor_cell_uid(::TSP::UUIDCoordArchive* anchor_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_cell_uid_);
  }
  if (anchor_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_uid));
    if (message_arena != submessage_arena) {
      anchor_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.anchor_cell_uid_ = anchor_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.RegionSelectionTransformerArchive.anchor_cell_uid)
}

// required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
inline bool RegionSelectionTransformerArchive::_internal_has_cursor_cell_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cursor_cell_uid_ != nullptr);
  return value;
}
inline bool RegionSelectionTransformerArchive::has_cursor_cell_uid() const {
  return _internal_has_cursor_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& RegionSelectionTransformerArchive::_internal_cursor_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = _impl_.cursor_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& RegionSelectionTransformerArchive::cursor_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.RegionSelectionTransformerArchive.cursor_cell_uid)
  return _internal_cursor_cell_uid();
}
inline void RegionSelectionTransformerArchive::unsafe_arena_set_allocated_cursor_cell_uid(
    ::TSP::UUIDCoordArchive* cursor_cell_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cursor_cell_uid_);
  }
  _impl_.cursor_cell_uid_ = cursor_cell_uid;
  if (cursor_cell_uid) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RegionSelectionTransformerArchive.cursor_cell_uid)
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::release_cursor_cell_uid() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cursor_cell_uid_;
  _impl_.cursor_cell_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::unsafe_arena_release_cursor_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.RegionSelectionTransformerArchive.cursor_cell_uid)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDCoordArchive* temp = _impl_.cursor_cell_uid_;
  _impl_.cursor_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::_internal_mutable_cursor_cell_uid() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.cursor_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArenaForAllocation());
    _impl_.cursor_cell_uid_ = p;
  }
  return _impl_.cursor_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* RegionSelectionTransformerArchive::mutable_cursor_cell_uid() {
  ::TSP::UUIDCoordArchive* _msg = _internal_mutable_cursor_cell_uid();
  // @@protoc_insertion_point(field_mutable:TST.RegionSelectionTransformerArchive.cursor_cell_uid)
  return _msg;
}
inline void RegionSelectionTransformerArchive::set_allocated_cursor_cell_uid(::TSP::UUIDCoordArchive* cursor_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cursor_cell_uid_);
  }
  if (cursor_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_uid));
    if (message_arena != submessage_arena) {
      cursor_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cursor_cell_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.cursor_cell_uid_ = cursor_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.RegionSelectionTransformerArchive.cursor_cell_uid)
}

// -------------------------------------------------------------------

// StrokeSelectionTransformerArchive

// required .TST.TableSubSelectionTransformerBaseArchive super = 1;
inline bool StrokeSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool StrokeSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void StrokeSelectionTransformerArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& StrokeSelectionTransformerArchive::_internal_super() const {
  const ::TST::TableSubSelectionTransformerBaseArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSubSelectionTransformerBaseArchive&>(
      ::TST::_TableSubSelectionTransformerBaseArchive_default_instance_);
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& StrokeSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.StrokeSelectionTransformerArchive.super)
  return _internal_super();
}
inline void StrokeSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TST::TableSubSelectionTransformerBaseArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StrokeSelectionTransformerArchive.super)
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StrokeSelectionTransformerArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StrokeSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.StrokeSelectionTransformerArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StrokeSelectionTransformerArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* StrokeSelectionTransformerArchive::mutable_super() {
  ::TST::TableSubSelectionTransformerBaseArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.StrokeSelectionTransformerArchive.super)
  return _msg;
}
inline void StrokeSelectionTransformerArchive::set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.StrokeSelectionTransformerArchive.super)
}

// required .TSP.Reference archived_selection = 2;
inline bool StrokeSelectionTransformerArchive::_internal_has_archived_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_selection_ != nullptr);
  return value;
}
inline bool StrokeSelectionTransformerArchive::has_archived_selection() const {
  return _internal_has_archived_selection();
}
inline const ::TSP::Reference& StrokeSelectionTransformerArchive::_internal_archived_selection() const {
  const ::TSP::Reference* p = _impl_.archived_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StrokeSelectionTransformerArchive::archived_selection() const {
  // @@protoc_insertion_point(field_get:TST.StrokeSelectionTransformerArchive.archived_selection)
  return _internal_archived_selection();
}
inline void StrokeSelectionTransformerArchive::unsafe_arena_set_allocated_archived_selection(
    ::TSP::Reference* archived_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  _impl_.archived_selection_ = archived_selection;
  if (archived_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StrokeSelectionTransformerArchive.archived_selection)
}
inline ::TSP::Reference* StrokeSelectionTransformerArchive::release_archived_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StrokeSelectionTransformerArchive::unsafe_arena_release_archived_selection() {
  // @@protoc_insertion_point(field_release:TST.StrokeSelectionTransformerArchive.archived_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StrokeSelectionTransformerArchive::_internal_mutable_archived_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.archived_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archived_selection_ = p;
  }
  return _impl_.archived_selection_;
}
inline ::TSP::Reference* StrokeSelectionTransformerArchive::mutable_archived_selection() {
  ::TSP::Reference* _msg = _internal_mutable_archived_selection();
  // @@protoc_insertion_point(field_mutable:TST.StrokeSelectionTransformerArchive.archived_selection)
  return _msg;
}
inline void StrokeSelectionTransformerArchive::set_allocated_archived_selection(::TSP::Reference* archived_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  if (archived_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_selection));
    if (message_arena != submessage_arena) {
      archived_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.archived_selection_ = archived_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.StrokeSelectionTransformerArchive.archived_selection)
}

// -------------------------------------------------------------------

// RowColumnSelectionTransformerArchive

// required .TST.TableSubSelectionTransformerBaseArchive super = 1;
inline bool RowColumnSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool RowColumnSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void RowColumnSelectionTransformerArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& RowColumnSelectionTransformerArchive::_internal_super() const {
  const ::TST::TableSubSelectionTransformerBaseArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSubSelectionTransformerBaseArchive&>(
      ::TST::_TableSubSelectionTransformerBaseArchive_default_instance_);
}
inline const ::TST::TableSubSelectionTransformerBaseArchive& RowColumnSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.RowColumnSelectionTransformerArchive.super)
  return _internal_super();
}
inline void RowColumnSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TST::TableSubSelectionTransformerBaseArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RowColumnSelectionTransformerArchive.super)
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RowColumnSelectionTransformerArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RowColumnSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.RowColumnSelectionTransformerArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableSubSelectionTransformerBaseArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RowColumnSelectionTransformerArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSubSelectionTransformerBaseArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableSubSelectionTransformerBaseArchive* RowColumnSelectionTransformerArchive::mutable_super() {
  ::TST::TableSubSelectionTransformerBaseArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.RowColumnSelectionTransformerArchive.super)
  return _msg;
}
inline void RowColumnSelectionTransformerArchive::set_allocated_super(::TST::TableSubSelectionTransformerBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.RowColumnSelectionTransformerArchive.super)
}

// required .TST.SelectionTypeArchive selection_type = 2;
inline bool RowColumnSelectionTransformerArchive::_internal_has_selection_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RowColumnSelectionTransformerArchive::has_selection_type() const {
  return _internal_has_selection_type();
}
inline void RowColumnSelectionTransformerArchive::clear_selection_type() {
  _impl_.selection_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TST::SelectionTypeArchive RowColumnSelectionTransformerArchive::_internal_selection_type() const {
  return static_cast< ::TST::SelectionTypeArchive >(_impl_.selection_type_);
}
inline ::TST::SelectionTypeArchive RowColumnSelectionTransformerArchive::selection_type() const {
  // @@protoc_insertion_point(field_get:TST.RowColumnSelectionTransformerArchive.selection_type)
  return _internal_selection_type();
}
inline void RowColumnSelectionTransformerArchive::_internal_set_selection_type(::TST::SelectionTypeArchive value) {
  assert(::TST::SelectionTypeArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.selection_type_ = value;
}
inline void RowColumnSelectionTransformerArchive::set_selection_type(::TST::SelectionTypeArchive value) {
  _internal_set_selection_type(value);
  // @@protoc_insertion_point(field_set:TST.RowColumnSelectionTransformerArchive.selection_type)
}

// repeated .TSP.UUID row_col_uids = 3;
inline int RowColumnSelectionTransformerArchive::_internal_row_col_uids_size() const {
  return _impl_.row_col_uids_.size();
}
inline int RowColumnSelectionTransformerArchive::row_col_uids_size() const {
  return _internal_row_col_uids_size();
}
inline ::TSP::UUID* RowColumnSelectionTransformerArchive::mutable_row_col_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.RowColumnSelectionTransformerArchive.row_col_uids)
  return _impl_.row_col_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
RowColumnSelectionTransformerArchive::mutable_row_col_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.RowColumnSelectionTransformerArchive.row_col_uids)
  return &_impl_.row_col_uids_;
}
inline const ::TSP::UUID& RowColumnSelectionTransformerArchive::_internal_row_col_uids(int index) const {
  return _impl_.row_col_uids_.Get(index);
}
inline const ::TSP::UUID& RowColumnSelectionTransformerArchive::row_col_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.RowColumnSelectionTransformerArchive.row_col_uids)
  return _internal_row_col_uids(index);
}
inline ::TSP::UUID* RowColumnSelectionTransformerArchive::_internal_add_row_col_uids() {
  return _impl_.row_col_uids_.Add();
}
inline ::TSP::UUID* RowColumnSelectionTransformerArchive::add_row_col_uids() {
  ::TSP::UUID* _add = _internal_add_row_col_uids();
  // @@protoc_insertion_point(field_add:TST.RowColumnSelectionTransformerArchive.row_col_uids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
RowColumnSelectionTransformerArchive::row_col_uids() const {
  // @@protoc_insertion_point(field_list:TST.RowColumnSelectionTransformerArchive.row_col_uids)
  return _impl_.row_col_uids_;
}

// -------------------------------------------------------------------

// CommandCategoryMoveRowsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandCategoryMoveRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCategoryMoveRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandCategoryMoveRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandCategoryMoveRowsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCategoryMoveRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryMoveRowsArchive.super)
  return _internal_super();
}
inline void CommandCategoryMoveRowsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryMoveRowsArchive.super)
}
inline ::TST::TableCommandArchive* CommandCategoryMoveRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryMoveRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryMoveRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCategoryMoveRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCategoryMoveRowsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryMoveRowsArchive.super)
  return _msg;
}
inline void CommandCategoryMoveRowsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryMoveRowsArchive.super)
}

// required uint32 action_type = 2;
inline bool CommandCategoryMoveRowsArchive::_internal_has_action_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandCategoryMoveRowsArchive::has_action_type() const {
  return _internal_has_action_type();
}
inline void CommandCategoryMoveRowsArchive::clear_action_type() {
  _impl_.action_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandCategoryMoveRowsArchive::_internal_action_type() const {
  return _impl_.action_type_;
}
inline uint32_t CommandCategoryMoveRowsArchive::action_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryMoveRowsArchive.action_type)
  return _internal_action_type();
}
inline void CommandCategoryMoveRowsArchive::_internal_set_action_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.action_type_ = value;
}
inline void CommandCategoryMoveRowsArchive::set_action_type(uint32_t value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandCategoryMoveRowsArchive.action_type)
}

// repeated .TSP.UUID category_row_order = 3;
inline int CommandCategoryMoveRowsArchive::_internal_category_row_order_size() const {
  return _impl_.category_row_order_.size();
}
inline int CommandCategoryMoveRowsArchive::category_row_order_size() const {
  return _internal_category_row_order_size();
}
inline ::TSP::UUID* CommandCategoryMoveRowsArchive::mutable_category_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryMoveRowsArchive.category_row_order)
  return _impl_.category_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategoryMoveRowsArchive::mutable_category_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategoryMoveRowsArchive.category_row_order)
  return &_impl_.category_row_order_;
}
inline const ::TSP::UUID& CommandCategoryMoveRowsArchive::_internal_category_row_order(int index) const {
  return _impl_.category_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandCategoryMoveRowsArchive::category_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryMoveRowsArchive.category_row_order)
  return _internal_category_row_order(index);
}
inline ::TSP::UUID* CommandCategoryMoveRowsArchive::_internal_add_category_row_order() {
  return _impl_.category_row_order_.Add();
}
inline ::TSP::UUID* CommandCategoryMoveRowsArchive::add_category_row_order() {
  ::TSP::UUID* _add = _internal_add_category_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandCategoryMoveRowsArchive.category_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategoryMoveRowsArchive::category_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategoryMoveRowsArchive.category_row_order)
  return _impl_.category_row_order_;
}

// repeated .TSP.UUID undo_category_row_order = 4;
inline int CommandCategoryMoveRowsArchive::_internal_undo_category_row_order_size() const {
  return _impl_.undo_category_row_order_.size();
}
inline int CommandCategoryMoveRowsArchive::undo_category_row_order_size() const {
  return _internal_undo_category_row_order_size();
}
inline ::TSP::UUID* CommandCategoryMoveRowsArchive::mutable_undo_category_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryMoveRowsArchive.undo_category_row_order)
  return _impl_.undo_category_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandCategoryMoveRowsArchive::mutable_undo_category_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandCategoryMoveRowsArchive.undo_category_row_order)
  return &_impl_.undo_category_row_order_;
}
inline const ::TSP::UUID& CommandCategoryMoveRowsArchive::_internal_undo_category_row_order(int index) const {
  return _impl_.undo_category_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandCategoryMoveRowsArchive::undo_category_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryMoveRowsArchive.undo_category_row_order)
  return _internal_undo_category_row_order(index);
}
inline ::TSP::UUID* CommandCategoryMoveRowsArchive::_internal_add_undo_category_row_order() {
  return _impl_.undo_category_row_order_.Add();
}
inline ::TSP::UUID* CommandCategoryMoveRowsArchive::add_undo_category_row_order() {
  ::TSP::UUID* _add = _internal_add_undo_category_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandCategoryMoveRowsArchive.undo_category_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandCategoryMoveRowsArchive::undo_category_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandCategoryMoveRowsArchive.undo_category_row_order)
  return _impl_.undo_category_row_order_;
}

// required .TSP.Reference cell_diff_map = 5;
inline bool CommandCategoryMoveRowsArchive::_internal_has_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandCategoryMoveRowsArchive::has_cell_diff_map() const {
  return _internal_has_cell_diff_map();
}
inline const ::TSP::Reference& CommandCategoryMoveRowsArchive::_internal_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategoryMoveRowsArchive::cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryMoveRowsArchive.cell_diff_map)
  return _internal_cell_diff_map();
}
inline void CommandCategoryMoveRowsArchive::unsafe_arena_set_allocated_cell_diff_map(
    ::TSP::Reference* cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  if (cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryMoveRowsArchive.cell_diff_map)
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::release_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::unsafe_arena_release_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryMoveRowsArchive.cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cell_diff_map_;
  _impl_.cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::_internal_mutable_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_diff_map_ = p;
  }
  return _impl_.cell_diff_map_;
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::mutable_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryMoveRowsArchive.cell_diff_map)
  return _msg;
}
inline void CommandCategoryMoveRowsArchive::set_allocated_cell_diff_map(::TSP::Reference* cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_diff_map_);
  }
  if (cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_map));
    if (message_arena != submessage_arena) {
      cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_diff_map_ = cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryMoveRowsArchive.cell_diff_map)
}

// optional .TSP.Reference undo_cell_diff_map = 6;
inline bool CommandCategoryMoveRowsArchive::_internal_has_undo_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandCategoryMoveRowsArchive::has_undo_cell_diff_map() const {
  return _internal_has_undo_cell_diff_map();
}
inline const ::TSP::Reference& CommandCategoryMoveRowsArchive::_internal_undo_cell_diff_map() const {
  const ::TSP::Reference* p = _impl_.undo_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCategoryMoveRowsArchive::undo_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryMoveRowsArchive.undo_cell_diff_map)
  return _internal_undo_cell_diff_map();
}
inline void CommandCategoryMoveRowsArchive::unsafe_arena_set_allocated_undo_cell_diff_map(
    ::TSP::Reference* undo_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  if (undo_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryMoveRowsArchive.undo_cell_diff_map)
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::release_undo_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::unsafe_arena_release_undo_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryMoveRowsArchive.undo_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.undo_cell_diff_map_;
  _impl_.undo_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::_internal_mutable_undo_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_cell_diff_map_ = p;
  }
  return _impl_.undo_cell_diff_map_;
}
inline ::TSP::Reference* CommandCategoryMoveRowsArchive::mutable_undo_cell_diff_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryMoveRowsArchive.undo_cell_diff_map)
  return _msg;
}
inline void CommandCategoryMoveRowsArchive::set_allocated_undo_cell_diff_map(::TSP::Reference* undo_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_diff_map_);
  }
  if (undo_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_diff_map));
    if (message_arena != submessage_arena) {
      undo_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_diff_map_ = undo_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryMoveRowsArchive.undo_cell_diff_map)
}

// optional .TST.GroupColumnListArchive grouping_columns = 7;
inline bool CommandCategoryMoveRowsArchive::_internal_has_grouping_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grouping_columns_ != nullptr);
  return value;
}
inline bool CommandCategoryMoveRowsArchive::has_grouping_columns() const {
  return _internal_has_grouping_columns();
}
inline const ::TST::GroupColumnListArchive& CommandCategoryMoveRowsArchive::_internal_grouping_columns() const {
  const ::TST::GroupColumnListArchive* p = _impl_.grouping_columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandCategoryMoveRowsArchive::grouping_columns() const {
  // @@protoc_insertion_point(field_get:TST.CommandCategoryMoveRowsArchive.grouping_columns)
  return _internal_grouping_columns();
}
inline void CommandCategoryMoveRowsArchive::unsafe_arena_set_allocated_grouping_columns(
    ::TST::GroupColumnListArchive* grouping_columns) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_columns_);
  }
  _impl_.grouping_columns_ = grouping_columns;
  if (grouping_columns) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCategoryMoveRowsArchive.grouping_columns)
}
inline ::TST::GroupColumnListArchive* CommandCategoryMoveRowsArchive::release_grouping_columns() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::GroupColumnListArchive* temp = _impl_.grouping_columns_;
  _impl_.grouping_columns_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategoryMoveRowsArchive::unsafe_arena_release_grouping_columns() {
  // @@protoc_insertion_point(field_release:TST.CommandCategoryMoveRowsArchive.grouping_columns)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::GroupColumnListArchive* temp = _impl_.grouping_columns_;
  _impl_.grouping_columns_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandCategoryMoveRowsArchive::_internal_mutable_grouping_columns() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.grouping_columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.grouping_columns_ = p;
  }
  return _impl_.grouping_columns_;
}
inline ::TST::GroupColumnListArchive* CommandCategoryMoveRowsArchive::mutable_grouping_columns() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_grouping_columns();
  // @@protoc_insertion_point(field_mutable:TST.CommandCategoryMoveRowsArchive.grouping_columns)
  return _msg;
}
inline void CommandCategoryMoveRowsArchive::set_allocated_grouping_columns(::TST::GroupColumnListArchive* grouping_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_columns_);
  }
  if (grouping_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_columns));
    if (message_arena != submessage_arena) {
      grouping_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_columns, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.grouping_columns_ = grouping_columns;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCategoryMoveRowsArchive.grouping_columns)
}

// -------------------------------------------------------------------

// CommandRewriteHiddenStatesForGroupByChangeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteHiddenStatesForGroupByChangeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteHiddenStatesForGroupByChangeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteHiddenStatesForGroupByChangeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.super)
  return _internal_super();
}
inline void CommandRewriteHiddenStatesForGroupByChangeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.super)
  return _msg;
}
inline void CommandRewriteHiddenStatesForGroupByChangeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.super)
}

// required .TSCE.GroupByChangeArchive group_by_change = 2;
inline bool CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_has_group_by_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_by_change_ != nullptr);
  return value;
}
inline bool CommandRewriteHiddenStatesForGroupByChangeArchive::has_group_by_change() const {
  return _internal_has_group_by_change();
}
inline const ::TSCE::GroupByChangeArchive& CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_group_by_change() const {
  const ::TSCE::GroupByChangeArchive* p = _impl_.group_by_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::GroupByChangeArchive&>(
      ::TSCE::_GroupByChangeArchive_default_instance_);
}
inline const ::TSCE::GroupByChangeArchive& CommandRewriteHiddenStatesForGroupByChangeArchive::group_by_change() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.group_by_change)
  return _internal_group_by_change();
}
inline void CommandRewriteHiddenStatesForGroupByChangeArchive::unsafe_arena_set_allocated_group_by_change(
    ::TSCE::GroupByChangeArchive* group_by_change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_by_change_);
  }
  _impl_.group_by_change_ = group_by_change;
  if (group_by_change) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.group_by_change)
}
inline ::TSCE::GroupByChangeArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::release_group_by_change() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::GroupByChangeArchive* temp = _impl_.group_by_change_;
  _impl_.group_by_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::GroupByChangeArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::unsafe_arena_release_group_by_change() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.group_by_change)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::GroupByChangeArchive* temp = _impl_.group_by_change_;
  _impl_.group_by_change_ = nullptr;
  return temp;
}
inline ::TSCE::GroupByChangeArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_mutable_group_by_change() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.group_by_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::GroupByChangeArchive>(GetArenaForAllocation());
    _impl_.group_by_change_ = p;
  }
  return _impl_.group_by_change_;
}
inline ::TSCE::GroupByChangeArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::mutable_group_by_change() {
  ::TSCE::GroupByChangeArchive* _msg = _internal_mutable_group_by_change();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.group_by_change)
  return _msg;
}
inline void CommandRewriteHiddenStatesForGroupByChangeArchive::set_allocated_group_by_change(::TSCE::GroupByChangeArchive* group_by_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_by_change_);
  }
  if (group_by_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_change));
    if (message_arena != submessage_arena) {
      group_by_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.group_by_change_ = group_by_change;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.group_by_change)
}

// optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
inline bool CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_has_collapsed_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.collapsed_state_ != nullptr);
  return value;
}
inline bool CommandRewriteHiddenStatesForGroupByChangeArchive::has_collapsed_state() const {
  return _internal_has_collapsed_state();
}
inline const ::TST::ExpandCollapseStateArchive& CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_collapsed_state() const {
  const ::TST::ExpandCollapseStateArchive* p = _impl_.collapsed_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpandCollapseStateArchive&>(
      ::TST::_ExpandCollapseStateArchive_default_instance_);
}
inline const ::TST::ExpandCollapseStateArchive& CommandRewriteHiddenStatesForGroupByChangeArchive::collapsed_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.collapsed_state)
  return _internal_collapsed_state();
}
inline void CommandRewriteHiddenStatesForGroupByChangeArchive::unsafe_arena_set_allocated_collapsed_state(
    ::TST::ExpandCollapseStateArchive* collapsed_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collapsed_state_);
  }
  _impl_.collapsed_state_ = collapsed_state;
  if (collapsed_state) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.collapsed_state)
}
inline ::TST::ExpandCollapseStateArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::release_collapsed_state() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::ExpandCollapseStateArchive* temp = _impl_.collapsed_state_;
  _impl_.collapsed_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ExpandCollapseStateArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::unsafe_arena_release_collapsed_state() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.collapsed_state)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::ExpandCollapseStateArchive* temp = _impl_.collapsed_state_;
  _impl_.collapsed_state_ = nullptr;
  return temp;
}
inline ::TST::ExpandCollapseStateArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::_internal_mutable_collapsed_state() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.collapsed_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpandCollapseStateArchive>(GetArenaForAllocation());
    _impl_.collapsed_state_ = p;
  }
  return _impl_.collapsed_state_;
}
inline ::TST::ExpandCollapseStateArchive* CommandRewriteHiddenStatesForGroupByChangeArchive::mutable_collapsed_state() {
  ::TST::ExpandCollapseStateArchive* _msg = _internal_mutable_collapsed_state();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.collapsed_state)
  return _msg;
}
inline void CommandRewriteHiddenStatesForGroupByChangeArchive::set_allocated_collapsed_state(::TST::ExpandCollapseStateArchive* collapsed_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collapsed_state_);
  }
  if (collapsed_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collapsed_state));
    if (message_arena != submessage_arena) {
      collapsed_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collapsed_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.collapsed_state_ = collapsed_state;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteHiddenStatesForGroupByChangeArchive.collapsed_state)
}

// -------------------------------------------------------------------

// CommandRewritePencilAnnotationFormulasArchive_AnnotationPair

// required uint64 index = 1;
inline bool CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::has_index() const {
  return _internal_has_index();
}
inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::clear_index() {
  _impl_.index_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::index() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.index)
  return _internal_index();
}
inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_internal_set_index(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.index_ = value;
}
inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.index)
}

// required .TSP.Reference annotation = 2;
inline bool CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_internal_has_annotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.annotation_ != nullptr);
  return value;
}
inline bool CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::has_annotation() const {
  return _internal_has_annotation();
}
inline const ::TSP::Reference& CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_internal_annotation() const {
  const ::TSP::Reference* p = _impl_.annotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::annotation() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.annotation)
  return _internal_annotation();
}
inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::unsafe_arena_set_allocated_annotation(
    ::TSP::Reference* annotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_);
  }
  _impl_.annotation_ = annotation;
  if (annotation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.annotation)
}
inline ::TSP::Reference* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::release_annotation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.annotation_;
  _impl_.annotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.annotation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.annotation_;
  _impl_.annotation_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_internal_mutable_annotation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.annotation_ = p;
  }
  return _impl_.annotation_;
}
inline ::TSP::Reference* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::mutable_annotation() {
  ::TSP::Reference* _msg = _internal_mutable_annotation();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.annotation)
  return _msg;
}
inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::set_allocated_annotation(::TSP::Reference* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_);
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation));
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.annotation)
}

// -------------------------------------------------------------------

// CommandRewritePencilAnnotationFormulasArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewritePencilAnnotationFormulasArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewritePencilAnnotationFormulasArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewritePencilAnnotationFormulasArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewritePencilAnnotationFormulasArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewritePencilAnnotationFormulasArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePencilAnnotationFormulasArchive.super)
  return _internal_super();
}
inline void CommandRewritePencilAnnotationFormulasArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewritePencilAnnotationFormulasArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewritePencilAnnotationFormulasArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewritePencilAnnotationFormulasArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewritePencilAnnotationFormulasArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewritePencilAnnotationFormulasArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePencilAnnotationFormulasArchive.super)
  return _msg;
}
inline void CommandRewritePencilAnnotationFormulasArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewritePencilAnnotationFormulasArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewritePencilAnnotationFormulasArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewritePencilAnnotationFormulasArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewritePencilAnnotationFormulasArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewritePencilAnnotationFormulasArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePencilAnnotationFormulasArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewritePencilAnnotationFormulasArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePencilAnnotationFormulasArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePencilAnnotationFormulasArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewritePencilAnnotationFormulasArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePencilAnnotationFormulasArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewritePencilAnnotationFormulasArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePencilAnnotationFormulasArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewritePencilAnnotationFormulasArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.rewrite_spec)
}

// required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
inline bool CommandRewritePencilAnnotationFormulasArchive::_internal_has_formulas_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formulas_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewritePencilAnnotationFormulasArchive::has_formulas_to_rewrite() const {
  return _internal_has_formulas_to_rewrite();
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewritePencilAnnotationFormulasArchive::_internal_formulas_to_rewrite() const {
  const ::TSCE::FormulasForUndoArchive* p = _impl_.formulas_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulasForUndoArchive&>(
      ::TSCE::_FormulasForUndoArchive_default_instance_);
}
inline const ::TSCE::FormulasForUndoArchive& CommandRewritePencilAnnotationFormulasArchive::formulas_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePencilAnnotationFormulasArchive.formulas_to_rewrite)
  return _internal_formulas_to_rewrite();
}
inline void CommandRewritePencilAnnotationFormulasArchive::unsafe_arena_set_allocated_formulas_to_rewrite(
    ::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  if (formulas_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.formulas_to_rewrite)
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePencilAnnotationFormulasArchive::release_formulas_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePencilAnnotationFormulasArchive::unsafe_arena_release_formulas_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewritePencilAnnotationFormulasArchive.formulas_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulasForUndoArchive* temp = _impl_.formulas_to_rewrite_;
  _impl_.formulas_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePencilAnnotationFormulasArchive::_internal_mutable_formulas_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formulas_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(GetArenaForAllocation());
    _impl_.formulas_to_rewrite_ = p;
  }
  return _impl_.formulas_to_rewrite_;
}
inline ::TSCE::FormulasForUndoArchive* CommandRewritePencilAnnotationFormulasArchive::mutable_formulas_to_rewrite() {
  ::TSCE::FormulasForUndoArchive* _msg = _internal_mutable_formulas_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePencilAnnotationFormulasArchive.formulas_to_rewrite)
  return _msg;
}
inline void CommandRewritePencilAnnotationFormulasArchive::set_allocated_formulas_to_rewrite(::TSCE::FormulasForUndoArchive* formulas_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formulas_to_rewrite_);
  }
  if (formulas_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_to_rewrite));
    if (message_arena != submessage_arena) {
      formulas_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formulas_to_rewrite_ = formulas_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewritePencilAnnotationFormulasArchive.formulas_to_rewrite)
}

// repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
inline int CommandRewritePencilAnnotationFormulasArchive::_internal_annotations_for_undo_size() const {
  return _impl_.annotations_for_undo_.size();
}
inline int CommandRewritePencilAnnotationFormulasArchive::annotations_for_undo_size() const {
  return _internal_annotations_for_undo_size();
}
inline void CommandRewritePencilAnnotationFormulasArchive::clear_annotations_for_undo() {
  _impl_.annotations_for_undo_.Clear();
}
inline ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* CommandRewritePencilAnnotationFormulasArchive::mutable_annotations_for_undo(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandRewritePencilAnnotationFormulasArchive.annotations_for_undo)
  return _impl_.annotations_for_undo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >*
CommandRewritePencilAnnotationFormulasArchive::mutable_annotations_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandRewritePencilAnnotationFormulasArchive.annotations_for_undo)
  return &_impl_.annotations_for_undo_;
}
inline const ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& CommandRewritePencilAnnotationFormulasArchive::_internal_annotations_for_undo(int index) const {
  return _impl_.annotations_for_undo_.Get(index);
}
inline const ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& CommandRewritePencilAnnotationFormulasArchive::annotations_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandRewritePencilAnnotationFormulasArchive.annotations_for_undo)
  return _internal_annotations_for_undo(index);
}
inline ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* CommandRewritePencilAnnotationFormulasArchive::_internal_add_annotations_for_undo() {
  return _impl_.annotations_for_undo_.Add();
}
inline ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* CommandRewritePencilAnnotationFormulasArchive::add_annotations_for_undo() {
  ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* _add = _internal_add_annotations_for_undo();
  // @@protoc_insertion_point(field_add:TST.CommandRewritePencilAnnotationFormulasArchive.annotations_for_undo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >&
CommandRewritePencilAnnotationFormulasArchive::annotations_for_undo() const {
  // @@protoc_insertion_point(field_list:TST.CommandRewritePencilAnnotationFormulasArchive.annotations_for_undo)
  return _impl_.annotations_for_undo_;
}

// -------------------------------------------------------------------

// CommandPivotSetPivotRulesArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPivotSetPivotRulesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandPivotSetPivotRulesArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandPivotSetPivotRulesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.super)
  return _internal_super();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.super)
}
inline ::TST::TableCommandArchive* CommandPivotSetPivotRulesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandPivotSetPivotRulesArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.super)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.super)
}

// optional .TSP.UUID new_target_pivot_refresh_uid = 2;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_target_pivot_refresh_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_target_pivot_refresh_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_target_pivot_refresh_uid() const {
  return _internal_has_new_target_pivot_refresh_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_target_pivot_refresh_uid() const {
  const ::TSP::UUID* p = _impl_.new_target_pivot_refresh_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_target_pivot_refresh_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_refresh_uid)
  return _internal_new_target_pivot_refresh_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_target_pivot_refresh_uid(
    ::TSP::UUID* new_target_pivot_refresh_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_target_pivot_refresh_uid_);
  }
  _impl_.new_target_pivot_refresh_uid_ = new_target_pivot_refresh_uid;
  if (new_target_pivot_refresh_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_refresh_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_new_target_pivot_refresh_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.new_target_pivot_refresh_uid_;
  _impl_.new_target_pivot_refresh_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_target_pivot_refresh_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_refresh_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.new_target_pivot_refresh_uid_;
  _impl_.new_target_pivot_refresh_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_new_target_pivot_refresh_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.new_target_pivot_refresh_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.new_target_pivot_refresh_uid_ = p;
  }
  return _impl_.new_target_pivot_refresh_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_target_pivot_refresh_uid() {
  ::TSP::UUID* _msg = _internal_mutable_new_target_pivot_refresh_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_refresh_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_target_pivot_refresh_uid(::TSP::UUID* new_target_pivot_refresh_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_target_pivot_refresh_uid_);
  }
  if (new_target_pivot_refresh_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_target_pivot_refresh_uid));
    if (message_arena != submessage_arena) {
      new_target_pivot_refresh_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_target_pivot_refresh_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_target_pivot_refresh_uid_ = new_target_pivot_refresh_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_refresh_uid)
}

// optional .TST.GroupColumnListArchive new_row_groupings = 3;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_row_groupings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_row_groupings_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_row_groupings() const {
  return _internal_has_new_row_groupings();
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::_internal_new_row_groupings() const {
  const ::TST::GroupColumnListArchive* p = _impl_.new_row_groupings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::new_row_groupings() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_row_groupings)
  return _internal_new_row_groupings();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_row_groupings(
    ::TST::GroupColumnListArchive* new_row_groupings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_row_groupings_);
  }
  _impl_.new_row_groupings_ = new_row_groupings;
  if (new_row_groupings) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_row_groupings)
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::release_new_row_groupings() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::GroupColumnListArchive* temp = _impl_.new_row_groupings_;
  _impl_.new_row_groupings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_row_groupings() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_row_groupings)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::GroupColumnListArchive* temp = _impl_.new_row_groupings_;
  _impl_.new_row_groupings_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_new_row_groupings() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_row_groupings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.new_row_groupings_ = p;
  }
  return _impl_.new_row_groupings_;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::mutable_new_row_groupings() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_new_row_groupings();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_row_groupings)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_row_groupings(::TST::GroupColumnListArchive* new_row_groupings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_row_groupings_);
  }
  if (new_row_groupings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_row_groupings));
    if (message_arena != submessage_arena) {
      new_row_groupings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_row_groupings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_row_groupings_ = new_row_groupings;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_row_groupings)
}

// optional .TST.GroupColumnListArchive old_row_groupings = 4;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_row_groupings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_row_groupings_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_row_groupings() const {
  return _internal_has_old_row_groupings();
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::_internal_old_row_groupings() const {
  const ::TST::GroupColumnListArchive* p = _impl_.old_row_groupings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::old_row_groupings() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_row_groupings)
  return _internal_old_row_groupings();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_row_groupings(
    ::TST::GroupColumnListArchive* old_row_groupings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_row_groupings_);
  }
  _impl_.old_row_groupings_ = old_row_groupings;
  if (old_row_groupings) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_row_groupings)
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::release_old_row_groupings() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::GroupColumnListArchive* temp = _impl_.old_row_groupings_;
  _impl_.old_row_groupings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_row_groupings() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_row_groupings)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::GroupColumnListArchive* temp = _impl_.old_row_groupings_;
  _impl_.old_row_groupings_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_old_row_groupings() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_row_groupings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.old_row_groupings_ = p;
  }
  return _impl_.old_row_groupings_;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::mutable_old_row_groupings() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_old_row_groupings();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_row_groupings)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_row_groupings(::TST::GroupColumnListArchive* old_row_groupings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_row_groupings_);
  }
  if (old_row_groupings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_row_groupings));
    if (message_arena != submessage_arena) {
      old_row_groupings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_row_groupings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_row_groupings_ = old_row_groupings;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_row_groupings)
}

// optional .TST.GroupColumnListArchive new_column_groupings = 5;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_column_groupings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_column_groupings_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_column_groupings() const {
  return _internal_has_new_column_groupings();
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::_internal_new_column_groupings() const {
  const ::TST::GroupColumnListArchive* p = _impl_.new_column_groupings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::new_column_groupings() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_column_groupings)
  return _internal_new_column_groupings();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_column_groupings(
    ::TST::GroupColumnListArchive* new_column_groupings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_column_groupings_);
  }
  _impl_.new_column_groupings_ = new_column_groupings;
  if (new_column_groupings) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_column_groupings)
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::release_new_column_groupings() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::GroupColumnListArchive* temp = _impl_.new_column_groupings_;
  _impl_.new_column_groupings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_column_groupings() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_column_groupings)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::GroupColumnListArchive* temp = _impl_.new_column_groupings_;
  _impl_.new_column_groupings_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_new_column_groupings() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_column_groupings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.new_column_groupings_ = p;
  }
  return _impl_.new_column_groupings_;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::mutable_new_column_groupings() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_new_column_groupings();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_column_groupings)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_column_groupings(::TST::GroupColumnListArchive* new_column_groupings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_column_groupings_);
  }
  if (new_column_groupings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_column_groupings));
    if (message_arena != submessage_arena) {
      new_column_groupings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_column_groupings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_column_groupings_ = new_column_groupings;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_column_groupings)
}

// optional .TST.GroupColumnListArchive old_column_groupings = 6;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_column_groupings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_column_groupings_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_column_groupings() const {
  return _internal_has_old_column_groupings();
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::_internal_old_column_groupings() const {
  const ::TST::GroupColumnListArchive* p = _impl_.old_column_groupings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::GroupColumnListArchive&>(
      ::TST::_GroupColumnListArchive_default_instance_);
}
inline const ::TST::GroupColumnListArchive& CommandPivotSetPivotRulesArchive::old_column_groupings() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_column_groupings)
  return _internal_old_column_groupings();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_column_groupings(
    ::TST::GroupColumnListArchive* old_column_groupings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_column_groupings_);
  }
  _impl_.old_column_groupings_ = old_column_groupings;
  if (old_column_groupings) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_column_groupings)
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::release_old_column_groupings() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::GroupColumnListArchive* temp = _impl_.old_column_groupings_;
  _impl_.old_column_groupings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_column_groupings() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_column_groupings)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::GroupColumnListArchive* temp = _impl_.old_column_groupings_;
  _impl_.old_column_groupings_ = nullptr;
  return temp;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_old_column_groupings() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.old_column_groupings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::GroupColumnListArchive>(GetArenaForAllocation());
    _impl_.old_column_groupings_ = p;
  }
  return _impl_.old_column_groupings_;
}
inline ::TST::GroupColumnListArchive* CommandPivotSetPivotRulesArchive::mutable_old_column_groupings() {
  ::TST::GroupColumnListArchive* _msg = _internal_mutable_old_column_groupings();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_column_groupings)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_column_groupings(::TST::GroupColumnListArchive* old_column_groupings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_column_groupings_);
  }
  if (old_column_groupings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_column_groupings));
    if (message_arena != submessage_arena) {
      old_column_groupings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_column_groupings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.old_column_groupings_ = old_column_groupings;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_column_groupings)
}

// optional .TST.ColumnAggregateListArchive new_aggregates = 7;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_aggregates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_aggregates_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_aggregates() const {
  return _internal_has_new_aggregates();
}
inline const ::TST::ColumnAggregateListArchive& CommandPivotSetPivotRulesArchive::_internal_new_aggregates() const {
  const ::TST::ColumnAggregateListArchive* p = _impl_.new_aggregates_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnAggregateListArchive&>(
      ::TST::_ColumnAggregateListArchive_default_instance_);
}
inline const ::TST::ColumnAggregateListArchive& CommandPivotSetPivotRulesArchive::new_aggregates() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_aggregates)
  return _internal_new_aggregates();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_aggregates(
    ::TST::ColumnAggregateListArchive* new_aggregates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_aggregates_);
  }
  _impl_.new_aggregates_ = new_aggregates;
  if (new_aggregates) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_aggregates)
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::release_new_aggregates() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.new_aggregates_;
  _impl_.new_aggregates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_aggregates() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_aggregates)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.new_aggregates_;
  _impl_.new_aggregates_ = nullptr;
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_new_aggregates() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.new_aggregates_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnAggregateListArchive>(GetArenaForAllocation());
    _impl_.new_aggregates_ = p;
  }
  return _impl_.new_aggregates_;
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::mutable_new_aggregates() {
  ::TST::ColumnAggregateListArchive* _msg = _internal_mutable_new_aggregates();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_aggregates)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_aggregates(::TST::ColumnAggregateListArchive* new_aggregates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_aggregates_);
  }
  if (new_aggregates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_aggregates));
    if (message_arena != submessage_arena) {
      new_aggregates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_aggregates, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.new_aggregates_ = new_aggregates;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_aggregates)
}

// optional .TST.ColumnAggregateListArchive old_aggregates = 8;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_aggregates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_aggregates_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_aggregates() const {
  return _internal_has_old_aggregates();
}
inline const ::TST::ColumnAggregateListArchive& CommandPivotSetPivotRulesArchive::_internal_old_aggregates() const {
  const ::TST::ColumnAggregateListArchive* p = _impl_.old_aggregates_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ColumnAggregateListArchive&>(
      ::TST::_ColumnAggregateListArchive_default_instance_);
}
inline const ::TST::ColumnAggregateListArchive& CommandPivotSetPivotRulesArchive::old_aggregates() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_aggregates)
  return _internal_old_aggregates();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_aggregates(
    ::TST::ColumnAggregateListArchive* old_aggregates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_aggregates_);
  }
  _impl_.old_aggregates_ = old_aggregates;
  if (old_aggregates) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_aggregates)
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::release_old_aggregates() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.old_aggregates_;
  _impl_.old_aggregates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_aggregates() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_aggregates)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::ColumnAggregateListArchive* temp = _impl_.old_aggregates_;
  _impl_.old_aggregates_ = nullptr;
  return temp;
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_old_aggregates() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.old_aggregates_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ColumnAggregateListArchive>(GetArenaForAllocation());
    _impl_.old_aggregates_ = p;
  }
  return _impl_.old_aggregates_;
}
inline ::TST::ColumnAggregateListArchive* CommandPivotSetPivotRulesArchive::mutable_old_aggregates() {
  ::TST::ColumnAggregateListArchive* _msg = _internal_mutable_old_aggregates();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_aggregates)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_aggregates(::TST::ColumnAggregateListArchive* old_aggregates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_aggregates_);
  }
  if (old_aggregates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_aggregates));
    if (message_arena != submessage_arena) {
      old_aggregates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_aggregates, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.old_aggregates_ = old_aggregates;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_aggregates)
}

// optional .TST.TableDimensionArchive new_flattening_dimension = 9;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_flattening_dimension() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_flattening_dimension() const {
  return _internal_has_new_flattening_dimension();
}
inline void CommandPivotSetPivotRulesArchive::clear_new_flattening_dimension() {
  _impl_.new_flattening_dimension_ = -1;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::TST::TableDimensionArchive CommandPivotSetPivotRulesArchive::_internal_new_flattening_dimension() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.new_flattening_dimension_);
}
inline ::TST::TableDimensionArchive CommandPivotSetPivotRulesArchive::new_flattening_dimension() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_flattening_dimension)
  return _internal_new_flattening_dimension();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_new_flattening_dimension(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.new_flattening_dimension_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_new_flattening_dimension(::TST::TableDimensionArchive value) {
  _internal_set_new_flattening_dimension(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.new_flattening_dimension)
}

// optional .TST.TableDimensionArchive old_flattening_dimension = 10;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_flattening_dimension() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_flattening_dimension() const {
  return _internal_has_old_flattening_dimension();
}
inline void CommandPivotSetPivotRulesArchive::clear_old_flattening_dimension() {
  _impl_.old_flattening_dimension_ = -1;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::TST::TableDimensionArchive CommandPivotSetPivotRulesArchive::_internal_old_flattening_dimension() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.old_flattening_dimension_);
}
inline ::TST::TableDimensionArchive CommandPivotSetPivotRulesArchive::old_flattening_dimension() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_flattening_dimension)
  return _internal_old_flattening_dimension();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_old_flattening_dimension(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.old_flattening_dimension_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_old_flattening_dimension(::TST::TableDimensionArchive value) {
  _internal_set_old_flattening_dimension(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.old_flattening_dimension)
}

// optional .TSP.Reference new_pivot_data_model = 11;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_pivot_data_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_pivot_data_model_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_pivot_data_model() const {
  return _internal_has_new_pivot_data_model();
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::_internal_new_pivot_data_model() const {
  const ::TSP::Reference* p = _impl_.new_pivot_data_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::new_pivot_data_model() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_pivot_data_model)
  return _internal_new_pivot_data_model();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_pivot_data_model(
    ::TSP::Reference* new_pivot_data_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_pivot_data_model_);
  }
  _impl_.new_pivot_data_model_ = new_pivot_data_model;
  if (new_pivot_data_model) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_pivot_data_model)
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::release_new_pivot_data_model() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.new_pivot_data_model_;
  _impl_.new_pivot_data_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_pivot_data_model() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_pivot_data_model)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.new_pivot_data_model_;
  _impl_.new_pivot_data_model_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::_internal_mutable_new_pivot_data_model() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.new_pivot_data_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_pivot_data_model_ = p;
  }
  return _impl_.new_pivot_data_model_;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::mutable_new_pivot_data_model() {
  ::TSP::Reference* _msg = _internal_mutable_new_pivot_data_model();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_pivot_data_model)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_pivot_data_model(::TSP::Reference* new_pivot_data_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_pivot_data_model_);
  }
  if (new_pivot_data_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_pivot_data_model));
    if (message_arena != submessage_arena) {
      new_pivot_data_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_pivot_data_model, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.new_pivot_data_model_ = new_pivot_data_model;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_pivot_data_model)
}

// optional .TSP.Reference old_pivot_data_model = 12;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_pivot_data_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_pivot_data_model_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_pivot_data_model() const {
  return _internal_has_old_pivot_data_model();
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::_internal_old_pivot_data_model() const {
  const ::TSP::Reference* p = _impl_.old_pivot_data_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::old_pivot_data_model() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_pivot_data_model)
  return _internal_old_pivot_data_model();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_pivot_data_model(
    ::TSP::Reference* old_pivot_data_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_pivot_data_model_);
  }
  _impl_.old_pivot_data_model_ = old_pivot_data_model;
  if (old_pivot_data_model) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_pivot_data_model)
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::release_old_pivot_data_model() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.old_pivot_data_model_;
  _impl_.old_pivot_data_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_pivot_data_model() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_pivot_data_model)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.old_pivot_data_model_;
  _impl_.old_pivot_data_model_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::_internal_mutable_old_pivot_data_model() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.old_pivot_data_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_pivot_data_model_ = p;
  }
  return _impl_.old_pivot_data_model_;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::mutable_old_pivot_data_model() {
  ::TSP::Reference* _msg = _internal_mutable_old_pivot_data_model();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_pivot_data_model)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_pivot_data_model(::TSP::Reference* old_pivot_data_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_pivot_data_model_);
  }
  if (old_pivot_data_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_pivot_data_model));
    if (message_arena != submessage_arena) {
      old_pivot_data_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_pivot_data_model, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.old_pivot_data_model_ = old_pivot_data_model;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_pivot_data_model)
}

// optional .TSP.UUID new_pivot_refresh_uid = 13;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_pivot_refresh_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_pivot_refresh_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_pivot_refresh_uid() const {
  return _internal_has_new_pivot_refresh_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_pivot_refresh_uid() const {
  const ::TSP::UUID* p = _impl_.new_pivot_refresh_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_pivot_refresh_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_uid)
  return _internal_new_pivot_refresh_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_pivot_refresh_uid(
    ::TSP::UUID* new_pivot_refresh_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_pivot_refresh_uid_);
  }
  _impl_.new_pivot_refresh_uid_ = new_pivot_refresh_uid;
  if (new_pivot_refresh_uid) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_new_pivot_refresh_uid() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::UUID* temp = _impl_.new_pivot_refresh_uid_;
  _impl_.new_pivot_refresh_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_pivot_refresh_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_uid)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::UUID* temp = _impl_.new_pivot_refresh_uid_;
  _impl_.new_pivot_refresh_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_new_pivot_refresh_uid() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.new_pivot_refresh_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.new_pivot_refresh_uid_ = p;
  }
  return _impl_.new_pivot_refresh_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_pivot_refresh_uid() {
  ::TSP::UUID* _msg = _internal_mutable_new_pivot_refresh_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_pivot_refresh_uid(::TSP::UUID* new_pivot_refresh_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_pivot_refresh_uid_);
  }
  if (new_pivot_refresh_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_pivot_refresh_uid));
    if (message_arena != submessage_arena) {
      new_pivot_refresh_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_pivot_refresh_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.new_pivot_refresh_uid_ = new_pivot_refresh_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_uid)
}

// optional .TSP.UUID old_pivot_refresh_uid = 14;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_pivot_refresh_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_pivot_refresh_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_pivot_refresh_uid() const {
  return _internal_has_old_pivot_refresh_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_pivot_refresh_uid() const {
  const ::TSP::UUID* p = _impl_.old_pivot_refresh_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_pivot_refresh_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_uid)
  return _internal_old_pivot_refresh_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_pivot_refresh_uid(
    ::TSP::UUID* old_pivot_refresh_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_pivot_refresh_uid_);
  }
  _impl_.old_pivot_refresh_uid_ = old_pivot_refresh_uid;
  if (old_pivot_refresh_uid) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_old_pivot_refresh_uid() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::UUID* temp = _impl_.old_pivot_refresh_uid_;
  _impl_.old_pivot_refresh_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_pivot_refresh_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_uid)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::UUID* temp = _impl_.old_pivot_refresh_uid_;
  _impl_.old_pivot_refresh_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_old_pivot_refresh_uid() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.old_pivot_refresh_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.old_pivot_refresh_uid_ = p;
  }
  return _impl_.old_pivot_refresh_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_pivot_refresh_uid() {
  ::TSP::UUID* _msg = _internal_mutable_old_pivot_refresh_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_pivot_refresh_uid(::TSP::UUID* old_pivot_refresh_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_pivot_refresh_uid_);
  }
  if (old_pivot_refresh_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_pivot_refresh_uid));
    if (message_arena != submessage_arena) {
      old_pivot_refresh_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_pivot_refresh_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.old_pivot_refresh_uid_ = old_pivot_refresh_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_uid)
}

// optional double new_pivot_refresh_timestamp = 15;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_pivot_refresh_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_pivot_refresh_timestamp() const {
  return _internal_has_new_pivot_refresh_timestamp();
}
inline void CommandPivotSetPivotRulesArchive::clear_new_pivot_refresh_timestamp() {
  _impl_.new_pivot_refresh_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double CommandPivotSetPivotRulesArchive::_internal_new_pivot_refresh_timestamp() const {
  return _impl_.new_pivot_refresh_timestamp_;
}
inline double CommandPivotSetPivotRulesArchive::new_pivot_refresh_timestamp() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_timestamp)
  return _internal_new_pivot_refresh_timestamp();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_new_pivot_refresh_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.new_pivot_refresh_timestamp_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_new_pivot_refresh_timestamp(double value) {
  _internal_set_new_pivot_refresh_timestamp(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_timestamp)
}

// optional double old_pivot_refresh_timestamp = 16;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_pivot_refresh_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_pivot_refresh_timestamp() const {
  return _internal_has_old_pivot_refresh_timestamp();
}
inline void CommandPivotSetPivotRulesArchive::clear_old_pivot_refresh_timestamp() {
  _impl_.old_pivot_refresh_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double CommandPivotSetPivotRulesArchive::_internal_old_pivot_refresh_timestamp() const {
  return _impl_.old_pivot_refresh_timestamp_;
}
inline double CommandPivotSetPivotRulesArchive::old_pivot_refresh_timestamp() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_timestamp)
  return _internal_old_pivot_refresh_timestamp();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_old_pivot_refresh_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.old_pivot_refresh_timestamp_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_old_pivot_refresh_timestamp(double value) {
  _internal_set_old_pivot_refresh_timestamp(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_timestamp)
}

// optional .TSP.Reference new_options_map = 17;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_options_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_options_map_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_options_map() const {
  return _internal_has_new_options_map();
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::_internal_new_options_map() const {
  const ::TSP::Reference* p = _impl_.new_options_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::new_options_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_options_map)
  return _internal_new_options_map();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_options_map(
    ::TSP::Reference* new_options_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_options_map_);
  }
  _impl_.new_options_map_ = new_options_map;
  if (new_options_map) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_options_map)
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::release_new_options_map() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = _impl_.new_options_map_;
  _impl_.new_options_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_options_map() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_options_map)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = _impl_.new_options_map_;
  _impl_.new_options_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::_internal_mutable_new_options_map() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.new_options_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_options_map_ = p;
  }
  return _impl_.new_options_map_;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::mutable_new_options_map() {
  ::TSP::Reference* _msg = _internal_mutable_new_options_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_options_map)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_options_map(::TSP::Reference* new_options_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_options_map_);
  }
  if (new_options_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_options_map));
    if (message_arena != submessage_arena) {
      new_options_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_options_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.new_options_map_ = new_options_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_options_map)
}

// optional .TSP.Reference old_options_map = 18;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_options_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_options_map_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_options_map() const {
  return _internal_has_old_options_map();
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::_internal_old_options_map() const {
  const ::TSP::Reference* p = _impl_.old_options_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::old_options_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_options_map)
  return _internal_old_options_map();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_options_map(
    ::TSP::Reference* old_options_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_options_map_);
  }
  _impl_.old_options_map_ = old_options_map;
  if (old_options_map) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_options_map)
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::release_old_options_map() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = _impl_.old_options_map_;
  _impl_.old_options_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_options_map() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_options_map)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = _impl_.old_options_map_;
  _impl_.old_options_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::_internal_mutable_old_options_map() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.old_options_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_options_map_ = p;
  }
  return _impl_.old_options_map_;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::mutable_old_options_map() {
  ::TSP::Reference* _msg = _internal_mutable_old_options_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_options_map)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_options_map(::TSP::Reference* old_options_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_options_map_);
  }
  if (old_options_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_options_map));
    if (message_arena != submessage_arena) {
      old_options_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_options_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.old_options_map_ = old_options_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_options_map)
}

// repeated .TSP.UUID new_view_row_order = 19;
inline int CommandPivotSetPivotRulesArchive::_internal_new_view_row_order_size() const {
  return _impl_.new_view_row_order_.size();
}
inline int CommandPivotSetPivotRulesArchive::new_view_row_order_size() const {
  return _internal_new_view_row_order_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_view_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_view_row_order)
  return _impl_.new_view_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_new_view_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.new_view_row_order)
  return &_impl_.new_view_row_order_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_view_row_order(int index) const {
  return _impl_.new_view_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_view_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_view_row_order)
  return _internal_new_view_row_order(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_new_view_row_order() {
  return _impl_.new_view_row_order_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_new_view_row_order() {
  ::TSP::UUID* _add = _internal_add_new_view_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.new_view_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::new_view_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.new_view_row_order)
  return _impl_.new_view_row_order_;
}

// repeated .TSP.UUID old_view_row_order = 20;
inline int CommandPivotSetPivotRulesArchive::_internal_old_view_row_order_size() const {
  return _impl_.old_view_row_order_.size();
}
inline int CommandPivotSetPivotRulesArchive::old_view_row_order_size() const {
  return _internal_old_view_row_order_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_view_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_view_row_order)
  return _impl_.old_view_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_old_view_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.old_view_row_order)
  return &_impl_.old_view_row_order_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_view_row_order(int index) const {
  return _impl_.old_view_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_view_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_view_row_order)
  return _internal_old_view_row_order(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_old_view_row_order() {
  return _impl_.old_view_row_order_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_old_view_row_order() {
  ::TSP::UUID* _add = _internal_add_old_view_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.old_view_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::old_view_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.old_view_row_order)
  return _impl_.old_view_row_order_;
}

// repeated .TSP.UUID new_view_column_order = 21;
inline int CommandPivotSetPivotRulesArchive::_internal_new_view_column_order_size() const {
  return _impl_.new_view_column_order_.size();
}
inline int CommandPivotSetPivotRulesArchive::new_view_column_order_size() const {
  return _internal_new_view_column_order_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_view_column_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_view_column_order)
  return _impl_.new_view_column_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_new_view_column_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.new_view_column_order)
  return &_impl_.new_view_column_order_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_view_column_order(int index) const {
  return _impl_.new_view_column_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_view_column_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_view_column_order)
  return _internal_new_view_column_order(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_new_view_column_order() {
  return _impl_.new_view_column_order_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_new_view_column_order() {
  ::TSP::UUID* _add = _internal_add_new_view_column_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.new_view_column_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::new_view_column_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.new_view_column_order)
  return _impl_.new_view_column_order_;
}

// repeated .TSP.UUID old_view_column_order = 22;
inline int CommandPivotSetPivotRulesArchive::_internal_old_view_column_order_size() const {
  return _impl_.old_view_column_order_.size();
}
inline int CommandPivotSetPivotRulesArchive::old_view_column_order_size() const {
  return _internal_old_view_column_order_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_view_column_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_view_column_order)
  return _impl_.old_view_column_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_old_view_column_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.old_view_column_order)
  return &_impl_.old_view_column_order_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_view_column_order(int index) const {
  return _impl_.old_view_column_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_view_column_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_view_column_order)
  return _internal_old_view_column_order(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_old_view_column_order() {
  return _impl_.old_view_column_order_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_old_view_column_order() {
  ::TSP::UUID* _add = _internal_add_old_view_column_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.old_view_column_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::old_view_column_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.old_view_column_order)
  return _impl_.old_view_column_order_;
}

// repeated .TSP.UUID new_collapsed_row_groups = 23;
inline int CommandPivotSetPivotRulesArchive::_internal_new_collapsed_row_groups_size() const {
  return _impl_.new_collapsed_row_groups_.size();
}
inline int CommandPivotSetPivotRulesArchive::new_collapsed_row_groups_size() const {
  return _internal_new_collapsed_row_groups_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_collapsed_row_groups(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_collapsed_row_groups)
  return _impl_.new_collapsed_row_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_new_collapsed_row_groups() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.new_collapsed_row_groups)
  return &_impl_.new_collapsed_row_groups_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_collapsed_row_groups(int index) const {
  return _impl_.new_collapsed_row_groups_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_collapsed_row_groups(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_collapsed_row_groups)
  return _internal_new_collapsed_row_groups(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_new_collapsed_row_groups() {
  return _impl_.new_collapsed_row_groups_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_new_collapsed_row_groups() {
  ::TSP::UUID* _add = _internal_add_new_collapsed_row_groups();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.new_collapsed_row_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::new_collapsed_row_groups() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.new_collapsed_row_groups)
  return _impl_.new_collapsed_row_groups_;
}

// repeated .TSP.UUID old_collapsed_row_groups = 24;
inline int CommandPivotSetPivotRulesArchive::_internal_old_collapsed_row_groups_size() const {
  return _impl_.old_collapsed_row_groups_.size();
}
inline int CommandPivotSetPivotRulesArchive::old_collapsed_row_groups_size() const {
  return _internal_old_collapsed_row_groups_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_collapsed_row_groups(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_collapsed_row_groups)
  return _impl_.old_collapsed_row_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_old_collapsed_row_groups() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.old_collapsed_row_groups)
  return &_impl_.old_collapsed_row_groups_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_collapsed_row_groups(int index) const {
  return _impl_.old_collapsed_row_groups_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_collapsed_row_groups(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_collapsed_row_groups)
  return _internal_old_collapsed_row_groups(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_old_collapsed_row_groups() {
  return _impl_.old_collapsed_row_groups_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_old_collapsed_row_groups() {
  ::TSP::UUID* _add = _internal_add_old_collapsed_row_groups();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.old_collapsed_row_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::old_collapsed_row_groups() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.old_collapsed_row_groups)
  return _impl_.old_collapsed_row_groups_;
}

// repeated .TSP.UUID new_collapsed_column_groups = 25;
inline int CommandPivotSetPivotRulesArchive::_internal_new_collapsed_column_groups_size() const {
  return _impl_.new_collapsed_column_groups_.size();
}
inline int CommandPivotSetPivotRulesArchive::new_collapsed_column_groups_size() const {
  return _internal_new_collapsed_column_groups_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_collapsed_column_groups(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_collapsed_column_groups)
  return _impl_.new_collapsed_column_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_new_collapsed_column_groups() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.new_collapsed_column_groups)
  return &_impl_.new_collapsed_column_groups_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_collapsed_column_groups(int index) const {
  return _impl_.new_collapsed_column_groups_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_collapsed_column_groups(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_collapsed_column_groups)
  return _internal_new_collapsed_column_groups(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_new_collapsed_column_groups() {
  return _impl_.new_collapsed_column_groups_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_new_collapsed_column_groups() {
  ::TSP::UUID* _add = _internal_add_new_collapsed_column_groups();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.new_collapsed_column_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::new_collapsed_column_groups() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.new_collapsed_column_groups)
  return _impl_.new_collapsed_column_groups_;
}

// repeated .TSP.UUID old_collapsed_column_groups = 26;
inline int CommandPivotSetPivotRulesArchive::_internal_old_collapsed_column_groups_size() const {
  return _impl_.old_collapsed_column_groups_.size();
}
inline int CommandPivotSetPivotRulesArchive::old_collapsed_column_groups_size() const {
  return _internal_old_collapsed_column_groups_size();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_collapsed_column_groups(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_collapsed_column_groups)
  return _impl_.old_collapsed_column_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSetPivotRulesArchive::mutable_old_collapsed_column_groups() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSetPivotRulesArchive.old_collapsed_column_groups)
  return &_impl_.old_collapsed_column_groups_;
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_collapsed_column_groups(int index) const {
  return _impl_.old_collapsed_column_groups_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_collapsed_column_groups(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_collapsed_column_groups)
  return _internal_old_collapsed_column_groups(index);
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_add_old_collapsed_column_groups() {
  return _impl_.old_collapsed_column_groups_.Add();
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::add_old_collapsed_column_groups() {
  ::TSP::UUID* _add = _internal_add_old_collapsed_column_groups();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSetPivotRulesArchive.old_collapsed_column_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSetPivotRulesArchive::old_collapsed_column_groups() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSetPivotRulesArchive.old_collapsed_column_groups)
  return _impl_.old_collapsed_column_groups_;
}

// optional .TST.HierarchicalCellDiffMapArchive new_hierarchical_cell_diff_map = 27;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_hierarchical_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_hierarchical_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_hierarchical_cell_diff_map() const {
  return _internal_has_new_hierarchical_cell_diff_map();
}
inline const ::TST::HierarchicalCellDiffMapArchive& CommandPivotSetPivotRulesArchive::_internal_new_hierarchical_cell_diff_map() const {
  const ::TST::HierarchicalCellDiffMapArchive* p = _impl_.new_hierarchical_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::HierarchicalCellDiffMapArchive&>(
      ::TST::_HierarchicalCellDiffMapArchive_default_instance_);
}
inline const ::TST::HierarchicalCellDiffMapArchive& CommandPivotSetPivotRulesArchive::new_hierarchical_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_hierarchical_cell_diff_map)
  return _internal_new_hierarchical_cell_diff_map();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_hierarchical_cell_diff_map(
    ::TST::HierarchicalCellDiffMapArchive* new_hierarchical_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_hierarchical_cell_diff_map_);
  }
  _impl_.new_hierarchical_cell_diff_map_ = new_hierarchical_cell_diff_map;
  if (new_hierarchical_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_hierarchical_cell_diff_map)
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::release_new_hierarchical_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::TST::HierarchicalCellDiffMapArchive* temp = _impl_.new_hierarchical_cell_diff_map_;
  _impl_.new_hierarchical_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_hierarchical_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_hierarchical_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::TST::HierarchicalCellDiffMapArchive* temp = _impl_.new_hierarchical_cell_diff_map_;
  _impl_.new_hierarchical_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_new_hierarchical_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.new_hierarchical_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::HierarchicalCellDiffMapArchive>(GetArenaForAllocation());
    _impl_.new_hierarchical_cell_diff_map_ = p;
  }
  return _impl_.new_hierarchical_cell_diff_map_;
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::mutable_new_hierarchical_cell_diff_map() {
  ::TST::HierarchicalCellDiffMapArchive* _msg = _internal_mutable_new_hierarchical_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_hierarchical_cell_diff_map)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_hierarchical_cell_diff_map(::TST::HierarchicalCellDiffMapArchive* new_hierarchical_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_hierarchical_cell_diff_map_);
  }
  if (new_hierarchical_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_hierarchical_cell_diff_map));
    if (message_arena != submessage_arena) {
      new_hierarchical_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_hierarchical_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.new_hierarchical_cell_diff_map_ = new_hierarchical_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_hierarchical_cell_diff_map)
}

// optional .TST.HierarchicalCellDiffMapArchive old_hierarchical_cell_diff_map = 28;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_hierarchical_cell_diff_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_hierarchical_cell_diff_map_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_hierarchical_cell_diff_map() const {
  return _internal_has_old_hierarchical_cell_diff_map();
}
inline const ::TST::HierarchicalCellDiffMapArchive& CommandPivotSetPivotRulesArchive::_internal_old_hierarchical_cell_diff_map() const {
  const ::TST::HierarchicalCellDiffMapArchive* p = _impl_.old_hierarchical_cell_diff_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::HierarchicalCellDiffMapArchive&>(
      ::TST::_HierarchicalCellDiffMapArchive_default_instance_);
}
inline const ::TST::HierarchicalCellDiffMapArchive& CommandPivotSetPivotRulesArchive::old_hierarchical_cell_diff_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_hierarchical_cell_diff_map)
  return _internal_old_hierarchical_cell_diff_map();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_hierarchical_cell_diff_map(
    ::TST::HierarchicalCellDiffMapArchive* old_hierarchical_cell_diff_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_hierarchical_cell_diff_map_);
  }
  _impl_.old_hierarchical_cell_diff_map_ = old_hierarchical_cell_diff_map;
  if (old_hierarchical_cell_diff_map) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_hierarchical_cell_diff_map)
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::release_old_hierarchical_cell_diff_map() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::TST::HierarchicalCellDiffMapArchive* temp = _impl_.old_hierarchical_cell_diff_map_;
  _impl_.old_hierarchical_cell_diff_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_hierarchical_cell_diff_map() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_hierarchical_cell_diff_map)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::TST::HierarchicalCellDiffMapArchive* temp = _impl_.old_hierarchical_cell_diff_map_;
  _impl_.old_hierarchical_cell_diff_map_ = nullptr;
  return temp;
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_old_hierarchical_cell_diff_map() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.old_hierarchical_cell_diff_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::HierarchicalCellDiffMapArchive>(GetArenaForAllocation());
    _impl_.old_hierarchical_cell_diff_map_ = p;
  }
  return _impl_.old_hierarchical_cell_diff_map_;
}
inline ::TST::HierarchicalCellDiffMapArchive* CommandPivotSetPivotRulesArchive::mutable_old_hierarchical_cell_diff_map() {
  ::TST::HierarchicalCellDiffMapArchive* _msg = _internal_mutable_old_hierarchical_cell_diff_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_hierarchical_cell_diff_map)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_hierarchical_cell_diff_map(::TST::HierarchicalCellDiffMapArchive* old_hierarchical_cell_diff_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_hierarchical_cell_diff_map_);
  }
  if (old_hierarchical_cell_diff_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_hierarchical_cell_diff_map));
    if (message_arena != submessage_arena) {
      old_hierarchical_cell_diff_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_hierarchical_cell_diff_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.old_hierarchical_cell_diff_map_ = old_hierarchical_cell_diff_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_hierarchical_cell_diff_map)
}

// optional .TSP.Reference formula_rewrite_command_for_undo = 29;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_formula_rewrite_command_for_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_for_undo_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_formula_rewrite_command_for_undo() const {
  return _internal_has_formula_rewrite_command_for_undo();
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::_internal_formula_rewrite_command_for_undo() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_for_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::formula_rewrite_command_for_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.formula_rewrite_command_for_undo)
  return _internal_formula_rewrite_command_for_undo();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
    ::TSP::Reference* formula_rewrite_command_for_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  if (formula_rewrite_command_for_undo) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.formula_rewrite_command_for_undo)
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::release_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::unsafe_arena_release_formula_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.formula_rewrite_command_for_undo)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::_internal_mutable_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.formula_rewrite_command_for_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_for_undo_ = p;
  }
  return _impl_.formula_rewrite_command_for_undo_;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::mutable_formula_rewrite_command_for_undo() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command_for_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.formula_rewrite_command_for_undo)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  if (formula_rewrite_command_for_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo));
    if (message_arena != submessage_arena) {
      formula_rewrite_command_for_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command_for_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.formula_rewrite_command_for_undo)
}

// optional .TSP.UUIDRectArchive new_body_uid_tract = 30;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_body_uid_tract() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_body_uid_tract_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_body_uid_tract() const {
  return _internal_has_new_body_uid_tract();
}
inline const ::TSP::UUIDRectArchive& CommandPivotSetPivotRulesArchive::_internal_new_body_uid_tract() const {
  const ::TSP::UUIDRectArchive* p = _impl_.new_body_uid_tract_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDRectArchive&>(
      ::TSP::_UUIDRectArchive_default_instance_);
}
inline const ::TSP::UUIDRectArchive& CommandPivotSetPivotRulesArchive::new_body_uid_tract() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_body_uid_tract)
  return _internal_new_body_uid_tract();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_body_uid_tract(
    ::TSP::UUIDRectArchive* new_body_uid_tract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_body_uid_tract_);
  }
  _impl_.new_body_uid_tract_ = new_body_uid_tract;
  if (new_body_uid_tract) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_body_uid_tract)
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::release_new_body_uid_tract() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::TSP::UUIDRectArchive* temp = _impl_.new_body_uid_tract_;
  _impl_.new_body_uid_tract_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_body_uid_tract() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_body_uid_tract)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::TSP::UUIDRectArchive* temp = _impl_.new_body_uid_tract_;
  _impl_.new_body_uid_tract_ = nullptr;
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_new_body_uid_tract() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.new_body_uid_tract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDRectArchive>(GetArenaForAllocation());
    _impl_.new_body_uid_tract_ = p;
  }
  return _impl_.new_body_uid_tract_;
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::mutable_new_body_uid_tract() {
  ::TSP::UUIDRectArchive* _msg = _internal_mutable_new_body_uid_tract();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_body_uid_tract)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_body_uid_tract(::TSP::UUIDRectArchive* new_body_uid_tract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_body_uid_tract_);
  }
  if (new_body_uid_tract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_body_uid_tract));
    if (message_arena != submessage_arena) {
      new_body_uid_tract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_body_uid_tract, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.new_body_uid_tract_ = new_body_uid_tract;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_body_uid_tract)
}

// optional .TSP.UUIDRectArchive old_body_uid_tract = 31;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_body_uid_tract() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_body_uid_tract_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_body_uid_tract() const {
  return _internal_has_old_body_uid_tract();
}
inline const ::TSP::UUIDRectArchive& CommandPivotSetPivotRulesArchive::_internal_old_body_uid_tract() const {
  const ::TSP::UUIDRectArchive* p = _impl_.old_body_uid_tract_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDRectArchive&>(
      ::TSP::_UUIDRectArchive_default_instance_);
}
inline const ::TSP::UUIDRectArchive& CommandPivotSetPivotRulesArchive::old_body_uid_tract() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_body_uid_tract)
  return _internal_old_body_uid_tract();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_body_uid_tract(
    ::TSP::UUIDRectArchive* old_body_uid_tract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_body_uid_tract_);
  }
  _impl_.old_body_uid_tract_ = old_body_uid_tract;
  if (old_body_uid_tract) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_body_uid_tract)
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::release_old_body_uid_tract() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TSP::UUIDRectArchive* temp = _impl_.old_body_uid_tract_;
  _impl_.old_body_uid_tract_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_body_uid_tract() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_body_uid_tract)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TSP::UUIDRectArchive* temp = _impl_.old_body_uid_tract_;
  _impl_.old_body_uid_tract_ = nullptr;
  return temp;
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::_internal_mutable_old_body_uid_tract() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.old_body_uid_tract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDRectArchive>(GetArenaForAllocation());
    _impl_.old_body_uid_tract_ = p;
  }
  return _impl_.old_body_uid_tract_;
}
inline ::TSP::UUIDRectArchive* CommandPivotSetPivotRulesArchive::mutable_old_body_uid_tract() {
  ::TSP::UUIDRectArchive* _msg = _internal_mutable_old_body_uid_tract();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_body_uid_tract)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_body_uid_tract(::TSP::UUIDRectArchive* old_body_uid_tract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_body_uid_tract_);
  }
  if (old_body_uid_tract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_body_uid_tract));
    if (message_arena != submessage_arena) {
      old_body_uid_tract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_body_uid_tract, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.old_body_uid_tract_ = old_body_uid_tract;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_body_uid_tract)
}

// optional .TSP.UUID old_target_pivot_refresh_uid = 32;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_target_pivot_refresh_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_target_pivot_refresh_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_target_pivot_refresh_uid() const {
  return _internal_has_old_target_pivot_refresh_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_target_pivot_refresh_uid() const {
  const ::TSP::UUID* p = _impl_.old_target_pivot_refresh_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_target_pivot_refresh_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_refresh_uid)
  return _internal_old_target_pivot_refresh_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_target_pivot_refresh_uid(
    ::TSP::UUID* old_target_pivot_refresh_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_target_pivot_refresh_uid_);
  }
  _impl_.old_target_pivot_refresh_uid_ = old_target_pivot_refresh_uid;
  if (old_target_pivot_refresh_uid) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_refresh_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_old_target_pivot_refresh_uid() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::TSP::UUID* temp = _impl_.old_target_pivot_refresh_uid_;
  _impl_.old_target_pivot_refresh_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_target_pivot_refresh_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_refresh_uid)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::TSP::UUID* temp = _impl_.old_target_pivot_refresh_uid_;
  _impl_.old_target_pivot_refresh_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_old_target_pivot_refresh_uid() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.old_target_pivot_refresh_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.old_target_pivot_refresh_uid_ = p;
  }
  return _impl_.old_target_pivot_refresh_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_target_pivot_refresh_uid() {
  ::TSP::UUID* _msg = _internal_mutable_old_target_pivot_refresh_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_refresh_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_target_pivot_refresh_uid(::TSP::UUID* old_target_pivot_refresh_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_target_pivot_refresh_uid_);
  }
  if (old_target_pivot_refresh_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_pivot_refresh_uid));
    if (message_arena != submessage_arena) {
      old_target_pivot_refresh_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_target_pivot_refresh_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.old_target_pivot_refresh_uid_ = old_target_pivot_refresh_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_refresh_uid)
}

// optional .TSP.UUID new_target_pivot_row_column_rule_change_uid = 33;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_target_pivot_row_column_rule_change_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_target_pivot_row_column_rule_change_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_target_pivot_row_column_rule_change_uid() const {
  return _internal_has_new_target_pivot_row_column_rule_change_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_target_pivot_row_column_rule_change_uid() const {
  const ::TSP::UUID* p = _impl_.new_target_pivot_row_column_rule_change_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_target_pivot_row_column_rule_change_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_row_column_rule_change_uid)
  return _internal_new_target_pivot_row_column_rule_change_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_target_pivot_row_column_rule_change_uid(
    ::TSP::UUID* new_target_pivot_row_column_rule_change_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_target_pivot_row_column_rule_change_uid_);
  }
  _impl_.new_target_pivot_row_column_rule_change_uid_ = new_target_pivot_row_column_rule_change_uid;
  if (new_target_pivot_row_column_rule_change_uid) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_row_column_rule_change_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_new_target_pivot_row_column_rule_change_uid() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::TSP::UUID* temp = _impl_.new_target_pivot_row_column_rule_change_uid_;
  _impl_.new_target_pivot_row_column_rule_change_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_target_pivot_row_column_rule_change_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_row_column_rule_change_uid)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::TSP::UUID* temp = _impl_.new_target_pivot_row_column_rule_change_uid_;
  _impl_.new_target_pivot_row_column_rule_change_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_new_target_pivot_row_column_rule_change_uid() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.new_target_pivot_row_column_rule_change_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.new_target_pivot_row_column_rule_change_uid_ = p;
  }
  return _impl_.new_target_pivot_row_column_rule_change_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_target_pivot_row_column_rule_change_uid() {
  ::TSP::UUID* _msg = _internal_mutable_new_target_pivot_row_column_rule_change_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_row_column_rule_change_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_target_pivot_row_column_rule_change_uid(::TSP::UUID* new_target_pivot_row_column_rule_change_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_target_pivot_row_column_rule_change_uid_);
  }
  if (new_target_pivot_row_column_rule_change_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_target_pivot_row_column_rule_change_uid));
    if (message_arena != submessage_arena) {
      new_target_pivot_row_column_rule_change_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_target_pivot_row_column_rule_change_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.new_target_pivot_row_column_rule_change_uid_ = new_target_pivot_row_column_rule_change_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_row_column_rule_change_uid)
}

// optional .TSP.UUID old_target_pivot_row_column_rule_change_uid = 34;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_target_pivot_row_column_rule_change_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_target_pivot_row_column_rule_change_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_target_pivot_row_column_rule_change_uid() const {
  return _internal_has_old_target_pivot_row_column_rule_change_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_target_pivot_row_column_rule_change_uid() const {
  const ::TSP::UUID* p = _impl_.old_target_pivot_row_column_rule_change_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_target_pivot_row_column_rule_change_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_row_column_rule_change_uid)
  return _internal_old_target_pivot_row_column_rule_change_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_target_pivot_row_column_rule_change_uid(
    ::TSP::UUID* old_target_pivot_row_column_rule_change_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_target_pivot_row_column_rule_change_uid_);
  }
  _impl_.old_target_pivot_row_column_rule_change_uid_ = old_target_pivot_row_column_rule_change_uid;
  if (old_target_pivot_row_column_rule_change_uid) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_row_column_rule_change_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_old_target_pivot_row_column_rule_change_uid() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::TSP::UUID* temp = _impl_.old_target_pivot_row_column_rule_change_uid_;
  _impl_.old_target_pivot_row_column_rule_change_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_target_pivot_row_column_rule_change_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_row_column_rule_change_uid)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::TSP::UUID* temp = _impl_.old_target_pivot_row_column_rule_change_uid_;
  _impl_.old_target_pivot_row_column_rule_change_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_old_target_pivot_row_column_rule_change_uid() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.old_target_pivot_row_column_rule_change_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.old_target_pivot_row_column_rule_change_uid_ = p;
  }
  return _impl_.old_target_pivot_row_column_rule_change_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_target_pivot_row_column_rule_change_uid() {
  ::TSP::UUID* _msg = _internal_mutable_old_target_pivot_row_column_rule_change_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_row_column_rule_change_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_target_pivot_row_column_rule_change_uid(::TSP::UUID* old_target_pivot_row_column_rule_change_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_target_pivot_row_column_rule_change_uid_);
  }
  if (old_target_pivot_row_column_rule_change_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_pivot_row_column_rule_change_uid));
    if (message_arena != submessage_arena) {
      old_target_pivot_row_column_rule_change_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_target_pivot_row_column_rule_change_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.old_target_pivot_row_column_rule_change_uid_ = old_target_pivot_row_column_rule_change_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_row_column_rule_change_uid)
}

// optional .TSP.UUID new_target_pivot_aggregate_rule_change_uid = 35;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_target_pivot_aggregate_rule_change_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_target_pivot_aggregate_rule_change_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_target_pivot_aggregate_rule_change_uid() const {
  return _internal_has_new_target_pivot_aggregate_rule_change_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_new_target_pivot_aggregate_rule_change_uid() const {
  const ::TSP::UUID* p = _impl_.new_target_pivot_aggregate_rule_change_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::new_target_pivot_aggregate_rule_change_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_aggregate_rule_change_uid)
  return _internal_new_target_pivot_aggregate_rule_change_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_target_pivot_aggregate_rule_change_uid(
    ::TSP::UUID* new_target_pivot_aggregate_rule_change_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_target_pivot_aggregate_rule_change_uid_);
  }
  _impl_.new_target_pivot_aggregate_rule_change_uid_ = new_target_pivot_aggregate_rule_change_uid;
  if (new_target_pivot_aggregate_rule_change_uid) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_aggregate_rule_change_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_new_target_pivot_aggregate_rule_change_uid() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::TSP::UUID* temp = _impl_.new_target_pivot_aggregate_rule_change_uid_;
  _impl_.new_target_pivot_aggregate_rule_change_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_target_pivot_aggregate_rule_change_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_aggregate_rule_change_uid)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::TSP::UUID* temp = _impl_.new_target_pivot_aggregate_rule_change_uid_;
  _impl_.new_target_pivot_aggregate_rule_change_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_new_target_pivot_aggregate_rule_change_uid() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.new_target_pivot_aggregate_rule_change_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.new_target_pivot_aggregate_rule_change_uid_ = p;
  }
  return _impl_.new_target_pivot_aggregate_rule_change_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_new_target_pivot_aggregate_rule_change_uid() {
  ::TSP::UUID* _msg = _internal_mutable_new_target_pivot_aggregate_rule_change_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_aggregate_rule_change_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_target_pivot_aggregate_rule_change_uid(::TSP::UUID* new_target_pivot_aggregate_rule_change_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_target_pivot_aggregate_rule_change_uid_);
  }
  if (new_target_pivot_aggregate_rule_change_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_target_pivot_aggregate_rule_change_uid));
    if (message_arena != submessage_arena) {
      new_target_pivot_aggregate_rule_change_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_target_pivot_aggregate_rule_change_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.new_target_pivot_aggregate_rule_change_uid_ = new_target_pivot_aggregate_rule_change_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_target_pivot_aggregate_rule_change_uid)
}

// optional .TSP.UUID old_target_pivot_aggregate_rule_change_uid = 36;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_target_pivot_aggregate_rule_change_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_target_pivot_aggregate_rule_change_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_target_pivot_aggregate_rule_change_uid() const {
  return _internal_has_old_target_pivot_aggregate_rule_change_uid();
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::_internal_old_target_pivot_aggregate_rule_change_uid() const {
  const ::TSP::UUID* p = _impl_.old_target_pivot_aggregate_rule_change_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetPivotRulesArchive::old_target_pivot_aggregate_rule_change_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_aggregate_rule_change_uid)
  return _internal_old_target_pivot_aggregate_rule_change_uid();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_target_pivot_aggregate_rule_change_uid(
    ::TSP::UUID* old_target_pivot_aggregate_rule_change_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_target_pivot_aggregate_rule_change_uid_);
  }
  _impl_.old_target_pivot_aggregate_rule_change_uid_ = old_target_pivot_aggregate_rule_change_uid;
  if (old_target_pivot_aggregate_rule_change_uid) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_aggregate_rule_change_uid)
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::release_old_target_pivot_aggregate_rule_change_uid() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::TSP::UUID* temp = _impl_.old_target_pivot_aggregate_rule_change_uid_;
  _impl_.old_target_pivot_aggregate_rule_change_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_target_pivot_aggregate_rule_change_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_aggregate_rule_change_uid)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::TSP::UUID* temp = _impl_.old_target_pivot_aggregate_rule_change_uid_;
  _impl_.old_target_pivot_aggregate_rule_change_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::_internal_mutable_old_target_pivot_aggregate_rule_change_uid() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.old_target_pivot_aggregate_rule_change_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.old_target_pivot_aggregate_rule_change_uid_ = p;
  }
  return _impl_.old_target_pivot_aggregate_rule_change_uid_;
}
inline ::TSP::UUID* CommandPivotSetPivotRulesArchive::mutable_old_target_pivot_aggregate_rule_change_uid() {
  ::TSP::UUID* _msg = _internal_mutable_old_target_pivot_aggregate_rule_change_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_aggregate_rule_change_uid)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_target_pivot_aggregate_rule_change_uid(::TSP::UUID* old_target_pivot_aggregate_rule_change_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_target_pivot_aggregate_rule_change_uid_);
  }
  if (old_target_pivot_aggregate_rule_change_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_pivot_aggregate_rule_change_uid));
    if (message_arena != submessage_arena) {
      old_target_pivot_aggregate_rule_change_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_target_pivot_aggregate_rule_change_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.old_target_pivot_aggregate_rule_change_uid_ = old_target_pivot_aggregate_rule_change_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_target_pivot_aggregate_rule_change_uid)
}

// optional bool is_order_finalized = 37;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_is_order_finalized() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_is_order_finalized() const {
  return _internal_has_is_order_finalized();
}
inline void CommandPivotSetPivotRulesArchive::clear_is_order_finalized() {
  _impl_.is_order_finalized_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool CommandPivotSetPivotRulesArchive::_internal_is_order_finalized() const {
  return _impl_.is_order_finalized_;
}
inline bool CommandPivotSetPivotRulesArchive::is_order_finalized() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.is_order_finalized)
  return _internal_is_order_finalized();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_is_order_finalized(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.is_order_finalized_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_is_order_finalized(bool value) {
  _internal_set_is_order_finalized(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.is_order_finalized)
}

// optional .TSP.Reference new_filter_set = 39;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_new_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_filter_set_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_new_filter_set() const {
  return _internal_has_new_filter_set();
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::_internal_new_filter_set() const {
  const ::TSP::Reference* p = _impl_.new_filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::new_filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.new_filter_set)
  return _internal_new_filter_set();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_new_filter_set(
    ::TSP::Reference* new_filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_filter_set_);
  }
  _impl_.new_filter_set_ = new_filter_set;
  if (new_filter_set) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_filter_set)
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::release_new_filter_set() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::TSP::Reference* temp = _impl_.new_filter_set_;
  _impl_.new_filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::unsafe_arena_release_new_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.new_filter_set)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::TSP::Reference* temp = _impl_.new_filter_set_;
  _impl_.new_filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::_internal_mutable_new_filter_set() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.new_filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_filter_set_ = p;
  }
  return _impl_.new_filter_set_;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::mutable_new_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_new_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.new_filter_set)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_new_filter_set(::TSP::Reference* new_filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_filter_set_);
  }
  if (new_filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_filter_set));
    if (message_arena != submessage_arena) {
      new_filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.new_filter_set_ = new_filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.new_filter_set)
}

// optional .TSP.Reference old_filter_set = 40;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_old_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_filter_set_ != nullptr);
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_old_filter_set() const {
  return _internal_has_old_filter_set();
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::_internal_old_filter_set() const {
  const ::TSP::Reference* p = _impl_.old_filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPivotSetPivotRulesArchive::old_filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.old_filter_set)
  return _internal_old_filter_set();
}
inline void CommandPivotSetPivotRulesArchive::unsafe_arena_set_allocated_old_filter_set(
    ::TSP::Reference* old_filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_filter_set_);
  }
  _impl_.old_filter_set_ = old_filter_set;
  if (old_filter_set) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_filter_set)
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::release_old_filter_set() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::TSP::Reference* temp = _impl_.old_filter_set_;
  _impl_.old_filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::unsafe_arena_release_old_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetPivotRulesArchive.old_filter_set)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::TSP::Reference* temp = _impl_.old_filter_set_;
  _impl_.old_filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::_internal_mutable_old_filter_set() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.old_filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_filter_set_ = p;
  }
  return _impl_.old_filter_set_;
}
inline ::TSP::Reference* CommandPivotSetPivotRulesArchive::mutable_old_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_old_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetPivotRulesArchive.old_filter_set)
  return _msg;
}
inline void CommandPivotSetPivotRulesArchive::set_allocated_old_filter_set(::TSP::Reference* old_filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_filter_set_);
  }
  if (old_filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_filter_set));
    if (message_arena != submessage_arena) {
      old_filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.old_filter_set_ = old_filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetPivotRulesArchive.old_filter_set)
}

// optional bool use_small_table_limits = 41;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_use_small_table_limits() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_use_small_table_limits() const {
  return _internal_has_use_small_table_limits();
}
inline void CommandPivotSetPivotRulesArchive::clear_use_small_table_limits() {
  _impl_.use_small_table_limits_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool CommandPivotSetPivotRulesArchive::_internal_use_small_table_limits() const {
  return _impl_.use_small_table_limits_;
}
inline bool CommandPivotSetPivotRulesArchive::use_small_table_limits() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.use_small_table_limits)
  return _internal_use_small_table_limits();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_use_small_table_limits(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.use_small_table_limits_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_use_small_table_limits(bool value) {
  _internal_set_use_small_table_limits(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.use_small_table_limits)
}

// optional int32 setting_filters_enabled = 42;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_setting_filters_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_setting_filters_enabled() const {
  return _internal_has_setting_filters_enabled();
}
inline void CommandPivotSetPivotRulesArchive::clear_setting_filters_enabled() {
  _impl_.setting_filters_enabled_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline int32_t CommandPivotSetPivotRulesArchive::_internal_setting_filters_enabled() const {
  return _impl_.setting_filters_enabled_;
}
inline int32_t CommandPivotSetPivotRulesArchive::setting_filters_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.setting_filters_enabled)
  return _internal_setting_filters_enabled();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_setting_filters_enabled(int32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.setting_filters_enabled_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_setting_filters_enabled(int32_t value) {
  _internal_set_setting_filters_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.setting_filters_enabled)
}

// optional int32 undo_setting_filters_enabled = 43;
inline bool CommandPivotSetPivotRulesArchive::_internal_has_undo_setting_filters_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CommandPivotSetPivotRulesArchive::has_undo_setting_filters_enabled() const {
  return _internal_has_undo_setting_filters_enabled();
}
inline void CommandPivotSetPivotRulesArchive::clear_undo_setting_filters_enabled() {
  _impl_.undo_setting_filters_enabled_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline int32_t CommandPivotSetPivotRulesArchive::_internal_undo_setting_filters_enabled() const {
  return _impl_.undo_setting_filters_enabled_;
}
inline int32_t CommandPivotSetPivotRulesArchive::undo_setting_filters_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetPivotRulesArchive.undo_setting_filters_enabled)
  return _internal_undo_setting_filters_enabled();
}
inline void CommandPivotSetPivotRulesArchive::_internal_set_undo_setting_filters_enabled(int32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.undo_setting_filters_enabled_ = value;
}
inline void CommandPivotSetPivotRulesArchive::set_undo_setting_filters_enabled(int32_t value) {
  _internal_set_undo_setting_filters_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetPivotRulesArchive.undo_setting_filters_enabled)
}

// -------------------------------------------------------------------

// CommandPivotSetGroupingColumnOptionsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandPivotSetGroupingColumnOptionsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandPivotSetGroupingColumnOptionsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandPivotSetGroupingColumnOptionsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetGroupingColumnOptionsArchive.super)
  return _internal_super();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetGroupingColumnOptionsArchive.super)
}
inline ::TST::TableCommandArchive* CommandPivotSetGroupingColumnOptionsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotSetGroupingColumnOptionsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetGroupingColumnOptionsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotSetGroupingColumnOptionsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandPivotSetGroupingColumnOptionsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetGroupingColumnOptionsArchive.super)
  return _msg;
}
inline void CommandPivotSetGroupingColumnOptionsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetGroupingColumnOptionsArchive.super)
}

// optional .TSP.UUID grouping_column_uid = 2;
inline bool CommandPivotSetGroupingColumnOptionsArchive::_internal_has_grouping_column_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grouping_column_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::has_grouping_column_uid() const {
  return _internal_has_grouping_column_uid();
}
inline const ::TSP::UUID& CommandPivotSetGroupingColumnOptionsArchive::_internal_grouping_column_uid() const {
  const ::TSP::UUID* p = _impl_.grouping_column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSetGroupingColumnOptionsArchive::grouping_column_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetGroupingColumnOptionsArchive.grouping_column_uid)
  return _internal_grouping_column_uid();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::unsafe_arena_set_allocated_grouping_column_uid(
    ::TSP::UUID* grouping_column_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_column_uid_);
  }
  _impl_.grouping_column_uid_ = grouping_column_uid;
  if (grouping_column_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSetGroupingColumnOptionsArchive.grouping_column_uid)
}
inline ::TSP::UUID* CommandPivotSetGroupingColumnOptionsArchive::release_grouping_column_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.grouping_column_uid_;
  _impl_.grouping_column_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSetGroupingColumnOptionsArchive::unsafe_arena_release_grouping_column_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSetGroupingColumnOptionsArchive.grouping_column_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.grouping_column_uid_;
  _impl_.grouping_column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSetGroupingColumnOptionsArchive::_internal_mutable_grouping_column_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.grouping_column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.grouping_column_uid_ = p;
  }
  return _impl_.grouping_column_uid_;
}
inline ::TSP::UUID* CommandPivotSetGroupingColumnOptionsArchive::mutable_grouping_column_uid() {
  ::TSP::UUID* _msg = _internal_mutable_grouping_column_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSetGroupingColumnOptionsArchive.grouping_column_uid)
  return _msg;
}
inline void CommandPivotSetGroupingColumnOptionsArchive::set_allocated_grouping_column_uid(::TSP::UUID* grouping_column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_column_uid_);
  }
  if (grouping_column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_uid));
    if (message_arena != submessage_arena) {
      grouping_column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_column_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.grouping_column_uid_ = grouping_column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSetGroupingColumnOptionsArchive.grouping_column_uid)
}

// optional uint32 non_sorting_flag = 3;
inline bool CommandPivotSetGroupingColumnOptionsArchive::_internal_has_non_sorting_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::has_non_sorting_flag() const {
  return _internal_has_non_sorting_flag();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::clear_non_sorting_flag() {
  _impl_.non_sorting_flag_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandPivotSetGroupingColumnOptionsArchive::_internal_non_sorting_flag() const {
  return _impl_.non_sorting_flag_;
}
inline uint32_t CommandPivotSetGroupingColumnOptionsArchive::non_sorting_flag() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetGroupingColumnOptionsArchive.non_sorting_flag)
  return _internal_non_sorting_flag();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::_internal_set_non_sorting_flag(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.non_sorting_flag_ = value;
}
inline void CommandPivotSetGroupingColumnOptionsArchive::set_non_sorting_flag(uint32_t value) {
  _internal_set_non_sorting_flag(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetGroupingColumnOptionsArchive.non_sorting_flag)
}

// optional bool bool_value = 4;
inline bool CommandPivotSetGroupingColumnOptionsArchive::_internal_has_bool_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::clear_bool_value() {
  _impl_.bool_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::_internal_bool_value() const {
  return _impl_.bool_value_;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::bool_value() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetGroupingColumnOptionsArchive.bool_value)
  return _internal_bool_value();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::_internal_set_bool_value(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bool_value_ = value;
}
inline void CommandPivotSetGroupingColumnOptionsArchive::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetGroupingColumnOptionsArchive.bool_value)
}

// optional bool undo_bool_value = 5;
inline bool CommandPivotSetGroupingColumnOptionsArchive::_internal_has_undo_bool_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::has_undo_bool_value() const {
  return _internal_has_undo_bool_value();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::clear_undo_bool_value() {
  _impl_.undo_bool_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::_internal_undo_bool_value() const {
  return _impl_.undo_bool_value_;
}
inline bool CommandPivotSetGroupingColumnOptionsArchive::undo_bool_value() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSetGroupingColumnOptionsArchive.undo_bool_value)
  return _internal_undo_bool_value();
}
inline void CommandPivotSetGroupingColumnOptionsArchive::_internal_set_undo_bool_value(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.undo_bool_value_ = value;
}
inline void CommandPivotSetGroupingColumnOptionsArchive::set_undo_bool_value(bool value) {
  _internal_set_undo_bool_value(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSetGroupingColumnOptionsArchive.undo_bool_value)
}

// -------------------------------------------------------------------

// CommandPivotHideShowGrandTotalsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandPivotHideShowGrandTotalsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPivotHideShowGrandTotalsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPivotHideShowGrandTotalsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandPivotHideShowGrandTotalsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandPivotHideShowGrandTotalsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotHideShowGrandTotalsArchive.super)
  return _internal_super();
}
inline void CommandPivotHideShowGrandTotalsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotHideShowGrandTotalsArchive.super)
}
inline ::TST::TableCommandArchive* CommandPivotHideShowGrandTotalsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotHideShowGrandTotalsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotHideShowGrandTotalsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotHideShowGrandTotalsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandPivotHideShowGrandTotalsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotHideShowGrandTotalsArchive.super)
  return _msg;
}
inline void CommandPivotHideShowGrandTotalsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotHideShowGrandTotalsArchive.super)
}

// optional .TST.TableDimensionArchive dimension = 2;
inline bool CommandPivotHideShowGrandTotalsArchive::_internal_has_dimension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandPivotHideShowGrandTotalsArchive::has_dimension() const {
  return _internal_has_dimension();
}
inline void CommandPivotHideShowGrandTotalsArchive::clear_dimension() {
  _impl_.dimension_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TST::TableDimensionArchive CommandPivotHideShowGrandTotalsArchive::_internal_dimension() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.dimension_);
}
inline ::TST::TableDimensionArchive CommandPivotHideShowGrandTotalsArchive::dimension() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotHideShowGrandTotalsArchive.dimension)
  return _internal_dimension();
}
inline void CommandPivotHideShowGrandTotalsArchive::_internal_set_dimension(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dimension_ = value;
}
inline void CommandPivotHideShowGrandTotalsArchive::set_dimension(::TST::TableDimensionArchive value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotHideShowGrandTotalsArchive.dimension)
}

// optional bool is_hiding = 3;
inline bool CommandPivotHideShowGrandTotalsArchive::_internal_has_is_hiding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandPivotHideShowGrandTotalsArchive::has_is_hiding() const {
  return _internal_has_is_hiding();
}
inline void CommandPivotHideShowGrandTotalsArchive::clear_is_hiding() {
  _impl_.is_hiding_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandPivotHideShowGrandTotalsArchive::_internal_is_hiding() const {
  return _impl_.is_hiding_;
}
inline bool CommandPivotHideShowGrandTotalsArchive::is_hiding() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotHideShowGrandTotalsArchive.is_hiding)
  return _internal_is_hiding();
}
inline void CommandPivotHideShowGrandTotalsArchive::_internal_set_is_hiding(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_hiding_ = value;
}
inline void CommandPivotHideShowGrandTotalsArchive::set_is_hiding(bool value) {
  _internal_set_is_hiding(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotHideShowGrandTotalsArchive.is_hiding)
}

// optional bool undo_is_hiding = 4;
inline bool CommandPivotHideShowGrandTotalsArchive::_internal_has_undo_is_hiding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandPivotHideShowGrandTotalsArchive::has_undo_is_hiding() const {
  return _internal_has_undo_is_hiding();
}
inline void CommandPivotHideShowGrandTotalsArchive::clear_undo_is_hiding() {
  _impl_.undo_is_hiding_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandPivotHideShowGrandTotalsArchive::_internal_undo_is_hiding() const {
  return _impl_.undo_is_hiding_;
}
inline bool CommandPivotHideShowGrandTotalsArchive::undo_is_hiding() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotHideShowGrandTotalsArchive.undo_is_hiding)
  return _internal_undo_is_hiding();
}
inline void CommandPivotHideShowGrandTotalsArchive::_internal_set_undo_is_hiding(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.undo_is_hiding_ = value;
}
inline void CommandPivotHideShowGrandTotalsArchive::set_undo_is_hiding(bool value) {
  _internal_set_undo_is_hiding(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotHideShowGrandTotalsArchive.undo_is_hiding)
}

// -------------------------------------------------------------------

// CommandPivotSortArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandPivotSortArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPivotSortArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPivotSortArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandPivotSortArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandPivotSortArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.super)
  return _internal_super();
}
inline void CommandPivotSortArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSortArchive.super)
}
inline ::TST::TableCommandArchive* CommandPivotSortArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotSortArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSortArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandPivotSortArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandPivotSortArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.super)
  return _msg;
}
inline void CommandPivotSortArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSortArchive.super)
}

// optional .TST.TableDimensionArchive dimension = 2;
inline bool CommandPivotSortArchive::_internal_has_dimension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CommandPivotSortArchive::has_dimension() const {
  return _internal_has_dimension();
}
inline void CommandPivotSortArchive::clear_dimension() {
  _impl_.dimension_ = -1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::TST::TableDimensionArchive CommandPivotSortArchive::_internal_dimension() const {
  return static_cast< ::TST::TableDimensionArchive >(_impl_.dimension_);
}
inline ::TST::TableDimensionArchive CommandPivotSortArchive::dimension() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.dimension)
  return _internal_dimension();
}
inline void CommandPivotSortArchive::_internal_set_dimension(::TST::TableDimensionArchive value) {
  assert(::TST::TableDimensionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.dimension_ = value;
}
inline void CommandPivotSortArchive::set_dimension(::TST::TableDimensionArchive value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSortArchive.dimension)
}

// repeated .TSP.UUID column_order = 3;
inline int CommandPivotSortArchive::_internal_column_order_size() const {
  return _impl_.column_order_.size();
}
inline int CommandPivotSortArchive::column_order_size() const {
  return _internal_column_order_size();
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_column_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.column_order)
  return _impl_.column_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSortArchive::mutable_column_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSortArchive.column_order)
  return &_impl_.column_order_;
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_column_order(int index) const {
  return _impl_.column_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSortArchive::column_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.column_order)
  return _internal_column_order(index);
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_add_column_order() {
  return _impl_.column_order_.Add();
}
inline ::TSP::UUID* CommandPivotSortArchive::add_column_order() {
  ::TSP::UUID* _add = _internal_add_column_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSortArchive.column_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSortArchive::column_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSortArchive.column_order)
  return _impl_.column_order_;
}

// repeated .TSP.UUID undo_column_order = 4;
inline int CommandPivotSortArchive::_internal_undo_column_order_size() const {
  return _impl_.undo_column_order_.size();
}
inline int CommandPivotSortArchive::undo_column_order_size() const {
  return _internal_undo_column_order_size();
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_undo_column_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.undo_column_order)
  return _impl_.undo_column_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSortArchive::mutable_undo_column_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSortArchive.undo_column_order)
  return &_impl_.undo_column_order_;
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_undo_column_order(int index) const {
  return _impl_.undo_column_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSortArchive::undo_column_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.undo_column_order)
  return _internal_undo_column_order(index);
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_add_undo_column_order() {
  return _impl_.undo_column_order_.Add();
}
inline ::TSP::UUID* CommandPivotSortArchive::add_undo_column_order() {
  ::TSP::UUID* _add = _internal_add_undo_column_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSortArchive.undo_column_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSortArchive::undo_column_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSortArchive.undo_column_order)
  return _impl_.undo_column_order_;
}

// repeated .TSP.UUID row_order = 5;
inline int CommandPivotSortArchive::_internal_row_order_size() const {
  return _impl_.row_order_.size();
}
inline int CommandPivotSortArchive::row_order_size() const {
  return _internal_row_order_size();
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.row_order)
  return _impl_.row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSortArchive::mutable_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSortArchive.row_order)
  return &_impl_.row_order_;
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_row_order(int index) const {
  return _impl_.row_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSortArchive::row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.row_order)
  return _internal_row_order(index);
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_add_row_order() {
  return _impl_.row_order_.Add();
}
inline ::TSP::UUID* CommandPivotSortArchive::add_row_order() {
  ::TSP::UUID* _add = _internal_add_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSortArchive.row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSortArchive::row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSortArchive.row_order)
  return _impl_.row_order_;
}

// repeated .TSP.UUID undo_row_order = 6;
inline int CommandPivotSortArchive::_internal_undo_row_order_size() const {
  return _impl_.undo_row_order_.size();
}
inline int CommandPivotSortArchive::undo_row_order_size() const {
  return _internal_undo_row_order_size();
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_undo_row_order(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.undo_row_order)
  return _impl_.undo_row_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPivotSortArchive::mutable_undo_row_order() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPivotSortArchive.undo_row_order)
  return &_impl_.undo_row_order_;
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_undo_row_order(int index) const {
  return _impl_.undo_row_order_.Get(index);
}
inline const ::TSP::UUID& CommandPivotSortArchive::undo_row_order(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.undo_row_order)
  return _internal_undo_row_order(index);
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_add_undo_row_order() {
  return _impl_.undo_row_order_.Add();
}
inline ::TSP::UUID* CommandPivotSortArchive::add_undo_row_order() {
  ::TSP::UUID* _add = _internal_add_undo_row_order();
  // @@protoc_insertion_point(field_add:TST.CommandPivotSortArchive.undo_row_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPivotSortArchive::undo_row_order() const {
  // @@protoc_insertion_point(field_list:TST.CommandPivotSortArchive.undo_row_order)
  return _impl_.undo_row_order_;
}

// required .TSP.UUID target_pivot_row_column_rule_change_uid = 7;
inline bool CommandPivotSortArchive::_internal_has_target_pivot_row_column_rule_change_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_pivot_row_column_rule_change_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSortArchive::has_target_pivot_row_column_rule_change_uid() const {
  return _internal_has_target_pivot_row_column_rule_change_uid();
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_target_pivot_row_column_rule_change_uid() const {
  const ::TSP::UUID* p = _impl_.target_pivot_row_column_rule_change_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSortArchive::target_pivot_row_column_rule_change_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.target_pivot_row_column_rule_change_uid)
  return _internal_target_pivot_row_column_rule_change_uid();
}
inline void CommandPivotSortArchive::unsafe_arena_set_allocated_target_pivot_row_column_rule_change_uid(
    ::TSP::UUID* target_pivot_row_column_rule_change_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pivot_row_column_rule_change_uid_);
  }
  _impl_.target_pivot_row_column_rule_change_uid_ = target_pivot_row_column_rule_change_uid;
  if (target_pivot_row_column_rule_change_uid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSortArchive.target_pivot_row_column_rule_change_uid)
}
inline ::TSP::UUID* CommandPivotSortArchive::release_target_pivot_row_column_rule_change_uid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.target_pivot_row_column_rule_change_uid_;
  _impl_.target_pivot_row_column_rule_change_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::unsafe_arena_release_target_pivot_row_column_rule_change_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSortArchive.target_pivot_row_column_rule_change_uid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.target_pivot_row_column_rule_change_uid_;
  _impl_.target_pivot_row_column_rule_change_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_mutable_target_pivot_row_column_rule_change_uid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.target_pivot_row_column_rule_change_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.target_pivot_row_column_rule_change_uid_ = p;
  }
  return _impl_.target_pivot_row_column_rule_change_uid_;
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_target_pivot_row_column_rule_change_uid() {
  ::TSP::UUID* _msg = _internal_mutable_target_pivot_row_column_rule_change_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.target_pivot_row_column_rule_change_uid)
  return _msg;
}
inline void CommandPivotSortArchive::set_allocated_target_pivot_row_column_rule_change_uid(::TSP::UUID* target_pivot_row_column_rule_change_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pivot_row_column_rule_change_uid_);
  }
  if (target_pivot_row_column_rule_change_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_pivot_row_column_rule_change_uid));
    if (message_arena != submessage_arena) {
      target_pivot_row_column_rule_change_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_pivot_row_column_rule_change_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.target_pivot_row_column_rule_change_uid_ = target_pivot_row_column_rule_change_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSortArchive.target_pivot_row_column_rule_change_uid)
}

// required .TSP.UUID target_pivot_aggregate_rule_change_uid = 8;
inline bool CommandPivotSortArchive::_internal_has_target_pivot_aggregate_rule_change_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_pivot_aggregate_rule_change_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSortArchive::has_target_pivot_aggregate_rule_change_uid() const {
  return _internal_has_target_pivot_aggregate_rule_change_uid();
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_target_pivot_aggregate_rule_change_uid() const {
  const ::TSP::UUID* p = _impl_.target_pivot_aggregate_rule_change_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSortArchive::target_pivot_aggregate_rule_change_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.target_pivot_aggregate_rule_change_uid)
  return _internal_target_pivot_aggregate_rule_change_uid();
}
inline void CommandPivotSortArchive::unsafe_arena_set_allocated_target_pivot_aggregate_rule_change_uid(
    ::TSP::UUID* target_pivot_aggregate_rule_change_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pivot_aggregate_rule_change_uid_);
  }
  _impl_.target_pivot_aggregate_rule_change_uid_ = target_pivot_aggregate_rule_change_uid;
  if (target_pivot_aggregate_rule_change_uid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSortArchive.target_pivot_aggregate_rule_change_uid)
}
inline ::TSP::UUID* CommandPivotSortArchive::release_target_pivot_aggregate_rule_change_uid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.target_pivot_aggregate_rule_change_uid_;
  _impl_.target_pivot_aggregate_rule_change_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::unsafe_arena_release_target_pivot_aggregate_rule_change_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSortArchive.target_pivot_aggregate_rule_change_uid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.target_pivot_aggregate_rule_change_uid_;
  _impl_.target_pivot_aggregate_rule_change_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_mutable_target_pivot_aggregate_rule_change_uid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.target_pivot_aggregate_rule_change_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.target_pivot_aggregate_rule_change_uid_ = p;
  }
  return _impl_.target_pivot_aggregate_rule_change_uid_;
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_target_pivot_aggregate_rule_change_uid() {
  ::TSP::UUID* _msg = _internal_mutable_target_pivot_aggregate_rule_change_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.target_pivot_aggregate_rule_change_uid)
  return _msg;
}
inline void CommandPivotSortArchive::set_allocated_target_pivot_aggregate_rule_change_uid(::TSP::UUID* target_pivot_aggregate_rule_change_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pivot_aggregate_rule_change_uid_);
  }
  if (target_pivot_aggregate_rule_change_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_pivot_aggregate_rule_change_uid));
    if (message_arena != submessage_arena) {
      target_pivot_aggregate_rule_change_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_pivot_aggregate_rule_change_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.target_pivot_aggregate_rule_change_uid_ = target_pivot_aggregate_rule_change_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSortArchive.target_pivot_aggregate_rule_change_uid)
}

// required .TSP.UUID target_pivot_data_refresh_uid = 9;
inline bool CommandPivotSortArchive::_internal_has_target_pivot_data_refresh_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_pivot_data_refresh_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSortArchive::has_target_pivot_data_refresh_uid() const {
  return _internal_has_target_pivot_data_refresh_uid();
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_target_pivot_data_refresh_uid() const {
  const ::TSP::UUID* p = _impl_.target_pivot_data_refresh_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSortArchive::target_pivot_data_refresh_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.target_pivot_data_refresh_uid)
  return _internal_target_pivot_data_refresh_uid();
}
inline void CommandPivotSortArchive::unsafe_arena_set_allocated_target_pivot_data_refresh_uid(
    ::TSP::UUID* target_pivot_data_refresh_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pivot_data_refresh_uid_);
  }
  _impl_.target_pivot_data_refresh_uid_ = target_pivot_data_refresh_uid;
  if (target_pivot_data_refresh_uid) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSortArchive.target_pivot_data_refresh_uid)
}
inline ::TSP::UUID* CommandPivotSortArchive::release_target_pivot_data_refresh_uid() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = _impl_.target_pivot_data_refresh_uid_;
  _impl_.target_pivot_data_refresh_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::unsafe_arena_release_target_pivot_data_refresh_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSortArchive.target_pivot_data_refresh_uid)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = _impl_.target_pivot_data_refresh_uid_;
  _impl_.target_pivot_data_refresh_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_mutable_target_pivot_data_refresh_uid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.target_pivot_data_refresh_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.target_pivot_data_refresh_uid_ = p;
  }
  return _impl_.target_pivot_data_refresh_uid_;
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_target_pivot_data_refresh_uid() {
  ::TSP::UUID* _msg = _internal_mutable_target_pivot_data_refresh_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.target_pivot_data_refresh_uid)
  return _msg;
}
inline void CommandPivotSortArchive::set_allocated_target_pivot_data_refresh_uid(::TSP::UUID* target_pivot_data_refresh_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pivot_data_refresh_uid_);
  }
  if (target_pivot_data_refresh_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_pivot_data_refresh_uid));
    if (message_arena != submessage_arena) {
      target_pivot_data_refresh_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_pivot_data_refresh_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.target_pivot_data_refresh_uid_ = target_pivot_data_refresh_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSortArchive.target_pivot_data_refresh_uid)
}

// optional .TSP.UUID grouping_column_uid = 10;
inline bool CommandPivotSortArchive::_internal_has_grouping_column_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grouping_column_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSortArchive::has_grouping_column_uid() const {
  return _internal_has_grouping_column_uid();
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_grouping_column_uid() const {
  const ::TSP::UUID* p = _impl_.grouping_column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSortArchive::grouping_column_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.grouping_column_uid)
  return _internal_grouping_column_uid();
}
inline void CommandPivotSortArchive::unsafe_arena_set_allocated_grouping_column_uid(
    ::TSP::UUID* grouping_column_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_column_uid_);
  }
  _impl_.grouping_column_uid_ = grouping_column_uid;
  if (grouping_column_uid) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSortArchive.grouping_column_uid)
}
inline ::TSP::UUID* CommandPivotSortArchive::release_grouping_column_uid() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = _impl_.grouping_column_uid_;
  _impl_.grouping_column_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::unsafe_arena_release_grouping_column_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSortArchive.grouping_column_uid)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = _impl_.grouping_column_uid_;
  _impl_.grouping_column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_mutable_grouping_column_uid() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.grouping_column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.grouping_column_uid_ = p;
  }
  return _impl_.grouping_column_uid_;
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_grouping_column_uid() {
  ::TSP::UUID* _msg = _internal_mutable_grouping_column_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.grouping_column_uid)
  return _msg;
}
inline void CommandPivotSortArchive::set_allocated_grouping_column_uid(::TSP::UUID* grouping_column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grouping_column_uid_);
  }
  if (grouping_column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_uid));
    if (message_arena != submessage_arena) {
      grouping_column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_column_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.grouping_column_uid_ = grouping_column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSortArchive.grouping_column_uid)
}

// optional uint32 sorting_flags = 11;
inline bool CommandPivotSortArchive::_internal_has_sorting_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandPivotSortArchive::has_sorting_flags() const {
  return _internal_has_sorting_flags();
}
inline void CommandPivotSortArchive::clear_sorting_flags() {
  _impl_.sorting_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CommandPivotSortArchive::_internal_sorting_flags() const {
  return _impl_.sorting_flags_;
}
inline uint32_t CommandPivotSortArchive::sorting_flags() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.sorting_flags)
  return _internal_sorting_flags();
}
inline void CommandPivotSortArchive::_internal_set_sorting_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.sorting_flags_ = value;
}
inline void CommandPivotSortArchive::set_sorting_flags(uint32_t value) {
  _internal_set_sorting_flags(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSortArchive.sorting_flags)
}

// optional uint32 undo_sorting_flags = 12;
inline bool CommandPivotSortArchive::_internal_has_undo_sorting_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandPivotSortArchive::has_undo_sorting_flags() const {
  return _internal_has_undo_sorting_flags();
}
inline void CommandPivotSortArchive::clear_undo_sorting_flags() {
  _impl_.undo_sorting_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CommandPivotSortArchive::_internal_undo_sorting_flags() const {
  return _impl_.undo_sorting_flags_;
}
inline uint32_t CommandPivotSortArchive::undo_sorting_flags() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.undo_sorting_flags)
  return _internal_undo_sorting_flags();
}
inline void CommandPivotSortArchive::_internal_set_undo_sorting_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.undo_sorting_flags_ = value;
}
inline void CommandPivotSortArchive::set_undo_sorting_flags(uint32_t value) {
  _internal_set_undo_sorting_flags(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSortArchive.undo_sorting_flags)
}

// optional .TSP.UUID sorting_aggregate_rule_uid = 13;
inline bool CommandPivotSortArchive::_internal_has_sorting_aggregate_rule_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sorting_aggregate_rule_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSortArchive::has_sorting_aggregate_rule_uid() const {
  return _internal_has_sorting_aggregate_rule_uid();
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_sorting_aggregate_rule_uid() const {
  const ::TSP::UUID* p = _impl_.sorting_aggregate_rule_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSortArchive::sorting_aggregate_rule_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.sorting_aggregate_rule_uid)
  return _internal_sorting_aggregate_rule_uid();
}
inline void CommandPivotSortArchive::unsafe_arena_set_allocated_sorting_aggregate_rule_uid(
    ::TSP::UUID* sorting_aggregate_rule_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorting_aggregate_rule_uid_);
  }
  _impl_.sorting_aggregate_rule_uid_ = sorting_aggregate_rule_uid;
  if (sorting_aggregate_rule_uid) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSortArchive.sorting_aggregate_rule_uid)
}
inline ::TSP::UUID* CommandPivotSortArchive::release_sorting_aggregate_rule_uid() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = _impl_.sorting_aggregate_rule_uid_;
  _impl_.sorting_aggregate_rule_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::unsafe_arena_release_sorting_aggregate_rule_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSortArchive.sorting_aggregate_rule_uid)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = _impl_.sorting_aggregate_rule_uid_;
  _impl_.sorting_aggregate_rule_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_mutable_sorting_aggregate_rule_uid() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.sorting_aggregate_rule_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.sorting_aggregate_rule_uid_ = p;
  }
  return _impl_.sorting_aggregate_rule_uid_;
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_sorting_aggregate_rule_uid() {
  ::TSP::UUID* _msg = _internal_mutable_sorting_aggregate_rule_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.sorting_aggregate_rule_uid)
  return _msg;
}
inline void CommandPivotSortArchive::set_allocated_sorting_aggregate_rule_uid(::TSP::UUID* sorting_aggregate_rule_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorting_aggregate_rule_uid_);
  }
  if (sorting_aggregate_rule_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sorting_aggregate_rule_uid));
    if (message_arena != submessage_arena) {
      sorting_aggregate_rule_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sorting_aggregate_rule_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.sorting_aggregate_rule_uid_ = sorting_aggregate_rule_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSortArchive.sorting_aggregate_rule_uid)
}

// optional .TSP.UUID undo_sorting_aggregate_rule_uid = 14;
inline bool CommandPivotSortArchive::_internal_has_undo_sorting_aggregate_rule_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_sorting_aggregate_rule_uid_ != nullptr);
  return value;
}
inline bool CommandPivotSortArchive::has_undo_sorting_aggregate_rule_uid() const {
  return _internal_has_undo_sorting_aggregate_rule_uid();
}
inline const ::TSP::UUID& CommandPivotSortArchive::_internal_undo_sorting_aggregate_rule_uid() const {
  const ::TSP::UUID* p = _impl_.undo_sorting_aggregate_rule_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandPivotSortArchive::undo_sorting_aggregate_rule_uid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.undo_sorting_aggregate_rule_uid)
  return _internal_undo_sorting_aggregate_rule_uid();
}
inline void CommandPivotSortArchive::unsafe_arena_set_allocated_undo_sorting_aggregate_rule_uid(
    ::TSP::UUID* undo_sorting_aggregate_rule_uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_sorting_aggregate_rule_uid_);
  }
  _impl_.undo_sorting_aggregate_rule_uid_ = undo_sorting_aggregate_rule_uid;
  if (undo_sorting_aggregate_rule_uid) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPivotSortArchive.undo_sorting_aggregate_rule_uid)
}
inline ::TSP::UUID* CommandPivotSortArchive::release_undo_sorting_aggregate_rule_uid() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = _impl_.undo_sorting_aggregate_rule_uid_;
  _impl_.undo_sorting_aggregate_rule_uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::unsafe_arena_release_undo_sorting_aggregate_rule_uid() {
  // @@protoc_insertion_point(field_release:TST.CommandPivotSortArchive.undo_sorting_aggregate_rule_uid)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = _impl_.undo_sorting_aggregate_rule_uid_;
  _impl_.undo_sorting_aggregate_rule_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandPivotSortArchive::_internal_mutable_undo_sorting_aggregate_rule_uid() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.undo_sorting_aggregate_rule_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.undo_sorting_aggregate_rule_uid_ = p;
  }
  return _impl_.undo_sorting_aggregate_rule_uid_;
}
inline ::TSP::UUID* CommandPivotSortArchive::mutable_undo_sorting_aggregate_rule_uid() {
  ::TSP::UUID* _msg = _internal_mutable_undo_sorting_aggregate_rule_uid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPivotSortArchive.undo_sorting_aggregate_rule_uid)
  return _msg;
}
inline void CommandPivotSortArchive::set_allocated_undo_sorting_aggregate_rule_uid(::TSP::UUID* undo_sorting_aggregate_rule_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_sorting_aggregate_rule_uid_);
  }
  if (undo_sorting_aggregate_rule_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_sorting_aggregate_rule_uid));
    if (message_arena != submessage_arena) {
      undo_sorting_aggregate_rule_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_sorting_aggregate_rule_uid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.undo_sorting_aggregate_rule_uid_ = undo_sorting_aggregate_rule_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPivotSortArchive.undo_sorting_aggregate_rule_uid)
}

// required bool is_order_finalized = 15;
inline bool CommandPivotSortArchive::_internal_has_is_order_finalized() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CommandPivotSortArchive::has_is_order_finalized() const {
  return _internal_has_is_order_finalized();
}
inline void CommandPivotSortArchive::clear_is_order_finalized() {
  _impl_.is_order_finalized_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CommandPivotSortArchive::_internal_is_order_finalized() const {
  return _impl_.is_order_finalized_;
}
inline bool CommandPivotSortArchive::is_order_finalized() const {
  // @@protoc_insertion_point(field_get:TST.CommandPivotSortArchive.is_order_finalized)
  return _internal_is_order_finalized();
}
inline void CommandPivotSortArchive::_internal_set_is_order_finalized(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_order_finalized_ = value;
}
inline void CommandPivotSortArchive::set_is_order_finalized(bool value) {
  _internal_set_is_order_finalized(value);
  // @@protoc_insertion_point(field_set:TST.CommandPivotSortArchive.is_order_finalized)
}

// -------------------------------------------------------------------

// CommandRewriteTrackedReferencesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandRewriteTrackedReferencesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteTrackedReferencesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandRewriteTrackedReferencesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandRewriteTrackedReferencesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteTrackedReferencesArchive.super)
  return _internal_super();
}
inline void CommandRewriteTrackedReferencesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteTrackedReferencesArchive.super)
}
inline ::TSK::CommandArchive* CommandRewriteTrackedReferencesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandRewriteTrackedReferencesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteTrackedReferencesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandRewriteTrackedReferencesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandRewriteTrackedReferencesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteTrackedReferencesArchive.super)
  return _msg;
}
inline void CommandRewriteTrackedReferencesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteTrackedReferencesArchive.super)
}

// optional .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandRewriteTrackedReferencesArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandRewriteTrackedReferencesArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandRewriteTrackedReferencesArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteTrackedReferencesArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandRewriteTrackedReferencesArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteTrackedReferencesArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandRewriteTrackedReferencesArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteTrackedReferencesArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTrackedReferencesArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTrackedReferencesArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteTrackedReferencesArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTrackedReferencesArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandRewriteTrackedReferencesArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteTrackedReferencesArchive.rewrite_spec)
  return _msg;
}
inline void CommandRewriteTrackedReferencesArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteTrackedReferencesArchive.rewrite_spec)
}

// -------------------------------------------------------------------

// CommandExtendTableIDHistoryArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandExtendTableIDHistoryArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandExtendTableIDHistoryArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandExtendTableIDHistoryArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandExtendTableIDHistoryArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandExtendTableIDHistoryArchive.super)
  return _internal_super();
}
inline void CommandExtendTableIDHistoryArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandExtendTableIDHistoryArchive.super)
}
inline ::TSK::CommandArchive* CommandExtendTableIDHistoryArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandExtendTableIDHistoryArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandExtendTableIDHistoryArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandExtendTableIDHistoryArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandExtendTableIDHistoryArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandExtendTableIDHistoryArchive.super)
  return _msg;
}
inline void CommandExtendTableIDHistoryArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandExtendTableIDHistoryArchive.super)
}

// required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool CommandExtendTableIDHistoryArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool CommandExtendTableIDHistoryArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void CommandExtendTableIDHistoryArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaRewriteSpecArchive& CommandExtendTableIDHistoryArchive::_internal_rewrite_spec() const {
  const ::TST::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaRewriteSpecArchive&>(
      ::TST::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TST::FormulaRewriteSpecArchive& CommandExtendTableIDHistoryArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TST.CommandExtendTableIDHistoryArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void CommandExtendTableIDHistoryArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandExtendTableIDHistoryArchive.rewrite_spec)
}
inline ::TST::FormulaRewriteSpecArchive* CommandExtendTableIDHistoryArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandExtendTableIDHistoryArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TST.CommandExtendTableIDHistoryArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TST::FormulaRewriteSpecArchive* CommandExtendTableIDHistoryArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TST::FormulaRewriteSpecArchive* CommandExtendTableIDHistoryArchive::mutable_rewrite_spec() {
  ::TST::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TST.CommandExtendTableIDHistoryArchive.rewrite_spec)
  return _msg;
}
inline void CommandExtendTableIDHistoryArchive::set_allocated_rewrite_spec(::TST::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandExtendTableIDHistoryArchive.rewrite_spec)
}

// optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
inline bool CommandExtendTableIDHistoryArchive::_internal_has_table_uid_history_rollback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_uid_history_rollback_ != nullptr);
  return value;
}
inline bool CommandExtendTableIDHistoryArchive::has_table_uid_history_rollback() const {
  return _internal_has_table_uid_history_rollback();
}
inline const ::TSCE::RewriteTableUIDInfoArchive& CommandExtendTableIDHistoryArchive::_internal_table_uid_history_rollback() const {
  const ::TSCE::RewriteTableUIDInfoArchive* p = _impl_.table_uid_history_rollback_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteTableUIDInfoArchive&>(
      ::TSCE::_RewriteTableUIDInfoArchive_default_instance_);
}
inline const ::TSCE::RewriteTableUIDInfoArchive& CommandExtendTableIDHistoryArchive::table_uid_history_rollback() const {
  // @@protoc_insertion_point(field_get:TST.CommandExtendTableIDHistoryArchive.table_uid_history_rollback)
  return _internal_table_uid_history_rollback();
}
inline void CommandExtendTableIDHistoryArchive::unsafe_arena_set_allocated_table_uid_history_rollback(
    ::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_uid_history_rollback_);
  }
  _impl_.table_uid_history_rollback_ = table_uid_history_rollback;
  if (table_uid_history_rollback) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandExtendTableIDHistoryArchive.table_uid_history_rollback)
}
inline ::TSCE::RewriteTableUIDInfoArchive* CommandExtendTableIDHistoryArchive::release_table_uid_history_rollback() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = _impl_.table_uid_history_rollback_;
  _impl_.table_uid_history_rollback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* CommandExtendTableIDHistoryArchive::unsafe_arena_release_table_uid_history_rollback() {
  // @@protoc_insertion_point(field_release:TST.CommandExtendTableIDHistoryArchive.table_uid_history_rollback)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = _impl_.table_uid_history_rollback_;
  _impl_.table_uid_history_rollback_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* CommandExtendTableIDHistoryArchive::_internal_mutable_table_uid_history_rollback() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.table_uid_history_rollback_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteTableUIDInfoArchive>(GetArenaForAllocation());
    _impl_.table_uid_history_rollback_ = p;
  }
  return _impl_.table_uid_history_rollback_;
}
inline ::TSCE::RewriteTableUIDInfoArchive* CommandExtendTableIDHistoryArchive::mutable_table_uid_history_rollback() {
  ::TSCE::RewriteTableUIDInfoArchive* _msg = _internal_mutable_table_uid_history_rollback();
  // @@protoc_insertion_point(field_mutable:TST.CommandExtendTableIDHistoryArchive.table_uid_history_rollback)
  return _msg;
}
inline void CommandExtendTableIDHistoryArchive::set_allocated_table_uid_history_rollback(::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_uid_history_rollback_);
  }
  if (table_uid_history_rollback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_history_rollback));
    if (message_arena != submessage_arena) {
      table_uid_history_rollback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid_history_rollback, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.table_uid_history_rollback_ = table_uid_history_rollback;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandExtendTableIDHistoryArchive.table_uid_history_rollback)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TST::TableArea> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableArea>() {
  return ::TST::TableArea_descriptor();
}
template <> struct is_proto_enum< ::TST::TableAreaTransition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableAreaTransition>() {
  return ::TST::TableAreaTransition_descriptor();
}
template <> struct is_proto_enum< ::TST::ColumnRowBundleItemTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::ColumnRowBundleItemTypeEnum>() {
  return ::TST::ColumnRowBundleItemTypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSTCommandArchives_2eproto
