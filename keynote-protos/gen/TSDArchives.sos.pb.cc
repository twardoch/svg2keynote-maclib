// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDArchives.sos.proto

#include "TSDArchives.sos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSDSOS {
PROTOBUF_CONSTEXPR SpecSetFillArchive::SpecSetFillArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fill_)*/nullptr
  , /*decltype(_impl_.unset_)*/false} {}
struct SpecSetFillArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecSetFillArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecSetFillArchiveDefaultTypeInternal() {}
  union {
    SpecSetFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecSetFillArchiveDefaultTypeInternal _SpecSetFillArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecSetLineEndArchive::SpecSetLineEndArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.line_end_)*/nullptr
  , /*decltype(_impl_.unset_)*/false} {}
struct SpecSetLineEndArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecSetLineEndArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecSetLineEndArchiveDefaultTypeInternal() {}
  union {
    SpecSetLineEndArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecSetLineEndArchiveDefaultTypeInternal _SpecSetLineEndArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecSetReflectionArchive::SpecSetReflectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reflection_)*/nullptr
  , /*decltype(_impl_.unset_)*/false} {}
struct SpecSetReflectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecSetReflectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecSetReflectionArchiveDefaultTypeInternal() {}
  union {
    SpecSetReflectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecSetReflectionArchiveDefaultTypeInternal _SpecSetReflectionArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecSetShadowArchive::SpecSetShadowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shadow_)*/nullptr
  , /*decltype(_impl_.unset_)*/false} {}
struct SpecSetShadowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecSetShadowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecSetShadowArchiveDefaultTypeInternal() {}
  union {
    SpecSetShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecSetShadowArchiveDefaultTypeInternal _SpecSetShadowArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecSetStrokeArchive::SpecSetStrokeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stroke_)*/nullptr
  , /*decltype(_impl_.unset_)*/false} {}
struct SpecSetStrokeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecSetStrokeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecSetStrokeArchiveDefaultTypeInternal() {}
  union {
    SpecSetStrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecSetStrokeArchiveDefaultTypeInternal _SpecSetStrokeArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecFillArchive::SpecFillArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spec_color_fill_set_color_)*/nullptr
  , /*decltype(_impl_.spec_gradient_fill_set_angle_)*/nullptr
  , /*decltype(_impl_.spec_image_fill_set_technique_)*/nullptr
  , /*decltype(_impl_.spec_set_fill_)*/nullptr} {}
struct SpecFillArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecFillArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecFillArchiveDefaultTypeInternal() {}
  union {
    SpecFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecFillArchiveDefaultTypeInternal _SpecFillArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecLineEndArchive::SpecLineEndArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spec_set_line_end_)*/nullptr} {}
struct SpecLineEndArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecLineEndArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecLineEndArchiveDefaultTypeInternal() {}
  union {
    SpecLineEndArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecLineEndArchiveDefaultTypeInternal _SpecLineEndArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecReflectionArchive::SpecReflectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spec_reflection_set_opacity_)*/nullptr
  , /*decltype(_impl_.spec_set_reflection_)*/nullptr} {}
struct SpecReflectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecReflectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecReflectionArchiveDefaultTypeInternal() {}
  union {
    SpecReflectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecReflectionArchiveDefaultTypeInternal _SpecReflectionArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecShadowArchive::SpecShadowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spec_set_shadow_)*/nullptr
  , /*decltype(_impl_.spec_shadow_set_angle_)*/nullptr
  , /*decltype(_impl_.spec_shadow_set_color_)*/nullptr
  , /*decltype(_impl_.spec_shadow_set_offset_)*/nullptr
  , /*decltype(_impl_.spec_shadow_set_opacity_)*/nullptr
  , /*decltype(_impl_.spec_shadow_set_radius_)*/nullptr} {}
struct SpecShadowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecShadowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecShadowArchiveDefaultTypeInternal() {}
  union {
    SpecShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecShadowArchiveDefaultTypeInternal _SpecShadowArchive_default_instance_;
PROTOBUF_CONSTEXPR SpecStrokeArchive::SpecStrokeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spec_frame_set_asset_scale_)*/nullptr
  , /*decltype(_impl_.spec_set_stroke_)*/nullptr
  , /*decltype(_impl_.spec_stroke_set_color_)*/nullptr
  , /*decltype(_impl_.spec_stroke_set_pattern_)*/nullptr
  , /*decltype(_impl_.spec_stroke_set_width_)*/nullptr} {}
struct SpecStrokeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecStrokeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecStrokeArchiveDefaultTypeInternal() {}
  union {
    SpecStrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecStrokeArchiveDefaultTypeInternal _SpecStrokeArchive_default_instance_;
PROTOBUF_CONSTEXPR BaseShapeStylePropertyChangeSetArchive::BaseShapeStylePropertyChangeSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fill_)*/nullptr
  , /*decltype(_impl_.stroke_)*/nullptr
  , /*decltype(_impl_.opacity_)*/nullptr
  , /*decltype(_impl_.shadow_)*/nullptr
  , /*decltype(_impl_.reflection_)*/nullptr
  , /*decltype(_impl_.head_line_end_)*/nullptr
  , /*decltype(_impl_.tail_line_end_)*/nullptr
  , /*decltype(_impl_.fill_undefined_)*/false
  , /*decltype(_impl_.stroke_undefined_)*/false
  , /*decltype(_impl_.opacity_undefined_)*/false
  , /*decltype(_impl_.shadow_undefined_)*/false
  , /*decltype(_impl_.reflection_undefined_)*/false
  , /*decltype(_impl_.head_line_end_undefined_)*/false
  , /*decltype(_impl_.tail_line_end_undefined_)*/false} {}
struct BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal() {}
  union {
    BaseShapeStylePropertyChangeSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal _BaseShapeStylePropertyChangeSetArchive_default_instance_;
PROTOBUF_CONSTEXPR MediaStylePropertyChangeSetArchive::MediaStylePropertyChangeSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stroke_)*/nullptr
  , /*decltype(_impl_.opacity_)*/nullptr
  , /*decltype(_impl_.shadow_)*/nullptr
  , /*decltype(_impl_.reflection_)*/nullptr
  , /*decltype(_impl_.stroke_undefined_)*/false
  , /*decltype(_impl_.opacity_undefined_)*/false
  , /*decltype(_impl_.shadow_undefined_)*/false
  , /*decltype(_impl_.reflection_undefined_)*/false} {}
struct MediaStylePropertyChangeSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaStylePropertyChangeSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaStylePropertyChangeSetArchiveDefaultTypeInternal() {}
  union {
    MediaStylePropertyChangeSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaStylePropertyChangeSetArchiveDefaultTypeInternal _MediaStylePropertyChangeSetArchive_default_instance_;
}  // namespace TSDSOS
static ::_pb::Metadata file_level_metadata_TSDArchives_2esos_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSDArchives_2esos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSDArchives_2esos_2eproto = nullptr;

const uint32_t TableStruct_TSDArchives_2esos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, _impl_.fill_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, _impl_.unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, _impl_.line_end_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, _impl_.unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, _impl_.reflection_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, _impl_.unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, _impl_.shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, _impl_.unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, _impl_.stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, _impl_.unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _impl_.spec_color_fill_set_color_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _impl_.spec_gradient_fill_set_angle_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _impl_.spec_image_fill_set_technique_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _impl_.spec_set_fill_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecLineEndArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecLineEndArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecLineEndArchive, _impl_.spec_set_line_end_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, _impl_.spec_reflection_set_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, _impl_.spec_set_reflection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _impl_.spec_set_shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _impl_.spec_shadow_set_angle_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _impl_.spec_shadow_set_color_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _impl_.spec_shadow_set_offset_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _impl_.spec_shadow_set_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _impl_.spec_shadow_set_radius_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _impl_.spec_frame_set_asset_scale_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _impl_.spec_set_stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _impl_.spec_stroke_set_color_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _impl_.spec_stroke_set_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _impl_.spec_stroke_set_width_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.fill_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.fill_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.stroke_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.opacity_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.shadow_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.reflection_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.reflection_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.head_line_end_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.head_line_end_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.tail_line_end_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _impl_.tail_line_end_undefined_),
  0,
  7,
  1,
  8,
  2,
  9,
  3,
  10,
  4,
  11,
  5,
  12,
  6,
  13,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.stroke_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.opacity_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.shadow_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.reflection_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _impl_.reflection_undefined_),
  0,
  4,
  1,
  5,
  2,
  6,
  3,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::TSDSOS::SpecSetFillArchive)},
  { 10, 18, -1, sizeof(::TSDSOS::SpecSetLineEndArchive)},
  { 20, 28, -1, sizeof(::TSDSOS::SpecSetReflectionArchive)},
  { 30, 38, -1, sizeof(::TSDSOS::SpecSetShadowArchive)},
  { 40, 48, -1, sizeof(::TSDSOS::SpecSetStrokeArchive)},
  { 50, 60, -1, sizeof(::TSDSOS::SpecFillArchive)},
  { 64, 71, -1, sizeof(::TSDSOS::SpecLineEndArchive)},
  { 72, 80, -1, sizeof(::TSDSOS::SpecReflectionArchive)},
  { 82, 94, -1, sizeof(::TSDSOS::SpecShadowArchive)},
  { 100, 111, -1, sizeof(::TSDSOS::SpecStrokeArchive)},
  { 116, 136, -1, sizeof(::TSDSOS::BaseShapeStylePropertyChangeSetArchive)},
  { 150, 164, -1, sizeof(::TSDSOS::MediaStylePropertyChangeSetArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSDSOS::_SpecSetFillArchive_default_instance_._instance,
  &::TSDSOS::_SpecSetLineEndArchive_default_instance_._instance,
  &::TSDSOS::_SpecSetReflectionArchive_default_instance_._instance,
  &::TSDSOS::_SpecSetShadowArchive_default_instance_._instance,
  &::TSDSOS::_SpecSetStrokeArchive_default_instance_._instance,
  &::TSDSOS::_SpecFillArchive_default_instance_._instance,
  &::TSDSOS::_SpecLineEndArchive_default_instance_._instance,
  &::TSDSOS::_SpecReflectionArchive_default_instance_._instance,
  &::TSDSOS::_SpecShadowArchive_default_instance_._instance,
  &::TSDSOS::_SpecStrokeArchive_default_instance_._instance,
  &::TSDSOS::_BaseShapeStylePropertyChangeSetArchive_default_instance_._instance,
  &::TSDSOS::_MediaStylePropertyChangeSetArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSDArchives_2esos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025TSDArchives.sos.proto\022\006TSDSOS\032\021TSDArch"
  "ives.proto\032\025TSSArchives.sos.proto\"C\n\022Spe"
  "cSetFillArchive\022\036\n\004fill\030\001 \001(\0132\020.TSD.Fill"
  "Archive\022\r\n\005unset\030\002 \002(\010\"M\n\025SpecSetLineEnd"
  "Archive\022%\n\010line_end\030\001 \001(\0132\023.TSD.LineEndA"
  "rchive\022\r\n\005unset\030\002 \002(\010\"U\n\030SpecSetReflecti"
  "onArchive\022*\n\nreflection\030\001 \001(\0132\026.TSD.Refl"
  "ectionArchive\022\r\n\005unset\030\002 \002(\010\"I\n\024SpecSetS"
  "hadowArchive\022\"\n\006shadow\030\001 \001(\0132\022.TSD.Shado"
  "wArchive\022\r\n\005unset\030\002 \002(\010\"I\n\024SpecSetStroke"
  "Archive\022\"\n\006stroke\030\001 \001(\0132\022.TSD.StrokeArch"
  "ive\022\r\n\005unset\030\002 \002(\010\"\244\002\n\017SpecFillArchive\022D"
  "\n\031spec_color_fill_set_color\030\001 \001(\0132!.TSD."
  "SpecColorFillSetColorArchive\022J\n\034spec_gra"
  "dient_fill_set_angle\030\002 \001(\0132$.TSD.SpecGra"
  "dientFillSetAngleArchive\022L\n\035spec_image_f"
  "ill_set_technique\030\003 \001(\0132%.TSD.SpecImageF"
  "illSetTechniqueArchive\0221\n\rspec_set_fill\030"
  "\004 \001(\0132\032.TSDSOS.SpecSetFillArchive\"N\n\022Spe"
  "cLineEndArchive\0228\n\021spec_set_line_end\030\001 \001"
  "(\0132\035.TSDSOS.SpecSetLineEndArchive\"\241\001\n\025Sp"
  "ecReflectionArchive\022I\n\033spec_reflection_s"
  "et_opacity\030\001 \001(\0132$.TSD.SpecReflectionSet"
  "OpacityArchive\022=\n\023spec_set_reflection\030\002 "
  "\001(\0132 .TSDSOS.SpecSetReflectionArchive\"\215\003"
  "\n\021SpecShadowArchive\0225\n\017spec_set_shadow\030\001"
  " \001(\0132\034.TSDSOS.SpecSetShadowArchive\022=\n\025sp"
  "ec_shadow_set_angle\030\002 \001(\0132\036.TSD.SpecShad"
  "owSetAngleArchive\022=\n\025spec_shadow_set_col"
  "or\030\003 \001(\0132\036.TSD.SpecShadowSetColorArchive"
  "\022\?\n\026spec_shadow_set_offset\030\004 \001(\0132\037.TSD.S"
  "pecShadowSetOffsetArchive\022A\n\027spec_shadow"
  "_set_opacity\030\005 \001(\0132 .TSD.SpecShadowSetOp"
  "acityArchive\022\?\n\026spec_shadow_set_radius\030\006"
  " \001(\0132\037.TSD.SpecShadowSetRadiusArchive\"\323\002"
  "\n\021SpecStrokeArchive\022F\n\032spec_frame_set_as"
  "set_scale\030\001 \001(\0132\".TSD.SpecFrameSetAssetS"
  "caleArchive\0225\n\017spec_set_stroke\030\002 \001(\0132\034.T"
  "SDSOS.SpecSetStrokeArchive\022=\n\025spec_strok"
  "e_set_color\030\003 \001(\0132\036.TSD.SpecStrokeSetCol"
  "orArchive\022A\n\027spec_stroke_set_pattern\030\004 \001"
  "(\0132 .TSD.SpecStrokeSetPatternArchive\022=\n\025"
  "spec_stroke_set_width\030\005 \001(\0132\036.TSD.SpecSt"
  "rokeSetWidthArchive\"\261\004\n&BaseShapeStylePr"
  "opertyChangeSetArchive\022%\n\004fill\030\001 \001(\0132\027.T"
  "SDSOS.SpecFillArchive\022\026\n\016fill_undefined\030"
  "\002 \001(\010\022)\n\006stroke\030\003 \001(\0132\031.TSDSOS.SpecStrok"
  "eArchive\022\030\n\020stroke_undefined\030\004 \001(\010\022*\n\007op"
  "acity\030\005 \001(\0132\031.TSSSOS.SpecDoubleArchive\022\031"
  "\n\021opacity_undefined\030\006 \001(\010\022)\n\006shadow\030\007 \001("
  "\0132\031.TSDSOS.SpecShadowArchive\022\030\n\020shadow_u"
  "ndefined\030\010 \001(\010\0221\n\nreflection\030\t \001(\0132\035.TSD"
  "SOS.SpecReflectionArchive\022\034\n\024reflection_"
  "undefined\030\n \001(\010\0221\n\rhead_line_end\030\013 \001(\0132\032"
  ".TSDSOS.SpecLineEndArchive\022\037\n\027head_line_"
  "end_undefined\030\014 \001(\010\0221\n\rtail_line_end\030\r \001"
  "(\0132\032.TSDSOS.SpecLineEndArchive\022\037\n\027tail_l"
  "ine_end_undefined\030\016 \001(\010\"\306\002\n\"MediaStylePr"
  "opertyChangeSetArchive\022)\n\006stroke\030\001 \001(\0132\031"
  ".TSDSOS.SpecStrokeArchive\022\030\n\020stroke_unde"
  "fined\030\002 \001(\010\022*\n\007opacity\030\003 \001(\0132\031.TSSSOS.Sp"
  "ecDoubleArchive\022\031\n\021opacity_undefined\030\004 \001"
  "(\010\022)\n\006shadow\030\005 \001(\0132\031.TSDSOS.SpecShadowAr"
  "chive\022\030\n\020shadow_undefined\030\006 \001(\010\0221\n\nrefle"
  "ction\030\007 \001(\0132\035.TSDSOS.SpecReflectionArchi"
  "ve\022\034\n\024reflection_undefined\030\010 \001(\010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSDArchives_2esos_2eproto_deps[2] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSSArchives_2esos_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSDArchives_2esos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSDArchives_2esos_2eproto = {
    false, false, 2632, descriptor_table_protodef_TSDArchives_2esos_2eproto,
    "TSDArchives.sos.proto",
    &descriptor_table_TSDArchives_2esos_2eproto_once, descriptor_table_TSDArchives_2esos_2eproto_deps, 2, 12,
    schemas, file_default_instances, TableStruct_TSDArchives_2esos_2eproto::offsets,
    file_level_metadata_TSDArchives_2esos_2eproto, file_level_enum_descriptors_TSDArchives_2esos_2eproto,
    file_level_service_descriptors_TSDArchives_2esos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSDArchives_2esos_2eproto_getter() {
  return &descriptor_table_TSDArchives_2esos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSDArchives_2esos_2eproto(&descriptor_table_TSDArchives_2esos_2eproto);
namespace TSDSOS {

// ===================================================================

class SpecSetFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetFillArchive>()._impl_._has_bits_);
  static const ::TSD::FillArchive& fill(const SpecSetFillArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::FillArchive&
SpecSetFillArchive::_Internal::fill(const SpecSetFillArchive* msg) {
  return *msg->_impl_.fill_;
}
void SpecSetFillArchive::clear_fill() {
  if (_impl_.fill_ != nullptr) _impl_.fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpecSetFillArchive::SpecSetFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetFillArchive)
}
SpecSetFillArchive::SpecSetFillArchive(const SpecSetFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecSetFillArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.unset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    _this->_impl_.fill_ = new ::TSD::FillArchive(*from._impl_.fill_);
  }
  _this->_impl_.unset_ = from._impl_.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetFillArchive)
}

inline void SpecSetFillArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.unset_){false}
  };
}

SpecSetFillArchive::~SpecSetFillArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetFillArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecSetFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fill_;
}

void SpecSetFillArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecSetFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetFillArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fill_ != nullptr);
    _impl_.fill_->Clear();
  }
  _impl_.unset_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetFillArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          _impl_.unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecSetFillArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetFillArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetFillArchive)
  return target;
}

size_t SpecSetFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetFillArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.FillArchive fill = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fill_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetFillArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecSetFillArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetFillArchive::GetClassData() const { return &_class_data_; }


void SpecSetFillArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecSetFillArchive*>(&to_msg);
  auto& from = static_cast<const SpecSetFillArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetFillArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unset_ = from._impl_.unset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetFillArchive::CopyFrom(const SpecSetFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetFillArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_fill()) {
    if (!_impl_.fill_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetFillArchive::InternalSwap(SpecSetFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetFillArchive, _impl_.unset_)
      + sizeof(SpecSetFillArchive::_impl_.unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetFillArchive, _impl_.fill_)>(
          reinterpret_cast<char*>(&_impl_.fill_),
          reinterpret_cast<char*>(&other->_impl_.fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetFillArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[0]);
}

// ===================================================================

class SpecSetLineEndArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetLineEndArchive>()._impl_._has_bits_);
  static const ::TSD::LineEndArchive& line_end(const SpecSetLineEndArchive* msg);
  static void set_has_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::LineEndArchive&
SpecSetLineEndArchive::_Internal::line_end(const SpecSetLineEndArchive* msg) {
  return *msg->_impl_.line_end_;
}
void SpecSetLineEndArchive::clear_line_end() {
  if (_impl_.line_end_ != nullptr) _impl_.line_end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpecSetLineEndArchive::SpecSetLineEndArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetLineEndArchive)
}
SpecSetLineEndArchive::SpecSetLineEndArchive(const SpecSetLineEndArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecSetLineEndArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_end_){nullptr}
    , decltype(_impl_.unset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_line_end()) {
    _this->_impl_.line_end_ = new ::TSD::LineEndArchive(*from._impl_.line_end_);
  }
  _this->_impl_.unset_ = from._impl_.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetLineEndArchive)
}

inline void SpecSetLineEndArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_end_){nullptr}
    , decltype(_impl_.unset_){false}
  };
}

SpecSetLineEndArchive::~SpecSetLineEndArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetLineEndArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecSetLineEndArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.line_end_;
}

void SpecSetLineEndArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecSetLineEndArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetLineEndArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.line_end_ != nullptr);
    _impl_.line_end_->Clear();
  }
  _impl_.unset_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetLineEndArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.LineEndArchive line_end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          _impl_.unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecSetLineEndArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetLineEndArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.LineEndArchive line_end = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::line_end(this),
        _Internal::line_end(this).GetCachedSize(), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetLineEndArchive)
  return target;
}

size_t SpecSetLineEndArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetLineEndArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.LineEndArchive line_end = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.line_end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetLineEndArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecSetLineEndArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetLineEndArchive::GetClassData() const { return &_class_data_; }


void SpecSetLineEndArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecSetLineEndArchive*>(&to_msg);
  auto& from = static_cast<const SpecSetLineEndArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetLineEndArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_line_end()->::TSD::LineEndArchive::MergeFrom(
          from._internal_line_end());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unset_ = from._impl_.unset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetLineEndArchive::CopyFrom(const SpecSetLineEndArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetLineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetLineEndArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_line_end()) {
    if (!_impl_.line_end_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetLineEndArchive::InternalSwap(SpecSetLineEndArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetLineEndArchive, _impl_.unset_)
      + sizeof(SpecSetLineEndArchive::_impl_.unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetLineEndArchive, _impl_.line_end_)>(
          reinterpret_cast<char*>(&_impl_.line_end_),
          reinterpret_cast<char*>(&other->_impl_.line_end_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetLineEndArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[1]);
}

// ===================================================================

class SpecSetReflectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetReflectionArchive>()._impl_._has_bits_);
  static const ::TSD::ReflectionArchive& reflection(const SpecSetReflectionArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::ReflectionArchive&
SpecSetReflectionArchive::_Internal::reflection(const SpecSetReflectionArchive* msg) {
  return *msg->_impl_.reflection_;
}
void SpecSetReflectionArchive::clear_reflection() {
  if (_impl_.reflection_ != nullptr) _impl_.reflection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpecSetReflectionArchive::SpecSetReflectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetReflectionArchive)
}
SpecSetReflectionArchive::SpecSetReflectionArchive(const SpecSetReflectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecSetReflectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reflection_){nullptr}
    , decltype(_impl_.unset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reflection()) {
    _this->_impl_.reflection_ = new ::TSD::ReflectionArchive(*from._impl_.reflection_);
  }
  _this->_impl_.unset_ = from._impl_.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetReflectionArchive)
}

inline void SpecSetReflectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reflection_){nullptr}
    , decltype(_impl_.unset_){false}
  };
}

SpecSetReflectionArchive::~SpecSetReflectionArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetReflectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecSetReflectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reflection_;
}

void SpecSetReflectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecSetReflectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetReflectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.reflection_ != nullptr);
    _impl_.reflection_->Clear();
  }
  _impl_.unset_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetReflectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.ReflectionArchive reflection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          _impl_.unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecSetReflectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetReflectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ReflectionArchive reflection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reflection(this),
        _Internal::reflection(this).GetCachedSize(), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetReflectionArchive)
  return target;
}

size_t SpecSetReflectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetReflectionArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.ReflectionArchive reflection = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reflection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetReflectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecSetReflectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetReflectionArchive::GetClassData() const { return &_class_data_; }


void SpecSetReflectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecSetReflectionArchive*>(&to_msg);
  auto& from = static_cast<const SpecSetReflectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetReflectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_reflection()->::TSD::ReflectionArchive::MergeFrom(
          from._internal_reflection());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unset_ = from._impl_.unset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetReflectionArchive::CopyFrom(const SpecSetReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetReflectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SpecSetReflectionArchive::InternalSwap(SpecSetReflectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetReflectionArchive, _impl_.unset_)
      + sizeof(SpecSetReflectionArchive::_impl_.unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetReflectionArchive, _impl_.reflection_)>(
          reinterpret_cast<char*>(&_impl_.reflection_),
          reinterpret_cast<char*>(&other->_impl_.reflection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetReflectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[2]);
}

// ===================================================================

class SpecSetShadowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetShadowArchive>()._impl_._has_bits_);
  static const ::TSD::ShadowArchive& shadow(const SpecSetShadowArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::ShadowArchive&
SpecSetShadowArchive::_Internal::shadow(const SpecSetShadowArchive* msg) {
  return *msg->_impl_.shadow_;
}
void SpecSetShadowArchive::clear_shadow() {
  if (_impl_.shadow_ != nullptr) _impl_.shadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpecSetShadowArchive::SpecSetShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetShadowArchive)
}
SpecSetShadowArchive::SpecSetShadowArchive(const SpecSetShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecSetShadowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.unset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shadow()) {
    _this->_impl_.shadow_ = new ::TSD::ShadowArchive(*from._impl_.shadow_);
  }
  _this->_impl_.unset_ = from._impl_.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetShadowArchive)
}

inline void SpecSetShadowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.unset_){false}
  };
}

SpecSetShadowArchive::~SpecSetShadowArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetShadowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecSetShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shadow_;
}

void SpecSetShadowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecSetShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetShadowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.shadow_ != nullptr);
    _impl_.shadow_->Clear();
  }
  _impl_.unset_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetShadowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.ShadowArchive shadow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          _impl_.unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecSetShadowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetShadowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ShadowArchive shadow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shadow(this),
        _Internal::shadow(this).GetCachedSize(), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetShadowArchive)
  return target;
}

size_t SpecSetShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetShadowArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.ShadowArchive shadow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shadow_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetShadowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecSetShadowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetShadowArchive::GetClassData() const { return &_class_data_; }


void SpecSetShadowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecSetShadowArchive*>(&to_msg);
  auto& from = static_cast<const SpecSetShadowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetShadowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_shadow());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unset_ = from._impl_.unset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetShadowArchive::CopyFrom(const SpecSetShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetShadowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_shadow()) {
    if (!_impl_.shadow_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetShadowArchive::InternalSwap(SpecSetShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetShadowArchive, _impl_.unset_)
      + sizeof(SpecSetShadowArchive::_impl_.unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetShadowArchive, _impl_.shadow_)>(
          reinterpret_cast<char*>(&_impl_.shadow_),
          reinterpret_cast<char*>(&other->_impl_.shadow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetShadowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[3]);
}

// ===================================================================

class SpecSetStrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetStrokeArchive>()._impl_._has_bits_);
  static const ::TSD::StrokeArchive& stroke(const SpecSetStrokeArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::StrokeArchive&
SpecSetStrokeArchive::_Internal::stroke(const SpecSetStrokeArchive* msg) {
  return *msg->_impl_.stroke_;
}
void SpecSetStrokeArchive::clear_stroke() {
  if (_impl_.stroke_ != nullptr) _impl_.stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpecSetStrokeArchive::SpecSetStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetStrokeArchive)
}
SpecSetStrokeArchive::SpecSetStrokeArchive(const SpecSetStrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecSetStrokeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.unset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    _this->_impl_.stroke_ = new ::TSD::StrokeArchive(*from._impl_.stroke_);
  }
  _this->_impl_.unset_ = from._impl_.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetStrokeArchive)
}

inline void SpecSetStrokeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.unset_){false}
  };
}

SpecSetStrokeArchive::~SpecSetStrokeArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetStrokeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecSetStrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stroke_;
}

void SpecSetStrokeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecSetStrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetStrokeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stroke_ != nullptr);
    _impl_.stroke_->Clear();
  }
  _impl_.unset_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetStrokeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          _impl_.unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecSetStrokeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetStrokeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stroke(this),
        _Internal::stroke(this).GetCachedSize(), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetStrokeArchive)
  return target;
}

size_t SpecSetStrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetStrokeArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.StrokeArchive stroke = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stroke_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetStrokeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecSetStrokeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetStrokeArchive::GetClassData() const { return &_class_data_; }


void SpecSetStrokeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecSetStrokeArchive*>(&to_msg);
  auto& from = static_cast<const SpecSetStrokeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetStrokeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unset_ = from._impl_.unset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetStrokeArchive::CopyFrom(const SpecSetStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetStrokeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stroke()) {
    if (!_impl_.stroke_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetStrokeArchive::InternalSwap(SpecSetStrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetStrokeArchive, _impl_.unset_)
      + sizeof(SpecSetStrokeArchive::_impl_.unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetStrokeArchive, _impl_.stroke_)>(
          reinterpret_cast<char*>(&_impl_.stroke_),
          reinterpret_cast<char*>(&other->_impl_.stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetStrokeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[4]);
}

// ===================================================================

class SpecFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecFillArchive>()._impl_._has_bits_);
  static const ::TSD::SpecColorFillSetColorArchive& spec_color_fill_set_color(const SpecFillArchive* msg);
  static void set_has_spec_color_fill_set_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::SpecGradientFillSetAngleArchive& spec_gradient_fill_set_angle(const SpecFillArchive* msg);
  static void set_has_spec_gradient_fill_set_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::SpecImageFillSetTechniqueArchive& spec_image_fill_set_technique(const SpecFillArchive* msg);
  static void set_has_spec_image_fill_set_technique(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSDSOS::SpecSetFillArchive& spec_set_fill(const SpecFillArchive* msg);
  static void set_has_spec_set_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::SpecColorFillSetColorArchive&
SpecFillArchive::_Internal::spec_color_fill_set_color(const SpecFillArchive* msg) {
  return *msg->_impl_.spec_color_fill_set_color_;
}
const ::TSD::SpecGradientFillSetAngleArchive&
SpecFillArchive::_Internal::spec_gradient_fill_set_angle(const SpecFillArchive* msg) {
  return *msg->_impl_.spec_gradient_fill_set_angle_;
}
const ::TSD::SpecImageFillSetTechniqueArchive&
SpecFillArchive::_Internal::spec_image_fill_set_technique(const SpecFillArchive* msg) {
  return *msg->_impl_.spec_image_fill_set_technique_;
}
const ::TSDSOS::SpecSetFillArchive&
SpecFillArchive::_Internal::spec_set_fill(const SpecFillArchive* msg) {
  return *msg->_impl_.spec_set_fill_;
}
void SpecFillArchive::clear_spec_color_fill_set_color() {
  if (_impl_.spec_color_fill_set_color_ != nullptr) _impl_.spec_color_fill_set_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SpecFillArchive::clear_spec_gradient_fill_set_angle() {
  if (_impl_.spec_gradient_fill_set_angle_ != nullptr) _impl_.spec_gradient_fill_set_angle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SpecFillArchive::clear_spec_image_fill_set_technique() {
  if (_impl_.spec_image_fill_set_technique_ != nullptr) _impl_.spec_image_fill_set_technique_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SpecFillArchive::SpecFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecFillArchive)
}
SpecFillArchive::SpecFillArchive(const SpecFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecFillArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_color_fill_set_color_){nullptr}
    , decltype(_impl_.spec_gradient_fill_set_angle_){nullptr}
    , decltype(_impl_.spec_image_fill_set_technique_){nullptr}
    , decltype(_impl_.spec_set_fill_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_color_fill_set_color()) {
    _this->_impl_.spec_color_fill_set_color_ = new ::TSD::SpecColorFillSetColorArchive(*from._impl_.spec_color_fill_set_color_);
  }
  if (from._internal_has_spec_gradient_fill_set_angle()) {
    _this->_impl_.spec_gradient_fill_set_angle_ = new ::TSD::SpecGradientFillSetAngleArchive(*from._impl_.spec_gradient_fill_set_angle_);
  }
  if (from._internal_has_spec_image_fill_set_technique()) {
    _this->_impl_.spec_image_fill_set_technique_ = new ::TSD::SpecImageFillSetTechniqueArchive(*from._impl_.spec_image_fill_set_technique_);
  }
  if (from._internal_has_spec_set_fill()) {
    _this->_impl_.spec_set_fill_ = new ::TSDSOS::SpecSetFillArchive(*from._impl_.spec_set_fill_);
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecFillArchive)
}

inline void SpecFillArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_color_fill_set_color_){nullptr}
    , decltype(_impl_.spec_gradient_fill_set_angle_){nullptr}
    , decltype(_impl_.spec_image_fill_set_technique_){nullptr}
    , decltype(_impl_.spec_set_fill_){nullptr}
  };
}

SpecFillArchive::~SpecFillArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecFillArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spec_color_fill_set_color_;
  if (this != internal_default_instance()) delete _impl_.spec_gradient_fill_set_angle_;
  if (this != internal_default_instance()) delete _impl_.spec_image_fill_set_technique_;
  if (this != internal_default_instance()) delete _impl_.spec_set_fill_;
}

void SpecFillArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecFillArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.spec_color_fill_set_color_ != nullptr);
      _impl_.spec_color_fill_set_color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spec_gradient_fill_set_angle_ != nullptr);
      _impl_.spec_gradient_fill_set_angle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.spec_image_fill_set_technique_ != nullptr);
      _impl_.spec_image_fill_set_technique_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.spec_set_fill_ != nullptr);
      _impl_.spec_set_fill_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecFillArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.SpecColorFillSetColorArchive spec_color_fill_set_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_color_fill_set_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecGradientFillSetAngleArchive spec_gradient_fill_set_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_gradient_fill_set_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecImageFillSetTechniqueArchive spec_image_fill_set_technique = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_image_fill_set_technique(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecSetFillArchive spec_set_fill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecFillArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecFillArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.SpecColorFillSetColorArchive spec_color_fill_set_color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spec_color_fill_set_color(this),
        _Internal::spec_color_fill_set_color(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecGradientFillSetAngleArchive spec_gradient_fill_set_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec_gradient_fill_set_angle(this),
        _Internal::spec_gradient_fill_set_angle(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecImageFillSetTechniqueArchive spec_image_fill_set_technique = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spec_image_fill_set_technique(this),
        _Internal::spec_image_fill_set_technique(this).GetCachedSize(), target, stream);
  }

  // optional .TSDSOS.SpecSetFillArchive spec_set_fill = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::spec_set_fill(this),
        _Internal::spec_set_fill(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecFillArchive)
  return target;
}

size_t SpecFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecFillArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.SpecColorFillSetColorArchive spec_color_fill_set_color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_color_fill_set_color_);
    }

    // optional .TSD.SpecGradientFillSetAngleArchive spec_gradient_fill_set_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_gradient_fill_set_angle_);
    }

    // optional .TSD.SpecImageFillSetTechniqueArchive spec_image_fill_set_technique = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_image_fill_set_technique_);
    }

    // optional .TSDSOS.SpecSetFillArchive spec_set_fill = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_set_fill_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecFillArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecFillArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecFillArchive::GetClassData() const { return &_class_data_; }


void SpecFillArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecFillArchive*>(&to_msg);
  auto& from = static_cast<const SpecFillArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecFillArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_spec_color_fill_set_color()->::TSD::SpecColorFillSetColorArchive::MergeFrom(
          from._internal_spec_color_fill_set_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spec_gradient_fill_set_angle()->::TSD::SpecGradientFillSetAngleArchive::MergeFrom(
          from._internal_spec_gradient_fill_set_angle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_spec_image_fill_set_technique()->::TSD::SpecImageFillSetTechniqueArchive::MergeFrom(
          from._internal_spec_image_fill_set_technique());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_spec_set_fill()->::TSDSOS::SpecSetFillArchive::MergeFrom(
          from._internal_spec_set_fill());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecFillArchive::CopyFrom(const SpecFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecFillArchive::IsInitialized() const {
  if (_internal_has_spec_color_fill_set_color()) {
    if (!_impl_.spec_color_fill_set_color_->IsInitialized()) return false;
  }
  if (_internal_has_spec_gradient_fill_set_angle()) {
    if (!_impl_.spec_gradient_fill_set_angle_->IsInitialized()) return false;
  }
  if (_internal_has_spec_image_fill_set_technique()) {
    if (!_impl_.spec_image_fill_set_technique_->IsInitialized()) return false;
  }
  if (_internal_has_spec_set_fill()) {
    if (!_impl_.spec_set_fill_->IsInitialized()) return false;
  }
  return true;
}

void SpecFillArchive::InternalSwap(SpecFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecFillArchive, _impl_.spec_set_fill_)
      + sizeof(SpecFillArchive::_impl_.spec_set_fill_)
      - PROTOBUF_FIELD_OFFSET(SpecFillArchive, _impl_.spec_color_fill_set_color_)>(
          reinterpret_cast<char*>(&_impl_.spec_color_fill_set_color_),
          reinterpret_cast<char*>(&other->_impl_.spec_color_fill_set_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecFillArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[5]);
}

// ===================================================================

class SpecLineEndArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecLineEndArchive>()._impl_._has_bits_);
  static const ::TSDSOS::SpecSetLineEndArchive& spec_set_line_end(const SpecLineEndArchive* msg);
  static void set_has_spec_set_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSDSOS::SpecSetLineEndArchive&
SpecLineEndArchive::_Internal::spec_set_line_end(const SpecLineEndArchive* msg) {
  return *msg->_impl_.spec_set_line_end_;
}
SpecLineEndArchive::SpecLineEndArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecLineEndArchive)
}
SpecLineEndArchive::SpecLineEndArchive(const SpecLineEndArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecLineEndArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_set_line_end_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_line_end()) {
    _this->_impl_.spec_set_line_end_ = new ::TSDSOS::SpecSetLineEndArchive(*from._impl_.spec_set_line_end_);
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecLineEndArchive)
}

inline void SpecLineEndArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_set_line_end_){nullptr}
  };
}

SpecLineEndArchive::~SpecLineEndArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecLineEndArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecLineEndArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spec_set_line_end_;
}

void SpecLineEndArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecLineEndArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecLineEndArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.spec_set_line_end_ != nullptr);
    _impl_.spec_set_line_end_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecLineEndArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecSetLineEndArchive spec_set_line_end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_line_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecLineEndArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecLineEndArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSDSOS.SpecSetLineEndArchive spec_set_line_end = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spec_set_line_end(this),
        _Internal::spec_set_line_end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecLineEndArchive)
  return target;
}

size_t SpecLineEndArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecLineEndArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSDSOS.SpecSetLineEndArchive spec_set_line_end = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_set_line_end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecLineEndArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecLineEndArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecLineEndArchive::GetClassData() const { return &_class_data_; }


void SpecLineEndArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecLineEndArchive*>(&to_msg);
  auto& from = static_cast<const SpecLineEndArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecLineEndArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_line_end()) {
    _this->_internal_mutable_spec_set_line_end()->::TSDSOS::SpecSetLineEndArchive::MergeFrom(
        from._internal_spec_set_line_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecLineEndArchive::CopyFrom(const SpecLineEndArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecLineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecLineEndArchive::IsInitialized() const {
  if (_internal_has_spec_set_line_end()) {
    if (!_impl_.spec_set_line_end_->IsInitialized()) return false;
  }
  return true;
}

void SpecLineEndArchive::InternalSwap(SpecLineEndArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.spec_set_line_end_, other->_impl_.spec_set_line_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecLineEndArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[6]);
}

// ===================================================================

class SpecReflectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecReflectionArchive>()._impl_._has_bits_);
  static const ::TSD::SpecReflectionSetOpacityArchive& spec_reflection_set_opacity(const SpecReflectionArchive* msg);
  static void set_has_spec_reflection_set_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::SpecSetReflectionArchive& spec_set_reflection(const SpecReflectionArchive* msg);
  static void set_has_spec_set_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSD::SpecReflectionSetOpacityArchive&
SpecReflectionArchive::_Internal::spec_reflection_set_opacity(const SpecReflectionArchive* msg) {
  return *msg->_impl_.spec_reflection_set_opacity_;
}
const ::TSDSOS::SpecSetReflectionArchive&
SpecReflectionArchive::_Internal::spec_set_reflection(const SpecReflectionArchive* msg) {
  return *msg->_impl_.spec_set_reflection_;
}
void SpecReflectionArchive::clear_spec_reflection_set_opacity() {
  if (_impl_.spec_reflection_set_opacity_ != nullptr) _impl_.spec_reflection_set_opacity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpecReflectionArchive::SpecReflectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecReflectionArchive)
}
SpecReflectionArchive::SpecReflectionArchive(const SpecReflectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecReflectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_reflection_set_opacity_){nullptr}
    , decltype(_impl_.spec_set_reflection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_reflection_set_opacity()) {
    _this->_impl_.spec_reflection_set_opacity_ = new ::TSD::SpecReflectionSetOpacityArchive(*from._impl_.spec_reflection_set_opacity_);
  }
  if (from._internal_has_spec_set_reflection()) {
    _this->_impl_.spec_set_reflection_ = new ::TSDSOS::SpecSetReflectionArchive(*from._impl_.spec_set_reflection_);
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecReflectionArchive)
}

inline void SpecReflectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_reflection_set_opacity_){nullptr}
    , decltype(_impl_.spec_set_reflection_){nullptr}
  };
}

SpecReflectionArchive::~SpecReflectionArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecReflectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecReflectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spec_reflection_set_opacity_;
  if (this != internal_default_instance()) delete _impl_.spec_set_reflection_;
}

void SpecReflectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecReflectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecReflectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.spec_reflection_set_opacity_ != nullptr);
      _impl_.spec_reflection_set_opacity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spec_set_reflection_ != nullptr);
      _impl_.spec_set_reflection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecReflectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.SpecReflectionSetOpacityArchive spec_reflection_set_opacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_reflection_set_opacity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecSetReflectionArchive spec_set_reflection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_reflection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecReflectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecReflectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.SpecReflectionSetOpacityArchive spec_reflection_set_opacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spec_reflection_set_opacity(this),
        _Internal::spec_reflection_set_opacity(this).GetCachedSize(), target, stream);
  }

  // optional .TSDSOS.SpecSetReflectionArchive spec_set_reflection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec_set_reflection(this),
        _Internal::spec_set_reflection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecReflectionArchive)
  return target;
}

size_t SpecReflectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecReflectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSD.SpecReflectionSetOpacityArchive spec_reflection_set_opacity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_reflection_set_opacity_);
    }

    // optional .TSDSOS.SpecSetReflectionArchive spec_set_reflection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_set_reflection_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecReflectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecReflectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecReflectionArchive::GetClassData() const { return &_class_data_; }


void SpecReflectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecReflectionArchive*>(&to_msg);
  auto& from = static_cast<const SpecReflectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecReflectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_spec_reflection_set_opacity()->::TSD::SpecReflectionSetOpacityArchive::MergeFrom(
          from._internal_spec_reflection_set_opacity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spec_set_reflection()->::TSDSOS::SpecSetReflectionArchive::MergeFrom(
          from._internal_spec_set_reflection());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecReflectionArchive::CopyFrom(const SpecReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecReflectionArchive::IsInitialized() const {
  if (_internal_has_spec_reflection_set_opacity()) {
    if (!_impl_.spec_reflection_set_opacity_->IsInitialized()) return false;
  }
  if (_internal_has_spec_set_reflection()) {
    if (!_impl_.spec_set_reflection_->IsInitialized()) return false;
  }
  return true;
}

void SpecReflectionArchive::InternalSwap(SpecReflectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecReflectionArchive, _impl_.spec_set_reflection_)
      + sizeof(SpecReflectionArchive::_impl_.spec_set_reflection_)
      - PROTOBUF_FIELD_OFFSET(SpecReflectionArchive, _impl_.spec_reflection_set_opacity_)>(
          reinterpret_cast<char*>(&_impl_.spec_reflection_set_opacity_),
          reinterpret_cast<char*>(&other->_impl_.spec_reflection_set_opacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecReflectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[7]);
}

// ===================================================================

class SpecShadowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecShadowArchive>()._impl_._has_bits_);
  static const ::TSDSOS::SpecSetShadowArchive& spec_set_shadow(const SpecShadowArchive* msg);
  static void set_has_spec_set_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::SpecShadowSetAngleArchive& spec_shadow_set_angle(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::SpecShadowSetColorArchive& spec_shadow_set_color(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::SpecShadowSetOffsetArchive& spec_shadow_set_offset(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::SpecShadowSetOpacityArchive& spec_shadow_set_opacity(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::SpecShadowSetRadiusArchive& spec_shadow_set_radius(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSDSOS::SpecSetShadowArchive&
SpecShadowArchive::_Internal::spec_set_shadow(const SpecShadowArchive* msg) {
  return *msg->_impl_.spec_set_shadow_;
}
const ::TSD::SpecShadowSetAngleArchive&
SpecShadowArchive::_Internal::spec_shadow_set_angle(const SpecShadowArchive* msg) {
  return *msg->_impl_.spec_shadow_set_angle_;
}
const ::TSD::SpecShadowSetColorArchive&
SpecShadowArchive::_Internal::spec_shadow_set_color(const SpecShadowArchive* msg) {
  return *msg->_impl_.spec_shadow_set_color_;
}
const ::TSD::SpecShadowSetOffsetArchive&
SpecShadowArchive::_Internal::spec_shadow_set_offset(const SpecShadowArchive* msg) {
  return *msg->_impl_.spec_shadow_set_offset_;
}
const ::TSD::SpecShadowSetOpacityArchive&
SpecShadowArchive::_Internal::spec_shadow_set_opacity(const SpecShadowArchive* msg) {
  return *msg->_impl_.spec_shadow_set_opacity_;
}
const ::TSD::SpecShadowSetRadiusArchive&
SpecShadowArchive::_Internal::spec_shadow_set_radius(const SpecShadowArchive* msg) {
  return *msg->_impl_.spec_shadow_set_radius_;
}
void SpecShadowArchive::clear_spec_shadow_set_angle() {
  if (_impl_.spec_shadow_set_angle_ != nullptr) _impl_.spec_shadow_set_angle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SpecShadowArchive::clear_spec_shadow_set_color() {
  if (_impl_.spec_shadow_set_color_ != nullptr) _impl_.spec_shadow_set_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SpecShadowArchive::clear_spec_shadow_set_offset() {
  if (_impl_.spec_shadow_set_offset_ != nullptr) _impl_.spec_shadow_set_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SpecShadowArchive::clear_spec_shadow_set_opacity() {
  if (_impl_.spec_shadow_set_opacity_ != nullptr) _impl_.spec_shadow_set_opacity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SpecShadowArchive::clear_spec_shadow_set_radius() {
  if (_impl_.spec_shadow_set_radius_ != nullptr) _impl_.spec_shadow_set_radius_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
SpecShadowArchive::SpecShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecShadowArchive)
}
SpecShadowArchive::SpecShadowArchive(const SpecShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecShadowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_set_shadow_){nullptr}
    , decltype(_impl_.spec_shadow_set_angle_){nullptr}
    , decltype(_impl_.spec_shadow_set_color_){nullptr}
    , decltype(_impl_.spec_shadow_set_offset_){nullptr}
    , decltype(_impl_.spec_shadow_set_opacity_){nullptr}
    , decltype(_impl_.spec_shadow_set_radius_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_shadow()) {
    _this->_impl_.spec_set_shadow_ = new ::TSDSOS::SpecSetShadowArchive(*from._impl_.spec_set_shadow_);
  }
  if (from._internal_has_spec_shadow_set_angle()) {
    _this->_impl_.spec_shadow_set_angle_ = new ::TSD::SpecShadowSetAngleArchive(*from._impl_.spec_shadow_set_angle_);
  }
  if (from._internal_has_spec_shadow_set_color()) {
    _this->_impl_.spec_shadow_set_color_ = new ::TSD::SpecShadowSetColorArchive(*from._impl_.spec_shadow_set_color_);
  }
  if (from._internal_has_spec_shadow_set_offset()) {
    _this->_impl_.spec_shadow_set_offset_ = new ::TSD::SpecShadowSetOffsetArchive(*from._impl_.spec_shadow_set_offset_);
  }
  if (from._internal_has_spec_shadow_set_opacity()) {
    _this->_impl_.spec_shadow_set_opacity_ = new ::TSD::SpecShadowSetOpacityArchive(*from._impl_.spec_shadow_set_opacity_);
  }
  if (from._internal_has_spec_shadow_set_radius()) {
    _this->_impl_.spec_shadow_set_radius_ = new ::TSD::SpecShadowSetRadiusArchive(*from._impl_.spec_shadow_set_radius_);
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecShadowArchive)
}

inline void SpecShadowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_set_shadow_){nullptr}
    , decltype(_impl_.spec_shadow_set_angle_){nullptr}
    , decltype(_impl_.spec_shadow_set_color_){nullptr}
    , decltype(_impl_.spec_shadow_set_offset_){nullptr}
    , decltype(_impl_.spec_shadow_set_opacity_){nullptr}
    , decltype(_impl_.spec_shadow_set_radius_){nullptr}
  };
}

SpecShadowArchive::~SpecShadowArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecShadowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spec_set_shadow_;
  if (this != internal_default_instance()) delete _impl_.spec_shadow_set_angle_;
  if (this != internal_default_instance()) delete _impl_.spec_shadow_set_color_;
  if (this != internal_default_instance()) delete _impl_.spec_shadow_set_offset_;
  if (this != internal_default_instance()) delete _impl_.spec_shadow_set_opacity_;
  if (this != internal_default_instance()) delete _impl_.spec_shadow_set_radius_;
}

void SpecShadowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecShadowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.spec_set_shadow_ != nullptr);
      _impl_.spec_set_shadow_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spec_shadow_set_angle_ != nullptr);
      _impl_.spec_shadow_set_angle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.spec_shadow_set_color_ != nullptr);
      _impl_.spec_shadow_set_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.spec_shadow_set_offset_ != nullptr);
      _impl_.spec_shadow_set_offset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.spec_shadow_set_opacity_ != nullptr);
      _impl_.spec_shadow_set_opacity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.spec_shadow_set_radius_ != nullptr);
      _impl_.spec_shadow_set_radius_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecShadowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecSetShadowArchive spec_set_shadow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_shadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetAngleArchive spec_shadow_set_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetColorArchive spec_shadow_set_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetOffsetArchive spec_shadow_set_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetOpacityArchive spec_shadow_set_opacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_opacity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetRadiusArchive spec_shadow_set_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_radius(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecShadowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecShadowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSDSOS.SpecSetShadowArchive spec_set_shadow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spec_set_shadow(this),
        _Internal::spec_set_shadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecShadowSetAngleArchive spec_shadow_set_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec_shadow_set_angle(this),
        _Internal::spec_shadow_set_angle(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecShadowSetColorArchive spec_shadow_set_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spec_shadow_set_color(this),
        _Internal::spec_shadow_set_color(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecShadowSetOffsetArchive spec_shadow_set_offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::spec_shadow_set_offset(this),
        _Internal::spec_shadow_set_offset(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecShadowSetOpacityArchive spec_shadow_set_opacity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::spec_shadow_set_opacity(this),
        _Internal::spec_shadow_set_opacity(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecShadowSetRadiusArchive spec_shadow_set_radius = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::spec_shadow_set_radius(this),
        _Internal::spec_shadow_set_radius(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecShadowArchive)
  return target;
}

size_t SpecShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecShadowArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSDSOS.SpecSetShadowArchive spec_set_shadow = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_set_shadow_);
    }

    // optional .TSD.SpecShadowSetAngleArchive spec_shadow_set_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_shadow_set_angle_);
    }

    // optional .TSD.SpecShadowSetColorArchive spec_shadow_set_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_shadow_set_color_);
    }

    // optional .TSD.SpecShadowSetOffsetArchive spec_shadow_set_offset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_shadow_set_offset_);
    }

    // optional .TSD.SpecShadowSetOpacityArchive spec_shadow_set_opacity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_shadow_set_opacity_);
    }

    // optional .TSD.SpecShadowSetRadiusArchive spec_shadow_set_radius = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_shadow_set_radius_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecShadowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecShadowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecShadowArchive::GetClassData() const { return &_class_data_; }


void SpecShadowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecShadowArchive*>(&to_msg);
  auto& from = static_cast<const SpecShadowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecShadowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_spec_set_shadow()->::TSDSOS::SpecSetShadowArchive::MergeFrom(
          from._internal_spec_set_shadow());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spec_shadow_set_angle()->::TSD::SpecShadowSetAngleArchive::MergeFrom(
          from._internal_spec_shadow_set_angle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_spec_shadow_set_color()->::TSD::SpecShadowSetColorArchive::MergeFrom(
          from._internal_spec_shadow_set_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_spec_shadow_set_offset()->::TSD::SpecShadowSetOffsetArchive::MergeFrom(
          from._internal_spec_shadow_set_offset());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_spec_shadow_set_opacity()->::TSD::SpecShadowSetOpacityArchive::MergeFrom(
          from._internal_spec_shadow_set_opacity());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_spec_shadow_set_radius()->::TSD::SpecShadowSetRadiusArchive::MergeFrom(
          from._internal_spec_shadow_set_radius());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecShadowArchive::CopyFrom(const SpecShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecShadowArchive::IsInitialized() const {
  if (_internal_has_spec_set_shadow()) {
    if (!_impl_.spec_set_shadow_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_angle()) {
    if (!_impl_.spec_shadow_set_angle_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_color()) {
    if (!_impl_.spec_shadow_set_color_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_offset()) {
    if (!_impl_.spec_shadow_set_offset_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_opacity()) {
    if (!_impl_.spec_shadow_set_opacity_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_radius()) {
    if (!_impl_.spec_shadow_set_radius_->IsInitialized()) return false;
  }
  return true;
}

void SpecShadowArchive::InternalSwap(SpecShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecShadowArchive, _impl_.spec_shadow_set_radius_)
      + sizeof(SpecShadowArchive::_impl_.spec_shadow_set_radius_)
      - PROTOBUF_FIELD_OFFSET(SpecShadowArchive, _impl_.spec_set_shadow_)>(
          reinterpret_cast<char*>(&_impl_.spec_set_shadow_),
          reinterpret_cast<char*>(&other->_impl_.spec_set_shadow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecShadowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[8]);
}

// ===================================================================

class SpecStrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecStrokeArchive>()._impl_._has_bits_);
  static const ::TSD::SpecFrameSetAssetScaleArchive& spec_frame_set_asset_scale(const SpecStrokeArchive* msg);
  static void set_has_spec_frame_set_asset_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::SpecSetStrokeArchive& spec_set_stroke(const SpecStrokeArchive* msg);
  static void set_has_spec_set_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::SpecStrokeSetColorArchive& spec_stroke_set_color(const SpecStrokeArchive* msg);
  static void set_has_spec_stroke_set_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::SpecStrokeSetPatternArchive& spec_stroke_set_pattern(const SpecStrokeArchive* msg);
  static void set_has_spec_stroke_set_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::SpecStrokeSetWidthArchive& spec_stroke_set_width(const SpecStrokeArchive* msg);
  static void set_has_spec_stroke_set_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSD::SpecFrameSetAssetScaleArchive&
SpecStrokeArchive::_Internal::spec_frame_set_asset_scale(const SpecStrokeArchive* msg) {
  return *msg->_impl_.spec_frame_set_asset_scale_;
}
const ::TSDSOS::SpecSetStrokeArchive&
SpecStrokeArchive::_Internal::spec_set_stroke(const SpecStrokeArchive* msg) {
  return *msg->_impl_.spec_set_stroke_;
}
const ::TSD::SpecStrokeSetColorArchive&
SpecStrokeArchive::_Internal::spec_stroke_set_color(const SpecStrokeArchive* msg) {
  return *msg->_impl_.spec_stroke_set_color_;
}
const ::TSD::SpecStrokeSetPatternArchive&
SpecStrokeArchive::_Internal::spec_stroke_set_pattern(const SpecStrokeArchive* msg) {
  return *msg->_impl_.spec_stroke_set_pattern_;
}
const ::TSD::SpecStrokeSetWidthArchive&
SpecStrokeArchive::_Internal::spec_stroke_set_width(const SpecStrokeArchive* msg) {
  return *msg->_impl_.spec_stroke_set_width_;
}
void SpecStrokeArchive::clear_spec_frame_set_asset_scale() {
  if (_impl_.spec_frame_set_asset_scale_ != nullptr) _impl_.spec_frame_set_asset_scale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SpecStrokeArchive::clear_spec_stroke_set_color() {
  if (_impl_.spec_stroke_set_color_ != nullptr) _impl_.spec_stroke_set_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SpecStrokeArchive::clear_spec_stroke_set_pattern() {
  if (_impl_.spec_stroke_set_pattern_ != nullptr) _impl_.spec_stroke_set_pattern_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SpecStrokeArchive::clear_spec_stroke_set_width() {
  if (_impl_.spec_stroke_set_width_ != nullptr) _impl_.spec_stroke_set_width_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
SpecStrokeArchive::SpecStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecStrokeArchive)
}
SpecStrokeArchive::SpecStrokeArchive(const SpecStrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecStrokeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_frame_set_asset_scale_){nullptr}
    , decltype(_impl_.spec_set_stroke_){nullptr}
    , decltype(_impl_.spec_stroke_set_color_){nullptr}
    , decltype(_impl_.spec_stroke_set_pattern_){nullptr}
    , decltype(_impl_.spec_stroke_set_width_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_frame_set_asset_scale()) {
    _this->_impl_.spec_frame_set_asset_scale_ = new ::TSD::SpecFrameSetAssetScaleArchive(*from._impl_.spec_frame_set_asset_scale_);
  }
  if (from._internal_has_spec_set_stroke()) {
    _this->_impl_.spec_set_stroke_ = new ::TSDSOS::SpecSetStrokeArchive(*from._impl_.spec_set_stroke_);
  }
  if (from._internal_has_spec_stroke_set_color()) {
    _this->_impl_.spec_stroke_set_color_ = new ::TSD::SpecStrokeSetColorArchive(*from._impl_.spec_stroke_set_color_);
  }
  if (from._internal_has_spec_stroke_set_pattern()) {
    _this->_impl_.spec_stroke_set_pattern_ = new ::TSD::SpecStrokeSetPatternArchive(*from._impl_.spec_stroke_set_pattern_);
  }
  if (from._internal_has_spec_stroke_set_width()) {
    _this->_impl_.spec_stroke_set_width_ = new ::TSD::SpecStrokeSetWidthArchive(*from._impl_.spec_stroke_set_width_);
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecStrokeArchive)
}

inline void SpecStrokeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spec_frame_set_asset_scale_){nullptr}
    , decltype(_impl_.spec_set_stroke_){nullptr}
    , decltype(_impl_.spec_stroke_set_color_){nullptr}
    , decltype(_impl_.spec_stroke_set_pattern_){nullptr}
    , decltype(_impl_.spec_stroke_set_width_){nullptr}
  };
}

SpecStrokeArchive::~SpecStrokeArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecStrokeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecStrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spec_frame_set_asset_scale_;
  if (this != internal_default_instance()) delete _impl_.spec_set_stroke_;
  if (this != internal_default_instance()) delete _impl_.spec_stroke_set_color_;
  if (this != internal_default_instance()) delete _impl_.spec_stroke_set_pattern_;
  if (this != internal_default_instance()) delete _impl_.spec_stroke_set_width_;
}

void SpecStrokeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecStrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecStrokeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.spec_frame_set_asset_scale_ != nullptr);
      _impl_.spec_frame_set_asset_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spec_set_stroke_ != nullptr);
      _impl_.spec_set_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.spec_stroke_set_color_ != nullptr);
      _impl_.spec_stroke_set_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.spec_stroke_set_pattern_ != nullptr);
      _impl_.spec_stroke_set_pattern_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.spec_stroke_set_width_ != nullptr);
      _impl_.spec_stroke_set_width_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecStrokeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.SpecFrameSetAssetScaleArchive spec_frame_set_asset_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_frame_set_asset_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecSetStrokeArchive spec_set_stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecStrokeSetColorArchive spec_stroke_set_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_stroke_set_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecStrokeSetPatternArchive spec_stroke_set_pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_stroke_set_pattern(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.SpecStrokeSetWidthArchive spec_stroke_set_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_stroke_set_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecStrokeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecStrokeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.SpecFrameSetAssetScaleArchive spec_frame_set_asset_scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spec_frame_set_asset_scale(this),
        _Internal::spec_frame_set_asset_scale(this).GetCachedSize(), target, stream);
  }

  // optional .TSDSOS.SpecSetStrokeArchive spec_set_stroke = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec_set_stroke(this),
        _Internal::spec_set_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecStrokeSetColorArchive spec_stroke_set_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spec_stroke_set_color(this),
        _Internal::spec_stroke_set_color(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecStrokeSetPatternArchive spec_stroke_set_pattern = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::spec_stroke_set_pattern(this),
        _Internal::spec_stroke_set_pattern(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.SpecStrokeSetWidthArchive spec_stroke_set_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::spec_stroke_set_width(this),
        _Internal::spec_stroke_set_width(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecStrokeArchive)
  return target;
}

size_t SpecStrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecStrokeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.SpecFrameSetAssetScaleArchive spec_frame_set_asset_scale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_frame_set_asset_scale_);
    }

    // optional .TSDSOS.SpecSetStrokeArchive spec_set_stroke = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_set_stroke_);
    }

    // optional .TSD.SpecStrokeSetColorArchive spec_stroke_set_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_stroke_set_color_);
    }

    // optional .TSD.SpecStrokeSetPatternArchive spec_stroke_set_pattern = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_stroke_set_pattern_);
    }

    // optional .TSD.SpecStrokeSetWidthArchive spec_stroke_set_width = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spec_stroke_set_width_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecStrokeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecStrokeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecStrokeArchive::GetClassData() const { return &_class_data_; }


void SpecStrokeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecStrokeArchive*>(&to_msg);
  auto& from = static_cast<const SpecStrokeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecStrokeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_spec_frame_set_asset_scale()->::TSD::SpecFrameSetAssetScaleArchive::MergeFrom(
          from._internal_spec_frame_set_asset_scale());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spec_set_stroke()->::TSDSOS::SpecSetStrokeArchive::MergeFrom(
          from._internal_spec_set_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_spec_stroke_set_color()->::TSD::SpecStrokeSetColorArchive::MergeFrom(
          from._internal_spec_stroke_set_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_spec_stroke_set_pattern()->::TSD::SpecStrokeSetPatternArchive::MergeFrom(
          from._internal_spec_stroke_set_pattern());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_spec_stroke_set_width()->::TSD::SpecStrokeSetWidthArchive::MergeFrom(
          from._internal_spec_stroke_set_width());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecStrokeArchive::CopyFrom(const SpecStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecStrokeArchive::IsInitialized() const {
  if (_internal_has_spec_frame_set_asset_scale()) {
    if (!_impl_.spec_frame_set_asset_scale_->IsInitialized()) return false;
  }
  if (_internal_has_spec_set_stroke()) {
    if (!_impl_.spec_set_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_spec_stroke_set_color()) {
    if (!_impl_.spec_stroke_set_color_->IsInitialized()) return false;
  }
  if (_internal_has_spec_stroke_set_pattern()) {
    if (!_impl_.spec_stroke_set_pattern_->IsInitialized()) return false;
  }
  if (_internal_has_spec_stroke_set_width()) {
    if (!_impl_.spec_stroke_set_width_->IsInitialized()) return false;
  }
  return true;
}

void SpecStrokeArchive::InternalSwap(SpecStrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecStrokeArchive, _impl_.spec_stroke_set_width_)
      + sizeof(SpecStrokeArchive::_impl_.spec_stroke_set_width_)
      - PROTOBUF_FIELD_OFFSET(SpecStrokeArchive, _impl_.spec_frame_set_asset_scale_)>(
          reinterpret_cast<char*>(&_impl_.spec_frame_set_asset_scale_),
          reinterpret_cast<char*>(&other->_impl_.spec_frame_set_asset_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecStrokeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[9]);
}

// ===================================================================

class BaseShapeStylePropertyChangeSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseShapeStylePropertyChangeSetArchive>()._impl_._has_bits_);
  static const ::TSDSOS::SpecFillArchive& fill(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fill_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSDSOS::SpecStrokeArchive& stroke(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stroke_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSSSOS::SpecDoubleArchive& opacity(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opacity_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSDSOS::SpecShadowArchive& shadow(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shadow_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSDSOS::SpecReflectionArchive& reflection(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reflection_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSDSOS::SpecLineEndArchive& head_line_end(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_head_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_head_line_end_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSDSOS::SpecLineEndArchive& tail_line_end(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_tail_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tail_line_end_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::TSDSOS::SpecFillArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::fill(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.fill_;
}
const ::TSDSOS::SpecStrokeArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::stroke(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.stroke_;
}
const ::TSSSOS::SpecDoubleArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::opacity(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.opacity_;
}
const ::TSDSOS::SpecShadowArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::shadow(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.shadow_;
}
const ::TSDSOS::SpecReflectionArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::reflection(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.reflection_;
}
const ::TSDSOS::SpecLineEndArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::head_line_end(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.head_line_end_;
}
const ::TSDSOS::SpecLineEndArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::tail_line_end(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.tail_line_end_;
}
void BaseShapeStylePropertyChangeSetArchive::clear_opacity() {
  if (_impl_.opacity_ != nullptr) _impl_.opacity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BaseShapeStylePropertyChangeSetArchive::BaseShapeStylePropertyChangeSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
}
BaseShapeStylePropertyChangeSetArchive::BaseShapeStylePropertyChangeSetArchive(const BaseShapeStylePropertyChangeSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseShapeStylePropertyChangeSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.opacity_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.reflection_){nullptr}
    , decltype(_impl_.head_line_end_){nullptr}
    , decltype(_impl_.tail_line_end_){nullptr}
    , decltype(_impl_.fill_undefined_){}
    , decltype(_impl_.stroke_undefined_){}
    , decltype(_impl_.opacity_undefined_){}
    , decltype(_impl_.shadow_undefined_){}
    , decltype(_impl_.reflection_undefined_){}
    , decltype(_impl_.head_line_end_undefined_){}
    , decltype(_impl_.tail_line_end_undefined_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    _this->_impl_.fill_ = new ::TSDSOS::SpecFillArchive(*from._impl_.fill_);
  }
  if (from._internal_has_stroke()) {
    _this->_impl_.stroke_ = new ::TSDSOS::SpecStrokeArchive(*from._impl_.stroke_);
  }
  if (from._internal_has_opacity()) {
    _this->_impl_.opacity_ = new ::TSSSOS::SpecDoubleArchive(*from._impl_.opacity_);
  }
  if (from._internal_has_shadow()) {
    _this->_impl_.shadow_ = new ::TSDSOS::SpecShadowArchive(*from._impl_.shadow_);
  }
  if (from._internal_has_reflection()) {
    _this->_impl_.reflection_ = new ::TSDSOS::SpecReflectionArchive(*from._impl_.reflection_);
  }
  if (from._internal_has_head_line_end()) {
    _this->_impl_.head_line_end_ = new ::TSDSOS::SpecLineEndArchive(*from._impl_.head_line_end_);
  }
  if (from._internal_has_tail_line_end()) {
    _this->_impl_.tail_line_end_ = new ::TSDSOS::SpecLineEndArchive(*from._impl_.tail_line_end_);
  }
  ::memcpy(&_impl_.fill_undefined_, &from._impl_.fill_undefined_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tail_line_end_undefined_) -
    reinterpret_cast<char*>(&_impl_.fill_undefined_)) + sizeof(_impl_.tail_line_end_undefined_));
  // @@protoc_insertion_point(copy_constructor:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
}

inline void BaseShapeStylePropertyChangeSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.opacity_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.reflection_){nullptr}
    , decltype(_impl_.head_line_end_){nullptr}
    , decltype(_impl_.tail_line_end_){nullptr}
    , decltype(_impl_.fill_undefined_){false}
    , decltype(_impl_.stroke_undefined_){false}
    , decltype(_impl_.opacity_undefined_){false}
    , decltype(_impl_.shadow_undefined_){false}
    , decltype(_impl_.reflection_undefined_){false}
    , decltype(_impl_.head_line_end_undefined_){false}
    , decltype(_impl_.tail_line_end_undefined_){false}
  };
}

BaseShapeStylePropertyChangeSetArchive::~BaseShapeStylePropertyChangeSetArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseShapeStylePropertyChangeSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fill_;
  if (this != internal_default_instance()) delete _impl_.stroke_;
  if (this != internal_default_instance()) delete _impl_.opacity_;
  if (this != internal_default_instance()) delete _impl_.shadow_;
  if (this != internal_default_instance()) delete _impl_.reflection_;
  if (this != internal_default_instance()) delete _impl_.head_line_end_;
  if (this != internal_default_instance()) delete _impl_.tail_line_end_;
}

void BaseShapeStylePropertyChangeSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseShapeStylePropertyChangeSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.fill_ != nullptr);
      _impl_.fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stroke_ != nullptr);
      _impl_.stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.opacity_ != nullptr);
      _impl_.opacity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.shadow_ != nullptr);
      _impl_.shadow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.reflection_ != nullptr);
      _impl_.reflection_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.head_line_end_ != nullptr);
      _impl_.head_line_end_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tail_line_end_ != nullptr);
      _impl_.tail_line_end_->Clear();
    }
  }
  _impl_.fill_undefined_ = false;
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.stroke_undefined_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tail_line_end_undefined_) -
        reinterpret_cast<char*>(&_impl_.stroke_undefined_)) + sizeof(_impl_.tail_line_end_undefined_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseShapeStylePropertyChangeSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecFillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fill_undefined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fill_undefined(&has_bits);
          _impl_.fill_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecStrokeArchive stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stroke_undefined = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_stroke_undefined(&has_bits);
          _impl_.stroke_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSSSOS.SpecDoubleArchive opacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opacity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool opacity_undefined = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_opacity_undefined(&has_bits);
          _impl_.opacity_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecShadowArchive shadow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shadow_undefined = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_shadow_undefined(&has_bits);
          _impl_.shadow_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecReflectionArchive reflection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reflection_undefined = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_reflection_undefined(&has_bits);
          _impl_.reflection_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecLineEndArchive head_line_end = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_line_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool head_line_end_undefined = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_head_line_end_undefined(&has_bits);
          _impl_.head_line_end_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecLineEndArchive tail_line_end = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_line_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tail_line_end_undefined = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tail_line_end_undefined(&has_bits);
          _impl_.tail_line_end_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseShapeStylePropertyChangeSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSDSOS.SpecFillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  // optional bool fill_undefined = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_fill_undefined(), target);
  }

  // optional .TSDSOS.SpecStrokeArchive stroke = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stroke(this),
        _Internal::stroke(this).GetCachedSize(), target, stream);
  }

  // optional bool stroke_undefined = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_stroke_undefined(), target);
  }

  // optional .TSSSOS.SpecDoubleArchive opacity = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::opacity(this),
        _Internal::opacity(this).GetCachedSize(), target, stream);
  }

  // optional bool opacity_undefined = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_opacity_undefined(), target);
  }

  // optional .TSDSOS.SpecShadowArchive shadow = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::shadow(this),
        _Internal::shadow(this).GetCachedSize(), target, stream);
  }

  // optional bool shadow_undefined = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_shadow_undefined(), target);
  }

  // optional .TSDSOS.SpecReflectionArchive reflection = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::reflection(this),
        _Internal::reflection(this).GetCachedSize(), target, stream);
  }

  // optional bool reflection_undefined = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_reflection_undefined(), target);
  }

  // optional .TSDSOS.SpecLineEndArchive head_line_end = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::head_line_end(this),
        _Internal::head_line_end(this).GetCachedSize(), target, stream);
  }

  // optional bool head_line_end_undefined = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_head_line_end_undefined(), target);
  }

  // optional .TSDSOS.SpecLineEndArchive tail_line_end = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tail_line_end(this),
        _Internal::tail_line_end(this).GetCachedSize(), target, stream);
  }

  // optional bool tail_line_end_undefined = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_tail_line_end_undefined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  return target;
}

size_t BaseShapeStylePropertyChangeSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSDSOS.SpecFillArchive fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fill_);
    }

    // optional .TSDSOS.SpecStrokeArchive stroke = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stroke_);
    }

    // optional .TSSSOS.SpecDoubleArchive opacity = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.opacity_);
    }

    // optional .TSDSOS.SpecShadowArchive shadow = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shadow_);
    }

    // optional .TSDSOS.SpecReflectionArchive reflection = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reflection_);
    }

    // optional .TSDSOS.SpecLineEndArchive head_line_end = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.head_line_end_);
    }

    // optional .TSDSOS.SpecLineEndArchive tail_line_end = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tail_line_end_);
    }

    // optional bool fill_undefined = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool stroke_undefined = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool opacity_undefined = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool shadow_undefined = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool reflection_undefined = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool head_line_end_undefined = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool tail_line_end_undefined = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseShapeStylePropertyChangeSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseShapeStylePropertyChangeSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseShapeStylePropertyChangeSetArchive::GetClassData() const { return &_class_data_; }


void BaseShapeStylePropertyChangeSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseShapeStylePropertyChangeSetArchive*>(&to_msg);
  auto& from = static_cast<const BaseShapeStylePropertyChangeSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fill()->::TSDSOS::SpecFillArchive::MergeFrom(
          from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stroke()->::TSDSOS::SpecStrokeArchive::MergeFrom(
          from._internal_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_opacity()->::TSSSOS::SpecDoubleArchive::MergeFrom(
          from._internal_opacity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_shadow()->::TSDSOS::SpecShadowArchive::MergeFrom(
          from._internal_shadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_reflection()->::TSDSOS::SpecReflectionArchive::MergeFrom(
          from._internal_reflection());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_head_line_end()->::TSDSOS::SpecLineEndArchive::MergeFrom(
          from._internal_head_line_end());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tail_line_end()->::TSDSOS::SpecLineEndArchive::MergeFrom(
          from._internal_tail_line_end());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fill_undefined_ = from._impl_.fill_undefined_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stroke_undefined_ = from._impl_.stroke_undefined_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.opacity_undefined_ = from._impl_.opacity_undefined_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.shadow_undefined_ = from._impl_.shadow_undefined_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.reflection_undefined_ = from._impl_.reflection_undefined_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.head_line_end_undefined_ = from._impl_.head_line_end_undefined_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tail_line_end_undefined_ = from._impl_.tail_line_end_undefined_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseShapeStylePropertyChangeSetArchive::CopyFrom(const BaseShapeStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseShapeStylePropertyChangeSetArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!_impl_.fill_->IsInitialized()) return false;
  }
  if (_internal_has_stroke()) {
    if (!_impl_.stroke_->IsInitialized()) return false;
  }
  if (_internal_has_opacity()) {
    if (!_impl_.opacity_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!_impl_.shadow_->IsInitialized()) return false;
  }
  if (_internal_has_reflection()) {
    if (!_impl_.reflection_->IsInitialized()) return false;
  }
  if (_internal_has_head_line_end()) {
    if (!_impl_.head_line_end_->IsInitialized()) return false;
  }
  if (_internal_has_tail_line_end()) {
    if (!_impl_.tail_line_end_->IsInitialized()) return false;
  }
  return true;
}

void BaseShapeStylePropertyChangeSetArchive::InternalSwap(BaseShapeStylePropertyChangeSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseShapeStylePropertyChangeSetArchive, _impl_.tail_line_end_undefined_)
      + sizeof(BaseShapeStylePropertyChangeSetArchive::_impl_.tail_line_end_undefined_)
      - PROTOBUF_FIELD_OFFSET(BaseShapeStylePropertyChangeSetArchive, _impl_.fill_)>(
          reinterpret_cast<char*>(&_impl_.fill_),
          reinterpret_cast<char*>(&other->_impl_.fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseShapeStylePropertyChangeSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[10]);
}

// ===================================================================

class MediaStylePropertyChangeSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStylePropertyChangeSetArchive>()._impl_._has_bits_);
  static const ::TSDSOS::SpecStrokeArchive& stroke(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stroke_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSSSOS::SpecDoubleArchive& opacity(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opacity_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSDSOS::SpecShadowArchive& shadow(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shadow_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSDSOS::SpecReflectionArchive& reflection(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reflection_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::TSDSOS::SpecStrokeArchive&
MediaStylePropertyChangeSetArchive::_Internal::stroke(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.stroke_;
}
const ::TSSSOS::SpecDoubleArchive&
MediaStylePropertyChangeSetArchive::_Internal::opacity(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.opacity_;
}
const ::TSDSOS::SpecShadowArchive&
MediaStylePropertyChangeSetArchive::_Internal::shadow(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.shadow_;
}
const ::TSDSOS::SpecReflectionArchive&
MediaStylePropertyChangeSetArchive::_Internal::reflection(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->_impl_.reflection_;
}
void MediaStylePropertyChangeSetArchive::clear_opacity() {
  if (_impl_.opacity_ != nullptr) _impl_.opacity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MediaStylePropertyChangeSetArchive::MediaStylePropertyChangeSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.MediaStylePropertyChangeSetArchive)
}
MediaStylePropertyChangeSetArchive::MediaStylePropertyChangeSetArchive(const MediaStylePropertyChangeSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaStylePropertyChangeSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.opacity_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.reflection_){nullptr}
    , decltype(_impl_.stroke_undefined_){}
    , decltype(_impl_.opacity_undefined_){}
    , decltype(_impl_.shadow_undefined_){}
    , decltype(_impl_.reflection_undefined_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    _this->_impl_.stroke_ = new ::TSDSOS::SpecStrokeArchive(*from._impl_.stroke_);
  }
  if (from._internal_has_opacity()) {
    _this->_impl_.opacity_ = new ::TSSSOS::SpecDoubleArchive(*from._impl_.opacity_);
  }
  if (from._internal_has_shadow()) {
    _this->_impl_.shadow_ = new ::TSDSOS::SpecShadowArchive(*from._impl_.shadow_);
  }
  if (from._internal_has_reflection()) {
    _this->_impl_.reflection_ = new ::TSDSOS::SpecReflectionArchive(*from._impl_.reflection_);
  }
  ::memcpy(&_impl_.stroke_undefined_, &from._impl_.stroke_undefined_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reflection_undefined_) -
    reinterpret_cast<char*>(&_impl_.stroke_undefined_)) + sizeof(_impl_.reflection_undefined_));
  // @@protoc_insertion_point(copy_constructor:TSDSOS.MediaStylePropertyChangeSetArchive)
}

inline void MediaStylePropertyChangeSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.opacity_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.reflection_){nullptr}
    , decltype(_impl_.stroke_undefined_){false}
    , decltype(_impl_.opacity_undefined_){false}
    , decltype(_impl_.shadow_undefined_){false}
    , decltype(_impl_.reflection_undefined_){false}
  };
}

MediaStylePropertyChangeSetArchive::~MediaStylePropertyChangeSetArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.MediaStylePropertyChangeSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaStylePropertyChangeSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stroke_;
  if (this != internal_default_instance()) delete _impl_.opacity_;
  if (this != internal_default_instance()) delete _impl_.shadow_;
  if (this != internal_default_instance()) delete _impl_.reflection_;
}

void MediaStylePropertyChangeSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaStylePropertyChangeSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.stroke_ != nullptr);
      _impl_.stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.opacity_ != nullptr);
      _impl_.opacity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.shadow_ != nullptr);
      _impl_.shadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.reflection_ != nullptr);
      _impl_.reflection_->Clear();
    }
  }
  ::memset(&_impl_.stroke_undefined_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reflection_undefined_) -
      reinterpret_cast<char*>(&_impl_.stroke_undefined_)) + sizeof(_impl_.reflection_undefined_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStylePropertyChangeSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecStrokeArchive stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stroke_undefined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stroke_undefined(&has_bits);
          _impl_.stroke_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSSSOS.SpecDoubleArchive opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_opacity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool opacity_undefined = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_opacity_undefined(&has_bits);
          _impl_.opacity_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecShadowArchive shadow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shadow_undefined = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_shadow_undefined(&has_bits);
          _impl_.shadow_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecReflectionArchive reflection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reflection_undefined = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_reflection_undefined(&has_bits);
          _impl_.reflection_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaStylePropertyChangeSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSDSOS.SpecStrokeArchive stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stroke(this),
        _Internal::stroke(this).GetCachedSize(), target, stream);
  }

  // optional bool stroke_undefined = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_stroke_undefined(), target);
  }

  // optional .TSSSOS.SpecDoubleArchive opacity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::opacity(this),
        _Internal::opacity(this).GetCachedSize(), target, stream);
  }

  // optional bool opacity_undefined = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_opacity_undefined(), target);
  }

  // optional .TSDSOS.SpecShadowArchive shadow = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::shadow(this),
        _Internal::shadow(this).GetCachedSize(), target, stream);
  }

  // optional bool shadow_undefined = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_shadow_undefined(), target);
  }

  // optional .TSDSOS.SpecReflectionArchive reflection = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::reflection(this),
        _Internal::reflection(this).GetCachedSize(), target, stream);
  }

  // optional bool reflection_undefined = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_reflection_undefined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.MediaStylePropertyChangeSetArchive)
  return target;
}

size_t MediaStylePropertyChangeSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSDSOS.SpecStrokeArchive stroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stroke_);
    }

    // optional .TSSSOS.SpecDoubleArchive opacity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.opacity_);
    }

    // optional .TSDSOS.SpecShadowArchive shadow = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shadow_);
    }

    // optional .TSDSOS.SpecReflectionArchive reflection = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reflection_);
    }

    // optional bool stroke_undefined = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool opacity_undefined = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool shadow_undefined = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool reflection_undefined = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaStylePropertyChangeSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaStylePropertyChangeSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaStylePropertyChangeSetArchive::GetClassData() const { return &_class_data_; }


void MediaStylePropertyChangeSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaStylePropertyChangeSetArchive*>(&to_msg);
  auto& from = static_cast<const MediaStylePropertyChangeSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stroke()->::TSDSOS::SpecStrokeArchive::MergeFrom(
          from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_opacity()->::TSSSOS::SpecDoubleArchive::MergeFrom(
          from._internal_opacity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_shadow()->::TSDSOS::SpecShadowArchive::MergeFrom(
          from._internal_shadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_reflection()->::TSDSOS::SpecReflectionArchive::MergeFrom(
          from._internal_reflection());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.stroke_undefined_ = from._impl_.stroke_undefined_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.opacity_undefined_ = from._impl_.opacity_undefined_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.shadow_undefined_ = from._impl_.shadow_undefined_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.reflection_undefined_ = from._impl_.reflection_undefined_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaStylePropertyChangeSetArchive::CopyFrom(const MediaStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStylePropertyChangeSetArchive::IsInitialized() const {
  if (_internal_has_stroke()) {
    if (!_impl_.stroke_->IsInitialized()) return false;
  }
  if (_internal_has_opacity()) {
    if (!_impl_.opacity_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!_impl_.shadow_->IsInitialized()) return false;
  }
  if (_internal_has_reflection()) {
    if (!_impl_.reflection_->IsInitialized()) return false;
  }
  return true;
}

void MediaStylePropertyChangeSetArchive::InternalSwap(MediaStylePropertyChangeSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStylePropertyChangeSetArchive, _impl_.reflection_undefined_)
      + sizeof(MediaStylePropertyChangeSetArchive::_impl_.reflection_undefined_)
      - PROTOBUF_FIELD_OFFSET(MediaStylePropertyChangeSetArchive, _impl_.stroke_)>(
          reinterpret_cast<char*>(&_impl_.stroke_),
          reinterpret_cast<char*>(&other->_impl_.stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStylePropertyChangeSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSDSOS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetFillArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecSetFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetLineEndArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecSetLineEndArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetLineEndArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetReflectionArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecSetReflectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetReflectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetShadowArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecSetShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetStrokeArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecSetStrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetStrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecFillArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecLineEndArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecLineEndArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecLineEndArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecReflectionArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecReflectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecReflectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecShadowArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecStrokeArchive*
Arena::CreateMaybeMessage< ::TSDSOS::SpecStrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecStrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::BaseShapeStylePropertyChangeSetArchive*
Arena::CreateMaybeMessage< ::TSDSOS::BaseShapeStylePropertyChangeSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::BaseShapeStylePropertyChangeSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::MediaStylePropertyChangeSetArchive*
Arena::CreateMaybeMessage< ::TSDSOS::MediaStylePropertyChangeSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::MediaStylePropertyChangeSetArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
