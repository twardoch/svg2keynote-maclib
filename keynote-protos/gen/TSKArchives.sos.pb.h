// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSKArchives.sos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSKArchives_2esos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSKArchives_2esos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSKArchives_2esos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSKArchives_2esos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSKArchives_2esos_2eproto;
namespace TSKSOS {
class FixCorruptedDataCommandArchive;
struct FixCorruptedDataCommandArchiveDefaultTypeInternal;
extern FixCorruptedDataCommandArchiveDefaultTypeInternal _FixCorruptedDataCommandArchive_default_instance_;
class RemoveAuthorIdentifiersCommandArchive;
struct RemoveAuthorIdentifiersCommandArchiveDefaultTypeInternal;
extern RemoveAuthorIdentifiersCommandArchiveDefaultTypeInternal _RemoveAuthorIdentifiersCommandArchive_default_instance_;
class ResetActivityStreamCommandArchive;
struct ResetActivityStreamCommandArchiveDefaultTypeInternal;
extern ResetActivityStreamCommandArchiveDefaultTypeInternal _ResetActivityStreamCommandArchive_default_instance_;
}  // namespace TSKSOS
PROTOBUF_NAMESPACE_OPEN
template<> ::TSKSOS::FixCorruptedDataCommandArchive* Arena::CreateMaybeMessage<::TSKSOS::FixCorruptedDataCommandArchive>(Arena*);
template<> ::TSKSOS::RemoveAuthorIdentifiersCommandArchive* Arena::CreateMaybeMessage<::TSKSOS::RemoveAuthorIdentifiersCommandArchive>(Arena*);
template<> ::TSKSOS::ResetActivityStreamCommandArchive* Arena::CreateMaybeMessage<::TSKSOS::ResetActivityStreamCommandArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSKSOS {

// ===================================================================

class FixCorruptedDataCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSKSOS.FixCorruptedDataCommandArchive) */ {
 public:
  inline FixCorruptedDataCommandArchive() : FixCorruptedDataCommandArchive(nullptr) {}
  ~FixCorruptedDataCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR FixCorruptedDataCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixCorruptedDataCommandArchive(const FixCorruptedDataCommandArchive& from);
  FixCorruptedDataCommandArchive(FixCorruptedDataCommandArchive&& from) noexcept
    : FixCorruptedDataCommandArchive() {
    *this = ::std::move(from);
  }

  inline FixCorruptedDataCommandArchive& operator=(const FixCorruptedDataCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixCorruptedDataCommandArchive& operator=(FixCorruptedDataCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixCorruptedDataCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixCorruptedDataCommandArchive* internal_default_instance() {
    return reinterpret_cast<const FixCorruptedDataCommandArchive*>(
               &_FixCorruptedDataCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FixCorruptedDataCommandArchive& a, FixCorruptedDataCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FixCorruptedDataCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixCorruptedDataCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixCorruptedDataCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixCorruptedDataCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FixCorruptedDataCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FixCorruptedDataCommandArchive& from) {
    FixCorruptedDataCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixCorruptedDataCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSKSOS.FixCorruptedDataCommandArchive";
  }
  protected:
  explicit FixCorruptedDataCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorruptedDigestListFieldNumber = 2,
    kSuperFieldNumber = 1,
    kCorruptedDigestListUndefinedFieldNumber = 3,
  };
  // repeated string corrupted_digest_list = 2;
  int corrupted_digest_list_size() const;
  private:
  int _internal_corrupted_digest_list_size() const;
  public:
  void clear_corrupted_digest_list();
  const std::string& corrupted_digest_list(int index) const;
  std::string* mutable_corrupted_digest_list(int index);
  void set_corrupted_digest_list(int index, const std::string& value);
  void set_corrupted_digest_list(int index, std::string&& value);
  void set_corrupted_digest_list(int index, const char* value);
  void set_corrupted_digest_list(int index, const char* value, size_t size);
  std::string* add_corrupted_digest_list();
  void add_corrupted_digest_list(const std::string& value);
  void add_corrupted_digest_list(std::string&& value);
  void add_corrupted_digest_list(const char* value);
  void add_corrupted_digest_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& corrupted_digest_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_corrupted_digest_list();
  private:
  const std::string& _internal_corrupted_digest_list(int index) const;
  std::string* _internal_add_corrupted_digest_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional bool corrupted_digest_list_undefined = 3;
  bool has_corrupted_digest_list_undefined() const;
  private:
  bool _internal_has_corrupted_digest_list_undefined() const;
  public:
  void clear_corrupted_digest_list_undefined();
  bool corrupted_digest_list_undefined() const;
  void set_corrupted_digest_list_undefined(bool value);
  private:
  bool _internal_corrupted_digest_list_undefined() const;
  void _internal_set_corrupted_digest_list_undefined(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSKSOS.FixCorruptedDataCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> corrupted_digest_list_;
    ::TSK::CommandArchive* super_;
    bool corrupted_digest_list_undefined_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSKArchives_2esos_2eproto;
};
// -------------------------------------------------------------------

class RemoveAuthorIdentifiersCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSKSOS.RemoveAuthorIdentifiersCommandArchive) */ {
 public:
  inline RemoveAuthorIdentifiersCommandArchive() : RemoveAuthorIdentifiersCommandArchive(nullptr) {}
  ~RemoveAuthorIdentifiersCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR RemoveAuthorIdentifiersCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveAuthorIdentifiersCommandArchive(const RemoveAuthorIdentifiersCommandArchive& from);
  RemoveAuthorIdentifiersCommandArchive(RemoveAuthorIdentifiersCommandArchive&& from) noexcept
    : RemoveAuthorIdentifiersCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoveAuthorIdentifiersCommandArchive& operator=(const RemoveAuthorIdentifiersCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAuthorIdentifiersCommandArchive& operator=(RemoveAuthorIdentifiersCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveAuthorIdentifiersCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveAuthorIdentifiersCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveAuthorIdentifiersCommandArchive*>(
               &_RemoveAuthorIdentifiersCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RemoveAuthorIdentifiersCommandArchive& a, RemoveAuthorIdentifiersCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAuthorIdentifiersCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAuthorIdentifiersCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveAuthorIdentifiersCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveAuthorIdentifiersCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveAuthorIdentifiersCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveAuthorIdentifiersCommandArchive& from) {
    RemoveAuthorIdentifiersCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAuthorIdentifiersCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSKSOS.RemoveAuthorIdentifiersCommandArchive";
  }
  protected:
  explicit RemoveAuthorIdentifiersCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorIdentifiersFieldNumber = 2,
    kSuperFieldNumber = 1,
    kAuthorIdentifiersUndefinedFieldNumber = 3,
  };
  // repeated .TSP.UUID author_identifiers = 2;
  int author_identifiers_size() const;
  private:
  int _internal_author_identifiers_size() const;
  public:
  void clear_author_identifiers();
  ::TSP::UUID* mutable_author_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_author_identifiers();
  private:
  const ::TSP::UUID& _internal_author_identifiers(int index) const;
  ::TSP::UUID* _internal_add_author_identifiers();
  public:
  const ::TSP::UUID& author_identifiers(int index) const;
  ::TSP::UUID* add_author_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      author_identifiers() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional bool author_identifiers_undefined = 3;
  bool has_author_identifiers_undefined() const;
  private:
  bool _internal_has_author_identifiers_undefined() const;
  public:
  void clear_author_identifiers_undefined();
  bool author_identifiers_undefined() const;
  void set_author_identifiers_undefined(bool value);
  private:
  bool _internal_author_identifiers_undefined() const;
  void _internal_set_author_identifiers_undefined(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSKSOS.RemoveAuthorIdentifiersCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > author_identifiers_;
    ::TSK::CommandArchive* super_;
    bool author_identifiers_undefined_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSKArchives_2esos_2eproto;
};
// -------------------------------------------------------------------

class ResetActivityStreamCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSKSOS.ResetActivityStreamCommandArchive) */ {
 public:
  inline ResetActivityStreamCommandArchive() : ResetActivityStreamCommandArchive(nullptr) {}
  ~ResetActivityStreamCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ResetActivityStreamCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetActivityStreamCommandArchive(const ResetActivityStreamCommandArchive& from);
  ResetActivityStreamCommandArchive(ResetActivityStreamCommandArchive&& from) noexcept
    : ResetActivityStreamCommandArchive() {
    *this = ::std::move(from);
  }

  inline ResetActivityStreamCommandArchive& operator=(const ResetActivityStreamCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetActivityStreamCommandArchive& operator=(ResetActivityStreamCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetActivityStreamCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetActivityStreamCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ResetActivityStreamCommandArchive*>(
               &_ResetActivityStreamCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResetActivityStreamCommandArchive& a, ResetActivityStreamCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetActivityStreamCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetActivityStreamCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetActivityStreamCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetActivityStreamCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetActivityStreamCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResetActivityStreamCommandArchive& from) {
    ResetActivityStreamCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetActivityStreamCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSKSOS.ResetActivityStreamCommandArchive";
  }
  protected:
  explicit ResetActivityStreamCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSKSOS.ResetActivityStreamCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSKArchives_2esos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FixCorruptedDataCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool FixCorruptedDataCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool FixCorruptedDataCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& FixCorruptedDataCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& FixCorruptedDataCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSKSOS.FixCorruptedDataCommandArchive.super)
  return _internal_super();
}
inline void FixCorruptedDataCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSKSOS.FixCorruptedDataCommandArchive.super)
}
inline ::TSK::CommandArchive* FixCorruptedDataCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* FixCorruptedDataCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSKSOS.FixCorruptedDataCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* FixCorruptedDataCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* FixCorruptedDataCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSKSOS.FixCorruptedDataCommandArchive.super)
  return _msg;
}
inline void FixCorruptedDataCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSKSOS.FixCorruptedDataCommandArchive.super)
}

// repeated string corrupted_digest_list = 2;
inline int FixCorruptedDataCommandArchive::_internal_corrupted_digest_list_size() const {
  return _impl_.corrupted_digest_list_.size();
}
inline int FixCorruptedDataCommandArchive::corrupted_digest_list_size() const {
  return _internal_corrupted_digest_list_size();
}
inline void FixCorruptedDataCommandArchive::clear_corrupted_digest_list() {
  _impl_.corrupted_digest_list_.Clear();
}
inline std::string* FixCorruptedDataCommandArchive::add_corrupted_digest_list() {
  std::string* _s = _internal_add_corrupted_digest_list();
  // @@protoc_insertion_point(field_add_mutable:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
  return _s;
}
inline const std::string& FixCorruptedDataCommandArchive::_internal_corrupted_digest_list(int index) const {
  return _impl_.corrupted_digest_list_.Get(index);
}
inline const std::string& FixCorruptedDataCommandArchive::corrupted_digest_list(int index) const {
  // @@protoc_insertion_point(field_get:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
  return _internal_corrupted_digest_list(index);
}
inline std::string* FixCorruptedDataCommandArchive::mutable_corrupted_digest_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
  return _impl_.corrupted_digest_list_.Mutable(index);
}
inline void FixCorruptedDataCommandArchive::set_corrupted_digest_list(int index, const std::string& value) {
  _impl_.corrupted_digest_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline void FixCorruptedDataCommandArchive::set_corrupted_digest_list(int index, std::string&& value) {
  _impl_.corrupted_digest_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline void FixCorruptedDataCommandArchive::set_corrupted_digest_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.corrupted_digest_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline void FixCorruptedDataCommandArchive::set_corrupted_digest_list(int index, const char* value, size_t size) {
  _impl_.corrupted_digest_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline std::string* FixCorruptedDataCommandArchive::_internal_add_corrupted_digest_list() {
  return _impl_.corrupted_digest_list_.Add();
}
inline void FixCorruptedDataCommandArchive::add_corrupted_digest_list(const std::string& value) {
  _impl_.corrupted_digest_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline void FixCorruptedDataCommandArchive::add_corrupted_digest_list(std::string&& value) {
  _impl_.corrupted_digest_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline void FixCorruptedDataCommandArchive::add_corrupted_digest_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.corrupted_digest_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline void FixCorruptedDataCommandArchive::add_corrupted_digest_list(const char* value, size_t size) {
  _impl_.corrupted_digest_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FixCorruptedDataCommandArchive::corrupted_digest_list() const {
  // @@protoc_insertion_point(field_list:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
  return _impl_.corrupted_digest_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FixCorruptedDataCommandArchive::mutable_corrupted_digest_list() {
  // @@protoc_insertion_point(field_mutable_list:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list)
  return &_impl_.corrupted_digest_list_;
}

// optional bool corrupted_digest_list_undefined = 3;
inline bool FixCorruptedDataCommandArchive::_internal_has_corrupted_digest_list_undefined() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FixCorruptedDataCommandArchive::has_corrupted_digest_list_undefined() const {
  return _internal_has_corrupted_digest_list_undefined();
}
inline void FixCorruptedDataCommandArchive::clear_corrupted_digest_list_undefined() {
  _impl_.corrupted_digest_list_undefined_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FixCorruptedDataCommandArchive::_internal_corrupted_digest_list_undefined() const {
  return _impl_.corrupted_digest_list_undefined_;
}
inline bool FixCorruptedDataCommandArchive::corrupted_digest_list_undefined() const {
  // @@protoc_insertion_point(field_get:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list_undefined)
  return _internal_corrupted_digest_list_undefined();
}
inline void FixCorruptedDataCommandArchive::_internal_set_corrupted_digest_list_undefined(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.corrupted_digest_list_undefined_ = value;
}
inline void FixCorruptedDataCommandArchive::set_corrupted_digest_list_undefined(bool value) {
  _internal_set_corrupted_digest_list_undefined(value);
  // @@protoc_insertion_point(field_set:TSKSOS.FixCorruptedDataCommandArchive.corrupted_digest_list_undefined)
}

// -------------------------------------------------------------------

// RemoveAuthorIdentifiersCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool RemoveAuthorIdentifiersCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool RemoveAuthorIdentifiersCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoveAuthorIdentifiersCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoveAuthorIdentifiersCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSKSOS.RemoveAuthorIdentifiersCommandArchive.super)
  return _internal_super();
}
inline void RemoveAuthorIdentifiersCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSKSOS.RemoveAuthorIdentifiersCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoveAuthorIdentifiersCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* RemoveAuthorIdentifiersCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSKSOS.RemoveAuthorIdentifiersCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoveAuthorIdentifiersCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* RemoveAuthorIdentifiersCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSKSOS.RemoveAuthorIdentifiersCommandArchive.super)
  return _msg;
}
inline void RemoveAuthorIdentifiersCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSKSOS.RemoveAuthorIdentifiersCommandArchive.super)
}

// repeated .TSP.UUID author_identifiers = 2;
inline int RemoveAuthorIdentifiersCommandArchive::_internal_author_identifiers_size() const {
  return _impl_.author_identifiers_.size();
}
inline int RemoveAuthorIdentifiersCommandArchive::author_identifiers_size() const {
  return _internal_author_identifiers_size();
}
inline ::TSP::UUID* RemoveAuthorIdentifiersCommandArchive::mutable_author_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:TSKSOS.RemoveAuthorIdentifiersCommandArchive.author_identifiers)
  return _impl_.author_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
RemoveAuthorIdentifiersCommandArchive::mutable_author_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:TSKSOS.RemoveAuthorIdentifiersCommandArchive.author_identifiers)
  return &_impl_.author_identifiers_;
}
inline const ::TSP::UUID& RemoveAuthorIdentifiersCommandArchive::_internal_author_identifiers(int index) const {
  return _impl_.author_identifiers_.Get(index);
}
inline const ::TSP::UUID& RemoveAuthorIdentifiersCommandArchive::author_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:TSKSOS.RemoveAuthorIdentifiersCommandArchive.author_identifiers)
  return _internal_author_identifiers(index);
}
inline ::TSP::UUID* RemoveAuthorIdentifiersCommandArchive::_internal_add_author_identifiers() {
  return _impl_.author_identifiers_.Add();
}
inline ::TSP::UUID* RemoveAuthorIdentifiersCommandArchive::add_author_identifiers() {
  ::TSP::UUID* _add = _internal_add_author_identifiers();
  // @@protoc_insertion_point(field_add:TSKSOS.RemoveAuthorIdentifiersCommandArchive.author_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
RemoveAuthorIdentifiersCommandArchive::author_identifiers() const {
  // @@protoc_insertion_point(field_list:TSKSOS.RemoveAuthorIdentifiersCommandArchive.author_identifiers)
  return _impl_.author_identifiers_;
}

// optional bool author_identifiers_undefined = 3;
inline bool RemoveAuthorIdentifiersCommandArchive::_internal_has_author_identifiers_undefined() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoveAuthorIdentifiersCommandArchive::has_author_identifiers_undefined() const {
  return _internal_has_author_identifiers_undefined();
}
inline void RemoveAuthorIdentifiersCommandArchive::clear_author_identifiers_undefined() {
  _impl_.author_identifiers_undefined_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RemoveAuthorIdentifiersCommandArchive::_internal_author_identifiers_undefined() const {
  return _impl_.author_identifiers_undefined_;
}
inline bool RemoveAuthorIdentifiersCommandArchive::author_identifiers_undefined() const {
  // @@protoc_insertion_point(field_get:TSKSOS.RemoveAuthorIdentifiersCommandArchive.author_identifiers_undefined)
  return _internal_author_identifiers_undefined();
}
inline void RemoveAuthorIdentifiersCommandArchive::_internal_set_author_identifiers_undefined(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.author_identifiers_undefined_ = value;
}
inline void RemoveAuthorIdentifiersCommandArchive::set_author_identifiers_undefined(bool value) {
  _internal_set_author_identifiers_undefined(value);
  // @@protoc_insertion_point(field_set:TSKSOS.RemoveAuthorIdentifiersCommandArchive.author_identifiers_undefined)
}

// -------------------------------------------------------------------

// ResetActivityStreamCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ResetActivityStreamCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ResetActivityStreamCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ResetActivityStreamCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ResetActivityStreamCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSKSOS.ResetActivityStreamCommandArchive.super)
  return _internal_super();
}
inline void ResetActivityStreamCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSKSOS.ResetActivityStreamCommandArchive.super)
}
inline ::TSK::CommandArchive* ResetActivityStreamCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ResetActivityStreamCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSKSOS.ResetActivityStreamCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ResetActivityStreamCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ResetActivityStreamCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSKSOS.ResetActivityStreamCommandArchive.super)
  return _msg;
}
inline void ResetActivityStreamCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSKSOS.ResetActivityStreamCommandArchive.super)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSKSOS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSKArchives_2esos_2eproto
