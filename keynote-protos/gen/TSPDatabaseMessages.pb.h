// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPDatabaseMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSPDatabaseMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSPDatabaseMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSPDatabaseMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSPDatabaseMessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSPDatabaseMessages_2eproto;
namespace TSP {
class DatabaseData;
struct DatabaseDataDefaultTypeInternal;
extern DatabaseDataDefaultTypeInternal _DatabaseData_default_instance_;
class DatabaseDataArchive;
struct DatabaseDataArchiveDefaultTypeInternal;
extern DatabaseDataArchiveDefaultTypeInternal _DatabaseDataArchive_default_instance_;
class DatabaseImageDataArchive;
struct DatabaseImageDataArchiveDefaultTypeInternal;
extern DatabaseImageDataArchiveDefaultTypeInternal _DatabaseImageDataArchive_default_instance_;
}  // namespace TSP
PROTOBUF_NAMESPACE_OPEN
template<> ::TSP::DatabaseData* Arena::CreateMaybeMessage<::TSP::DatabaseData>(Arena*);
template<> ::TSP::DatabaseDataArchive* Arena::CreateMaybeMessage<::TSP::DatabaseDataArchive>(Arena*);
template<> ::TSP::DatabaseImageDataArchive* Arena::CreateMaybeMessage<::TSP::DatabaseImageDataArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSP {

enum DatabaseImageDataArchive_ImageType : int {
  DatabaseImageDataArchive_ImageType_unknown = 0,
  DatabaseImageDataArchive_ImageType_bitmap = 1,
  DatabaseImageDataArchive_ImageType_pdf = 2
};
bool DatabaseImageDataArchive_ImageType_IsValid(int value);
constexpr DatabaseImageDataArchive_ImageType DatabaseImageDataArchive_ImageType_ImageType_MIN = DatabaseImageDataArchive_ImageType_unknown;
constexpr DatabaseImageDataArchive_ImageType DatabaseImageDataArchive_ImageType_ImageType_MAX = DatabaseImageDataArchive_ImageType_pdf;
constexpr int DatabaseImageDataArchive_ImageType_ImageType_ARRAYSIZE = DatabaseImageDataArchive_ImageType_ImageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatabaseImageDataArchive_ImageType_descriptor();
template<typename T>
inline const std::string& DatabaseImageDataArchive_ImageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DatabaseImageDataArchive_ImageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DatabaseImageDataArchive_ImageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DatabaseImageDataArchive_ImageType_descriptor(), enum_t_value);
}
inline bool DatabaseImageDataArchive_ImageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DatabaseImageDataArchive_ImageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DatabaseImageDataArchive_ImageType>(
    DatabaseImageDataArchive_ImageType_descriptor(), name, value);
}
// ===================================================================

class DatabaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.DatabaseData) */ {
 public:
  inline DatabaseData() : DatabaseData(nullptr) {}
  ~DatabaseData() override;
  explicit PROTOBUF_CONSTEXPR DatabaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseData(const DatabaseData& from);
  DatabaseData(DatabaseData&& from) noexcept
    : DatabaseData() {
    *this = ::std::move(from);
  }

  inline DatabaseData& operator=(const DatabaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseData& operator=(DatabaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatabaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseData* internal_default_instance() {
    return reinterpret_cast<const DatabaseData*>(
               &_DatabaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DatabaseData& a, DatabaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatabaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatabaseData& from) {
    DatabaseData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.DatabaseData";
  }
  protected:
  explicit DatabaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // required .TSP.DataReference data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TSP::DataReference& data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_data();
  ::TSP::DataReference* mutable_data();
  void set_allocated_data(::TSP::DataReference* data);
  private:
  const ::TSP::DataReference& _internal_data() const;
  ::TSP::DataReference* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::TSP::DataReference* data);
  ::TSP::DataReference* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:TSP.DatabaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::DataReference* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPDatabaseMessages_2eproto;
};
// -------------------------------------------------------------------

class DatabaseDataArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.DatabaseDataArchive) */ {
 public:
  inline DatabaseDataArchive() : DatabaseDataArchive(nullptr) {}
  ~DatabaseDataArchive() override;
  explicit PROTOBUF_CONSTEXPR DatabaseDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseDataArchive(const DatabaseDataArchive& from);
  DatabaseDataArchive(DatabaseDataArchive&& from) noexcept
    : DatabaseDataArchive() {
    *this = ::std::move(from);
  }

  inline DatabaseDataArchive& operator=(const DatabaseDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseDataArchive& operator=(DatabaseDataArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatabaseDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseDataArchive* internal_default_instance() {
    return reinterpret_cast<const DatabaseDataArchive*>(
               &_DatabaseDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DatabaseDataArchive& a, DatabaseDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseDataArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseDataArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatabaseDataArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatabaseDataArchive& from) {
    DatabaseDataArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseDataArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.DatabaseDataArchive";
  }
  protected:
  explicit DatabaseDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppRelativePathFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kDataFieldNumber = 1,
    kLengthFieldNumber = 4,
    kHashFieldNumber = 5,
    kSharableFieldNumber = 6,
  };
  // optional string app_relative_path = 2;
  bool has_app_relative_path() const;
  private:
  bool _internal_has_app_relative_path() const;
  public:
  void clear_app_relative_path();
  const std::string& app_relative_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_relative_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_relative_path();
  PROTOBUF_NODISCARD std::string* release_app_relative_path();
  void set_allocated_app_relative_path(std::string* app_relative_path);
  private:
  const std::string& _internal_app_relative_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_relative_path(const std::string& value);
  std::string* _internal_mutable_app_relative_path();
  public:

  // required string display_name = 3;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional .TSP.Reference data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TSP::Reference& data() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_data();
  ::TSP::Reference* mutable_data();
  void set_allocated_data(::TSP::Reference* data);
  private:
  const ::TSP::Reference& _internal_data() const;
  ::TSP::Reference* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::TSP::Reference* data);
  ::TSP::Reference* unsafe_arena_release_data();

  // optional uint64 length = 4;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint64_t length() const;
  void set_length(uint64_t value);
  private:
  uint64_t _internal_length() const;
  void _internal_set_length(uint64_t value);
  public:

  // optional uint32 hash = 5;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  uint32_t hash() const;
  void set_hash(uint32_t value);
  private:
  uint32_t _internal_hash() const;
  void _internal_set_hash(uint32_t value);
  public:

  // required bool sharable = 6 [default = true];
  bool has_sharable() const;
  private:
  bool _internal_has_sharable() const;
  public:
  void clear_sharable();
  bool sharable() const;
  void set_sharable(bool value);
  private:
  bool _internal_sharable() const;
  void _internal_set_sharable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.DatabaseDataArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_relative_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::TSP::Reference* data_;
    uint64_t length_;
    uint32_t hash_;
    bool sharable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPDatabaseMessages_2eproto;
};
// -------------------------------------------------------------------

class DatabaseImageDataArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.DatabaseImageDataArchive) */ {
 public:
  inline DatabaseImageDataArchive() : DatabaseImageDataArchive(nullptr) {}
  ~DatabaseImageDataArchive() override;
  explicit PROTOBUF_CONSTEXPR DatabaseImageDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseImageDataArchive(const DatabaseImageDataArchive& from);
  DatabaseImageDataArchive(DatabaseImageDataArchive&& from) noexcept
    : DatabaseImageDataArchive() {
    *this = ::std::move(from);
  }

  inline DatabaseImageDataArchive& operator=(const DatabaseImageDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseImageDataArchive& operator=(DatabaseImageDataArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatabaseImageDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseImageDataArchive* internal_default_instance() {
    return reinterpret_cast<const DatabaseImageDataArchive*>(
               &_DatabaseImageDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DatabaseImageDataArchive& a, DatabaseImageDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseImageDataArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseImageDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseImageDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseImageDataArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatabaseImageDataArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatabaseImageDataArchive& from) {
    DatabaseImageDataArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseImageDataArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.DatabaseImageDataArchive";
  }
  protected:
  explicit DatabaseImageDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DatabaseImageDataArchive_ImageType ImageType;
  static constexpr ImageType unknown =
    DatabaseImageDataArchive_ImageType_unknown;
  static constexpr ImageType bitmap =
    DatabaseImageDataArchive_ImageType_bitmap;
  static constexpr ImageType pdf =
    DatabaseImageDataArchive_ImageType_pdf;
  static inline bool ImageType_IsValid(int value) {
    return DatabaseImageDataArchive_ImageType_IsValid(value);
  }
  static constexpr ImageType ImageType_MIN =
    DatabaseImageDataArchive_ImageType_ImageType_MIN;
  static constexpr ImageType ImageType_MAX =
    DatabaseImageDataArchive_ImageType_ImageType_MAX;
  static constexpr int ImageType_ARRAYSIZE =
    DatabaseImageDataArchive_ImageType_ImageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImageType_descriptor() {
    return DatabaseImageDataArchive_ImageType_descriptor();
  }
  template<typename T>
  static inline const std::string& ImageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageType_Name.");
    return DatabaseImageDataArchive_ImageType_Name(enum_t_value);
  }
  static inline bool ImageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageType* value) {
    return DatabaseImageDataArchive_ImageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required .TSP.DatabaseDataArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSP::DatabaseDataArchive& super() const;
  PROTOBUF_NODISCARD ::TSP::DatabaseDataArchive* release_super();
  ::TSP::DatabaseDataArchive* mutable_super();
  void set_allocated_super(::TSP::DatabaseDataArchive* super);
  private:
  const ::TSP::DatabaseDataArchive& _internal_super() const;
  ::TSP::DatabaseDataArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSP::DatabaseDataArchive* super);
  ::TSP::DatabaseDataArchive* unsafe_arena_release_super();

  // required .TSP.DatabaseImageDataArchive.ImageType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSP::DatabaseImageDataArchive_ImageType type() const;
  void set_type(::TSP::DatabaseImageDataArchive_ImageType value);
  private:
  ::TSP::DatabaseImageDataArchive_ImageType _internal_type() const;
  void _internal_set_type(::TSP::DatabaseImageDataArchive_ImageType value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.DatabaseImageDataArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::DatabaseDataArchive* super_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPDatabaseMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DatabaseData

// required .TSP.DataReference data = 1;
inline bool DatabaseData::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool DatabaseData::has_data() const {
  return _internal_has_data();
}
inline const ::TSP::DataReference& DatabaseData::_internal_data() const {
  const ::TSP::DataReference* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& DatabaseData::data() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseData.data)
  return _internal_data();
}
inline void DatabaseData::unsafe_arena_set_allocated_data(
    ::TSP::DataReference* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.DatabaseData.data)
}
inline ::TSP::DataReference* DatabaseData::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::DataReference* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* DatabaseData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:TSP.DatabaseData.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::DataReference* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* DatabaseData::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::TSP::DataReference* DatabaseData::mutable_data() {
  ::TSP::DataReference* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TSP.DatabaseData.data)
  return _msg;
}
inline void DatabaseData::set_allocated_data(::TSP::DataReference* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:TSP.DatabaseData.data)
}

// -------------------------------------------------------------------

// DatabaseDataArchive

// optional .TSP.Reference data = 1;
inline bool DatabaseDataArchive::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool DatabaseDataArchive::has_data() const {
  return _internal_has_data();
}
inline const ::TSP::Reference& DatabaseDataArchive::_internal_data() const {
  const ::TSP::Reference* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DatabaseDataArchive::data() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseDataArchive.data)
  return _internal_data();
}
inline void DatabaseDataArchive::unsafe_arena_set_allocated_data(
    ::TSP::Reference* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.DatabaseDataArchive.data)
}
inline ::TSP::Reference* DatabaseDataArchive::release_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DatabaseDataArchive::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:TSP.DatabaseDataArchive.data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DatabaseDataArchive::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::TSP::Reference* DatabaseDataArchive::mutable_data() {
  ::TSP::Reference* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TSP.DatabaseDataArchive.data)
  return _msg;
}
inline void DatabaseDataArchive::set_allocated_data(::TSP::Reference* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:TSP.DatabaseDataArchive.data)
}

// optional string app_relative_path = 2;
inline bool DatabaseDataArchive::_internal_has_app_relative_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DatabaseDataArchive::has_app_relative_path() const {
  return _internal_has_app_relative_path();
}
inline void DatabaseDataArchive::clear_app_relative_path() {
  _impl_.app_relative_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DatabaseDataArchive::app_relative_path() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseDataArchive.app_relative_path)
  return _internal_app_relative_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatabaseDataArchive::set_app_relative_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.app_relative_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DatabaseDataArchive.app_relative_path)
}
inline std::string* DatabaseDataArchive::mutable_app_relative_path() {
  std::string* _s = _internal_mutable_app_relative_path();
  // @@protoc_insertion_point(field_mutable:TSP.DatabaseDataArchive.app_relative_path)
  return _s;
}
inline const std::string& DatabaseDataArchive::_internal_app_relative_path() const {
  return _impl_.app_relative_path_.Get();
}
inline void DatabaseDataArchive::_internal_set_app_relative_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_relative_path_.Set(value, GetArenaForAllocation());
}
inline std::string* DatabaseDataArchive::_internal_mutable_app_relative_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.app_relative_path_.Mutable(GetArenaForAllocation());
}
inline std::string* DatabaseDataArchive::release_app_relative_path() {
  // @@protoc_insertion_point(field_release:TSP.DatabaseDataArchive.app_relative_path)
  if (!_internal_has_app_relative_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.app_relative_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_relative_path_.IsDefault()) {
    _impl_.app_relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DatabaseDataArchive::set_allocated_app_relative_path(std::string* app_relative_path) {
  if (app_relative_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.app_relative_path_.SetAllocated(app_relative_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_relative_path_.IsDefault()) {
    _impl_.app_relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DatabaseDataArchive.app_relative_path)
}

// required string display_name = 3;
inline bool DatabaseDataArchive::_internal_has_display_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DatabaseDataArchive::has_display_name() const {
  return _internal_has_display_name();
}
inline void DatabaseDataArchive::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DatabaseDataArchive::display_name() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseDataArchive.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatabaseDataArchive::set_display_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DatabaseDataArchive.display_name)
}
inline std::string* DatabaseDataArchive::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:TSP.DatabaseDataArchive.display_name)
  return _s;
}
inline const std::string& DatabaseDataArchive::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void DatabaseDataArchive::_internal_set_display_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DatabaseDataArchive::_internal_mutable_display_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DatabaseDataArchive::release_display_name() {
  // @@protoc_insertion_point(field_release:TSP.DatabaseDataArchive.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DatabaseDataArchive::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DatabaseDataArchive.display_name)
}

// optional uint64 length = 4;
inline bool DatabaseDataArchive::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DatabaseDataArchive::has_length() const {
  return _internal_has_length();
}
inline void DatabaseDataArchive::clear_length() {
  _impl_.length_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t DatabaseDataArchive::_internal_length() const {
  return _impl_.length_;
}
inline uint64_t DatabaseDataArchive::length() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseDataArchive.length)
  return _internal_length();
}
inline void DatabaseDataArchive::_internal_set_length(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.length_ = value;
}
inline void DatabaseDataArchive::set_length(uint64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSP.DatabaseDataArchive.length)
}

// optional uint32 hash = 5;
inline bool DatabaseDataArchive::_internal_has_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DatabaseDataArchive::has_hash() const {
  return _internal_has_hash();
}
inline void DatabaseDataArchive::clear_hash() {
  _impl_.hash_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t DatabaseDataArchive::_internal_hash() const {
  return _impl_.hash_;
}
inline uint32_t DatabaseDataArchive::hash() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseDataArchive.hash)
  return _internal_hash();
}
inline void DatabaseDataArchive::_internal_set_hash(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hash_ = value;
}
inline void DatabaseDataArchive::set_hash(uint32_t value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:TSP.DatabaseDataArchive.hash)
}

// required bool sharable = 6 [default = true];
inline bool DatabaseDataArchive::_internal_has_sharable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DatabaseDataArchive::has_sharable() const {
  return _internal_has_sharable();
}
inline void DatabaseDataArchive::clear_sharable() {
  _impl_.sharable_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool DatabaseDataArchive::_internal_sharable() const {
  return _impl_.sharable_;
}
inline bool DatabaseDataArchive::sharable() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseDataArchive.sharable)
  return _internal_sharable();
}
inline void DatabaseDataArchive::_internal_set_sharable(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sharable_ = value;
}
inline void DatabaseDataArchive::set_sharable(bool value) {
  _internal_set_sharable(value);
  // @@protoc_insertion_point(field_set:TSP.DatabaseDataArchive.sharable)
}

// -------------------------------------------------------------------

// DatabaseImageDataArchive

// required .TSP.DatabaseDataArchive super = 1;
inline bool DatabaseImageDataArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DatabaseImageDataArchive::has_super() const {
  return _internal_has_super();
}
inline void DatabaseImageDataArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::DatabaseDataArchive& DatabaseImageDataArchive::_internal_super() const {
  const ::TSP::DatabaseDataArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DatabaseDataArchive&>(
      ::TSP::_DatabaseDataArchive_default_instance_);
}
inline const ::TSP::DatabaseDataArchive& DatabaseImageDataArchive::super() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseImageDataArchive.super)
  return _internal_super();
}
inline void DatabaseImageDataArchive::unsafe_arena_set_allocated_super(
    ::TSP::DatabaseDataArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.DatabaseImageDataArchive.super)
}
inline ::TSP::DatabaseDataArchive* DatabaseImageDataArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::DatabaseDataArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DatabaseDataArchive* DatabaseImageDataArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSP.DatabaseImageDataArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::DatabaseDataArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSP::DatabaseDataArchive* DatabaseImageDataArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DatabaseDataArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSP::DatabaseDataArchive* DatabaseImageDataArchive::mutable_super() {
  ::TSP::DatabaseDataArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSP.DatabaseImageDataArchive.super)
  return _msg;
}
inline void DatabaseImageDataArchive::set_allocated_super(::TSP::DatabaseDataArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSP.DatabaseImageDataArchive.super)
}

// required .TSP.DatabaseImageDataArchive.ImageType type = 2;
inline bool DatabaseImageDataArchive::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DatabaseImageDataArchive::has_type() const {
  return _internal_has_type();
}
inline void DatabaseImageDataArchive::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TSP::DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::_internal_type() const {
  return static_cast< ::TSP::DatabaseImageDataArchive_ImageType >(_impl_.type_);
}
inline ::TSP::DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::type() const {
  // @@protoc_insertion_point(field_get:TSP.DatabaseImageDataArchive.type)
  return _internal_type();
}
inline void DatabaseImageDataArchive::_internal_set_type(::TSP::DatabaseImageDataArchive_ImageType value) {
  assert(::TSP::DatabaseImageDataArchive_ImageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void DatabaseImageDataArchive::set_type(::TSP::DatabaseImageDataArchive_ImageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSP.DatabaseImageDataArchive.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSP::DatabaseImageDataArchive_ImageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::DatabaseImageDataArchive_ImageType>() {
  return ::TSP::DatabaseImageDataArchive_ImageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSPDatabaseMessages_2eproto
