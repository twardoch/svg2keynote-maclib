// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSKArchives.proto

#include "TSKArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSK {
PROTOBUF_CONSTEXPR TreeNode::TreeNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr} {}
struct TreeNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeNodeDefaultTypeInternal() {}
  union {
    TreeNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
PROTOBUF_CONSTEXPR LocalCommandHistoryItem::LocalCommandHistoryItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_)*/nullptr
  , /*decltype(_impl_.behavior_)*/nullptr} {}
struct LocalCommandHistoryItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCommandHistoryItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCommandHistoryItemDefaultTypeInternal() {}
  union {
    LocalCommandHistoryItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCommandHistoryItemDefaultTypeInternal _LocalCommandHistoryItem_default_instance_;
PROTOBUF_CONSTEXPR LocalCommandHistoryArray::LocalCommandHistoryArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_array_)*/nullptr} {}
struct LocalCommandHistoryArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCommandHistoryArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCommandHistoryArrayDefaultTypeInternal() {}
  union {
    LocalCommandHistoryArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCommandHistoryArrayDefaultTypeInternal _LocalCommandHistoryArray_default_instance_;
PROTOBUF_CONSTEXPR LocalCommandHistoryArraySegment::LocalCommandHistoryArraySegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_object_array_segment_)*/nullptr} {}
struct LocalCommandHistoryArraySegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCommandHistoryArraySegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCommandHistoryArraySegmentDefaultTypeInternal() {}
  union {
    LocalCommandHistoryArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCommandHistoryArraySegmentDefaultTypeInternal _LocalCommandHistoryArraySegment_default_instance_;
PROTOBUF_CONSTEXPR LocalCommandHistory::LocalCommandHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_array_)*/nullptr
  , /*decltype(_impl_.undo_count_)*/0u
  , /*decltype(_impl_.fixed_radar_13365177_)*/false} {}
struct LocalCommandHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCommandHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCommandHistoryDefaultTypeInternal() {}
  union {
    LocalCommandHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCommandHistoryDefaultTypeInternal _LocalCommandHistory_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistoryArray::CollaborationCommandHistoryArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_array_)*/nullptr} {}
struct CollaborationCommandHistoryArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistoryArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryArrayDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistoryArrayDefaultTypeInternal _CollaborationCommandHistoryArray_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistoryArraySegment::CollaborationCommandHistoryArraySegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_object_array_segment_)*/nullptr} {}
struct CollaborationCommandHistoryArraySegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistoryArraySegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryArraySegmentDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistoryArraySegmentDefaultTypeInternal _CollaborationCommandHistoryArraySegment_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistory_ItemList::CollaborationCommandHistory_ItemList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transformer_entries_)*/{}
  , /*decltype(_impl_.items_array_)*/nullptr} {}
struct CollaborationCommandHistory_ItemListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistory_ItemListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistory_ItemListDefaultTypeInternal() {}
  union {
    CollaborationCommandHistory_ItemList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistory_ItemListDefaultTypeInternal _CollaborationCommandHistory_ItemList_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistory::CollaborationCommandHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_identifier_)*/nullptr
  , /*decltype(_impl_.undo_items_)*/nullptr
  , /*decltype(_impl_.redo_items_)*/nullptr} {}
struct CollaborationCommandHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryDefaultTypeInternal() {}
  union {
    CollaborationCommandHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistoryDefaultTypeInternal _CollaborationCommandHistory_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistoryItem::CollaborationCommandHistoryItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/nullptr
  , /*decltype(_impl_.behavior_)*/nullptr
  , /*decltype(_impl_.coalescing_group_)*/nullptr
  , /*decltype(_impl_.revision_sequence_)*/uint64_t{0u}} {}
struct CollaborationCommandHistoryItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistoryItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryItemDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistoryItemDefaultTypeInternal _CollaborationCommandHistoryItem_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistoryCoalescingGroup::CollaborationCommandHistoryCoalescingGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.did_coalesce_all_commands_)*/false} {}
struct CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryCoalescingGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal _CollaborationCommandHistoryCoalescingGroup_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistoryCoalescingGroupNode::CollaborationCommandHistoryCoalescingGroupNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_)*/nullptr} {}
struct CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryCoalescingGroupNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal _CollaborationCommandHistoryCoalescingGroupNode_default_instance_;
PROTOBUF_CONSTEXPR CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coalescing_group_)*/nullptr
  , /*decltype(_impl_.node_)*/nullptr} {}
struct CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal _CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver_default_instance_;
PROTOBUF_CONSTEXPR DocumentArchive::DocumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activity_log_entries_)*/{}
  , /*decltype(_impl_.locale_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creation_locale_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.annotation_author_storage_)*/nullptr
  , /*decltype(_impl_.collaboration_operation_history_)*/nullptr
  , /*decltype(_impl_.formatting_symbols_)*/nullptr
  , /*decltype(_impl_.activity_stream_)*/nullptr
  , /*decltype(_impl_.prevent_image_conversion_on_open_)*/false
  , /*decltype(_impl_.has_floating_locale_)*/false
  , /*decltype(_impl_.has_user_defined_locale_)*/false
  , /*decltype(_impl_.should_measure_negatively_tracked_text_correctly_)*/false
  , /*decltype(_impl_.use_optimized_text_vertical_alignment_)*/false} {}
struct DocumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
PROTOBUF_CONSTEXPR FormattingSymbolsArchive_CurrencySymbol::FormattingSymbolsArchive_CurrencySymbol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal() {}
  union {
    FormattingSymbolsArchive_CurrencySymbol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal _FormattingSymbolsArchive_CurrencySymbol_default_instance_;
PROTOBUF_CONSTEXPR FormattingSymbolsArchive::FormattingSymbolsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.months_)*/{}
  , /*decltype(_impl_.standalone_months_)*/{}
  , /*decltype(_impl_.short_months_)*/{}
  , /*decltype(_impl_.standalone_short_months_)*/{}
  , /*decltype(_impl_.weekdays_)*/{}
  , /*decltype(_impl_.standalone_weekdays_)*/{}
  , /*decltype(_impl_.short_weekdays_)*/{}
  , /*decltype(_impl_.standalone_short_weekdays_)*/{}
  , /*decltype(_impl_.tiny_months_)*/{}
  , /*decltype(_impl_.standalone_tiny_months_)*/{}
  , /*decltype(_impl_.tiny_weekdays_)*/{}
  , /*decltype(_impl_.standalone_tiny_weekdays_)*/{}
  , /*decltype(_impl_.quarters_)*/{}
  , /*decltype(_impl_.standalone_quarters_)*/{}
  , /*decltype(_impl_.short_quarters_)*/{}
  , /*decltype(_impl_.standalone_short_quarters_)*/{}
  , /*decltype(_impl_.eras_)*/{}
  , /*decltype(_impl_.long_eras_)*/{}
  , /*decltype(_impl_.currency_symbols_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calendar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.numbering_system_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.am_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pm_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.short_date_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.medium_date_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.long_date_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_date_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.short_time_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.medium_time_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.long_time_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_time_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decimal_separator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grouping_separator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_decimal_separator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_grouping_separator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plus_sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.minus_sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exponential_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.percent_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.per_mille_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.infinity_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nan_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decimal_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scientific_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.percent_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FormattingSymbolsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormattingSymbolsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormattingSymbolsArchiveDefaultTypeInternal() {}
  union {
    FormattingSymbolsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormattingSymbolsArchiveDefaultTypeInternal _FormattingSymbolsArchive_default_instance_;
PROTOBUF_CONSTEXPR DocumentSupportCollaborationState::DocumentSupportCollaborationState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.collaboration_command_history_)*/nullptr
  , /*decltype(_impl_.collaboration_session_state_)*/nullptr} {}
struct DocumentSupportCollaborationStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentSupportCollaborationStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentSupportCollaborationStateDefaultTypeInternal() {}
  union {
    DocumentSupportCollaborationState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentSupportCollaborationStateDefaultTypeInternal _DocumentSupportCollaborationState_default_instance_;
PROTOBUF_CONSTEXPR DocumentSupportArchive::DocumentSupportArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undo_action_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redo_action_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_string_localization_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_history_)*/nullptr
  , /*decltype(_impl_.command_selection_behavior_history_)*/nullptr
  , /*decltype(_impl_.view_state_)*/nullptr
  , /*decltype(_impl_.web_state_)*/nullptr
  , /*decltype(_impl_.collaboration_command_history_)*/nullptr
  , /*decltype(_impl_.collaboration_session_state_)*/nullptr
  , /*decltype(_impl_.collaboration_state_)*/nullptr
  , /*decltype(_impl_.activity_notification_map_)*/nullptr
  , /*decltype(_impl_.removed_author_auditor_pending_state_)*/nullptr
  , /*decltype(_impl_.undo_count_)*/0u
  , /*decltype(_impl_.redo_count_)*/0u
  , /*decltype(_impl_.is_in_collaboration_mode_)*/false} {}
struct DocumentSupportArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentSupportArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentSupportArchiveDefaultTypeInternal() {}
  union {
    DocumentSupportArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentSupportArchiveDefaultTypeInternal _DocumentSupportArchive_default_instance_;
PROTOBUF_CONSTEXPR ViewStateArchive::ViewStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_revision_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.view_state_root_)*/nullptr
  , /*decltype(_impl_.document_revision_sequence_)*/0} {}
struct ViewStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewStateArchiveDefaultTypeInternal() {}
  union {
    ViewStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewStateArchiveDefaultTypeInternal _ViewStateArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandArchive::CommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undoredostate_)*/nullptr
  , /*decltype(_impl_.undocollection_)*/nullptr
  , /*decltype(_impl_.shadowed_by_transform_)*/false
  , /*decltype(_impl_.shadowed_by_commit_)*/false
  , /*decltype(_impl_.remote_)*/false
  , /*decltype(_impl_.should_hold_until_group_commit_)*/false
  , /*decltype(_impl_.server_originated_)*/false} {}
struct CommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandArchiveDefaultTypeInternal() {}
  union {
    CommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandArchiveDefaultTypeInternal _CommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandGroupArchive::CommandGroupArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_.action_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.process_results_)*/nullptr
  , /*decltype(_impl_.can_coalesce_group_)*/false} {}
struct CommandGroupArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandGroupArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandGroupArchiveDefaultTypeInternal() {}
  union {
    CommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandGroupArchiveDefaultTypeInternal _CommandGroupArchive_default_instance_;
PROTOBUF_CONSTEXPR InducedCommandCollectionArchive::InducedCommandCollectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.induced_commands_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.inducing_command_)*/nullptr
  , /*decltype(_impl_.indexes_of_processed_induced_commands_)*/nullptr} {}
struct InducedCommandCollectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InducedCommandCollectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InducedCommandCollectionArchiveDefaultTypeInternal() {}
  union {
    InducedCommandCollectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InducedCommandCollectionArchiveDefaultTypeInternal _InducedCommandCollectionArchive_default_instance_;
PROTOBUF_CONSTEXPR PropagatedCommandCollectionArchive::PropagatedCommandCollectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.propagatable_command_)*/nullptr
  , /*decltype(_impl_.propagating_command_)*/nullptr
  , /*decltype(_impl_.propagatable_command_process_result_)*/false
  , /*decltype(_impl_.propagating_command_process_result_)*/false} {}
struct PropagatedCommandCollectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropagatedCommandCollectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropagatedCommandCollectionArchiveDefaultTypeInternal() {}
  union {
    PropagatedCommandCollectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropagatedCommandCollectionArchiveDefaultTypeInternal _PropagatedCommandCollectionArchive_default_instance_;
PROTOBUF_CONSTEXPR FinalCommandPairArchive::FinalCommandPairArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.command_)*/nullptr
  , /*decltype(_impl_.final_command_)*/nullptr
  , /*decltype(_impl_.command_process_result_)*/false
  , /*decltype(_impl_.final_command_process_result_)*/false} {}
struct FinalCommandPairArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FinalCommandPairArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FinalCommandPairArchiveDefaultTypeInternal() {}
  union {
    FinalCommandPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FinalCommandPairArchiveDefaultTypeInternal _FinalCommandPairArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandContainerArchive::CommandContainerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandContainerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandContainerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandContainerArchiveDefaultTypeInternal() {}
  union {
    CommandContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandContainerArchiveDefaultTypeInternal _CommandContainerArchive_default_instance_;
PROTOBUF_CONSTEXPR ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ProgressiveCommandGroupArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgressiveCommandGroupArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgressiveCommandGroupArchiveDefaultTypeInternal() {}
  union {
    ProgressiveCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgressiveCommandGroupArchiveDefaultTypeInternal _ProgressiveCommandGroupArchive_default_instance_;
PROTOBUF_CONSTEXPR FormatStructArchive::FormatStructArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interstitial_strings_)*/{}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_time_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_format_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bool_true_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bool_false_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inters_str_insertion_indexes_)*/nullptr
  , /*decltype(_impl_.custom_uid_)*/nullptr
  , /*decltype(_impl_.custom_format_)*/nullptr
  , /*decltype(_impl_.format_type_)*/0u
  , /*decltype(_impl_.decimal_places_)*/0u
  , /*decltype(_impl_.negative_style_)*/0u
  , /*decltype(_impl_.duration_style_)*/0u
  , /*decltype(_impl_.base_)*/0u
  , /*decltype(_impl_.show_thousands_separator_)*/false
  , /*decltype(_impl_.use_accounting_style_)*/false
  , /*decltype(_impl_.base_use_minus_sign_)*/false
  , /*decltype(_impl_.suppress_date_format_)*/false
  , /*decltype(_impl_.base_places_)*/0u
  , /*decltype(_impl_.fraction_accuracy_)*/0u
  , /*decltype(_impl_.duration_unit_largest_)*/0u
  , /*decltype(_impl_.duration_unit_smallest_)*/0u
  , /*decltype(_impl_.scale_factor_)*/0
  , /*decltype(_impl_.custom_id_)*/0u
  , /*decltype(_impl_.control_format_type_)*/0u
  , /*decltype(_impl_.control_minimum_)*/0
  , /*decltype(_impl_.control_maximum_)*/0
  , /*decltype(_impl_.control_increment_)*/0
  , /*decltype(_impl_.slider_orientation_)*/0u
  , /*decltype(_impl_.slider_position_)*/0u
  , /*decltype(_impl_.suppress_time_format_)*/false
  , /*decltype(_impl_.requires_fraction_replacement_)*/false
  , /*decltype(_impl_.is_complex_)*/false
  , /*decltype(_impl_.contains_integer_token_)*/false
  , /*decltype(_impl_.decimal_width_)*/0u
  , /*decltype(_impl_.min_integer_width_)*/0u
  , /*decltype(_impl_.num_nonspace_integer_digits_)*/0u
  , /*decltype(_impl_.num_nonspace_decimal_digits_)*/0u
  , /*decltype(_impl_.index_from_right_last_integer_)*/0u
  , /*decltype(_impl_.num_hash_decimal_digits_)*/0u
  , /*decltype(_impl_.total_num_decimal_digits_)*/0u
  , /*decltype(_impl_.multiple_choice_list_initial_value_)*/0u
  , /*decltype(_impl_.multiple_choice_list_id_)*/0u
  , /*decltype(_impl_.use_automatic_duration_units_)*/false
  , /*decltype(_impl_.uses_plus_sign_)*/false} {}
struct FormatStructArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormatStructArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormatStructArchiveDefaultTypeInternal() {}
  union {
    FormatStructArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
PROTOBUF_CONSTEXPR CustomFormatArchive_Condition::CustomFormatArchive_Condition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.condition_format_)*/nullptr
  , /*decltype(_impl_.condition_type_)*/0u
  , /*decltype(_impl_.condition_value_)*/0
  , /*decltype(_impl_.condition_value_dbl_)*/0} {}
struct CustomFormatArchive_ConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomFormatArchive_ConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomFormatArchive_ConditionDefaultTypeInternal() {}
  union {
    CustomFormatArchive_Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomFormatArchive_ConditionDefaultTypeInternal _CustomFormatArchive_Condition_default_instance_;
PROTOBUF_CONSTEXPR CustomFormatArchive::CustomFormatArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conditions_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_format_)*/nullptr
  , /*decltype(_impl_.format_type_pre_bnc_)*/0u
  , /*decltype(_impl_.format_type_)*/0u} {}
struct CustomFormatArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomFormatArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomFormatArchiveDefaultTypeInternal() {}
  union {
    CustomFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomFormatArchiveDefaultTypeInternal _CustomFormatArchive_default_instance_;
PROTOBUF_CONSTEXPR CustomFormatListArchive::CustomFormatListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuids_)*/{}
  , /*decltype(_impl_.custom_formats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomFormatListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomFormatListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomFormatListArchiveDefaultTypeInternal() {}
  union {
    CustomFormatListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomFormatListArchiveDefaultTypeInternal _CustomFormatListArchive_default_instance_;
PROTOBUF_CONSTEXPR AnnotationAuthorArchive::AnnotationAuthorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public_ids_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.is_public_author_)*/false} {}
struct AnnotationAuthorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationAuthorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationAuthorArchiveDefaultTypeInternal() {}
  union {
    AnnotationAuthorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationAuthorArchiveDefaultTypeInternal _AnnotationAuthorArchive_default_instance_;
PROTOBUF_CONSTEXPR DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.change_color_)*/nullptr} {}
struct DeprecatedChangeAuthorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeprecatedChangeAuthorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeprecatedChangeAuthorArchiveDefaultTypeInternal() {}
  union {
    DeprecatedChangeAuthorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeprecatedChangeAuthorArchiveDefaultTypeInternal _DeprecatedChangeAuthorArchive_default_instance_;
PROTOBUF_CONSTEXPR AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_author_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnnotationAuthorStorageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationAuthorStorageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationAuthorStorageArchiveDefaultTypeInternal() {}
  union {
    AnnotationAuthorStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationAuthorStorageArchiveDefaultTypeInternal _AnnotationAuthorStorageArchive_default_instance_;
PROTOBUF_CONSTEXPR SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.annotation_author_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.old_color_)*/nullptr} {}
struct SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal() {}
  union {
    SetAnnotationAuthorColorCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal _SetAnnotationAuthorColorCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR SetActivityAuthorShareParticipantIDCommandArchive::SetActivityAuthorShareParticipantIDCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.share_participant_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_share_participant_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.activity_author_)*/nullptr} {}
struct SetActivityAuthorShareParticipantIDCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetActivityAuthorShareParticipantIDCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetActivityAuthorShareParticipantIDCommandArchiveDefaultTypeInternal() {}
  union {
    SetActivityAuthorShareParticipantIDCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetActivityAuthorShareParticipantIDCommandArchiveDefaultTypeInternal _SetActivityAuthorShareParticipantIDCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBehaviorSelectionPathStorageArchive::CommandBehaviorSelectionPathStorageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.archived_selection_)*/nullptr
  , /*decltype(_impl_.archived_old_selection_)*/nullptr
  , /*decltype(_impl_.archived_new_selection_)*/nullptr
  , /*decltype(_impl_.forward_selection_path_transformer_)*/nullptr
  , /*decltype(_impl_.reverse_selection_path_transformer_)*/nullptr} {}
struct CommandBehaviorSelectionPathStorageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBehaviorSelectionPathStorageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBehaviorSelectionPathStorageArchiveDefaultTypeInternal() {}
  union {
    CommandBehaviorSelectionPathStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBehaviorSelectionPathStorageArchiveDefaultTypeInternal _CommandBehaviorSelectionPathStorageArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBehaviorArchive::CommandBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_behavior_)*/nullptr
  , /*decltype(_impl_.activity_behavior_)*/nullptr} {}
struct CommandBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBehaviorArchiveDefaultTypeInternal() {}
  union {
    CommandBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBehaviorArchiveDefaultTypeInternal _CommandBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additional_selection_behaviors_)*/{}
  , /*decltype(_impl_.selection_path_storage_)*/nullptr
  , /*decltype(_impl_.selection_flags_)*/uint64_t{0u}
  , /*decltype(_impl_.additional_forward_selection_flags_)*/uint64_t{0u}
  , /*decltype(_impl_.additional_reverse_selection_flags_)*/uint64_t{0u}} {}
struct CommandSelectionBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSelectionBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    CommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSelectionBehaviorArchiveDefaultTypeInternal _CommandSelectionBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR SelectionPathTransformerArchive::SelectionPathTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selection_transformers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectionPathTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectionPathTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectionPathTransformerArchiveDefaultTypeInternal() {}
  union {
    SelectionPathTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectionPathTransformerArchiveDefaultTypeInternal _SelectionPathTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR SelectionPathArchive::SelectionPathArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ordered_selections_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectionPathArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectionPathArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectionPathArchiveDefaultTypeInternal() {}
  union {
    SelectionPathArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectionPathArchiveDefaultTypeInternal _SelectionPathArchive_default_instance_;
PROTOBUF_CONSTEXPR DocumentSelectionArchive::DocumentSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_root_)*/nullptr} {}
struct DocumentSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentSelectionArchiveDefaultTypeInternal() {}
  union {
    DocumentSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentSelectionArchiveDefaultTypeInternal _DocumentSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR IdOperationArgs::IdOperationArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_path_)*/nullptr} {}
struct IdOperationArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdOperationArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdOperationArgsDefaultTypeInternal() {}
  union {
    IdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdOperationArgsDefaultTypeInternal _IdOperationArgs_default_instance_;
PROTOBUF_CONSTEXPR AddIdOperationArgs::AddIdOperationArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.index_)*/0} {}
struct AddIdOperationArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddIdOperationArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddIdOperationArgsDefaultTypeInternal() {}
  union {
    AddIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddIdOperationArgsDefaultTypeInternal _AddIdOperationArgs_default_instance_;
PROTOBUF_CONSTEXPR RemoveIdOperationArgs::RemoveIdOperationArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.index_)*/0} {}
struct RemoveIdOperationArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveIdOperationArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveIdOperationArgsDefaultTypeInternal() {}
  union {
    RemoveIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveIdOperationArgsDefaultTypeInternal _RemoveIdOperationArgs_default_instance_;
PROTOBUF_CONSTEXPR RearrangeIdOperationArgs::RearrangeIdOperationArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.from_index_)*/0
  , /*decltype(_impl_.to_index_)*/0} {}
struct RearrangeIdOperationArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RearrangeIdOperationArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RearrangeIdOperationArgsDefaultTypeInternal() {}
  union {
    RearrangeIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RearrangeIdOperationArgsDefaultTypeInternal _RearrangeIdOperationArgs_default_instance_;
PROTOBUF_CONSTEXPR IdPlacementOperationArgs::IdPlacementOperationArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.from_index_)*/0
  , /*decltype(_impl_.to_index_)*/0} {}
struct IdPlacementOperationArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdPlacementOperationArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdPlacementOperationArgsDefaultTypeInternal() {}
  union {
    IdPlacementOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdPlacementOperationArgsDefaultTypeInternal _IdPlacementOperationArgs_default_instance_;
PROTOBUF_CONSTEXPR NullCommandArchive::NullCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct NullCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NullCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NullCommandArchiveDefaultTypeInternal() {}
  union {
    NullCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NullCommandArchiveDefaultTypeInternal _NullCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupCommitCommandArchive::GroupCommitCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.can_coalesce_group_)*/false} {}
struct GroupCommitCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupCommitCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupCommitCommandArchiveDefaultTypeInternal() {}
  union {
    GroupCommitCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupCommitCommandArchiveDefaultTypeInternal _GroupCommitCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR UpgradeDocPostProcessingCommandArchive::UpgradeDocPostProcessingCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal() {}
  union {
    UpgradeDocPostProcessingCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal _UpgradeDocPostProcessingCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR InducedCommandCollectionCommitCommandArchive::InducedCommandCollectionCommitCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal() {}
  union {
    InducedCommandCollectionCommitCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal _InducedCommandCollectionCommitCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityCommitCommandArchive::ActivityCommitCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.activity_)*/nullptr
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_.was_activity_committed_)*/true} {}
struct ActivityCommitCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityCommitCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityCommitCommandArchiveDefaultTypeInternal() {}
  union {
    ActivityCommitCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityCommitCommandArchiveDefaultTypeInternal _ActivityCommitCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ExecuteTestBetweenRollbackAndReapplyCommandArchive::ExecuteTestBetweenRollbackAndReapplyCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal() {}
  union {
    ExecuteTestBetweenRollbackAndReapplyCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal _ExecuteTestBetweenRollbackAndReapplyCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ChangeDocumentPackageTypeCommandArchive::ChangeDocumentPackageTypeCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_package_type_)*/0
  , /*decltype(_impl_.old_package_type_)*/0} {}
struct ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal() {}
  union {
    ChangeDocumentPackageTypeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal _ChangeDocumentPackageTypeCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CreateLocalStorageSnapshotCommandArchive::CreateLocalStorageSnapshotCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.snapshot_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal() {}
  union {
    CreateLocalStorageSnapshotCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal _CreateLocalStorageSnapshotCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR BlockDiffsAtCurrentRevisionCommand::BlockDiffsAtCurrentRevisionCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal() {}
  union {
    BlockDiffsAtCurrentRevisionCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal _BlockDiffsAtCurrentRevisionCommand_default_instance_;
PROTOBUF_CONSTEXPR RangeAddress::RangeAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_identifier_)*/{}
  , /*decltype(_impl_.range_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeAddressDefaultTypeInternal() {}
  union {
    RangeAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeAddressDefaultTypeInternal _RangeAddress_default_instance_;
PROTOBUF_CONSTEXPR Operation::Operation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_identifier_)*/{}
  , /*decltype(_impl_.range_list_)*/{}
  , /*decltype(_impl_._range_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.noop_)*/false
  , /*decltype(_impl_.preserve_lower_priority_location_)*/false
  , /*decltype(_impl_.dominating_)*/false
  , /*decltype(_impl_.property_id_)*/0u
  , /*decltype(_impl_.object_counter_space_)*/0
  , /*decltype(_impl_.object_count_)*/-1
  , /*decltype(_impl_.insert_length_)*/uint64_t{1u}
  , /*decltype(_impl_.type_)*/6
  , /*decltype(_impl_.transform_behavior_)*/7u
  , /*decltype(_impl_.from_index_)*/-1
  , /*decltype(_impl_.to_index_)*/-1} {}
struct OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationDefaultTypeInternal _Operation_default_instance_;
PROTOBUF_CONSTEXPR OperationTransformer::OperationTransformer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operations_)*/{}
  , /*decltype(_impl_.higher_priority_)*/false} {}
struct OperationTransformerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationTransformerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationTransformerDefaultTypeInternal() {}
  union {
    OperationTransformer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationTransformerDefaultTypeInternal _OperationTransformer_default_instance_;
PROTOBUF_CONSTEXPR TransformerEntry::TransformerEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transformer_)*/nullptr
  , /*decltype(_impl_.sequence_)*/uint64_t{0u}
  , /*decltype(_impl_.creation_time_)*/0} {}
struct TransformerEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformerEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformerEntryDefaultTypeInternal() {}
  union {
    TransformerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformerEntryDefaultTypeInternal _TransformerEntry_default_instance_;
PROTOBUF_CONSTEXPR OutgoingCommandQueueItem::OutgoingCommandQueueItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_to_data_map_entries_)*/{}
  , /*decltype(_impl_.large_data_list_)*/{}
  , /*decltype(_impl_.serialized_json_without_data_base64_encoded_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/nullptr
  , /*decltype(_impl_.serialized_json_without_data_base64_encoded_data_)*/nullptr} {}
struct OutgoingCommandQueueItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingCommandQueueItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingCommandQueueItemDefaultTypeInternal() {}
  union {
    OutgoingCommandQueueItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingCommandQueueItemDefaultTypeInternal _OutgoingCommandQueueItem_default_instance_;
PROTOBUF_CONSTEXPR OutgoingCommandQueueItemUUIDToDataMapEntry::OutgoingCommandQueueItemUUIDToDataMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr} {}
struct OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal() {}
  union {
    OutgoingCommandQueueItemUUIDToDataMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal _OutgoingCommandQueueItemUUIDToDataMapEntry_default_instance_;
PROTOBUF_CONSTEXPR CollaborationAppliedCommandDocumentRevisionMapping::CollaborationAppliedCommandDocumentRevisionMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remaining_command_operations_)*/{}
  , /*decltype(_impl_.command_)*/nullptr
  , /*decltype(_impl_.document_revision_identifier_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.document_revision_sequence_)*/0} {}
struct CollaborationAppliedCommandDocumentRevisionMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationAppliedCommandDocumentRevisionMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationAppliedCommandDocumentRevisionMappingDefaultTypeInternal() {}
  union {
    CollaborationAppliedCommandDocumentRevisionMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationAppliedCommandDocumentRevisionMappingDefaultTypeInternal _CollaborationAppliedCommandDocumentRevisionMapping_default_instance_;
PROTOBUF_CONSTEXPR CollaborationDocumentSessionState_AcknowledgementObserverEntry::CollaborationDocumentSessionState_AcknowledgementObserverEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acknowledgement_observers_)*/{}
  , /*decltype(_impl_.command_identifier_)*/nullptr} {}
struct CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal() {}
  union {
    CollaborationDocumentSessionState_AcknowledgementObserverEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal _CollaborationDocumentSessionState_AcknowledgementObserverEntry_default_instance_;
PROTOBUF_CONSTEXPR CollaborationDocumentSessionState::CollaborationDocumentSessionState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.collaborator_ids_)*/{}
  , /*decltype(_impl_.rsvp_command_queue_items_)*/{}
  , /*decltype(_impl_.collaborator_cursor_transformer_entries_)*/{}
  , /*decltype(_impl_.acknowledged_commands_pending_resume_process_diffs_)*/{}
  , /*decltype(_impl_.unprocessed_commands_pending_resume_process_diffs_)*/{}
  , /*decltype(_impl_.command_acknowledgement_observer_entries_)*/{}
  , /*decltype(_impl_.transformer_from_unprocessed_command_operations_entries_)*/{}
  , /*decltype(_impl_.skipped_acknowledged_commands_pending_resume_process_diffs_)*/{}
  , /*decltype(_impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_)*/{}
  , /*decltype(_impl_.mailbox_request_document_revision_identifier_)*/nullptr
  , /*decltype(_impl_.last_command_send_marker_identifier_)*/nullptr
  , /*decltype(_impl_.last_too_old_command_identifier_)*/nullptr
  , /*decltype(_impl_.unprocessed_operation_entries_pending_resume_process_diffs_)*/nullptr
  , /*decltype(_impl_.send_pending_command_queue_)*/nullptr
  , /*decltype(_impl_.last_enqueued_document_load_command_identifier_)*/nullptr
  , /*decltype(_impl_.mailbox_request_document_revision_sequence_)*/0
  , /*decltype(_impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_)*/false
  , /*decltype(_impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_)*/uint64_t{0u}
  , /*decltype(_impl_.count_of_command_queue_items_in_last_outgoing_command_group_)*/uint64_t{0u}
  , /*decltype(_impl_.last_command_send_marker_sequence_)*/0} {}
struct CollaborationDocumentSessionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationDocumentSessionStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationDocumentSessionStateDefaultTypeInternal() {}
  union {
    CollaborationDocumentSessionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationDocumentSessionStateDefaultTypeInternal _CollaborationDocumentSessionState_default_instance_;
PROTOBUF_CONSTEXPR NativeContentDescription::NativeContentDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_descriptions_)*/{}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct NativeContentDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NativeContentDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NativeContentDescriptionDefaultTypeInternal() {}
  union {
    NativeContentDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NativeContentDescriptionDefaultTypeInternal _NativeContentDescription_default_instance_;
PROTOBUF_CONSTEXPR StructuredTextImportSettings::StructuredTextImportSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.decimal_separators_)*/{}
  , /*decltype(_impl_.thousands_separators_)*/{}
  , /*decltype(_impl_.delimiters_)*/{}
  , /*decltype(_impl_.text_qualifiers_)*/{}
  , /*decltype(_impl_.column_offsets_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.starting_row_)*/0
  , /*decltype(_impl_.source_encoding_)*/uint64_t{0u}
  , /*decltype(_impl_.transpose_rows_and_columns_)*/false
  , /*decltype(_impl_.collapse_consecutive_)*/false
  , /*decltype(_impl_.automatic_delimiters_)*/false
  , /*decltype(_impl_.automatic_offsets_)*/false} {}
struct StructuredTextImportSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredTextImportSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredTextImportSettingsDefaultTypeInternal() {}
  union {
    StructuredTextImportSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredTextImportSettingsDefaultTypeInternal _StructuredTextImportSettings_default_instance_;
PROTOBUF_CONSTEXPR OperationStorageCommandOperationsEntry::OperationStorageCommandOperationsEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_identifier_)*/{}
  , /*decltype(_impl_.operations_)*/{}
  , /*decltype(_impl_.coalesced_command_entry_count_)*/uint64_t{0u}
  , /*decltype(_impl_.command_identifier_same_as_revision_identifier_)*/false
  , /*decltype(_impl_.server_originated_)*/false} {}
struct OperationStorageCommandOperationsEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStorageCommandOperationsEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStorageCommandOperationsEntryDefaultTypeInternal() {}
  union {
    OperationStorageCommandOperationsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStorageCommandOperationsEntryDefaultTypeInternal _OperationStorageCommandOperationsEntry_default_instance_;
PROTOBUF_CONSTEXPR OperationStorageEntry::OperationStorageEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_revision_identifier_)*/{}
  , /*decltype(_impl_.command_operation_entries_)*/{}
  , /*decltype(_impl_.file_format_version_)*/{}
  , /*decltype(_impl_._file_format_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.document_revision_sequence_delta_)*/0
  , /*decltype(_impl_.creation_time_diff_bucket_)*/0
  , /*decltype(_impl_.first_entry_creation_time_)*/0} {}
struct OperationStorageEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStorageEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStorageEntryDefaultTypeInternal() {}
  union {
    OperationStorageEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStorageEntryDefaultTypeInternal _OperationStorageEntry_default_instance_;
PROTOBUF_CONSTEXPR OperationStorageEntryArray::OperationStorageEntryArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_array_)*/nullptr} {}
struct OperationStorageEntryArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStorageEntryArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStorageEntryArrayDefaultTypeInternal() {}
  union {
    OperationStorageEntryArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStorageEntryArrayDefaultTypeInternal _OperationStorageEntryArray_default_instance_;
PROTOBUF_CONSTEXPR OperationStorageEntryArraySegment::OperationStorageEntryArraySegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.elements_)*/{}
  , /*decltype(_impl_.large_array_segment_)*/nullptr
  , /*decltype(_impl_.last_document_revision_sequence_before_segment_)*/0
  , /*decltype(_impl_.last_document_revision_sequence_)*/0
  , /*decltype(_impl_.segment_first_entry_creation_time_)*/0} {}
struct OperationStorageEntryArraySegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStorageEntryArraySegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStorageEntryArraySegmentDefaultTypeInternal() {}
  union {
    OperationStorageEntryArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStorageEntryArraySegmentDefaultTypeInternal _OperationStorageEntryArraySegment_default_instance_;
PROTOBUF_CONSTEXPR OperationStorage::OperationStorage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.last_document_revision_identifier_)*/{}
  , /*decltype(_impl_.last_unskippable_document_revision_before_entries_identifier_)*/{}
  , /*decltype(_impl_.last_unskippable_document_revision_in_entries_identifier_)*/{}
  , /*decltype(_impl_.entries_)*/nullptr
  , /*decltype(_impl_.days_with_an_entry_)*/nullptr
  , /*decltype(_impl_.operation_count_)*/uint64_t{0u}
  , /*decltype(_impl_.last_document_revision_sequence_)*/0
  , /*decltype(_impl_.last_unskippable_document_revision_before_entries_sequence_)*/0
  , /*decltype(_impl_.last_unskippable_document_revision_in_entries_sequence_)*/0} {}
struct OperationStorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStorageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStorageDefaultTypeInternal() {}
  union {
    OperationStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStorageDefaultTypeInternal _OperationStorage_default_instance_;
PROTOBUF_CONSTEXPR OutgoingCommandQueue::OutgoingCommandQueue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_object_array_)*/nullptr} {}
struct OutgoingCommandQueueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingCommandQueueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingCommandQueueDefaultTypeInternal() {}
  union {
    OutgoingCommandQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingCommandQueueDefaultTypeInternal _OutgoingCommandQueue_default_instance_;
PROTOBUF_CONSTEXPR OutgoingCommandQueueSegment::OutgoingCommandQueueSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_object_array_segment_)*/nullptr} {}
struct OutgoingCommandQueueSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingCommandQueueSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingCommandQueueSegmentDefaultTypeInternal() {}
  union {
    OutgoingCommandQueueSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingCommandQueueSegmentDefaultTypeInternal _OutgoingCommandQueueSegment_default_instance_;
PROTOBUF_CONSTEXPR DataReferenceRecord_ContainerUUIDToReferencedDataPair::DataReferenceRecord_ContainerUUIDToReferencedDataPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.container_uuid_)*/nullptr
  , /*decltype(_impl_.referenced_data_)*/nullptr
  , /*decltype(_impl_.reference_count_)*/0u} {}
struct DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal() {}
  union {
    DataReferenceRecord_ContainerUUIDToReferencedDataPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal _DataReferenceRecord_ContainerUUIDToReferencedDataPair_default_instance_;
PROTOBUF_CONSTEXPR DataReferenceRecord::DataReferenceRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.added_container_uuid_to_referenced_data_pairs_)*/{}
  , /*decltype(_impl_.removed_container_uuid_to_referenced_data_pairs_)*/{}
  , /*decltype(_impl_.unbounded_referenced_datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataReferenceRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataReferenceRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataReferenceRecordDefaultTypeInternal() {}
  union {
    DataReferenceRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataReferenceRecordDefaultTypeInternal _DataReferenceRecord_default_instance_;
PROTOBUF_CONSTEXPR CommandAssetChunkArchive::CommandAssetChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_chunk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.asset_chunk_length_)*/int64_t{0}
  , /*decltype(_impl_.resume_position_)*/int64_t{0}
  , /*decltype(_impl_.materialized_length_)*/int64_t{0}} {}
struct CommandAssetChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandAssetChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandAssetChunkArchiveDefaultTypeInternal() {}
  union {
    CommandAssetChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandAssetChunkArchiveDefaultTypeInternal _CommandAssetChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR AssetUploadStatusCommandArchive_AssetUploadStatusInfo::AssetUploadStatusCommandArchive_AssetUploadStatusInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upload_status_)*/0} {}
struct AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal() {}
  union {
    AssetUploadStatusCommandArchive_AssetUploadStatusInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal _AssetUploadStatusCommandArchive_AssetUploadStatusInfo_default_instance_;
PROTOBUF_CONSTEXPR AssetUploadStatusCommandArchive::AssetUploadStatusCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct AssetUploadStatusCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetUploadStatusCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetUploadStatusCommandArchiveDefaultTypeInternal() {}
  union {
    AssetUploadStatusCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetUploadStatusCommandArchiveDefaultTypeInternal _AssetUploadStatusCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR AssetUnmaterializedOnServerCommandArchive::AssetUnmaterializedOnServerCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.digest_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal() {}
  union {
    AssetUnmaterializedOnServerCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal _AssetUnmaterializedOnServerCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR PencilAnnotationUIState::PencilAnnotationUIState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pen_tool_color_)*/nullptr
  , /*decltype(_impl_.highlighter_tool_color_)*/nullptr
  , /*decltype(_impl_.current_tool_type_)*/0
  , /*decltype(_impl_.pen_tool_opacity_)*/0
  , /*decltype(_impl_.pen_tool_width_)*/0
  , /*decltype(_impl_.highlighter_tool_opacity_)*/0
  , /*decltype(_impl_.highlighter_tool_width_)*/0} {}
struct PencilAnnotationUIStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PencilAnnotationUIStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PencilAnnotationUIStateDefaultTypeInternal() {}
  union {
    PencilAnnotationUIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PencilAnnotationUIStateDefaultTypeInternal _PencilAnnotationUIState_default_instance_;
PROTOBUF_CONSTEXPR CollaboratorCursorArchive::CollaboratorCursorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_path_)*/nullptr} {}
struct CollaboratorCursorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaboratorCursorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaboratorCursorArchiveDefaultTypeInternal() {}
  union {
    CollaboratorCursorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaboratorCursorArchiveDefaultTypeInternal _CollaboratorCursorArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamArchive::ActivityStreamArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acknowledged_activity_array_)*/nullptr
  , /*decltype(_impl_.unacknowledged_local_activity_array_)*/nullptr
  , /*decltype(_impl_.author_cache_)*/nullptr
  , /*decltype(_impl_.unacknowledged_remote_activity_array_)*/nullptr
  , /*decltype(_impl_.activity_stream_transformation_state_)*/nullptr
  , /*decltype(_impl_.activity_counter_)*/nullptr
  , /*decltype(_impl_.did_upgrade_comments_to_activities_)*/false} {}
struct ActivityStreamArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamArchiveDefaultTypeInternal() {}
  union {
    ActivityStreamArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamArchiveDefaultTypeInternal _ActivityStreamArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamActivityArray::ActivityStreamActivityArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_array_)*/nullptr} {}
struct ActivityStreamActivityArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamActivityArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamActivityArrayDefaultTypeInternal() {}
  union {
    ActivityStreamActivityArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamActivityArrayDefaultTypeInternal _ActivityStreamActivityArray_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamActivityArraySegment::ActivityStreamActivityArraySegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_array_segment_)*/nullptr} {}
struct ActivityStreamActivityArraySegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamActivityArraySegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamActivityArraySegmentDefaultTypeInternal() {}
  union {
    ActivityStreamActivityArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamActivityArraySegmentDefaultTypeInternal _ActivityStreamActivityArraySegment_default_instance_;
PROTOBUF_CONSTEXPR ActivityArchive::ActivityArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cursor_collection_persistence_wrappers_)*/{}
  , /*decltype(_impl_.min_updatable_version_)*/{}
  , /*decltype(_impl_._min_updatable_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.author_identifier_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.additional_navigation_info_)*/nullptr
  , /*decltype(_impl_.nondirectional_action_type_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.revision_sequence_)*/0
  , /*decltype(_impl_.should_send_notification_)*/false
  , /*decltype(_impl_.did_prepare_serialized_string_on_server_)*/false
  , /*decltype(_impl_.oldest_revision_sequence_of_next_activities_)*/0
  , /*decltype(_impl_.action_sub_type_)*/0} {}
struct ActivityArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityArchiveDefaultTypeInternal() {}
  union {
    ActivityArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityArchiveDefaultTypeInternal _ActivityArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityAuthorArchive::ActivityAuthorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public_ids_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.share_participant_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.is_public_author_)*/false} {}
struct ActivityAuthorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityAuthorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityAuthorArchiveDefaultTypeInternal() {}
  union {
    ActivityAuthorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityAuthorArchiveDefaultTypeInternal _ActivityAuthorArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandActivityBehaviorArchive::CommandActivityBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_path_storages_)*/{}
  , /*decltype(_impl_.additional_navigation_info_)*/nullptr
  , /*decltype(_impl_.action_type_)*/0
  , /*decltype(_impl_.should_send_notification_)*/false
  , /*decltype(_impl_.action_sub_type_)*/0} {}
struct CommandActivityBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandActivityBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandActivityBehaviorArchiveDefaultTypeInternal() {}
  union {
    CommandActivityBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandActivityBehaviorArchiveDefaultTypeInternal _CommandActivityBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityCursorCollectionArchive::ActivityCursorCollectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_cursors_)*/{}
  , /*decltype(_impl_.text_cursor_)*/nullptr
  , /*decltype(_impl_.table_cursor_)*/nullptr
  , /*decltype(_impl_.cde_cursor_)*/nullptr
  , /*decltype(_impl_.chart_title_cursor_)*/nullptr
  , /*decltype(_impl_.gallery_item_cursor_)*/nullptr} {}
struct ActivityCursorCollectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityCursorCollectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityCursorCollectionArchiveDefaultTypeInternal() {}
  union {
    ActivityCursorCollectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityCursorCollectionArchiveDefaultTypeInternal _ActivityCursorCollectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityCursorCollectionPersistenceWrapperArchive::ActivityCursorCollectionPersistenceWrapperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activity_cursor_collection_)*/nullptr} {}
struct ActivityCursorCollectionPersistenceWrapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityCursorCollectionPersistenceWrapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityCursorCollectionPersistenceWrapperArchiveDefaultTypeInternal() {}
  union {
    ActivityCursorCollectionPersistenceWrapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityCursorCollectionPersistenceWrapperArchiveDefaultTypeInternal _ActivityCursorCollectionPersistenceWrapperArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityNavigationInfoArchive::ActivityNavigationInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityNavigationInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityNavigationInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityNavigationInfoArchiveDefaultTypeInternal() {}
  union {
    ActivityNavigationInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityNavigationInfoArchiveDefaultTypeInternal _ActivityNavigationInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR CommentActivityNavigationInfoArchive::CommentActivityNavigationInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comment_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_uuid_)*/nullptr
  , /*decltype(_impl_.storage_uuid_)*/nullptr} {}
struct CommentActivityNavigationInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommentActivityNavigationInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommentActivityNavigationInfoArchiveDefaultTypeInternal() {}
  union {
    CommentActivityNavigationInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommentActivityNavigationInfoArchiveDefaultTypeInternal _CommentActivityNavigationInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_ShareParticipantIDCache::ActivityAuthorCacheArchive_ShareParticipantIDCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.share_participant_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/nullptr} {}
struct ActivityAuthorCacheArchive_ShareParticipantIDCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_ShareParticipantIDCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityAuthorCacheArchive_ShareParticipantIDCacheDefaultTypeInternal() {}
  union {
    ActivityAuthorCacheArchive_ShareParticipantIDCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityAuthorCacheArchive_ShareParticipantIDCacheDefaultTypeInternal _ActivityAuthorCacheArchive_ShareParticipantIDCache_default_instance_;
PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_PublicIDCache::ActivityAuthorCacheArchive_PublicIDCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/nullptr} {}
struct ActivityAuthorCacheArchive_PublicIDCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_PublicIDCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityAuthorCacheArchive_PublicIDCacheDefaultTypeInternal() {}
  union {
    ActivityAuthorCacheArchive_PublicIDCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityAuthorCacheArchive_PublicIDCacheDefaultTypeInternal _ActivityAuthorCacheArchive_PublicIDCache_default_instance_;
PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_IndexCache::ActivityAuthorCacheArchive_IndexCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/nullptr
  , /*decltype(_impl_.author_index_)*/uint64_t{0u}} {}
struct ActivityAuthorCacheArchive_IndexCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_IndexCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityAuthorCacheArchive_IndexCacheDefaultTypeInternal() {}
  union {
    ActivityAuthorCacheArchive_IndexCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityAuthorCacheArchive_IndexCacheDefaultTypeInternal _ActivityAuthorCacheArchive_IndexCache_default_instance_;
PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_FirstJoinCache::ActivityAuthorCacheArchive_FirstJoinCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/nullptr
  , /*decltype(_impl_.first_join_date_)*/nullptr} {}
struct ActivityAuthorCacheArchive_FirstJoinCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive_FirstJoinCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityAuthorCacheArchive_FirstJoinCacheDefaultTypeInternal() {}
  union {
    ActivityAuthorCacheArchive_FirstJoinCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityAuthorCacheArchive_FirstJoinCacheDefaultTypeInternal _ActivityAuthorCacheArchive_FirstJoinCache_default_instance_;
PROTOBUF_CONSTEXPR ActivityAuthorCacheArchive::ActivityAuthorCacheArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.share_participant_id_cache_)*/{}
  , /*decltype(_impl_.fallback_public_id_cache_)*/{}
  , /*decltype(_impl_.index_cache_)*/{}
  , /*decltype(_impl_.first_join_cache_)*/{}
  , /*decltype(_impl_.authors_)*/{}
  , /*decltype(_impl_.author_identifiers_to_remove_)*/{}
  , /*decltype(_impl_.last_audit_date_)*/nullptr} {}
struct ActivityAuthorCacheArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityAuthorCacheArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityAuthorCacheArchiveDefaultTypeInternal() {}
  union {
    ActivityAuthorCacheArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityAuthorCacheArchiveDefaultTypeInternal _ActivityAuthorCacheArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityOnlyCommandArchive::ActivityOnlyCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ActivityOnlyCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityOnlyCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityOnlyCommandArchiveDefaultTypeInternal() {}
  union {
    ActivityOnlyCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityOnlyCommandArchiveDefaultTypeInternal _ActivityOnlyCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityNotificationItemArchive::ActivityNotificationItemArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activities_)*/{}
  , /*decltype(_impl_.unique_identifier_)*/nullptr
  , /*decltype(_impl_.first_timestamp_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct ActivityNotificationItemArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityNotificationItemArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityNotificationItemArchiveDefaultTypeInternal() {}
  union {
    ActivityNotificationItemArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityNotificationItemArchiveDefaultTypeInternal _ActivityNotificationItemArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unique_identifier_)*/nullptr
  , /*decltype(_impl_.attempts_)*/0u} {}
struct ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttemptsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttemptsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttemptsDefaultTypeInternal() {}
  union {
    ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttemptsDefaultTypeInternal _ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts_default_instance_;
PROTOBUF_CONSTEXPR ActivityNotificationParticipantCacheArchive::ActivityNotificationParticipantCacheArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notification_items_)*/{}
  , /*decltype(_impl_.sender_failed_to_enqueue_attempts_)*/{}
  , /*decltype(_impl_.private_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_edit_notification_item_sent_date_)*/nullptr
  , /*decltype(_impl_.last_comment_notification_item_sent_date_)*/nullptr} {}
struct ActivityNotificationParticipantCacheArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityNotificationParticipantCacheArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityNotificationParticipantCacheArchiveDefaultTypeInternal() {}
  union {
    ActivityNotificationParticipantCacheArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityNotificationParticipantCacheArchiveDefaultTypeInternal _ActivityNotificationParticipantCacheArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityNotificationQueueArchive::ActivityNotificationQueueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unprocessed_notification_items_)*/{}
  , /*decltype(_impl_.pending_participant_caches_)*/{}
  , /*decltype(_impl_.sent_participant_caches_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityNotificationQueueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityNotificationQueueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityNotificationQueueArchiveDefaultTypeInternal() {}
  union {
    ActivityNotificationQueueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityNotificationQueueArchiveDefaultTypeInternal _ActivityNotificationQueueArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamTransformationStateArchive::ActivityStreamTransformationStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transform_to_document_revision_identifier_)*/{}
  , /*decltype(_impl_.last_activity_coalesced_date_)*/nullptr
  , /*decltype(_impl_.next_activity_to_transform_index_)*/0
  , /*decltype(_impl_.oldest_revision_sequence_after_transformed_)*/0
  , /*decltype(_impl_.action_type_)*/0
  , /*decltype(_impl_.transform_to_document_revision_sequence_)*/0
  , /*decltype(_impl_.timestamp_of_last_activity_when_last_activity_coalescing_)*/0
  , /*decltype(_impl_.preserving_revision_sequence_order_)*/false} {}
struct ActivityStreamTransformationStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamTransformationStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamTransformationStateArchiveDefaultTypeInternal() {}
  union {
    ActivityStreamTransformationStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamTransformationStateArchiveDefaultTypeInternal _ActivityStreamTransformationStateArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamActivityCounterArchive_ActionTypeCounter::ActivityStreamActivityCounterArchive_ActionTypeCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_type_)*/0
  , /*decltype(_impl_.count_)*/0u} {}
struct ActivityStreamActivityCounterArchive_ActionTypeCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamActivityCounterArchive_ActionTypeCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamActivityCounterArchive_ActionTypeCounterDefaultTypeInternal() {}
  union {
    ActivityStreamActivityCounterArchive_ActionTypeCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamActivityCounterArchive_ActionTypeCounterDefaultTypeInternal _ActivityStreamActivityCounterArchive_ActionTypeCounter_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamActivityCounterArchive_CursorTypeCounter::ActivityStreamActivityCounterArchive_CursorTypeCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cursor_type_)*/0
  , /*decltype(_impl_.count_)*/0u} {}
struct ActivityStreamActivityCounterArchive_CursorTypeCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamActivityCounterArchive_CursorTypeCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamActivityCounterArchive_CursorTypeCounterDefaultTypeInternal() {}
  union {
    ActivityStreamActivityCounterArchive_CursorTypeCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamActivityCounterArchive_CursorTypeCounterDefaultTypeInternal _ActivityStreamActivityCounterArchive_CursorTypeCounter_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamActivityCounterArchive::ActivityStreamActivityCounterArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_type_counter_)*/{}
  , /*decltype(_impl_.cursor_type_counter_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityStreamActivityCounterArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamActivityCounterArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamActivityCounterArchiveDefaultTypeInternal() {}
  union {
    ActivityStreamActivityCounterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamActivityCounterArchiveDefaultTypeInternal _ActivityStreamActivityCounterArchive_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.date_to_audit_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndTypeDefaultTypeInternal() {}
  union {
    ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndTypeDefaultTypeInternal _ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType_default_instance_;
PROTOBUF_CONSTEXPR ActivityStreamRemovedAuthorAuditorPendingStateArchive::ActivityStreamRemovedAuthorAuditorPendingStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_author_identifiers_)*/{}
  , /*decltype(_impl_.dates_to_audit_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityStreamRemovedAuthorAuditorPendingStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityStreamRemovedAuthorAuditorPendingStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityStreamRemovedAuthorAuditorPendingStateArchiveDefaultTypeInternal() {}
  union {
    ActivityStreamRemovedAuthorAuditorPendingStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityStreamRemovedAuthorAuditorPendingStateArchiveDefaultTypeInternal _ActivityStreamRemovedAuthorAuditorPendingStateArchive_default_instance_;
}  // namespace TSK
static ::_pb::Metadata file_level_metadata_TSKArchives_2eproto[107];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSKArchives_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSKArchives_2eproto = nullptr;

const uint32_t TableStruct_TSKArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, _impl_.object_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, _impl_.behavior_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArray, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArray, _impl_.large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArraySegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArraySegment, _impl_.large_object_array_segment_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, _impl_.undo_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, _impl_.items_array_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, _impl_.fixed_radar_13365177_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArray, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArray, _impl_.large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArraySegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArraySegment, _impl_.large_object_array_segment_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, _impl_.items_array_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, _impl_.transformer_entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, _impl_.local_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, _impl_.undo_items_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, _impl_.redo_items_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _impl_.action_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _impl_.behavior_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _impl_.coalescing_group_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _impl_.revision_sequence_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, _impl_.did_coalesce_all_commands_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroupNode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroupNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroupNode, _impl_.command_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _impl_.coalescing_group_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _impl_.node_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.annotation_author_storage_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.activity_log_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.creation_locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.prevent_image_conversion_on_open_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.has_floating_locale_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.has_user_defined_locale_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.collaboration_operation_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.should_measure_negatively_tracked_text_correctly_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.use_optimized_text_vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.formatting_symbols_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _impl_.activity_stream_),
  0,
  2,
  ~0u,
  1,
  6,
  7,
  8,
  3,
  9,
  10,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, _impl_.symbol_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.calendar_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.numbering_system_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.short_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_short_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.short_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_short_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.am_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.pm_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.tiny_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_tiny_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.tiny_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_tiny_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.short_quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.standalone_short_quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.eras_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.long_eras_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.short_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.medium_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.long_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.full_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.short_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.medium_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.long_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.full_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.decimal_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.grouping_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.currency_decimal_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.currency_grouping_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.plus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.exponential_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.percent_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.per_mille_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.infinity_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.nan_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.decimal_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.scientific_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.percent_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.currency_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _impl_.currency_symbols_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, _impl_.collaboration_command_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, _impl_.collaboration_session_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.command_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.undo_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.redo_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.undo_action_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.redo_action_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.web_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.is_in_collaboration_mode_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.action_string_localization_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.collaboration_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.activity_notification_map_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.removed_author_auditor_pending_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.command_selection_behavior_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.view_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.collaboration_command_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _impl_.collaboration_session_state_),
  3,
  12,
  13,
  0,
  1,
  6,
  14,
  2,
  9,
  10,
  11,
  4,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, _impl_.view_state_root_),
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, _impl_.document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, _impl_.document_revision_identifier_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_.undoredostate_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_.undocollection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_.shadowed_by_transform_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_.shadowed_by_commit_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_.remote_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_.should_hold_until_group_commit_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _impl_.server_originated_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _impl_.commands_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _impl_.process_results_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _impl_.action_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _impl_.can_coalesce_group_),
  1,
  ~0u,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _impl_.inducing_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _impl_.induced_commands_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _impl_.indexes_of_processed_induced_commands_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _impl_.propagatable_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _impl_.propagatable_command_process_result_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _impl_.propagating_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _impl_.propagating_command_process_result_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _impl_.command_process_result_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _impl_.final_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _impl_.final_command_process_result_),
  0,
  1,
  3,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandContainerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandContainerArchive, _impl_.commands_),
  PROTOBUF_FIELD_OFFSET(::TSK::ProgressiveCommandGroupArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ProgressiveCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ProgressiveCommandGroupArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.format_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.decimal_places_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.negative_style_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.show_thousands_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.use_accounting_style_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.duration_style_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.base_places_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.base_use_minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.fraction_accuracy_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.duration_unit_smallest_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.custom_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.custom_format_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.scale_factor_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.requires_fraction_replacement_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.control_minimum_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.control_maximum_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.control_increment_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.control_format_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.slider_orientation_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.slider_position_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.decimal_width_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.min_integer_width_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.num_nonspace_integer_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.num_nonspace_decimal_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.index_from_right_last_integer_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.interstitial_strings_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.inters_str_insertion_indexes_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.num_hash_decimal_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.total_num_decimal_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.is_complex_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.contains_integer_token_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.multiple_choice_list_initial_value_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.multiple_choice_list_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.use_automatic_duration_units_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.custom_uid_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.custom_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.uses_plus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.bool_true_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _impl_.bool_false_string_),
  8,
  9,
  0,
  10,
  13,
  14,
  11,
  12,
  17,
  15,
  18,
  16,
  29,
  1,
  19,
  20,
  22,
  2,
  21,
  30,
  24,
  25,
  26,
  23,
  27,
  28,
  33,
  34,
  35,
  36,
  37,
  ~0u,
  5,
  38,
  39,
  31,
  32,
  40,
  41,
  42,
  6,
  7,
  43,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _impl_.condition_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _impl_.condition_value_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _impl_.condition_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _impl_.condition_value_dbl_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _impl_.format_type_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _impl_.default_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _impl_.conditions_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _impl_.format_type_),
  0,
  2,
  1,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatListArchive, _impl_.uuids_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatListArchive, _impl_.custom_formats_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _impl_.public_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _impl_.is_public_author_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _impl_.public_ids_),
  0,
  2,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, _impl_.change_color_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorStorageArchive, _impl_.annotation_author_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _impl_.annotation_author_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _impl_.old_color_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::SetActivityAuthorShareParticipantIDCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetActivityAuthorShareParticipantIDCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::SetActivityAuthorShareParticipantIDCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetActivityAuthorShareParticipantIDCommandArchive, _impl_.activity_author_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetActivityAuthorShareParticipantIDCommandArchive, _impl_.share_participant_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetActivityAuthorShareParticipantIDCommandArchive, _impl_.old_share_participant_id_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorSelectionPathStorageArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorSelectionPathStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorSelectionPathStorageArchive, _impl_.archived_selection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorSelectionPathStorageArchive, _impl_.archived_old_selection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorSelectionPathStorageArchive, _impl_.archived_new_selection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorSelectionPathStorageArchive, _impl_.forward_selection_path_transformer_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorSelectionPathStorageArchive, _impl_.reverse_selection_path_transformer_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorArchive, _impl_.selection_behavior_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandBehaviorArchive, _impl_.activity_behavior_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _impl_.selection_path_storage_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _impl_.selection_flags_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _impl_.additional_forward_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _impl_.additional_reverse_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _impl_.additional_selection_behaviors_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathTransformerArchive, _impl_.selection_transformers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathArchive, _impl_.ordered_selections_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSelectionArchive, _impl_.document_root_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::IdOperationArgs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::IdOperationArgs, _impl_.id_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, _impl_.index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, _impl_.index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, _impl_.from_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, _impl_.to_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, _impl_.from_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, _impl_.to_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::NullCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::NullCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::NullCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::GroupCommitCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::GroupCommitCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::GroupCommitCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::GroupCommitCommandArchive, _impl_.can_coalesce_group_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::UpgradeDocPostProcessingCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::UpgradeDocPostProcessingCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::UpgradeDocPostProcessingCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionCommitCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionCommitCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionCommitCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCommitCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCommitCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCommitCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCommitCommandArchive, _impl_.activity_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCommitCommandArchive, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCommitCommandArchive, _impl_.was_activity_committed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, _impl_.new_package_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, _impl_.old_package_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, _impl_.snapshot_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::BlockDiffsAtCurrentRevisionCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::BlockDiffsAtCurrentRevisionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::BlockDiffsAtCurrentRevisionCommand, _impl_.super_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::RangeAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::RangeAddress, _impl_.address_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::RangeAddress, _impl_.range_list_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.noop_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.address_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.insert_length_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.preserve_lower_priority_location_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.range_list_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.transform_behavior_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.property_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.from_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.to_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.dominating_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.object_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _impl_.object_counter_space_),
  7,
  0,
  ~0u,
  6,
  1,
  ~0u,
  8,
  3,
  9,
  10,
  2,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, _impl_.higher_priority_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, _impl_.operations_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, _impl_.creation_time_),
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, _impl_.transformer_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _impl_.serialized_json_without_data_base64_encoded_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _impl_.serialized_json_without_data_base64_encoded_data_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _impl_.uuid_to_data_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _impl_.large_data_list_),
  1,
  0,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, _impl_.data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationAppliedCommandDocumentRevisionMapping, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationAppliedCommandDocumentRevisionMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationAppliedCommandDocumentRevisionMapping, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationAppliedCommandDocumentRevisionMapping, _impl_.document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationAppliedCommandDocumentRevisionMapping, _impl_.document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationAppliedCommandDocumentRevisionMapping, _impl_.remaining_command_operations_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationAppliedCommandDocumentRevisionMapping, _impl_.timestamp_),
  0,
  1,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, _impl_.command_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, _impl_.acknowledgement_observers_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.collaborator_ids_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.rsvp_command_queue_items_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.collaborator_cursor_transformer_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.acknowledged_commands_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.unprocessed_commands_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.command_acknowledgement_observer_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.transformer_from_unprocessed_command_operations_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.mailbox_request_document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.mailbox_request_document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.last_command_send_marker_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.last_command_send_marker_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.skipped_acknowledged_commands_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.last_too_old_command_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.unprocessed_operation_entries_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.send_pending_command_queue_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.last_enqueued_document_load_command_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _impl_.count_of_command_queue_items_in_last_outgoing_command_group_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  7,
  10,
  1,
  ~0u,
  2,
  3,
  4,
  8,
  5,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _impl_.app_version_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _impl_.document_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _impl_.drawable_descriptions_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.starting_row_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.decimal_separators_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.thousands_separators_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.transpose_rows_and_columns_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.delimiters_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.text_qualifiers_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.collapse_consecutive_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.column_offsets_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.automatic_delimiters_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.automatic_offsets_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _impl_.source_encoding_),
  1,
  2,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  5,
  0,
  6,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _impl_.command_identifier_same_as_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _impl_.command_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _impl_.operations_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _impl_.server_originated_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _impl_.coalesced_command_entry_count_),
  1,
  ~0u,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _impl_.document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _impl_.document_revision_sequence_delta_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _impl_.command_operation_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _impl_.first_entry_creation_time_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _impl_.creation_time_diff_bucket_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _impl_.file_format_version_),
  ~0u,
  0,
  ~0u,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArray, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArray, _impl_.large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _impl_.large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _impl_.elements_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _impl_.last_document_revision_sequence_before_segment_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _impl_.last_document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _impl_.segment_first_entry_creation_time_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.operation_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.last_document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.last_document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.last_unskippable_document_revision_before_entries_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.last_unskippable_document_revision_before_entries_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.last_unskippable_document_revision_in_entries_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.last_unskippable_document_revision_in_entries_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _impl_.days_with_an_entry_),
  0,
  2,
  3,
  ~0u,
  4,
  ~0u,
  5,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueue, _impl_.large_object_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueSegment, _impl_.large_object_array_segment_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, _impl_.container_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, _impl_.referenced_data_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, _impl_.reference_count_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, _impl_.added_container_uuid_to_referenced_data_pairs_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, _impl_.removed_container_uuid_to_referenced_data_pairs_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, _impl_.unbounded_referenced_datas_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _impl_.asset_chunk_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _impl_.asset_chunk_length_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _impl_.resume_position_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _impl_.materialized_length_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, _impl_.upload_status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, _impl_.info_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, _impl_.digest_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_.current_tool_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_.pen_tool_color_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_.pen_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_.pen_tool_width_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_.highlighter_tool_color_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_.highlighter_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _impl_.highlighter_tool_width_),
  2,
  0,
  3,
  4,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaboratorCursorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaboratorCursorArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaboratorCursorArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaboratorCursorArchive, _impl_.id_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_.acknowledged_activity_array_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_.unacknowledged_local_activity_array_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_.author_cache_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_.unacknowledged_remote_activity_array_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_.did_upgrade_comments_to_activities_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_.activity_stream_transformation_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamArchive, _impl_.activity_counter_),
  0,
  1,
  2,
  3,
  6,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityArray, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityArray, _impl_.large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityArraySegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityArraySegment, _impl_.large_array_segment_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.cursor_collection_persistence_wrappers_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.author_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.nondirectional_action_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.should_send_notification_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.additional_navigation_info_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.did_prepare_serialized_string_on_server_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.oldest_revision_sequence_of_next_activities_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.action_sub_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityArchive, _impl_.min_updatable_version_),
  ~0u,
  0,
  3,
  4,
  6,
  1,
  5,
  2,
  7,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorArchive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorArchive, _impl_.public_ids_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorArchive, _impl_.is_public_author_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorArchive, _impl_.share_participant_id_),
  0,
  2,
  ~0u,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandActivityBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandActivityBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandActivityBehaviorArchive, _impl_.selection_path_storages_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandActivityBehaviorArchive, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandActivityBehaviorArchive, _impl_.should_send_notification_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandActivityBehaviorArchive, _impl_.additional_navigation_info_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandActivityBehaviorArchive, _impl_.action_sub_type_),
  ~0u,
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _impl_.id_cursors_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _impl_.text_cursor_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _impl_.table_cursor_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _impl_.cde_cursor_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _impl_.chart_title_cursor_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionArchive, _impl_.gallery_item_cursor_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionPersistenceWrapperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionPersistenceWrapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityCursorCollectionPersistenceWrapperArchive, _impl_.activity_cursor_collection_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNavigationInfoArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNavigationInfoArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommentActivityNavigationInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommentActivityNavigationInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::CommentActivityNavigationInfoArchive, _impl_.comment_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommentActivityNavigationInfoArchive, _impl_.parent_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommentActivityNavigationInfoArchive, _impl_.storage_uuid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache, _impl_.share_participant_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_PublicIDCache, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_PublicIDCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_PublicIDCache, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_PublicIDCache, _impl_.public_identifier_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_IndexCache, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_IndexCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_IndexCache, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_IndexCache, _impl_.author_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_FirstJoinCache, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_FirstJoinCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_FirstJoinCache, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive_FirstJoinCache, _impl_.first_join_date_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_.share_participant_id_cache_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_.fallback_public_id_cache_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_.index_cache_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_.first_join_cache_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_.authors_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_.last_audit_date_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityAuthorCacheArchive, _impl_.author_identifiers_to_remove_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityOnlyCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityOnlyCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityOnlyCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationItemArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationItemArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationItemArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationItemArchive, _impl_.unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationItemArchive, _impl_.activities_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationItemArchive, _impl_.first_timestamp_),
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts, _impl_.unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts, _impl_.attempts_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive, _impl_.notification_items_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive, _impl_.last_edit_notification_item_sent_date_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive, _impl_.sender_failed_to_enqueue_attempts_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive, _impl_.private_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationParticipantCacheArchive, _impl_.last_comment_notification_item_sent_date_),
  ~0u,
  1,
  ~0u,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationQueueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationQueueArchive, _impl_.unprocessed_notification_items_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationQueueArchive, _impl_.pending_participant_caches_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityNotificationQueueArchive, _impl_.sent_participant_caches_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.next_activity_to_transform_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.oldest_revision_sequence_after_transformed_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.last_activity_coalesced_date_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.transform_to_document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.transform_to_document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.timestamp_of_last_activity_when_last_activity_coalescing_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamTransformationStateArchive, _impl_.preserving_revision_sequence_order_),
  1,
  2,
  0,
  3,
  4,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter, _impl_.count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter, _impl_.cursor_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter, _impl_.count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive, _impl_.action_type_counter_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamActivityCounterArchive, _impl_.cursor_type_counter_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType, _impl_.date_to_audit_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType, _impl_.type_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive, _impl_.current_author_identifiers_),
  PROTOBUF_FIELD_OFFSET(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive, _impl_.dates_to_audit_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::TSK::TreeNode)},
  { 12, 20, -1, sizeof(::TSK::LocalCommandHistoryItem)},
  { 22, 29, -1, sizeof(::TSK::LocalCommandHistoryArray)},
  { 30, 37, -1, sizeof(::TSK::LocalCommandHistoryArraySegment)},
  { 38, 47, -1, sizeof(::TSK::LocalCommandHistory)},
  { 50, 57, -1, sizeof(::TSK::CollaborationCommandHistoryArray)},
  { 58, 65, -1, sizeof(::TSK::CollaborationCommandHistoryArraySegment)},
  { 66, 74, -1, sizeof(::TSK::CollaborationCommandHistory_ItemList)},
  { 76, 85, -1, sizeof(::TSK::CollaborationCommandHistory)},
  { 88, 99, -1, sizeof(::TSK::CollaborationCommandHistoryItem)},
  { 104, 112, -1, sizeof(::TSK::CollaborationCommandHistoryCoalescingGroup)},
  { 114, 121, -1, sizeof(::TSK::CollaborationCommandHistoryCoalescingGroupNode)},
  { 122, 130, -1, sizeof(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)},
  { 132, 150, -1, sizeof(::TSK::DocumentArchive)},
  { 162, 170, -1, sizeof(::TSK::FormattingSymbolsArchive_CurrencySymbol)},
  { 172, 226, -1, sizeof(::TSK::FormattingSymbolsArchive)},
  { 274, 282, -1, sizeof(::TSK::DocumentSupportCollaborationState)},
  { 284, 305, -1, sizeof(::TSK::DocumentSupportArchive)},
  { 320, 329, -1, sizeof(::TSK::ViewStateArchive)},
  { 332, 345, -1, sizeof(::TSK::CommandArchive)},
  { 352, 363, -1, sizeof(::TSK::CommandGroupArchive)},
  { 368, 378, -1, sizeof(::TSK::InducedCommandCollectionArchive)},
  { 382, 393, -1, sizeof(::TSK::PropagatedCommandCollectionArchive)},
  { 398, 409, -1, sizeof(::TSK::FinalCommandPairArchive)},
  { 414, -1, -1, sizeof(::TSK::CommandContainerArchive)},
  { 421, 428, -1, sizeof(::TSK::ProgressiveCommandGroupArchive)},
  { 429, 480, -1, sizeof(::TSK::FormatStructArchive)},
  { 525, 535, -1, sizeof(::TSK::CustomFormatArchive_Condition)},
  { 539, 550, -1, sizeof(::TSK::CustomFormatArchive)},
  { 555, -1, -1, sizeof(::TSK::CustomFormatListArchive)},
  { 563, 574, -1, sizeof(::TSK::AnnotationAuthorArchive)},
  { 579, 587, -1, sizeof(::TSK::DeprecatedChangeAuthorArchive)},
  { 589, -1, -1, sizeof(::TSK::AnnotationAuthorStorageArchive)},
  { 596, 606, -1, sizeof(::TSK::SetAnnotationAuthorColorCommandArchive)},
  { 610, 620, -1, sizeof(::TSK::SetActivityAuthorShareParticipantIDCommandArchive)},
  { 624, 635, -1, sizeof(::TSK::CommandBehaviorSelectionPathStorageArchive)},
  { 640, 648, -1, sizeof(::TSK::CommandBehaviorArchive)},
  { 650, 661, -1, sizeof(::TSK::CommandSelectionBehaviorArchive)},
  { 666, -1, -1, sizeof(::TSK::SelectionPathTransformerArchive)},
  { 673, -1, -1, sizeof(::TSK::SelectionPathArchive)},
  { 680, 687, -1, sizeof(::TSK::DocumentSelectionArchive)},
  { 688, 695, -1, sizeof(::TSK::IdOperationArgs)},
  { 696, 704, -1, sizeof(::TSK::AddIdOperationArgs)},
  { 706, 714, -1, sizeof(::TSK::RemoveIdOperationArgs)},
  { 716, 725, -1, sizeof(::TSK::RearrangeIdOperationArgs)},
  { 728, 737, -1, sizeof(::TSK::IdPlacementOperationArgs)},
  { 740, 747, -1, sizeof(::TSK::NullCommandArchive)},
  { 748, 756, -1, sizeof(::TSK::GroupCommitCommandArchive)},
  { 758, 765, -1, sizeof(::TSK::UpgradeDocPostProcessingCommandArchive)},
  { 766, 773, -1, sizeof(::TSK::InducedCommandCollectionCommitCommandArchive)},
  { 774, 784, -1, sizeof(::TSK::ActivityCommitCommandArchive)},
  { 788, 795, -1, sizeof(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive)},
  { 796, 805, -1, sizeof(::TSK::ChangeDocumentPackageTypeCommandArchive)},
  { 808, 816, -1, sizeof(::TSK::CreateLocalStorageSnapshotCommandArchive)},
  { 818, 825, -1, sizeof(::TSK::BlockDiffsAtCurrentRevisionCommand)},
  { 826, -1, -1, sizeof(::TSK::RangeAddress)},
  { 834, 853, -1, sizeof(::TSK::Operation)},
  { 866, 874, -1, sizeof(::TSK::OperationTransformer)},
  { 876, 885, -1, sizeof(::TSK::TransformerEntry)},
  { 888, 899, -1, sizeof(::TSK::OutgoingCommandQueueItem)},
  { 904, 912, -1, sizeof(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry)},
  { 914, 925, -1, sizeof(::TSK::CollaborationAppliedCommandDocumentRevisionMapping)},
  { 930, 938, -1, sizeof(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry)},
  { 940, 966, -1, sizeof(::TSK::CollaborationDocumentSessionState)},
  { 986, 996, -1, sizeof(::TSK::NativeContentDescription)},
  { 1000, 1018, -1, sizeof(::TSK::StructuredTextImportSettings)},
  { 1030, 1041, -1, sizeof(::TSK::OperationStorageCommandOperationsEntry)},
  { 1046, 1058, -1, sizeof(::TSK::OperationStorageEntry)},
  { 1064, 1071, -1, sizeof(::TSK::OperationStorageEntryArray)},
  { 1072, 1083, -1, sizeof(::TSK::OperationStorageEntryArraySegment)},
  { 1088, 1103, -1, sizeof(::TSK::OperationStorage)},
  { 1112, 1119, -1, sizeof(::TSK::OutgoingCommandQueue)},
  { 1120, 1127, -1, sizeof(::TSK::OutgoingCommandQueueSegment)},
  { 1128, 1137, -1, sizeof(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair)},
  { 1140, -1, -1, sizeof(::TSK::DataReferenceRecord)},
  { 1149, 1161, -1, sizeof(::TSK::CommandAssetChunkArchive)},
  { 1167, 1175, -1, sizeof(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo)},
  { 1177, 1185, -1, sizeof(::TSK::AssetUploadStatusCommandArchive)},
  { 1187, 1195, -1, sizeof(::TSK::AssetUnmaterializedOnServerCommandArchive)},
  { 1197, 1210, -1, sizeof(::TSK::PencilAnnotationUIState)},
  { 1217, 1224, -1, sizeof(::TSK::CollaboratorCursorArchive)},
  { 1225, 1238, -1, sizeof(::TSK::ActivityStreamArchive)},
  { 1245, 1252, -1, sizeof(::TSK::ActivityStreamActivityArray)},
  { 1253, 1260, -1, sizeof(::TSK::ActivityStreamActivityArraySegment)},
  { 1261, 1279, -1, sizeof(::TSK::ActivityArchive)},
  { 1291, 1302, -1, sizeof(::TSK::ActivityAuthorArchive)},
  { 1307, 1318, -1, sizeof(::TSK::CommandActivityBehaviorArchive)},
  { 1323, 1335, -1, sizeof(::TSK::ActivityCursorCollectionArchive)},
  { 1341, 1348, -1, sizeof(::TSK::ActivityCursorCollectionPersistenceWrapperArchive)},
  { 1349, -1, -1, sizeof(::TSK::ActivityNavigationInfoArchive)},
  { 1355, 1364, -1, sizeof(::TSK::CommentActivityNavigationInfoArchive)},
  { 1367, 1375, -1, sizeof(::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache)},
  { 1377, 1385, -1, sizeof(::TSK::ActivityAuthorCacheArchive_PublicIDCache)},
  { 1387, 1395, -1, sizeof(::TSK::ActivityAuthorCacheArchive_IndexCache)},
  { 1397, 1405, -1, sizeof(::TSK::ActivityAuthorCacheArchive_FirstJoinCache)},
  { 1407, 1420, -1, sizeof(::TSK::ActivityAuthorCacheArchive)},
  { 1427, 1434, -1, sizeof(::TSK::ActivityOnlyCommandArchive)},
  { 1435, 1445, -1, sizeof(::TSK::ActivityNotificationItemArchive)},
  { 1449, 1457, -1, sizeof(::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts)},
  { 1459, 1470, -1, sizeof(::TSK::ActivityNotificationParticipantCacheArchive)},
  { 1475, -1, -1, sizeof(::TSK::ActivityNotificationQueueArchive)},
  { 1484, 1498, -1, sizeof(::TSK::ActivityStreamTransformationStateArchive)},
  { 1506, 1514, -1, sizeof(::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter)},
  { 1516, 1524, -1, sizeof(::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter)},
  { 1526, -1, -1, sizeof(::TSK::ActivityStreamActivityCounterArchive)},
  { 1534, 1542, -1, sizeof(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType)},
  { 1544, -1, -1, sizeof(::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSK::_TreeNode_default_instance_._instance,
  &::TSK::_LocalCommandHistoryItem_default_instance_._instance,
  &::TSK::_LocalCommandHistoryArray_default_instance_._instance,
  &::TSK::_LocalCommandHistoryArraySegment_default_instance_._instance,
  &::TSK::_LocalCommandHistory_default_instance_._instance,
  &::TSK::_CollaborationCommandHistoryArray_default_instance_._instance,
  &::TSK::_CollaborationCommandHistoryArraySegment_default_instance_._instance,
  &::TSK::_CollaborationCommandHistory_ItemList_default_instance_._instance,
  &::TSK::_CollaborationCommandHistory_default_instance_._instance,
  &::TSK::_CollaborationCommandHistoryItem_default_instance_._instance,
  &::TSK::_CollaborationCommandHistoryCoalescingGroup_default_instance_._instance,
  &::TSK::_CollaborationCommandHistoryCoalescingGroupNode_default_instance_._instance,
  &::TSK::_CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver_default_instance_._instance,
  &::TSK::_DocumentArchive_default_instance_._instance,
  &::TSK::_FormattingSymbolsArchive_CurrencySymbol_default_instance_._instance,
  &::TSK::_FormattingSymbolsArchive_default_instance_._instance,
  &::TSK::_DocumentSupportCollaborationState_default_instance_._instance,
  &::TSK::_DocumentSupportArchive_default_instance_._instance,
  &::TSK::_ViewStateArchive_default_instance_._instance,
  &::TSK::_CommandArchive_default_instance_._instance,
  &::TSK::_CommandGroupArchive_default_instance_._instance,
  &::TSK::_InducedCommandCollectionArchive_default_instance_._instance,
  &::TSK::_PropagatedCommandCollectionArchive_default_instance_._instance,
  &::TSK::_FinalCommandPairArchive_default_instance_._instance,
  &::TSK::_CommandContainerArchive_default_instance_._instance,
  &::TSK::_ProgressiveCommandGroupArchive_default_instance_._instance,
  &::TSK::_FormatStructArchive_default_instance_._instance,
  &::TSK::_CustomFormatArchive_Condition_default_instance_._instance,
  &::TSK::_CustomFormatArchive_default_instance_._instance,
  &::TSK::_CustomFormatListArchive_default_instance_._instance,
  &::TSK::_AnnotationAuthorArchive_default_instance_._instance,
  &::TSK::_DeprecatedChangeAuthorArchive_default_instance_._instance,
  &::TSK::_AnnotationAuthorStorageArchive_default_instance_._instance,
  &::TSK::_SetAnnotationAuthorColorCommandArchive_default_instance_._instance,
  &::TSK::_SetActivityAuthorShareParticipantIDCommandArchive_default_instance_._instance,
  &::TSK::_CommandBehaviorSelectionPathStorageArchive_default_instance_._instance,
  &::TSK::_CommandBehaviorArchive_default_instance_._instance,
  &::TSK::_CommandSelectionBehaviorArchive_default_instance_._instance,
  &::TSK::_SelectionPathTransformerArchive_default_instance_._instance,
  &::TSK::_SelectionPathArchive_default_instance_._instance,
  &::TSK::_DocumentSelectionArchive_default_instance_._instance,
  &::TSK::_IdOperationArgs_default_instance_._instance,
  &::TSK::_AddIdOperationArgs_default_instance_._instance,
  &::TSK::_RemoveIdOperationArgs_default_instance_._instance,
  &::TSK::_RearrangeIdOperationArgs_default_instance_._instance,
  &::TSK::_IdPlacementOperationArgs_default_instance_._instance,
  &::TSK::_NullCommandArchive_default_instance_._instance,
  &::TSK::_GroupCommitCommandArchive_default_instance_._instance,
  &::TSK::_UpgradeDocPostProcessingCommandArchive_default_instance_._instance,
  &::TSK::_InducedCommandCollectionCommitCommandArchive_default_instance_._instance,
  &::TSK::_ActivityCommitCommandArchive_default_instance_._instance,
  &::TSK::_ExecuteTestBetweenRollbackAndReapplyCommandArchive_default_instance_._instance,
  &::TSK::_ChangeDocumentPackageTypeCommandArchive_default_instance_._instance,
  &::TSK::_CreateLocalStorageSnapshotCommandArchive_default_instance_._instance,
  &::TSK::_BlockDiffsAtCurrentRevisionCommand_default_instance_._instance,
  &::TSK::_RangeAddress_default_instance_._instance,
  &::TSK::_Operation_default_instance_._instance,
  &::TSK::_OperationTransformer_default_instance_._instance,
  &::TSK::_TransformerEntry_default_instance_._instance,
  &::TSK::_OutgoingCommandQueueItem_default_instance_._instance,
  &::TSK::_OutgoingCommandQueueItemUUIDToDataMapEntry_default_instance_._instance,
  &::TSK::_CollaborationAppliedCommandDocumentRevisionMapping_default_instance_._instance,
  &::TSK::_CollaborationDocumentSessionState_AcknowledgementObserverEntry_default_instance_._instance,
  &::TSK::_CollaborationDocumentSessionState_default_instance_._instance,
  &::TSK::_NativeContentDescription_default_instance_._instance,
  &::TSK::_StructuredTextImportSettings_default_instance_._instance,
  &::TSK::_OperationStorageCommandOperationsEntry_default_instance_._instance,
  &::TSK::_OperationStorageEntry_default_instance_._instance,
  &::TSK::_OperationStorageEntryArray_default_instance_._instance,
  &::TSK::_OperationStorageEntryArraySegment_default_instance_._instance,
  &::TSK::_OperationStorage_default_instance_._instance,
  &::TSK::_OutgoingCommandQueue_default_instance_._instance,
  &::TSK::_OutgoingCommandQueueSegment_default_instance_._instance,
  &::TSK::_DataReferenceRecord_ContainerUUIDToReferencedDataPair_default_instance_._instance,
  &::TSK::_DataReferenceRecord_default_instance_._instance,
  &::TSK::_CommandAssetChunkArchive_default_instance_._instance,
  &::TSK::_AssetUploadStatusCommandArchive_AssetUploadStatusInfo_default_instance_._instance,
  &::TSK::_AssetUploadStatusCommandArchive_default_instance_._instance,
  &::TSK::_AssetUnmaterializedOnServerCommandArchive_default_instance_._instance,
  &::TSK::_PencilAnnotationUIState_default_instance_._instance,
  &::TSK::_CollaboratorCursorArchive_default_instance_._instance,
  &::TSK::_ActivityStreamArchive_default_instance_._instance,
  &::TSK::_ActivityStreamActivityArray_default_instance_._instance,
  &::TSK::_ActivityStreamActivityArraySegment_default_instance_._instance,
  &::TSK::_ActivityArchive_default_instance_._instance,
  &::TSK::_ActivityAuthorArchive_default_instance_._instance,
  &::TSK::_CommandActivityBehaviorArchive_default_instance_._instance,
  &::TSK::_ActivityCursorCollectionArchive_default_instance_._instance,
  &::TSK::_ActivityCursorCollectionPersistenceWrapperArchive_default_instance_._instance,
  &::TSK::_ActivityNavigationInfoArchive_default_instance_._instance,
  &::TSK::_CommentActivityNavigationInfoArchive_default_instance_._instance,
  &::TSK::_ActivityAuthorCacheArchive_ShareParticipantIDCache_default_instance_._instance,
  &::TSK::_ActivityAuthorCacheArchive_PublicIDCache_default_instance_._instance,
  &::TSK::_ActivityAuthorCacheArchive_IndexCache_default_instance_._instance,
  &::TSK::_ActivityAuthorCacheArchive_FirstJoinCache_default_instance_._instance,
  &::TSK::_ActivityAuthorCacheArchive_default_instance_._instance,
  &::TSK::_ActivityOnlyCommandArchive_default_instance_._instance,
  &::TSK::_ActivityNotificationItemArchive_default_instance_._instance,
  &::TSK::_ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts_default_instance_._instance,
  &::TSK::_ActivityNotificationParticipantCacheArchive_default_instance_._instance,
  &::TSK::_ActivityNotificationQueueArchive_default_instance_._instance,
  &::TSK::_ActivityStreamTransformationStateArchive_default_instance_._instance,
  &::TSK::_ActivityStreamActivityCounterArchive_ActionTypeCounter_default_instance_._instance,
  &::TSK::_ActivityStreamActivityCounterArchive_CursorTypeCounter_default_instance_._instance,
  &::TSK::_ActivityStreamActivityCounterArchive_default_instance_._instance,
  &::TSK::_ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType_default_instance_._instance,
  &::TSK::_ActivityStreamRemovedAuthorAuditorPendingStateArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSKArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSKArchives.proto\022\003TSK\032\021TSPMessages.pr"
  "oto\"Z\n\010TreeNode\022\014\n\004name\030\001 \001(\t\022 \n\010childre"
  "n\030\002 \003(\0132\016.TSP.Reference\022\036\n\006object\030\003 \001(\0132"
  "\016.TSP.Reference\"\\\n\027LocalCommandHistoryIt"
  "em\022\037\n\007command\030\001 \001(\0132\016.TSP.Reference\022 \n\010b"
  "ehavior\030\002 \001(\0132\016.TSP.Reference\"@\n\030LocalCo"
  "mmandHistoryArray\022$\n\013large_array\030\001 \002(\0132\017"
  ".TSP.LargeArray\"c\n\037LocalCommandHistoryAr"
  "raySegment\022@\n\032large_object_array_segment"
  "\030\001 \002(\0132\034.TSP.LargeObjectArraySegment\"l\n\023"
  "LocalCommandHistory\022\022\n\nundo_count\030\001 \002(\r\022"
  "#\n\013items_array\030\002 \001(\0132\016.TSP.Reference\022\034\n\024"
  "fixed_radar_13365177\030\n \001(\010\"H\n Collaborat"
  "ionCommandHistoryArray\022$\n\013large_array\030\001 "
  "\002(\0132\017.TSP.LargeArray\"k\n\'CollaborationCom"
  "mandHistoryArraySegment\022@\n\032large_object_"
  "array_segment\030\001 \002(\0132\034.TSP.LargeObjectArr"
  "aySegment\"\236\002\n\033CollaborationCommandHistor"
  "y\022#\n\020local_identifier\030\001 \001(\0132\t.TSP.UUID\022="
  "\n\nundo_items\030\002 \001(\0132).TSK.CollaborationCo"
  "mmandHistory.ItemList\022=\n\nredo_items\030\003 \001("
  "\0132).TSK.CollaborationCommandHistory.Item"
  "List\032\\\n\010ItemList\022#\n\013items_array\030\001 \001(\0132\016."
  "TSP.Reference\022+\n\023transformer_entries\030\002 \003"
  "(\0132\016.TSP.Reference\"\300\001\n\037CollaborationComm"
  "andHistoryItem\022\037\n\007command\030\001 \001(\0132\016.TSP.Re"
  "ference\022\025\n\raction_string\030\002 \001(\t\022 \n\010behavi"
  "or\030\003 \001(\0132\016.TSP.Reference\022(\n\020coalescing_g"
  "roup\030\004 \001(\0132\016.TSP.Reference\022\031\n\021revision_s"
  "equence\030\005 \001(\004\"u\n*CollaborationCommandHis"
  "toryCoalescingGroup\022\035\n\005nodes\030\001 \003(\0132\016.TSP"
  ".Reference\022(\n\031did_coalesce_all_commands\030"
  "\002 \001(\010:\005false\"Q\n.CollaborationCommandHist"
  "oryCoalescingGroupNode\022\037\n\007command\030\001 \001(\0132"
  "\016.TSP.Reference\"\216\001\nDCollaborationCommand"
  "HistoryOriginatingCommandAcknowledgement"
  "Observer\022(\n\020coalescing_group\030\001 \001(\0132\016.TSP"
  ".Reference\022\034\n\004node\030\002 \001(\0132\016.TSP.Reference"
  "\"\240\004\n\017DocumentArchive\022\031\n\021locale_identifie"
  "r\030\004 \001(\t\0221\n\031annotation_author_storage\030\007 \001"
  "(\0132\016.TSP.Reference\022,\n\024activity_log_entri"
  "es\030\010 \003(\0132\016.TSP.Reference\022\"\n\032creation_loc"
  "ale_identifier\030\t \001(\t\022(\n prevent_image_co"
  "nversion_on_open\030\n \001(\010\022\033\n\023has_floating_l"
  "ocale\030\013 \001(\010\022\037\n\027has_user_defined_locale\030\014"
  " \001(\010\0227\n\037collaboration_operation_history\030"
  "\016 \001(\0132\016.TSP.Reference\0228\n0should_measure_"
  "negatively_tracked_text_correctly\030\017 \001(\010\022"
  "-\n%use_optimized_text_vertical_alignment"
  "\030\020 \001(\010\0229\n\022formatting_symbols\030\021 \001(\0132\035.TSK"
  ".FormattingSymbolsArchive\022(\n\017activity_st"
  "ream\030\307\001 \001(\0132\016.TSP.Reference\"\271\n\n\030Formatti"
  "ngSymbolsArchive\022\017\n\007version\030\001 \001(\t\022\020\n\010cal"
  "endar\030\002 \001(\t\022\030\n\020numbering_system\030\003 \001(\t\022\016\n"
  "\006months\030\004 \003(\t\022\031\n\021standalone_months\030\005 \003(\t"
  "\022\024\n\014short_months\030\006 \003(\t\022\037\n\027standalone_sho"
  "rt_months\030\007 \003(\t\022\020\n\010weekdays\030\010 \003(\t\022\033\n\023sta"
  "ndalone_weekdays\030\t \003(\t\022\026\n\016short_weekdays"
  "\030\n \003(\t\022!\n\031standalone_short_weekdays\030\013 \003("
  "\t\022\021\n\tam_symbol\030\014 \001(\t\022\021\n\tpm_symbol\030\r \001(\t\022"
  "\023\n\013tiny_months\030\016 \003(\t\022\036\n\026standalone_tiny_"
  "months\030\017 \003(\t\022\025\n\rtiny_weekdays\030\020 \003(\t\022 \n\030s"
  "tandalone_tiny_weekdays\030\021 \003(\t\022\020\n\010quarter"
  "s\030\022 \003(\t\022\033\n\023standalone_quarters\030\023 \003(\t\022\026\n\016"
  "short_quarters\030\024 \003(\t\022!\n\031standalone_short"
  "_quarters\030\025 \003(\t\022\014\n\004eras\030\026 \003(\t\022\021\n\tlong_er"
  "as\030\027 \003(\t\022\032\n\022short_date_pattern\030\030 \001(\t\022\033\n\023"
  "medium_date_pattern\030\031 \001(\t\022\031\n\021long_date_p"
  "attern\030\032 \001(\t\022\031\n\021full_date_pattern\030\033 \001(\t\022"
  "\032\n\022short_time_pattern\030\034 \001(\t\022\033\n\023medium_ti"
  "me_pattern\030\035 \001(\t\022\031\n\021long_time_pattern\030\036 "
  "\001(\t\022\031\n\021full_time_pattern\030\037 \001(\t\022\031\n\021decima"
  "l_separator\030  \001(\t\022\032\n\022grouping_separator\030"
  "! \001(\t\022\"\n\032currency_decimal_separator\030\" \001("
  "\t\022#\n\033currency_grouping_separator\030# \001(\t\022\021"
  "\n\tplus_sign\030$ \001(\t\022\022\n\nminus_sign\030% \001(\t\022\032\n"
  "\022exponential_symbol\030& \001(\t\022\026\n\016percent_sym"
  "bol\030\' \001(\t\022\030\n\020per_mille_symbol\030( \001(\t\022\027\n\017i"
  "nfinity_symbol\030) \001(\t\022\022\n\nnan_symbol\030* \001(\t"
  "\022\027\n\017decimal_pattern\030+ \001(\t\022\032\n\022scientific_"
  "pattern\030, \001(\t\022\027\n\017percent_pattern\030- \001(\t\022\030"
  "\n\020currency_pattern\030. \001(\t\022\025\n\rcurrency_cod"
  "e\030/ \001(\t\022F\n\020currency_symbols\0300 \003(\0132,.TSK."
  "FormattingSymbolsArchive.CurrencySymbol\032"
  ".\n\016CurrencySymbol\022\014\n\004code\030\001 \002(\t\022\016\n\006symbo"
  "l\030\002 \002(\t\"\217\001\n!DocumentSupportCollaboration"
  "State\0225\n\035collaboration_command_history\030\001"
  " \001(\0132\016.TSP.Reference\0223\n\033collaboration_se"
  "ssion_state\030\002 \001(\0132\016.TSP.Reference\"\213\005\n\026Do"
  "cumentSupportArchive\022\'\n\017command_history\030"
  "\001 \001(\0132\016.TSP.Reference\022\022\n\nundo_count\030\004 \001("
  "\r\022\022\n\nredo_count\030\005 \001(\r\022\032\n\022undo_action_str"
  "ing\030\006 \001(\t\022\032\n\022redo_action_string\030\007 \001(\t\022!\n"
  "\tweb_state\030\010 \001(\0132\016.TSP.Reference\022\'\n\030is_i"
  "n_collaboration_mode\030\t \001(\010:\005false\022\"\n\032act"
  "ion_string_localization\030\014 \001(\t\022+\n\023collabo"
  "ration_state\030\r \001(\0132\016.TSP.Reference\0221\n\031ac"
  "tivity_notification_map\030\016 \001(\0132\016.TSP.Refe"
  "rence\022<\n$removed_author_auditor_pending_"
  "state\030\017 \001(\0132\016.TSP.Reference\022>\n\"command_s"
  "election_behavior_history\030\002 \001(\0132\016.TSP.Re"
  "ferenceB\002\030\001\022&\n\nview_state\030\003 \001(\0132\016.TSP.Re"
  "ferenceB\002\030\001\0229\n\035collaboration_command_his"
  "tory\030\n \001(\0132\016.TSP.ReferenceB\002\030\001\0227\n\033collab"
  "oration_session_state\030\013 \001(\0132\016.TSP.Refere"
  "nceB\002\030\001\"\205\001\n\020ViewStateArchive\022\'\n\017view_sta"
  "te_root\030\001 \002(\0132\016.TSP.Reference\022\"\n\032documen"
  "t_revision_sequence\030\002 \001(\005\022$\n\034document_re"
  "vision_identifier\030\003 \001(\t\"\361\001\n\016CommandArchi"
  "ve\022)\n\rundoRedoState\030\001 \001(\0132\016.TSP.Referenc"
  "eB\002\030\001\022&\n\016undoCollection\030\002 \001(\0132\016.TSP.Refe"
  "rence\022\035\n\025shadowed_by_transform\030\003 \001(\010\022\032\n\022"
  "shadowed_by_commit\030\004 \001(\010\022\016\n\006remote\030\005 \001(\010"
  "\022&\n\036should_hold_until_group_commit\030\006 \001(\010"
  "\022\031\n\021server_originated\030\007 \001(\010\"\266\001\n\023CommandG"
  "roupArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\022 \n\010commands\030\002 \003(\0132\016.TSP.Referenc"
  "e\022&\n\017process_results\030\003 \001(\0132\r.TSP.IndexSe"
  "t\022\025\n\raction_string\030\004 \001(\t\022\032\n\022can_coalesce"
  "_group\030\005 \001(\010\"\327\001\n\037InducedCommandCollectio"
  "nArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArc"
  "hive\022(\n\020inducing_command\030\002 \001(\0132\016.TSP.Ref"
  "erence\022(\n\020induced_commands\030\003 \003(\0132\016.TSP.R"
  "eference\022<\n%indexes_of_processed_induced"
  "_commands\030\004 \001(\0132\r.TSP.IndexSet\"\212\002\n\"Propa"
  "gatedCommandCollectionArchive\022\"\n\005super\030\001"
  " \002(\0132\023.TSK.CommandArchive\022,\n\024propagatabl"
  "e_command\030\002 \002(\0132\016.TSP.Reference\0222\n#propa"
  "gatable_command_process_result\030\003 \001(\010:\005fa"
  "lse\022+\n\023propagating_command\030\004 \002(\0132\016.TSP.R"
  "eference\0221\n\"propagating_command_process_"
  "result\030\005 \001(\010:\005false\"\331\001\n\027FinalCommandPair"
  "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
  "ive\022\037\n\007command\030\002 \002(\0132\016.TSP.Reference\022%\n\026"
  "command_process_result\030\003 \001(\010:\005false\022%\n\rf"
  "inal_command\030\004 \002(\0132\016.TSP.Reference\022+\n\034fi"
  "nal_command_process_result\030\005 \001(\010:\005false\""
  ";\n\027CommandContainerArchive\022 \n\010commands\030\001"
  " \003(\0132\016.TSP.Reference\"I\n\036ProgressiveComma"
  "ndGroupArchive\022\'\n\005super\030\001 \002(\0132\030.TSK.Comm"
  "andGroupArchive\"\314\n\n\023FormatStructArchive\022"
  "\023\n\013format_type\030\001 \001(\r\022\026\n\016decimal_places\030\002"
  " \001(\r\022\025\n\rcurrency_code\030\003 \001(\t\022\026\n\016negative_"
  "style\030\004 \001(\r\022 \n\030show_thousands_separator\030"
  "\005 \001(\010\022\034\n\024use_accounting_style\030\006 \001(\010\022\026\n\016d"
  "uration_style\030\007 \001(\r\022\014\n\004base\030\010 \001(\r\022\023\n\013bas"
  "e_places\030\t \001(\r\022\033\n\023base_use_minus_sign\030\n "
  "\001(\010\022\031\n\021fraction_accuracy\030\013 \001(\r\022\034\n\024suppre"
  "ss_date_format\030\014 \001(\010\022\034\n\024suppress_time_fo"
  "rmat\030\r \001(\010\022\030\n\020date_time_format\030\016 \001(\t\022\035\n\025"
  "duration_unit_largest\030\017 \001(\r\022\036\n\026duration_"
  "unit_smallest\030\020 \001(\r\022\021\n\tcustom_id\030\021 \001(\r\022\034"
  "\n\024custom_format_string\030\022 \001(\t\022\024\n\014scale_fa"
  "ctor\030\023 \001(\001\022%\n\035requires_fraction_replacem"
  "ent\030\024 \001(\010\022\027\n\017control_minimum\030\025 \001(\001\022\027\n\017co"
  "ntrol_maximum\030\026 \001(\001\022\031\n\021control_increment"
  "\030\027 \001(\001\022\033\n\023control_format_type\030\030 \001(\r\022\032\n\022s"
  "lider_orientation\030\031 \001(\r\022\027\n\017slider_positi"
  "on\030\032 \001(\r\022\025\n\rdecimal_width\030\033 \001(\r\022\031\n\021min_i"
  "nteger_width\030\034 \001(\r\022#\n\033num_nonspace_integ"
  "er_digits\030\035 \001(\r\022#\n\033num_nonspace_decimal_"
  "digits\030\036 \001(\r\022%\n\035index_from_right_last_in"
  "teger\030\037 \001(\r\022\034\n\024interstitial_strings\030  \003("
  "\t\0223\n\034inters_str_insertion_indexes\030! \001(\0132"
  "\r.TSP.IndexSet\022\037\n\027num_hash_decimal_digit"
  "s\030\" \001(\r\022 \n\030total_num_decimal_digits\030# \001("
  "\r\022\022\n\nis_complex\030$ \001(\010\022\036\n\026contains_intege"
  "r_token\030% \001(\010\022*\n\"multiple_choice_list_in"
  "itial_value\030& \001(\r\022\037\n\027multiple_choice_lis"
  "t_id\030\' \001(\r\022$\n\034use_automatic_duration_uni"
  "ts\030( \001(\010\022\035\n\ncustom_uid\030) \001(\0132\t.TSP.UUID\022"
  "/\n\rcustom_format\030* \001(\0132\030.TSK.CustomForma"
  "tArchive\022\026\n\016uses_plus_sign\030+ \001(\010\022\030\n\020bool"
  "_true_string\030, \001(\t\022\031\n\021bool_false_string\030"
  "- \001(\t*\007\010\220N\020\240\234\001\"\317\002\n\023CustomFormatArchive\022\014"
  "\n\004name\030\001 \002(\t\022\033\n\023format_type_pre_bnc\030\002 \002("
  "\r\0220\n\016default_format\030\003 \002(\0132\030.TSK.FormatSt"
  "ructArchive\0226\n\nconditions\030\004 \003(\0132\".TSK.Cu"
  "stomFormatArchive.Condition\022\023\n\013format_ty"
  "pe\030\005 \001(\r\032\215\001\n\tCondition\022\026\n\016condition_type"
  "\030\001 \002(\r\022\027\n\017condition_value\030\002 \001(\002\0222\n\020condi"
  "tion_format\030\003 \002(\0132\030.TSK.FormatStructArch"
  "ive\022\033\n\023condition_value_dbl\030\004 \001(\001\"e\n\027Cust"
  "omFormatListArchive\022\030\n\005uuids\030\001 \003(\0132\t.TSP"
  ".UUID\0220\n\016custom_formats\030\002 \003(\0132\030.TSK.Cust"
  "omFormatArchive\"\203\001\n\027AnnotationAuthorArch"
  "ive\022\014\n\004name\030\001 \001(\t\022\031\n\005color\030\002 \001(\0132\n.TSP.C"
  "olor\022\021\n\tpublic_id\030\003 \001(\t\022\030\n\020is_public_aut"
  "hor\030\004 \001(\010\022\022\n\npublic_ids\030\005 \003(\t\"O\n\035Depreca"
  "tedChangeAuthorArchive\022\014\n\004name\030\001 \001(\t\022 \n\014"
  "change_color\030\002 \001(\0132\n.TSP.Color\"K\n\036Annota"
  "tionAuthorStorageArchive\022)\n\021annotation_a"
  "uthor\030\001 \003(\0132\016.TSP.Reference\"\261\001\n&SetAnnot"
  "ationAuthorColorCommandArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive\022)\n\021annotation"
  "_author\030\002 \001(\0132\016.TSP.Reference\022\031\n\005color\030\003"
  " \001(\0132\n.TSP.Color\022\035\n\told_color\030\004 \001(\0132\n.TS"
  "P.Color\"\300\001\n1SetActivityAuthorSharePartic"
  "ipantIDCommandArchive\022\"\n\005super\030\001 \002(\0132\023.T"
  "SK.CommandArchive\022\'\n\017activity_author\030\002 \001"
  "(\0132\016.TSP.Reference\022\034\n\024share_participant_"
  "id\030\003 \001(\t\022 \n\030old_share_participant_id\030\004 \001"
  "(\t\"\321\002\n*CommandBehaviorSelectionPathStora"
  "geArchive\0225\n\022archived_selection\030\001 \001(\0132\031."
  "TSK.SelectionPathArchive\0229\n\026archived_old"
  "_selection\030\002 \001(\0132\031.TSK.SelectionPathArch"
  "ive\0229\n\026archived_new_selection\030\003 \001(\0132\031.TS"
  "K.SelectionPathArchive\022:\n\"forward_select"
  "ion_path_transformer\030\004 \001(\0132\016.TSP.Referen"
  "ce\022:\n\"reverse_selection_path_transformer"
  "\030\005 \001(\0132\016.TSP.Reference\"o\n\026CommandBehavio"
  "rArchive\022*\n\022selection_behavior\030\001 \001(\0132\016.T"
  "SP.Reference\022)\n\021activity_behavior\030\002 \001(\0132"
  "\016.TSP.Reference\"\372\001\n\037CommandSelectionBeha"
  "viorArchive\022.\n\026selection_path_storage\030\001 "
  "\001(\0132\016.TSP.Reference\022\027\n\017selection_flags\030\002"
  " \001(\004\022*\n\"additional_forward_selection_fla"
  "gs\030\003 \001(\004\022*\n\"additional_reverse_selection"
  "_flags\030\004 \001(\004\0226\n\036additional_selection_beh"
  "aviors\030\005 \003(\0132\016.TSP.Reference\"Q\n\037Selectio"
  "nPathTransformerArchive\022.\n\026selection_tra"
  "nsformers\030\001 \003(\0132\016.TSP.Reference\"B\n\024Selec"
  "tionPathArchive\022*\n\022ordered_selections\030\001 "
  "\003(\0132\016.TSP.Reference\"A\n\030DocumentSelection"
  "Archive\022%\n\rdocument_root\030\001 \001(\0132\016.TSP.Ref"
  "erence\"1\n\017IdOperationArgs\022\036\n\007id_path\030\001 \002"
  "(\0132\r.TSP.UUIDPath\"H\n\022AddIdOperationArgs\022"
  "#\n\005super\030\001 \002(\0132\024.TSK.IdOperationArgs\022\r\n\005"
  "index\030\002 \002(\005\"K\n\025RemoveIdOperationArgs\022#\n\005"
  "super\030\001 \002(\0132\024.TSK.IdOperationArgs\022\r\n\005ind"
  "ex\030\002 \002(\005\"e\n\030RearrangeIdOperationArgs\022#\n\005"
  "super\030\001 \002(\0132\024.TSK.IdOperationArgs\022\022\n\nfro"
  "m_index\030\002 \002(\005\022\020\n\010to_index\030\003 \002(\005\"e\n\030IdPla"
  "cementOperationArgs\022#\n\005super\030\001 \002(\0132\024.TSK"
  ".IdOperationArgs\022\022\n\nfrom_index\030\002 \002(\005\022\020\n\010"
  "to_index\030\003 \002(\005\"8\n\022NullCommandArchive\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\"[\n\031Grou"
  "pCommitCommandArchive\022\"\n\005super\030\001 \002(\0132\023.T"
  "SK.CommandArchive\022\032\n\022can_coalesce_group\030"
  "\002 \001(\010\"L\n&UpgradeDocPostProcessingCommand"
  "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
  "ive\"R\n,InducedCommandCollectionCommitCom"
  "mandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\"\252\001\n\034ActivityCommitCommandArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022 \n\010"
  "activity\030\002 \001(\0132\016.TSP.Reference\022\036\n\006author"
  "\030\003 \001(\0132\016.TSP.Reference\022$\n\026was_activity_c"
  "ommitted\030\004 \001(\010:\004true\"X\n2ExecuteTestBetwe"
  "enRollbackAndReapplyCommandArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\"\260\002\n\'Chang"
  "eDocumentPackageTypeCommandArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\022R\n\020new_pa"
  "ckage_type\030\002 \002(\01628.TSK.ChangeDocumentPac"
  "kageTypeCommandArchive.PackageType\022R\n\020ol"
  "d_package_type\030\003 \002(\01628.TSK.ChangeDocumen"
  "tPackageTypeCommandArchive.PackageType\"9"
  "\n\013PackageType\022\013\n\007Default\020\000\022\r\n\tDirectory\020"
  "\001\022\016\n\nSingleFile\020\002\"c\n(CreateLocalStorageS"
  "napshotCommandArchive\022\"\n\005super\030\001 \002(\0132\023.T"
  "SK.CommandArchive\022\023\n\013snapshot_id\030\002 \001(\t\"H"
  "\n\"BlockDiffsAtCurrentRevisionCommand\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\">\n\014Rang"
  "eAddress\022\032\n\022address_identifier\030\001 \003(\004\022\022\n\n"
  "range_list\030\002 \003(\r\"\212\004\n\tOperation\0228\n\004type\030\001"
  " \001(\0162\034.TSK.Operation.OperationType:\014Repl"
  "aceRange\022\023\n\004noop\030\002 \001(\010:\005false\022\036\n\022address"
  "_identifier\030\003 \003(\006B\002\020\001\022\030\n\rinsert_length\030\004"
  " \001(\004:\0011\022/\n preserve_lower_priority_locat"
  "ion\030\005 \001(\010:\005false\022\026\n\nrange_list\030\006 \003(\rB\002\020\001"
  "\022\035\n\022transform_behavior\030\007 \001(\r:\0017\022\023\n\013prope"
  "rty_id\030\010 \001(\r\022\026\n\nfrom_index\030\t \001(\005:\002-1\022\024\n\010"
  "to_index\030\n \001(\005:\002-1\022\031\n\ndominating\030\013 \001(\010:\005"
  "false\022\030\n\014object_count\030\014 \001(\005:\002-1\022\037\n\024objec"
  "t_counter_space\030\r \001(\005:\0010\"s\n\rOperationTyp"
  "e\022\007\n\003Add\020\000\022\n\n\006Remove\020\001\022\r\n\tPlacement\020\002\022\r\n"
  "\tRearrange\020\003\022\014\n\010UpdateId\020\004\022\017\n\013UpdateRang"
  "e\020\005\022\020\n\014ReplaceRange\020\006\"S\n\024OperationTransf"
  "ormer\022\027\n\017higher_priority\030\001 \002(\010\022\"\n\noperat"
  "ions\030\002 \003(\0132\016.TSK.Operation\"k\n\020Transforme"
  "rEntry\022\020\n\010sequence\030\001 \002(\004\022\025\n\rcreation_tim"
  "e\030\002 \002(\001\022.\n\013transformer\030\003 \002(\0132\031.TSK.Opera"
  "tionTransformer\"\305\002\n\030OutgoingCommandQueue"
  "Item\022\037\n\007command\030\001 \001(\0132\016.TSP.Reference\022:\n"
  "2serialized_json_without_data_base64_enc"
  "oded_string\030\002 \001(\t\022L\n0serialized_json_wit"
  "hout_data_base64_encoded_data\030\004 \001(\0132\022.TS"
  "P.DataReference\022Q\n\030uuid_to_data_map_entr"
  "ies\030\003 \003(\0132/.TSK.OutgoingCommandQueueItem"
  "UUIDToDataMapEntry\022+\n\017large_data_list\030\005 "
  "\003(\0132\022.TSP.DataReference\"g\n*OutgoingComma"
  "ndQueueItemUUIDToDataMapEntry\022\027\n\004uuid\030\001 "
  "\002(\0132\t.TSP.UUID\022 \n\004data\030\002 \002(\0132\022.TSP.DataR"
  "eference\"\376\001\n2CollaborationAppliedCommand"
  "DocumentRevisionMapping\022\037\n\007command\030\001 \001(\013"
  "2\016.TSP.Reference\022/\n\034document_revision_id"
  "entifier\030\002 \001(\0132\t.TSP.UUID\022\"\n\032document_re"
  "vision_sequence\030\003 \001(\005\0224\n\034remaining_comma"
  "nd_operations\030\004 \003(\0132\016.TSK.Operation\022\034\n\tt"
  "imestamp\030\005 \001(\0132\t.TSP.Date\"\264\014\n!Collaborat"
  "ionDocumentSessionState\022\030\n\020collaborator_"
  "ids\030\001 \003(\t\0220\n\030rsvp_command_queue_items\030\003 "
  "\003(\0132\016.TSP.Reference\022\?\n\'collaborator_curs"
  "or_transformer_entries\030\004 \003(\0132\016.TSP.Refer"
  "ence\022J\n2acknowledged_commands_pending_re"
  "sume_process_diffs\030\005 \003(\0132\016.TSP.Reference"
  "\022I\n1unprocessed_commands_pending_resume_"
  "process_diffs\030\006 \003(\0132\016.TSP.Reference\022u\n(c"
  "ommand_acknowledgement_observer_entries\030"
  "\007 \003(\0132C.TSK.CollaborationDocumentSession"
  "State.AcknowledgementObserverEntry\022O\n7tr"
  "ansformer_from_unprocessed_command_opera"
  "tions_entries\030\010 \003(\0132\016.TSP.Reference\0222\n*m"
  "ailbox_request_document_revision_sequenc"
  "e\030\n \001(\005\022\?\n,mailbox_request_document_revi"
  "sion_identifier\030\013 \001(\0132\t.TSP.UUID\022U\nFlast"
  "_send_pending_command_queue_item_was_mov"
  "ed_from_rsvp_command_queue\030\014 \001(\010:\005false\022"
  ")\n!last_command_send_marker_sequence\030\r \001"
  "(\005\0226\n#last_command_send_marker_identifie"
  "r\030\016 \001(\0132\t.TSP.UUID\022R\n:skipped_acknowledg"
  "ed_commands_pending_resume_process_diffs"
  "\030\017 \003(\0132\016.TSP.Reference\0222\n\037last_too_old_c"
  "ommand_identifier\030\020 \001(\0132\t.TSP.UUID\022R\n:un"
  "processed_operation_entries_pending_resu"
  "me_process_diffs\030\021 \001(\0132\016.TSP.Reference\0222"
  "\n\032send_pending_command_queue\030\022 \001(\0132\016.TSP"
  ".Reference\022J\n\?count_of_send_pending_comm"
  "and_queue_items_moved_from_rsvp_queue\030\023 "
  "\001(\004:\0010\022A\n.last_enqueued_document_load_co"
  "mmand_identifier\030\024 \001(\0132\t.TSP.UUID\022\222\001\nQap"
  "plied_command_document_revision_mappings"
  "_to_notify_pending_resume_process_diffs\030"
  "\025 \003(\01327.TSK.CollaborationAppliedCommandD"
  "ocumentRevisionMapping\022F\n;count_of_comma"
  "nd_queue_items_in_last_outgoing_command_"
  "group\030\026 \001(\004:\0010\032x\n\034AcknowledgementObserve"
  "rEntry\022%\n\022command_identifier\030\001 \002(\0132\t.TSP"
  ".UUID\0221\n\031acknowledgement_observers\030\002 \003(\013"
  "2\016.TSP.Reference\"\205\001\n\030NativeContentDescri"
  "ption\022\020\n\010app_name\030\001 \001(\t\022\023\n\013app_version\030\002"
  " \001(\t\022\023\n\013document_id\030\003 \001(\t\022-\n\025drawable_de"
  "scriptions\030\004 \003(\0132\016.TSP.Reference\"\203\003\n\034Str"
  "ucturedTextImportSettings\022+\n\004type\030\001 \002(\0162"
  "\035.TSK.StructuredTextImportType\022\024\n\014starti"
  "ng_row\030\002 \002(\005\022\032\n\022decimal_separators\030\003 \003(\t"
  "\022\034\n\024thousands_separators\030\004 \003(\t\022\"\n\032transp"
  "ose_rows_and_columns\030\005 \001(\010\022\022\n\ndelimiters"
  "\030\006 \003(\t\022\027\n\017text_qualifiers\030\007 \003(\t\022\034\n\024colla"
  "pse_consecutive\030\010 \001(\010\022%\n\016column_offsets\030"
  "\t \001(\0132\r.TSP.IndexSet\022\034\n\024automatic_delimi"
  "ters\030\n \001(\010\022\031\n\021automatic_offsets\030\013 \001(\010\022\027\n"
  "\017source_encoding\030\014 \001(\004\"\346\001\n&OperationStor"
  "ageCommandOperationsEntry\0226\n.command_ide"
  "ntifier_same_as_revision_identifier\030\001 \001("
  "\010\022\036\n\022command_identifier\030\002 \003(\006B\002\020\001\022\"\n\nope"
  "rations\030\003 \003(\0132\016.TSK.Operation\022\031\n\021server_"
  "originated\030\004 \001(\010\022%\n\035coalesced_command_en"
  "try_count\030\005 \001(\004\"\242\002\n\025OperationStorageEntr"
  "y\022(\n\034document_revision_identifier\030\001 \003(\006B"
  "\002\020\001\022(\n document_revision_sequence_delta\030"
  "\002 \001(\005\022N\n\031command_operation_entries\030\003 \003(\013"
  "2+.TSK.OperationStorageCommandOperations"
  "Entry\022!\n\031first_entry_creation_time\030\004 \001(\001"
  "\022!\n\031creation_time_diff_bucket\030\005 \001(\005\022\037\n\023f"
  "ile_format_version\030\006 \003(\rB\002\020\001\"B\n\032Operatio"
  "nStorageEntryArray\022$\n\013large_array\030\001 \001(\0132"
  "\017.TSP.LargeArray\"\222\002\n!OperationStorageEnt"
  "ryArraySegment\0223\n\023large_array_segment\030\001 "
  "\001(\0132\026.TSP.LargeArraySegment\022,\n\010elements\030"
  "\002 \003(\0132\032.TSK.OperationStorageEntry\0226\n.las"
  "t_document_revision_sequence_before_segm"
  "ent\030\003 \001(\005\022\'\n\037last_document_revision_sequ"
  "ence\030\004 \001(\005\022)\n!segment_first_entry_creati"
  "on_time\030\005 \001(\001\"\343\003\n\020OperationStorage\022\037\n\007en"
  "tries\030\001 \002(\0132\016.TSP.Reference\022\027\n\017operation"
  "_count\030\002 \002(\004\022\'\n\037last_document_revision_s"
  "equence\030\003 \001(\005\022-\n!last_document_revision_"
  "identifier\030\004 \003(\006B\002\020\001\022B\n:last_unskippable"
  "_document_revision_before_entries_sequen"
  "ce\030\005 \001(\005\022H\n<last_unskippable_document_re"
  "vision_before_entries_identifier\030\006 \003(\006B\002"
  "\020\001\022>\n6last_unskippable_document_revision"
  "_in_entries_sequence\030\007 \001(\005\022D\n8last_unski"
  "ppable_document_revision_in_entries_iden"
  "tifier\030\010 \003(\006B\002\020\001\022)\n\022days_with_an_entry\030\t"
  " \001(\0132\r.TSP.IndexSet\"I\n\024OutgoingCommandQu"
  "eue\0221\n\022large_object_array\030\001 \001(\0132\025.TSP.La"
  "rgeObjectArray\"_\n\033OutgoingCommandQueueSe"
  "gment\022@\n\032large_object_array_segment\030\001 \001("
  "\0132\034.TSP.LargeObjectArraySegment\"\304\003\n\023Data"
  "ReferenceRecord\022q\n-added_container_uuid_"
  "to_referenced_data_pairs\030\001 \003(\0132:.TSK.Dat"
  "aReferenceRecord.ContainerUUIDToReferenc"
  "edDataPair\022s\n/removed_container_uuid_to_"
  "referenced_data_pairs\030\002 \003(\0132:.TSK.DataRe"
  "ferenceRecord.ContainerUUIDToReferencedD"
  "ataPair\0226\n\032unbounded_referenced_datas\030\003 "
  "\003(\0132\022.TSP.DataReference\032\214\001\n!ContainerUUI"
  "DToReferencedDataPair\022!\n\016container_uuid\030"
  "\001 \002(\0132\t.TSP.UUID\022+\n\017referenced_data\030\002 \002("
  "\0132\022.TSP.DataReference\022\027\n\017reference_count"
  "\030\003 \002(\r\"\265\001\n\030CommandAssetChunkArchive\022\"\n\005s"
  "uper\030\001 \002(\0132\023.TSK.CommandArchive\022\016\n\006diges"
  "t\030\002 \001(\t\022\023\n\013asset_chunk\030\003 \001(\t\022\032\n\022asset_ch"
  "unk_length\030\004 \002(\003\022\027\n\017resume_position\030\005 \002("
  "\003\022\033\n\023materialized_length\030\006 \002(\003\"\353\001\n\037Asset"
  "UploadStatusCommandArchive\022\"\n\005super\030\001 \002("
  "\0132\023.TSK.CommandArchive\022M\n\tinfo_list\030\002 \003("
  "\0132:.TSK.AssetUploadStatusCommandArchive."
  "AssetUploadStatusInfo\032U\n\025AssetUploadStat"
  "usInfo\022\016\n\006digest\030\001 \001(\t\022,\n\rupload_status\030"
  "\002 \001(\0162\025.TSP.DataUploadStatus\"d\n)AssetUnm"
  "aterializedOnServerCommandArchive\022\"\n\005sup"
  "er\030\001 \002(\0132\023.TSK.CommandArchive\022\023\n\013digest_"
  "list\030\002 \003(\t\"\352\002\n\027PencilAnnotationUIState\022U"
  "\n\021current_tool_type\030\001 \001(\01625.TSK.PencilAn"
  "notationUIState.PencilAnnotationToolType"
  ":\003Pen\022\"\n\016pen_tool_color\030\002 \001(\0132\n.TSP.Colo"
  "r\022\030\n\020pen_tool_opacity\030\003 \001(\002\022\026\n\016pen_tool_"
  "width\030\004 \001(\002\022*\n\026highlighter_tool_color\030\005 "
  "\001(\0132\n.TSP.Color\022 \n\030highlighter_tool_opac"
  "ity\030\006 \001(\002\022\036\n\026highlighter_tool_width\030\007 \001("
  "\002\"4\n\030PencilAnnotationToolType\022\007\n\003Pen\020\000\022\017"
  "\n\013Highlighter\020\001\"B\n\031CollaboratorCursorArc"
  "hive\022\036\n\007id_path\030\001 \001(\0132\r.TSP.UUIDPath*\005\010d"
  "\020\350\007\"\273\003\n\025ActivityStreamArchive\0223\n\033acknowl"
  "edged_activity_array\030\001 \001(\0132\016.TSP.Referen"
  "ce\022;\n#unacknowledged_local_activity_arra"
  "y\030\002 \001(\0132\016.TSP.Reference\022$\n\014author_cache\030"
  "\003 \001(\0132\016.TSP.Reference\022<\n$unacknowledged_"
  "remote_activity_array\030\005 \001(\0132\016.TSP.Refere"
  "nce\022*\n\"did_upgrade_comments_to_activitie"
  "s\030\006 \001(\010\022[\n$activity_stream_transformatio"
  "n_state\030\017 \001(\0132-.TSK.ActivityStreamTransf"
  "ormationStateArchive\022C\n\020activity_counter"
  "\030\020 \001(\0132).TSK.ActivityStreamActivityCount"
  "erArchive\"I\n\033ActivityStreamActivityArray"
  "\022*\n\013large_array\030\001 \001(\0132\025.TSP.LargeObjectA"
  "rray\"_\n\"ActivityStreamActivityArraySegme"
  "nt\0229\n\023large_array_segment\030\001 \001(\0132\034.TSP.La"
  "rgeObjectArraySegment\"\366\003\n\017ActivityArchiv"
  "e\022>\n&cursor_collection_persistence_wrapp"
  "ers\030\001 \003(\0132\016.TSP.Reference\022$\n\021author_iden"
  "tifier\030\002 \001(\0132\t.TSP.UUID\022\"\n\032nondirectiona"
  "l_action_type\030\003 \001(\005\022\021\n\tdirection\030\004 \001(\005\022 "
  "\n\030should_send_notification\030\005 \001(\010\022\034\n\ttime"
  "stamp\030\006 \001(\0132\t.TSP.Date\022\031\n\021revision_seque"
  "nce\030\007 \001(\005\022F\n\032additional_navigation_info\030"
  "\010 \001(\0132\".TSK.ActivityNavigationInfoArchiv"
  "e\022/\n\'did_prepare_serialized_string_on_se"
  "rver\030\t \001(\010\0223\n+oldest_revision_sequence_o"
  "f_next_activities\030\n \001(\005\022\032\n\017action_sub_ty"
  "pe\030\013 \001(\005:\0010\022!\n\025min_updatable_version\030\014 \003"
  "(\rB\002\020\001\"\214\001\n\025ActivityAuthorArchive\022\014\n\004name"
  "\030\001 \001(\t\022\031\n\005color\030\002 \001(\0132\n.TSP.Color\022\022\n\npub"
  "lic_ids\030\003 \003(\t\022\030\n\020is_public_author\030\004 \001(\010\022"
  "\034\n\024share_participant_id\030\005 \001(\t\"\312\007\n\036Comman"
  "dActivityBehaviorArchive\022/\n\027selection_pa"
  "th_storages\030\001 \003(\0132\016.TSP.Reference\022C\n\013act"
  "ion_type\030\002 \001(\0162..TSK.CommandActivityBeha"
  "viorArchive.ActionType\022 \n\030should_send_no"
  "tification\030\003 \001(\010\022F\n\032additional_navigatio"
  "n_info\030\004 \001(\0132\".TSK.ActivityNavigationInf"
  "oArchive\022P\n\017action_sub_type\030\005 \001(\01621.TSK."
  "CommandActivityBehaviorArchive.ActionSub"
  "Type:\004None\"\272\001\n\nActionType\022\013\n\007Unknown\020\000\022\r"
  "\n\tFirstJoin\020\001\022\007\n\003Add\020\002\022\n\n\006Modify\020\003\022\013\n\007Co"
  "mment\020\004\022\t\n\005Reply\020\005\022\t\n\005Paste\020\006\022\014\n\010Passwor"
  "d\020\007\022\013\n\007Restore\020\010\022\n\n\006Remove\020\t\022\014\n\010EditText"
  "\020\n\022\t\n\005Group\020\013\022\013\n\007Ungroup\020\014\022\013\n\007Replace\020\r\""
  "\270\003\n\rActionSubType\022\010\n\004None\020\000\022\017\n\013FilterTab"
  "le\020\001\022\r\n\tSortTable\020\002\022\023\n\017CategorizeTable\020\003"
  "\022\027\n\023ChangeTemplateSlide\020\004\022\023\n\017ChangeChart"
  "Type\020\005\022\020\n\014MoveDrawable\020\006\022\022\n\016ResizeDrawab"
  "le\020\007\022\023\n\017AddOrRemovePage\020\010\022\r\n\tHyperlink\020\t"
  "\022\r\n\tSkipSlide\020\n\022\017\n\013UnskipSlide\020\013\022\024\n\020Chan"
  "geBackground\020\014\022\026\n\022ChangePageTemplate\020\r\022\024"
  "\n\020InsertPageNumber\020\016\022\025\n\021RefreshPivotTabl"
  "e\020\017\022\017\n\013AddPassword\020\020\022\022\n\016ChangePassword\020\021"
  "\022\022\n\016RemovePassword\020\022\022\014\n\010Bookmark\020\023\022\014\n\010Eq"
  "uation\020\024\022\020\n\014SectionBreak\020\025\022\016\n\nMoveColumn"
  "\020\026\"\355\002\n\037ActivityCursorCollectionArchive\0222"
  "\n\nid_cursors\030\001 \003(\0132\036.TSK.CollaboratorCur"
  "sorArchive\0223\n\013text_cursor\030\002 \001(\0132\036.TSK.Co"
  "llaboratorCursorArchive\0224\n\014table_cursor\030"
  "\003 \001(\0132\036.TSK.CollaboratorCursorArchive\0222\n"
  "\ncde_cursor\030\004 \001(\0132\036.TSK.CollaboratorCurs"
  "orArchive\022:\n\022chart_title_cursor\030\005 \001(\0132\036."
  "TSK.CollaboratorCursorArchive\022;\n\023gallery"
  "_item_cursor\030\006 \001(\0132\036.TSK.CollaboratorCur"
  "sorArchive\"}\n1ActivityCursorCollectionPe"
  "rsistenceWrapperArchive\022H\n\032activity_curs"
  "or_collection\030\001 \001(\0132$.TSK.ActivityCursor"
  "CollectionArchive\"&\n\035ActivityNavigationI"
  "nfoArchive*\005\010d\020\350\007\"\364\001\n$CommentActivityNav"
  "igationInfoArchive\022\022\n\ncomment_id\030\001 \002(\t\022\036"
  "\n\013parent_uuid\030\002 \002(\0132\t.TSP.UUID\022\037\n\014storag"
  "e_uuid\030\003 \002(\0132\t.TSP.UUID2w\n comment_activ"
  "ity_navigation_info\022\".TSK.ActivityNaviga"
  "tionInfoArchive\030d \001(\0132).TSK.CommentActiv"
  "ityNavigationInfoArchive\"\206\006\n\032ActivityAut"
  "horCacheArchive\022[\n\032share_participant_id_"
  "cache\030\001 \003(\01327.TSK.ActivityAuthorCacheArc"
  "hive.ShareParticipantIDCache\022O\n\030fallback"
  "_public_id_cache\030\003 \003(\0132-.TSK.ActivityAut"
  "horCacheArchive.PublicIDCache\022\?\n\013index_c"
  "ache\030\004 \003(\0132*.TSK.ActivityAuthorCacheArch"
  "ive.IndexCache\022H\n\020first_join_cache\030\005 \003(\013"
  "2..TSK.ActivityAuthorCacheArchive.FirstJ"
  "oinCache\022\037\n\007authors\030\006 \003(\0132\016.TSP.Referenc"
  "e\022\"\n\017last_audit_date\030\007 \001(\0132\t.TSP.Date\022/\n"
  "\034author_identifiers_to_remove\030\010 \003(\0132\t.TS"
  "P.UUID\032V\n\027ShareParticipantIDCache\022\035\n\nide"
  "ntifier\030\001 \002(\0132\t.TSP.UUID\022\034\n\024share_partic"
  "ipant_id\030\002 \002(\t\032I\n\rPublicIDCache\022\035\n\nident"
  "ifier\030\001 \002(\0132\t.TSP.UUID\022\031\n\021public_identif"
  "ier\030\002 \002(\t\032A\n\nIndexCache\022\035\n\nidentifier\030\001 "
  "\002(\0132\t.TSP.UUID\022\024\n\014author_index\030\002 \002(\004\032S\n\016"
  "FirstJoinCache\022\035\n\nidentifier\030\001 \002(\0132\t.TSP"
  ".UUID\022\"\n\017first_join_date\030\002 \001(\0132\t.TSP.Dat"
  "e\"@\n\032ActivityOnlyCommandArchive\022\"\n\005super"
  "\030\001 \002(\0132\023.TSK.CommandArchive\"\235\001\n\037Activity"
  "NotificationItemArchive\022\014\n\004type\030\001 \002(\005\022$\n"
  "\021unique_identifier\030\002 \002(\0132\t.TSP.UUID\022\"\n\na"
  "ctivities\030\003 \003(\0132\016.TSP.Reference\022\"\n\017first"
  "_timestamp\030\004 \001(\0132\t.TSP.Date\"\264\003\n+Activity"
  "NotificationParticipantCacheArchive\022*\n\022n"
  "otification_items\030\001 \003(\0132\016.TSP.Reference\022"
  "8\n%last_edit_notification_item_sent_date"
  "\030\002 \001(\0132\t.TSP.Date\022w\n!sender_failed_to_en"
  "queue_attempts\030\003 \003(\0132L.TSK.ActivityNotif"
  "icationParticipantCacheArchive.UniqueIde"
  "ntifierAndAttempts\022\022\n\nprivate_id\030\004 \002(\t\022;"
  "\n(last_comment_notification_item_sent_da"
  "te\030\005 \001(\0132\t.TSP.Date\032U\n\033UniqueIdentifierA"
  "ndAttempts\022$\n\021unique_identifier\030\001 \002(\0132\t."
  "TSP.UUID\022\020\n\010attempts\030\002 \002(\r\"\277\001\n ActivityN"
  "otificationQueueArchive\0226\n\036unprocessed_n"
  "otification_items\030\001 \003(\0132\016.TSP.Reference\022"
  "2\n\032pending_participant_caches\030\003 \003(\0132\016.TS"
  "P.Reference\022/\n\027sent_participant_caches\030\005"
  " \003(\0132\016.TSP.Reference\"\211\004\n(ActivityStreamT"
  "ransformationStateArchive\022(\n next_activi"
  "ty_to_transform_index\030\001 \002(\005\0222\n*oldest_re"
  "vision_sequence_after_transformed\030\002 \001(\005\022"
  "/\n\034last_activity_coalesced_date\030\003 \001(\0132\t."
  "TSP.Date\022M\n\013action_type\030\004 \001(\01628.TSK.Acti"
  "vityStreamTransformationStateArchive.Act"
  "ionType\022/\n\'transform_to_document_revisio"
  "n_sequence\030\005 \001(\005\0225\n)transform_to_documen"
  "t_revision_identifier\030\006 \003(\006B\002\020\001\022@\n8times"
  "tamp_of_last_activity_when_last_activity"
  "_coalescing\030\007 \001(\001\022*\n\"preserving_revision"
  "_sequence_order\030\010 \001(\010\")\n\nActionType\022\r\n\tT"
  "rasnform\020\000\022\014\n\010Coalesce\020\001\"\314\002\n$ActivityStr"
  "eamActivityCounterArchive\022X\n\023action_type"
  "_counter\030\001 \003(\0132;.TSK.ActivityStreamActiv"
  "ityCounterArchive.ActionTypeCounter\022X\n\023c"
  "ursor_type_counter\030\002 \003(\0132;.TSK.ActivityS"
  "treamActivityCounterArchive.CursorTypeCo"
  "unter\0327\n\021ActionTypeCounter\022\023\n\013action_typ"
  "e\030\001 \001(\005\022\r\n\005count\030\002 \001(\r\0327\n\021CursorTypeCoun"
  "ter\022\023\n\013cursor_type\030\001 \001(\005\022\r\n\005count\030\002 \001(\r\""
  "\223\002\n5ActivityStreamRemovedAuthorAuditorPe"
  "ndingStateArchive\022-\n\032current_author_iden"
  "tifiers\030\001 \003(\0132\t.TSP.UUID\022e\n\016dates_to_aud"
  "it\030\003 \003(\0132M.TSK.ActivityStreamRemovedAuth"
  "orAuditorPendingStateArchive.DateToAudit"
  "AndType\032D\n\022DateToAuditAndType\022 \n\rdate_to"
  "_audit\030\001 \002(\0132\t.TSP.Date\022\014\n\004type\030\002 \002(\005*g\n"
  "\030StructuredTextImportType\022\026\n\022ImportType_"
  "UNKNOWN\020\000\022\030\n\024ImportType_DELIMITED\020\001\022\031\n\025I"
  "mportType_FIXEDWIDTH\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSKArchives_2eproto_deps[1] = {
  &::descriptor_table_TSPMessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSKArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSKArchives_2eproto = {
    false, false, 22902, descriptor_table_protodef_TSKArchives_2eproto,
    "TSKArchives.proto",
    &descriptor_table_TSKArchives_2eproto_once, descriptor_table_TSKArchives_2eproto_deps, 1, 107,
    schemas, file_default_instances, TableStruct_TSKArchives_2eproto::offsets,
    file_level_metadata_TSKArchives_2eproto, file_level_enum_descriptors_TSKArchives_2eproto,
    file_level_service_descriptors_TSKArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSKArchives_2eproto_getter() {
  return &descriptor_table_TSKArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSKArchives_2eproto(&descriptor_table_TSKArchives_2eproto);
namespace TSK {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeDocumentPackageTypeCommandArchive_PackageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[0];
}
bool ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::Default;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::Directory;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::SingleFile;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::PackageType_MIN;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::PackageType_MAX;
constexpr int ChangeDocumentPackageTypeCommandArchive::PackageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[1];
}
bool Operation_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Operation_OperationType Operation::Add;
constexpr Operation_OperationType Operation::Remove;
constexpr Operation_OperationType Operation::Placement;
constexpr Operation_OperationType Operation::Rearrange;
constexpr Operation_OperationType Operation::UpdateId;
constexpr Operation_OperationType Operation::UpdateRange;
constexpr Operation_OperationType Operation::ReplaceRange;
constexpr Operation_OperationType Operation::OperationType_MIN;
constexpr Operation_OperationType Operation::OperationType_MAX;
constexpr int Operation::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PencilAnnotationUIState_PencilAnnotationToolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[2];
}
bool PencilAnnotationUIState_PencilAnnotationToolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::Pen;
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::Highlighter;
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::PencilAnnotationToolType_MIN;
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::PencilAnnotationToolType_MAX;
constexpr int PencilAnnotationUIState::PencilAnnotationToolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandActivityBehaviorArchive_ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[3];
}
bool CommandActivityBehaviorArchive_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Unknown;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::FirstJoin;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Add;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Modify;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Comment;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Reply;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Paste;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Password;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Restore;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Remove;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::EditText;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Group;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Ungroup;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::Replace;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::ActionType_MIN;
constexpr CommandActivityBehaviorArchive_ActionType CommandActivityBehaviorArchive::ActionType_MAX;
constexpr int CommandActivityBehaviorArchive::ActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandActivityBehaviorArchive_ActionSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[4];
}
bool CommandActivityBehaviorArchive_ActionSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::None;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::FilterTable;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::SortTable;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::CategorizeTable;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ChangeTemplateSlide;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ChangeChartType;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::MoveDrawable;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ResizeDrawable;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::AddOrRemovePage;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::Hyperlink;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::SkipSlide;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::UnskipSlide;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ChangeBackground;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ChangePageTemplate;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::InsertPageNumber;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::RefreshPivotTable;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::AddPassword;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ChangePassword;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::RemovePassword;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::Bookmark;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::Equation;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::SectionBreak;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::MoveColumn;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ActionSubType_MIN;
constexpr CommandActivityBehaviorArchive_ActionSubType CommandActivityBehaviorArchive::ActionSubType_MAX;
constexpr int CommandActivityBehaviorArchive::ActionSubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivityStreamTransformationStateArchive_ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[5];
}
bool ActivityStreamTransformationStateArchive_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActivityStreamTransformationStateArchive_ActionType ActivityStreamTransformationStateArchive::Trasnform;
constexpr ActivityStreamTransformationStateArchive_ActionType ActivityStreamTransformationStateArchive::Coalesce;
constexpr ActivityStreamTransformationStateArchive_ActionType ActivityStreamTransformationStateArchive::ActionType_MIN;
constexpr ActivityStreamTransformationStateArchive_ActionType ActivityStreamTransformationStateArchive::ActionType_MAX;
constexpr int ActivityStreamTransformationStateArchive::ActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StructuredTextImportType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[6];
}
bool StructuredTextImportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TreeNode::_Internal {
 public:
  using HasBits = decltype(std::declval<TreeNode>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& object(const TreeNode* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
TreeNode::_Internal::object(const TreeNode* msg) {
  return *msg->_impl_.object_;
}
void TreeNode::clear_children() {
  _impl_.children_.Clear();
}
void TreeNode::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TreeNode::TreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TreeNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.object_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.TreeNode)
}

inline void TreeNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.object_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:TSK.TreeNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
}

void TreeNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.TreeNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_ != nullptr);
      _impl_.object_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreeNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.TreeNode.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.TreeNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.TreeNode.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .TSP.Reference children = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.TreeNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSP.Reference object = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreeNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TreeNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreeNode::GetClassData() const { return &_class_data_; }


void TreeNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TreeNode*>(&to_msg);
  auto& from = static_cast<const TreeNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.TreeNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.children_))
    return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.object_, other->_impl_.object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[0]);
}

// ===================================================================

class LocalCommandHistoryItem::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistoryItem>()._impl_._has_bits_);
  static const ::TSP::Reference& command(const LocalCommandHistoryItem* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& behavior(const LocalCommandHistoryItem* msg);
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
LocalCommandHistoryItem::_Internal::command(const LocalCommandHistoryItem* msg) {
  return *msg->_impl_.command_;
}
const ::TSP::Reference&
LocalCommandHistoryItem::_Internal::behavior(const LocalCommandHistoryItem* msg) {
  return *msg->_impl_.behavior_;
}
void LocalCommandHistoryItem::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LocalCommandHistoryItem::clear_behavior() {
  if (_impl_.behavior_ != nullptr) _impl_.behavior_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LocalCommandHistoryItem::LocalCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistoryItem)
}
LocalCommandHistoryItem::LocalCommandHistoryItem(const LocalCommandHistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalCommandHistoryItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.behavior_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::TSP::Reference(*from._impl_.command_);
  }
  if (from._internal_has_behavior()) {
    _this->_impl_.behavior_ = new ::TSP::Reference(*from._impl_.behavior_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistoryItem)
}

inline void LocalCommandHistoryItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.behavior_){nullptr}
  };
}

LocalCommandHistoryItem::~LocalCommandHistoryItem() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistoryItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCommandHistoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.command_;
  if (this != internal_default_instance()) delete _impl_.behavior_;
}

void LocalCommandHistoryItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCommandHistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistoryItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.behavior_ != nullptr);
      _impl_.behavior_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistoryItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference behavior = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_behavior(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalCommandHistoryItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistoryItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference behavior = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::behavior(this),
        _Internal::behavior(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistoryItem)
  return target;
}

size_t LocalCommandHistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistoryItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_);
    }

    // optional .TSP.Reference behavior = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.behavior_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistoryItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalCommandHistoryItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistoryItem::GetClassData() const { return &_class_data_; }


void LocalCommandHistoryItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalCommandHistoryItem*>(&to_msg);
  auto& from = static_cast<const LocalCommandHistoryItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistoryItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_command()->::TSP::Reference::MergeFrom(
          from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_behavior()->::TSP::Reference::MergeFrom(
          from._internal_behavior());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistoryItem::CopyFrom(const LocalCommandHistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistoryItem::IsInitialized() const {
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  if (_internal_has_behavior()) {
    if (!_impl_.behavior_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistoryItem::InternalSwap(LocalCommandHistoryItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalCommandHistoryItem, _impl_.behavior_)
      + sizeof(LocalCommandHistoryItem::_impl_.behavior_)
      - PROTOBUF_FIELD_OFFSET(LocalCommandHistoryItem, _impl_.command_)>(
          reinterpret_cast<char*>(&_impl_.command_),
          reinterpret_cast<char*>(&other->_impl_.command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistoryItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[1]);
}

// ===================================================================

class LocalCommandHistoryArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistoryArray>()._impl_._has_bits_);
  static const ::TSP::LargeArray& large_array(const LocalCommandHistoryArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeArray&
LocalCommandHistoryArray::_Internal::large_array(const LocalCommandHistoryArray* msg) {
  return *msg->_impl_.large_array_;
}
void LocalCommandHistoryArray::clear_large_array() {
  if (_impl_.large_array_ != nullptr) _impl_.large_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LocalCommandHistoryArray::LocalCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistoryArray)
}
LocalCommandHistoryArray::LocalCommandHistoryArray(const LocalCommandHistoryArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalCommandHistoryArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    _this->_impl_.large_array_ = new ::TSP::LargeArray(*from._impl_.large_array_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistoryArray)
}

inline void LocalCommandHistoryArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}
  };
}

LocalCommandHistoryArray::~LocalCommandHistoryArray() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistoryArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCommandHistoryArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_array_;
}

void LocalCommandHistoryArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCommandHistoryArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistoryArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_ != nullptr);
    _impl_.large_array_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistoryArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalCommandHistoryArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistoryArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array(this),
        _Internal::large_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistoryArray)
  return target;
}

size_t LocalCommandHistoryArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistoryArray)
  size_t total_size = 0;

  // required .TSP.LargeArray large_array = 1;
  if (_internal_has_large_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_array_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistoryArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalCommandHistoryArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistoryArray::GetClassData() const { return &_class_data_; }


void LocalCommandHistoryArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalCommandHistoryArray*>(&to_msg);
  auto& from = static_cast<const LocalCommandHistoryArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistoryArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _this->_internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(
        from._internal_large_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistoryArray::CopyFrom(const LocalCommandHistoryArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistoryArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistoryArray::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_large_array()) {
    if (!_impl_.large_array_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistoryArray::InternalSwap(LocalCommandHistoryArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_array_, other->_impl_.large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistoryArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[2]);
}

// ===================================================================

class LocalCommandHistoryArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistoryArraySegment>()._impl_._has_bits_);
  static const ::TSP::LargeObjectArraySegment& large_object_array_segment(const LocalCommandHistoryArraySegment* msg);
  static void set_has_large_object_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeObjectArraySegment&
LocalCommandHistoryArraySegment::_Internal::large_object_array_segment(const LocalCommandHistoryArraySegment* msg) {
  return *msg->_impl_.large_object_array_segment_;
}
void LocalCommandHistoryArraySegment::clear_large_object_array_segment() {
  if (_impl_.large_object_array_segment_ != nullptr) _impl_.large_object_array_segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LocalCommandHistoryArraySegment::LocalCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistoryArraySegment)
}
LocalCommandHistoryArraySegment::LocalCommandHistoryArraySegment(const LocalCommandHistoryArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalCommandHistoryArraySegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_segment_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array_segment()) {
    _this->_impl_.large_object_array_segment_ = new ::TSP::LargeObjectArraySegment(*from._impl_.large_object_array_segment_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistoryArraySegment)
}

inline void LocalCommandHistoryArraySegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_segment_){nullptr}
  };
}

LocalCommandHistoryArraySegment::~LocalCommandHistoryArraySegment() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistoryArraySegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCommandHistoryArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_object_array_segment_;
}

void LocalCommandHistoryArraySegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCommandHistoryArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistoryArraySegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_object_array_segment_ != nullptr);
    _impl_.large_object_array_segment_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistoryArraySegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalCommandHistoryArraySegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistoryArraySegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_object_array_segment(this),
        _Internal::large_object_array_segment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistoryArraySegment)
  return target;
}

size_t LocalCommandHistoryArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistoryArraySegment)
  size_t total_size = 0;

  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (_internal_has_large_object_array_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_object_array_segment_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistoryArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalCommandHistoryArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistoryArraySegment::GetClassData() const { return &_class_data_; }


void LocalCommandHistoryArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalCommandHistoryArraySegment*>(&to_msg);
  auto& from = static_cast<const LocalCommandHistoryArraySegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistoryArraySegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array_segment()) {
    _this->_internal_mutable_large_object_array_segment()->::TSP::LargeObjectArraySegment::MergeFrom(
        from._internal_large_object_array_segment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistoryArraySegment::CopyFrom(const LocalCommandHistoryArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistoryArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistoryArraySegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_large_object_array_segment()) {
    if (!_impl_.large_object_array_segment_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistoryArraySegment::InternalSwap(LocalCommandHistoryArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_object_array_segment_, other->_impl_.large_object_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistoryArraySegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[3]);
}

// ===================================================================

class LocalCommandHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistory>()._impl_._has_bits_);
  static void set_has_undo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& items_array(const LocalCommandHistory* msg);
  static void set_has_items_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fixed_radar_13365177(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
LocalCommandHistory::_Internal::items_array(const LocalCommandHistory* msg) {
  return *msg->_impl_.items_array_;
}
void LocalCommandHistory::clear_items_array() {
  if (_impl_.items_array_ != nullptr) _impl_.items_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LocalCommandHistory::LocalCommandHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistory)
}
LocalCommandHistory::LocalCommandHistory(const LocalCommandHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalCommandHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_array_){nullptr}
    , decltype(_impl_.undo_count_){}
    , decltype(_impl_.fixed_radar_13365177_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_items_array()) {
    _this->_impl_.items_array_ = new ::TSP::Reference(*from._impl_.items_array_);
  }
  ::memcpy(&_impl_.undo_count_, &from._impl_.undo_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fixed_radar_13365177_) -
    reinterpret_cast<char*>(&_impl_.undo_count_)) + sizeof(_impl_.fixed_radar_13365177_));
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistory)
}

inline void LocalCommandHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_array_){nullptr}
    , decltype(_impl_.undo_count_){0u}
    , decltype(_impl_.fixed_radar_13365177_){false}
  };
}

LocalCommandHistory::~LocalCommandHistory() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCommandHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.items_array_;
}

void LocalCommandHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCommandHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.items_array_ != nullptr);
    _impl_.items_array_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.undo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fixed_radar_13365177_) -
        reinterpret_cast<char*>(&_impl_.undo_count_)) + sizeof(_impl_.fixed_radar_13365177_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 undo_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_undo_count(&has_bits);
          _impl_.undo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference items_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_items_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fixed_radar_13365177 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_fixed_radar_13365177(&has_bits);
          _impl_.fixed_radar_13365177_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalCommandHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 undo_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_undo_count(), target);
  }

  // optional .TSP.Reference items_array = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::items_array(this),
        _Internal::items_array(this).GetCachedSize(), target, stream);
  }

  // optional bool fixed_radar_13365177 = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_fixed_radar_13365177(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistory)
  return target;
}

size_t LocalCommandHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistory)
  size_t total_size = 0;

  // required uint32 undo_count = 1;
  if (_internal_has_undo_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undo_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference items_array = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.items_array_);
  }

  // optional bool fixed_radar_13365177 = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalCommandHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistory::GetClassData() const { return &_class_data_; }


void LocalCommandHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalCommandHistory*>(&to_msg);
  auto& from = static_cast<const LocalCommandHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_items_array()->::TSP::Reference::MergeFrom(
          from._internal_items_array());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.undo_count_ = from._impl_.undo_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fixed_radar_13365177_ = from._impl_.fixed_radar_13365177_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistory::CopyFrom(const LocalCommandHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_items_array()) {
    if (!_impl_.items_array_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistory::InternalSwap(LocalCommandHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalCommandHistory, _impl_.fixed_radar_13365177_)
      + sizeof(LocalCommandHistory::_impl_.fixed_radar_13365177_)
      - PROTOBUF_FIELD_OFFSET(LocalCommandHistory, _impl_.items_array_)>(
          reinterpret_cast<char*>(&_impl_.items_array_),
          reinterpret_cast<char*>(&other->_impl_.items_array_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[4]);
}

// ===================================================================

class CollaborationCommandHistoryArray::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryArray>()._impl_._has_bits_);
  static const ::TSP::LargeArray& large_array(const CollaborationCommandHistoryArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeArray&
CollaborationCommandHistoryArray::_Internal::large_array(const CollaborationCommandHistoryArray* msg) {
  return *msg->_impl_.large_array_;
}
void CollaborationCommandHistoryArray::clear_large_array() {
  if (_impl_.large_array_ != nullptr) _impl_.large_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistoryArray::CollaborationCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryArray)
}
CollaborationCommandHistoryArray::CollaborationCommandHistoryArray(const CollaborationCommandHistoryArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistoryArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    _this->_impl_.large_array_ = new ::TSP::LargeArray(*from._impl_.large_array_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryArray)
}

inline void CollaborationCommandHistoryArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}
  };
}

CollaborationCommandHistoryArray::~CollaborationCommandHistoryArray() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistoryArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_array_;
}

void CollaborationCommandHistoryArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistoryArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_ != nullptr);
    _impl_.large_array_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistoryArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array(this),
        _Internal::large_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryArray)
  return target;
}

size_t CollaborationCommandHistoryArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryArray)
  size_t total_size = 0;

  // required .TSP.LargeArray large_array = 1;
  if (_internal_has_large_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_array_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistoryArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryArray::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistoryArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistoryArray*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistoryArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _this->_internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(
        from._internal_large_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryArray::CopyFrom(const CollaborationCommandHistoryArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryArray::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_large_array()) {
    if (!_impl_.large_array_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryArray::InternalSwap(CollaborationCommandHistoryArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_array_, other->_impl_.large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[5]);
}

// ===================================================================

class CollaborationCommandHistoryArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryArraySegment>()._impl_._has_bits_);
  static const ::TSP::LargeObjectArraySegment& large_object_array_segment(const CollaborationCommandHistoryArraySegment* msg);
  static void set_has_large_object_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeObjectArraySegment&
CollaborationCommandHistoryArraySegment::_Internal::large_object_array_segment(const CollaborationCommandHistoryArraySegment* msg) {
  return *msg->_impl_.large_object_array_segment_;
}
void CollaborationCommandHistoryArraySegment::clear_large_object_array_segment() {
  if (_impl_.large_object_array_segment_ != nullptr) _impl_.large_object_array_segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistoryArraySegment::CollaborationCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryArraySegment)
}
CollaborationCommandHistoryArraySegment::CollaborationCommandHistoryArraySegment(const CollaborationCommandHistoryArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistoryArraySegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_segment_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array_segment()) {
    _this->_impl_.large_object_array_segment_ = new ::TSP::LargeObjectArraySegment(*from._impl_.large_object_array_segment_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryArraySegment)
}

inline void CollaborationCommandHistoryArraySegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_segment_){nullptr}
  };
}

CollaborationCommandHistoryArraySegment::~CollaborationCommandHistoryArraySegment() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryArraySegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistoryArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_object_array_segment_;
}

void CollaborationCommandHistoryArraySegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistoryArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryArraySegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_object_array_segment_ != nullptr);
    _impl_.large_object_array_segment_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryArraySegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistoryArraySegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryArraySegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_object_array_segment(this),
        _Internal::large_object_array_segment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryArraySegment)
  return target;
}

size_t CollaborationCommandHistoryArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryArraySegment)
  size_t total_size = 0;

  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (_internal_has_large_object_array_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_object_array_segment_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistoryArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryArraySegment::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistoryArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistoryArraySegment*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistoryArraySegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryArraySegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array_segment()) {
    _this->_internal_mutable_large_object_array_segment()->::TSP::LargeObjectArraySegment::MergeFrom(
        from._internal_large_object_array_segment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryArraySegment::CopyFrom(const CollaborationCommandHistoryArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryArraySegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_large_object_array_segment()) {
    if (!_impl_.large_object_array_segment_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryArraySegment::InternalSwap(CollaborationCommandHistoryArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_object_array_segment_, other->_impl_.large_object_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryArraySegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[6]);
}

// ===================================================================

class CollaborationCommandHistory_ItemList::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistory_ItemList>()._impl_._has_bits_);
  static const ::TSP::Reference& items_array(const CollaborationCommandHistory_ItemList* msg);
  static void set_has_items_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistory_ItemList::_Internal::items_array(const CollaborationCommandHistory_ItemList* msg) {
  return *msg->_impl_.items_array_;
}
void CollaborationCommandHistory_ItemList::clear_items_array() {
  if (_impl_.items_array_ != nullptr) _impl_.items_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CollaborationCommandHistory_ItemList::clear_transformer_entries() {
  _impl_.transformer_entries_.Clear();
}
CollaborationCommandHistory_ItemList::CollaborationCommandHistory_ItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistory.ItemList)
}
CollaborationCommandHistory_ItemList::CollaborationCommandHistory_ItemList(const CollaborationCommandHistory_ItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistory_ItemList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_entries_){from._impl_.transformer_entries_}
    , decltype(_impl_.items_array_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_items_array()) {
    _this->_impl_.items_array_ = new ::TSP::Reference(*from._impl_.items_array_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistory.ItemList)
}

inline void CollaborationCommandHistory_ItemList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_entries_){arena}
    , decltype(_impl_.items_array_){nullptr}
  };
}

CollaborationCommandHistory_ItemList::~CollaborationCommandHistory_ItemList() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistory.ItemList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistory_ItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transformer_entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.items_array_;
}

void CollaborationCommandHistory_ItemList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistory_ItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistory.ItemList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transformer_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.items_array_ != nullptr);
    _impl_.items_array_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistory_ItemList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference items_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_items_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference transformer_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transformer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistory_ItemList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistory.ItemList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference items_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::items_array(this),
        _Internal::items_array(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference transformer_entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transformer_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_transformer_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistory.ItemList)
  return target;
}

size_t CollaborationCommandHistory_ItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistory.ItemList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference transformer_entries = 2;
  total_size += 1UL * this->_internal_transformer_entries_size();
  for (const auto& msg : this->_impl_.transformer_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference items_array = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.items_array_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistory_ItemList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistory_ItemList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistory_ItemList::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistory_ItemList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistory_ItemList*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistory_ItemList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistory.ItemList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transformer_entries_.MergeFrom(from._impl_.transformer_entries_);
  if (from._internal_has_items_array()) {
    _this->_internal_mutable_items_array()->::TSP::Reference::MergeFrom(
        from._internal_items_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistory_ItemList::CopyFrom(const CollaborationCommandHistory_ItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistory.ItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistory_ItemList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.transformer_entries_))
    return false;
  if (_internal_has_items_array()) {
    if (!_impl_.items_array_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistory_ItemList::InternalSwap(CollaborationCommandHistory_ItemList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.transformer_entries_.InternalSwap(&other->_impl_.transformer_entries_);
  swap(_impl_.items_array_, other->_impl_.items_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistory_ItemList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[7]);
}

// ===================================================================

class CollaborationCommandHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistory>()._impl_._has_bits_);
  static const ::TSP::UUID& local_identifier(const CollaborationCommandHistory* msg);
  static void set_has_local_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CollaborationCommandHistory_ItemList& undo_items(const CollaborationCommandHistory* msg);
  static void set_has_undo_items(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::CollaborationCommandHistory_ItemList& redo_items(const CollaborationCommandHistory* msg);
  static void set_has_redo_items(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::UUID&
CollaborationCommandHistory::_Internal::local_identifier(const CollaborationCommandHistory* msg) {
  return *msg->_impl_.local_identifier_;
}
const ::TSK::CollaborationCommandHistory_ItemList&
CollaborationCommandHistory::_Internal::undo_items(const CollaborationCommandHistory* msg) {
  return *msg->_impl_.undo_items_;
}
const ::TSK::CollaborationCommandHistory_ItemList&
CollaborationCommandHistory::_Internal::redo_items(const CollaborationCommandHistory* msg) {
  return *msg->_impl_.redo_items_;
}
void CollaborationCommandHistory::clear_local_identifier() {
  if (_impl_.local_identifier_ != nullptr) _impl_.local_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistory::CollaborationCommandHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistory)
}
CollaborationCommandHistory::CollaborationCommandHistory(const CollaborationCommandHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_identifier_){nullptr}
    , decltype(_impl_.undo_items_){nullptr}
    , decltype(_impl_.redo_items_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_identifier()) {
    _this->_impl_.local_identifier_ = new ::TSP::UUID(*from._impl_.local_identifier_);
  }
  if (from._internal_has_undo_items()) {
    _this->_impl_.undo_items_ = new ::TSK::CollaborationCommandHistory_ItemList(*from._impl_.undo_items_);
  }
  if (from._internal_has_redo_items()) {
    _this->_impl_.redo_items_ = new ::TSK::CollaborationCommandHistory_ItemList(*from._impl_.redo_items_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistory)
}

inline void CollaborationCommandHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_identifier_){nullptr}
    , decltype(_impl_.undo_items_){nullptr}
    , decltype(_impl_.redo_items_){nullptr}
  };
}

CollaborationCommandHistory::~CollaborationCommandHistory() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.local_identifier_;
  if (this != internal_default_instance()) delete _impl_.undo_items_;
  if (this != internal_default_instance()) delete _impl_.redo_items_;
}

void CollaborationCommandHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.local_identifier_ != nullptr);
      _impl_.local_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.undo_items_ != nullptr);
      _impl_.undo_items_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.redo_items_ != nullptr);
      _impl_.redo_items_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID local_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_items(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_items(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID local_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::local_identifier(this),
        _Internal::local_identifier(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::undo_items(this),
        _Internal::undo_items(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::redo_items(this),
        _Internal::redo_items(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistory)
  return target;
}

size_t CollaborationCommandHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.UUID local_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.local_identifier_);
    }

    // optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_items_);
    }

    // optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.redo_items_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistory::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistory*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_local_identifier()->::TSP::UUID::MergeFrom(
          from._internal_local_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_undo_items()->::TSK::CollaborationCommandHistory_ItemList::MergeFrom(
          from._internal_undo_items());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_redo_items()->::TSK::CollaborationCommandHistory_ItemList::MergeFrom(
          from._internal_redo_items());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistory::CopyFrom(const CollaborationCommandHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistory::IsInitialized() const {
  if (_internal_has_local_identifier()) {
    if (!_impl_.local_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_undo_items()) {
    if (!_impl_.undo_items_->IsInitialized()) return false;
  }
  if (_internal_has_redo_items()) {
    if (!_impl_.redo_items_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistory::InternalSwap(CollaborationCommandHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationCommandHistory, _impl_.redo_items_)
      + sizeof(CollaborationCommandHistory::_impl_.redo_items_)
      - PROTOBUF_FIELD_OFFSET(CollaborationCommandHistory, _impl_.local_identifier_)>(
          reinterpret_cast<char*>(&_impl_.local_identifier_),
          reinterpret_cast<char*>(&other->_impl_.local_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[8]);
}

// ===================================================================

class CollaborationCommandHistoryItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryItem>()._impl_._has_bits_);
  static const ::TSP::Reference& command(const CollaborationCommandHistoryItem* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& behavior(const CollaborationCommandHistoryItem* msg);
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& coalescing_group(const CollaborationCommandHistoryItem* msg);
  static void set_has_coalescing_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistoryItem::_Internal::command(const CollaborationCommandHistoryItem* msg) {
  return *msg->_impl_.command_;
}
const ::TSP::Reference&
CollaborationCommandHistoryItem::_Internal::behavior(const CollaborationCommandHistoryItem* msg) {
  return *msg->_impl_.behavior_;
}
const ::TSP::Reference&
CollaborationCommandHistoryItem::_Internal::coalescing_group(const CollaborationCommandHistoryItem* msg) {
  return *msg->_impl_.coalescing_group_;
}
void CollaborationCommandHistoryItem::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CollaborationCommandHistoryItem::clear_behavior() {
  if (_impl_.behavior_ != nullptr) _impl_.behavior_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CollaborationCommandHistoryItem::clear_coalescing_group() {
  if (_impl_.coalescing_group_ != nullptr) _impl_.coalescing_group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CollaborationCommandHistoryItem::CollaborationCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryItem)
}
CollaborationCommandHistoryItem::CollaborationCommandHistoryItem(const CollaborationCommandHistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistoryItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.behavior_){nullptr}
    , decltype(_impl_.coalescing_group_){nullptr}
    , decltype(_impl_.revision_sequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_string()) {
    _this->_impl_.action_string_.Set(from._internal_action_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::TSP::Reference(*from._impl_.command_);
  }
  if (from._internal_has_behavior()) {
    _this->_impl_.behavior_ = new ::TSP::Reference(*from._impl_.behavior_);
  }
  if (from._internal_has_coalescing_group()) {
    _this->_impl_.coalescing_group_ = new ::TSP::Reference(*from._impl_.coalescing_group_);
  }
  _this->_impl_.revision_sequence_ = from._impl_.revision_sequence_;
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryItem)
}

inline void CollaborationCommandHistoryItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.behavior_){nullptr}
    , decltype(_impl_.coalescing_group_){nullptr}
    , decltype(_impl_.revision_sequence_){uint64_t{0u}}
  };
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CollaborationCommandHistoryItem::~CollaborationCommandHistoryItem() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.command_;
  if (this != internal_default_instance()) delete _impl_.behavior_;
  if (this != internal_default_instance()) delete _impl_.coalescing_group_;
}

void CollaborationCommandHistoryItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.behavior_ != nullptr);
      _impl_.behavior_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.coalescing_group_ != nullptr);
      _impl_.coalescing_group_->Clear();
    }
  }
  _impl_.revision_sequence_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string action_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.CollaborationCommandHistoryItem.action_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_behavior(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference coalescing_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coalescing_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 revision_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_revision_sequence(&has_bits);
          _impl_.revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistoryItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // optional string action_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CollaborationCommandHistoryItem.action_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action_string(), target);
  }

  // optional .TSP.Reference behavior = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::behavior(this),
        _Internal::behavior(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference coalescing_group = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::coalescing_group(this),
        _Internal::coalescing_group(this).GetCachedSize(), target, stream);
  }

  // optional uint64 revision_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_revision_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryItem)
  return target;
}

size_t CollaborationCommandHistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string action_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_string());
    }

    // optional .TSP.Reference command = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_);
    }

    // optional .TSP.Reference behavior = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.behavior_);
    }

    // optional .TSP.Reference coalescing_group = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.coalescing_group_);
    }

    // optional uint64 revision_sequence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_revision_sequence());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistoryItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryItem::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistoryItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistoryItem*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistoryItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_command()->::TSP::Reference::MergeFrom(
          from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_behavior()->::TSP::Reference::MergeFrom(
          from._internal_behavior());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_coalescing_group()->::TSP::Reference::MergeFrom(
          from._internal_coalescing_group());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.revision_sequence_ = from._impl_.revision_sequence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryItem::CopyFrom(const CollaborationCommandHistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryItem::IsInitialized() const {
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  if (_internal_has_behavior()) {
    if (!_impl_.behavior_->IsInitialized()) return false;
  }
  if (_internal_has_coalescing_group()) {
    if (!_impl_.coalescing_group_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryItem::InternalSwap(CollaborationCommandHistoryItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_string_, lhs_arena,
      &other->_impl_.action_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryItem, _impl_.revision_sequence_)
      + sizeof(CollaborationCommandHistoryItem::_impl_.revision_sequence_)
      - PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryItem, _impl_.command_)>(
          reinterpret_cast<char*>(&_impl_.command_),
          reinterpret_cast<char*>(&other->_impl_.command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[9]);
}

// ===================================================================

class CollaborationCommandHistoryCoalescingGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryCoalescingGroup>()._impl_._has_bits_);
  static void set_has_did_coalesce_all_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CollaborationCommandHistoryCoalescingGroup::clear_nodes() {
  _impl_.nodes_.Clear();
}
CollaborationCommandHistoryCoalescingGroup::CollaborationCommandHistoryCoalescingGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryCoalescingGroup)
}
CollaborationCommandHistoryCoalescingGroup::CollaborationCommandHistoryCoalescingGroup(const CollaborationCommandHistoryCoalescingGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistoryCoalescingGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.did_coalesce_all_commands_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.did_coalesce_all_commands_ = from._impl_.did_coalesce_all_commands_;
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryCoalescingGroup)
}

inline void CollaborationCommandHistoryCoalescingGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nodes_){arena}
    , decltype(_impl_.did_coalesce_all_commands_){false}
  };
}

CollaborationCommandHistoryCoalescingGroup::~CollaborationCommandHistoryCoalescingGroup() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryCoalescingGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistoryCoalescingGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
}

void CollaborationCommandHistoryCoalescingGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistoryCoalescingGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.did_coalesce_all_commands_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryCoalescingGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool did_coalesce_all_commands = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_did_coalesce_all_commands(&has_bits);
          _impl_.did_coalesce_all_commands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistoryCoalescingGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool did_coalesce_all_commands = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_did_coalesce_all_commands(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryCoalescingGroup)
  return target;
}

size_t CollaborationCommandHistoryCoalescingGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool did_coalesce_all_commands = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryCoalescingGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistoryCoalescingGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryCoalescingGroup::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistoryCoalescingGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistoryCoalescingGroup*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistoryCoalescingGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (from._internal_has_did_coalesce_all_commands()) {
    _this->_internal_set_did_coalesce_all_commands(from._internal_did_coalesce_all_commands());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryCoalescingGroup::CopyFrom(const CollaborationCommandHistoryCoalescingGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryCoalescingGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.nodes_))
    return false;
  return true;
}

void CollaborationCommandHistoryCoalescingGroup::InternalSwap(CollaborationCommandHistoryCoalescingGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  swap(_impl_.did_coalesce_all_commands_, other->_impl_.did_coalesce_all_commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryCoalescingGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[10]);
}

// ===================================================================

class CollaborationCommandHistoryCoalescingGroupNode::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryCoalescingGroupNode>()._impl_._has_bits_);
  static const ::TSP::Reference& command(const CollaborationCommandHistoryCoalescingGroupNode* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistoryCoalescingGroupNode::_Internal::command(const CollaborationCommandHistoryCoalescingGroupNode* msg) {
  return *msg->_impl_.command_;
}
void CollaborationCommandHistoryCoalescingGroupNode::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistoryCoalescingGroupNode::CollaborationCommandHistoryCoalescingGroupNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryCoalescingGroupNode)
}
CollaborationCommandHistoryCoalescingGroupNode::CollaborationCommandHistoryCoalescingGroupNode(const CollaborationCommandHistoryCoalescingGroupNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistoryCoalescingGroupNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::TSP::Reference(*from._impl_.command_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryCoalescingGroupNode)
}

inline void CollaborationCommandHistoryCoalescingGroupNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){nullptr}
  };
}

CollaborationCommandHistoryCoalescingGroupNode::~CollaborationCommandHistoryCoalescingGroupNode() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistoryCoalescingGroupNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.command_;
}

void CollaborationCommandHistoryCoalescingGroupNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistoryCoalescingGroupNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.command_ != nullptr);
    _impl_.command_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryCoalescingGroupNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistoryCoalescingGroupNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  return target;
}

size_t CollaborationCommandHistoryCoalescingGroupNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference command = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryCoalescingGroupNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistoryCoalescingGroupNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryCoalescingGroupNode::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistoryCoalescingGroupNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistoryCoalescingGroupNode*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistoryCoalescingGroupNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _this->_internal_mutable_command()->::TSP::Reference::MergeFrom(
        from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryCoalescingGroupNode::CopyFrom(const CollaborationCommandHistoryCoalescingGroupNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryCoalescingGroupNode::IsInitialized() const {
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryCoalescingGroupNode::InternalSwap(CollaborationCommandHistoryCoalescingGroupNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.command_, other->_impl_.command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryCoalescingGroupNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[11]);
}

// ===================================================================

class CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver>()._impl_._has_bits_);
  static const ::TSP::Reference& coalescing_group(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg);
  static void set_has_coalescing_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& node(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg);
  static void set_has_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_Internal::coalescing_group(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg) {
  return *msg->_impl_.coalescing_group_;
}
const ::TSP::Reference&
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_Internal::node(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg) {
  return *msg->_impl_.node_;
}
void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::clear_coalescing_group() {
  if (_impl_.coalescing_group_ != nullptr) _impl_.coalescing_group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::clear_node() {
  if (_impl_.node_ != nullptr) _impl_.node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
}
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coalescing_group_){nullptr}
    , decltype(_impl_.node_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coalescing_group()) {
    _this->_impl_.coalescing_group_ = new ::TSP::Reference(*from._impl_.coalescing_group_);
  }
  if (from._internal_has_node()) {
    _this->_impl_.node_ = new ::TSP::Reference(*from._impl_.node_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
}

inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coalescing_group_){nullptr}
    , decltype(_impl_.node_){nullptr}
  };
}

CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::~CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.coalescing_group_;
  if (this != internal_default_instance()) delete _impl_.node_;
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.coalescing_group_ != nullptr);
      _impl_.coalescing_group_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.node_ != nullptr);
      _impl_.node_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference coalescing_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coalescing_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference coalescing_group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coalescing_group(this),
        _Internal::coalescing_group(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::node(this),
        _Internal::node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  return target;
}

size_t CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference coalescing_group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.coalescing_group_);
    }

    // optional .TSP.Reference node = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::GetClassData() const { return &_class_data_; }


void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver*>(&to_msg);
  auto& from = static_cast<const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coalescing_group()->::TSP::Reference::MergeFrom(
          from._internal_coalescing_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_node()->::TSP::Reference::MergeFrom(
          from._internal_node());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CopyFrom(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::IsInitialized() const {
  if (_internal_has_coalescing_group()) {
    if (!_impl_.coalescing_group_->IsInitialized()) return false;
  }
  if (_internal_has_node()) {
    if (!_impl_.node_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::InternalSwap(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _impl_.node_)
      + sizeof(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_impl_.node_)
      - PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _impl_.coalescing_group_)>(
          reinterpret_cast<char*>(&_impl_.coalescing_group_),
          reinterpret_cast<char*>(&other->_impl_.coalescing_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[12]);
}

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._impl_._has_bits_);
  static void set_has_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& annotation_author_storage(const DocumentArchive* msg);
  static void set_has_annotation_author_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prevent_image_conversion_on_open(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_floating_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_has_user_defined_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& collaboration_operation_history(const DocumentArchive* msg);
  static void set_has_collaboration_operation_history(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_should_measure_negatively_tracked_text_correctly(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_optimized_text_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSK::FormattingSymbolsArchive& formatting_symbols(const DocumentArchive* msg);
  static void set_has_formatting_symbols(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& activity_stream(const DocumentArchive* msg);
  static void set_has_activity_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSP::Reference&
DocumentArchive::_Internal::annotation_author_storage(const DocumentArchive* msg) {
  return *msg->_impl_.annotation_author_storage_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::collaboration_operation_history(const DocumentArchive* msg) {
  return *msg->_impl_.collaboration_operation_history_;
}
const ::TSK::FormattingSymbolsArchive&
DocumentArchive::_Internal::formatting_symbols(const DocumentArchive* msg) {
  return *msg->_impl_.formatting_symbols_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::activity_stream(const DocumentArchive* msg) {
  return *msg->_impl_.activity_stream_;
}
void DocumentArchive::clear_annotation_author_storage() {
  if (_impl_.annotation_author_storage_ != nullptr) _impl_.annotation_author_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DocumentArchive::clear_activity_log_entries() {
  _impl_.activity_log_entries_.Clear();
}
void DocumentArchive::clear_collaboration_operation_history() {
  if (_impl_.collaboration_operation_history_ != nullptr) _impl_.collaboration_operation_history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void DocumentArchive::clear_activity_stream() {
  if (_impl_.activity_stream_ != nullptr) _impl_.activity_stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_log_entries_){from._impl_.activity_log_entries_}
    , decltype(_impl_.locale_identifier_){}
    , decltype(_impl_.creation_locale_identifier_){}
    , decltype(_impl_.annotation_author_storage_){nullptr}
    , decltype(_impl_.collaboration_operation_history_){nullptr}
    , decltype(_impl_.formatting_symbols_){nullptr}
    , decltype(_impl_.activity_stream_){nullptr}
    , decltype(_impl_.prevent_image_conversion_on_open_){}
    , decltype(_impl_.has_floating_locale_){}
    , decltype(_impl_.has_user_defined_locale_){}
    , decltype(_impl_.should_measure_negatively_tracked_text_correctly_){}
    , decltype(_impl_.use_optimized_text_vertical_alignment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale_identifier()) {
    _this->_impl_.locale_identifier_.Set(from._internal_locale_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creation_locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creation_locale_identifier()) {
    _this->_impl_.creation_locale_identifier_.Set(from._internal_creation_locale_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_annotation_author_storage()) {
    _this->_impl_.annotation_author_storage_ = new ::TSP::Reference(*from._impl_.annotation_author_storage_);
  }
  if (from._internal_has_collaboration_operation_history()) {
    _this->_impl_.collaboration_operation_history_ = new ::TSP::Reference(*from._impl_.collaboration_operation_history_);
  }
  if (from._internal_has_formatting_symbols()) {
    _this->_impl_.formatting_symbols_ = new ::TSK::FormattingSymbolsArchive(*from._impl_.formatting_symbols_);
  }
  if (from._internal_has_activity_stream()) {
    _this->_impl_.activity_stream_ = new ::TSP::Reference(*from._impl_.activity_stream_);
  }
  ::memcpy(&_impl_.prevent_image_conversion_on_open_, &from._impl_.prevent_image_conversion_on_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_optimized_text_vertical_alignment_) -
    reinterpret_cast<char*>(&_impl_.prevent_image_conversion_on_open_)) + sizeof(_impl_.use_optimized_text_vertical_alignment_));
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentArchive)
}

inline void DocumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_log_entries_){arena}
    , decltype(_impl_.locale_identifier_){}
    , decltype(_impl_.creation_locale_identifier_){}
    , decltype(_impl_.annotation_author_storage_){nullptr}
    , decltype(_impl_.collaboration_operation_history_){nullptr}
    , decltype(_impl_.formatting_symbols_){nullptr}
    , decltype(_impl_.activity_stream_){nullptr}
    , decltype(_impl_.prevent_image_conversion_on_open_){false}
    , decltype(_impl_.has_floating_locale_){false}
    , decltype(_impl_.has_user_defined_locale_){false}
    , decltype(_impl_.should_measure_negatively_tracked_text_correctly_){false}
    , decltype(_impl_.use_optimized_text_vertical_alignment_){false}
  };
  _impl_.locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creation_locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:TSK.DocumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activity_log_entries_.~RepeatedPtrField();
  _impl_.locale_identifier_.Destroy();
  _impl_.creation_locale_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.annotation_author_storage_;
  if (this != internal_default_instance()) delete _impl_.collaboration_operation_history_;
  if (this != internal_default_instance()) delete _impl_.formatting_symbols_;
  if (this != internal_default_instance()) delete _impl_.activity_stream_;
}

void DocumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activity_log_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.creation_locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.annotation_author_storage_ != nullptr);
      _impl_.annotation_author_storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.collaboration_operation_history_ != nullptr);
      _impl_.collaboration_operation_history_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.formatting_symbols_ != nullptr);
      _impl_.formatting_symbols_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.activity_stream_ != nullptr);
      _impl_.activity_stream_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.prevent_image_conversion_on_open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_floating_locale_) -
        reinterpret_cast<char*>(&_impl_.prevent_image_conversion_on_open_)) + sizeof(_impl_.has_floating_locale_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.has_user_defined_locale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_optimized_text_vertical_alignment_) -
        reinterpret_cast<char*>(&_impl_.has_user_defined_locale_)) + sizeof(_impl_.use_optimized_text_vertical_alignment_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string locale_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_locale_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.DocumentArchive.locale_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference annotation_author_storage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_author_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference activity_log_entries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activity_log_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string creation_locale_identifier = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_creation_locale_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.DocumentArchive.creation_locale_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool prevent_image_conversion_on_open = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_prevent_image_conversion_on_open(&has_bits);
          _impl_.prevent_image_conversion_on_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_floating_locale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_has_floating_locale(&has_bits);
          _impl_.has_floating_locale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_user_defined_locale = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_has_user_defined_locale(&has_bits);
          _impl_.has_user_defined_locale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_operation_history = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_operation_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_measure_negatively_tracked_text_correctly = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_should_measure_negatively_tracked_text_correctly(&has_bits);
          _impl_.should_measure_negatively_tracked_text_correctly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_optimized_text_vertical_alignment = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_use_optimized_text_vertical_alignment(&has_bits);
          _impl_.use_optimized_text_vertical_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_formatting_symbols(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference activity_stream = 199;
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string locale_identifier = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale_identifier().data(), static_cast<int>(this->_internal_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentArchive.locale_identifier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_locale_identifier(), target);
  }

  // optional .TSP.Reference annotation_author_storage = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::annotation_author_storage(this),
        _Internal::annotation_author_storage(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference activity_log_entries = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activity_log_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_activity_log_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string creation_locale_identifier = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_locale_identifier().data(), static_cast<int>(this->_internal_creation_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentArchive.creation_locale_identifier");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_creation_locale_identifier(), target);
  }

  // optional bool prevent_image_conversion_on_open = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_prevent_image_conversion_on_open(), target);
  }

  // optional bool has_floating_locale = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_has_floating_locale(), target);
  }

  // optional bool has_user_defined_locale = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_has_user_defined_locale(), target);
  }

  // optional .TSP.Reference collaboration_operation_history = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::collaboration_operation_history(this),
        _Internal::collaboration_operation_history(this).GetCachedSize(), target, stream);
  }

  // optional bool should_measure_negatively_tracked_text_correctly = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_should_measure_negatively_tracked_text_correctly(), target);
  }

  // optional bool use_optimized_text_vertical_alignment = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_use_optimized_text_vertical_alignment(), target);
  }

  // optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::formatting_symbols(this),
        _Internal::formatting_symbols(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference activity_stream = 199;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(199, _Internal::activity_stream(this),
        _Internal::activity_stream(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentArchive)
  return target;
}

size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference activity_log_entries = 8;
  total_size += 1UL * this->_internal_activity_log_entries_size();
  for (const auto& msg : this->_impl_.activity_log_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string locale_identifier = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale_identifier());
    }

    // optional string creation_locale_identifier = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_locale_identifier());
    }

    // optional .TSP.Reference annotation_author_storage = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.annotation_author_storage_);
    }

    // optional .TSP.Reference collaboration_operation_history = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collaboration_operation_history_);
    }

    // optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formatting_symbols_);
    }

    // optional .TSP.Reference activity_stream = 199;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activity_stream_);
    }

    // optional bool prevent_image_conversion_on_open = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_floating_locale = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool has_user_defined_locale = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool should_measure_negatively_tracked_text_correctly = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool use_optimized_text_vertical_alignment = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }


void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentArchive*>(&to_msg);
  auto& from = static_cast<const DocumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activity_log_entries_.MergeFrom(from._impl_.activity_log_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_locale_identifier(from._internal_locale_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_creation_locale_identifier(from._internal_creation_locale_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_annotation_author_storage()->::TSP::Reference::MergeFrom(
          from._internal_annotation_author_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_collaboration_operation_history()->::TSP::Reference::MergeFrom(
          from._internal_collaboration_operation_history());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_formatting_symbols()->::TSK::FormattingSymbolsArchive::MergeFrom(
          from._internal_formatting_symbols());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_activity_stream()->::TSP::Reference::MergeFrom(
          from._internal_activity_stream());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.prevent_image_conversion_on_open_ = from._impl_.prevent_image_conversion_on_open_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.has_floating_locale_ = from._impl_.has_floating_locale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.has_user_defined_locale_ = from._impl_.has_user_defined_locale_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.should_measure_negatively_tracked_text_correctly_ = from._impl_.should_measure_negatively_tracked_text_correctly_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.use_optimized_text_vertical_alignment_ = from._impl_.use_optimized_text_vertical_alignment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.activity_log_entries_))
    return false;
  if (_internal_has_annotation_author_storage()) {
    if (!_impl_.annotation_author_storage_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_operation_history()) {
    if (!_impl_.collaboration_operation_history_->IsInitialized()) return false;
  }
  if (_internal_has_formatting_symbols()) {
    if (!_impl_.formatting_symbols_->IsInitialized()) return false;
  }
  if (_internal_has_activity_stream()) {
    if (!_impl_.activity_stream_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.activity_log_entries_.InternalSwap(&other->_impl_.activity_log_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_identifier_, lhs_arena,
      &other->_impl_.locale_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creation_locale_identifier_, lhs_arena,
      &other->_impl_.creation_locale_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.use_optimized_text_vertical_alignment_)
      + sizeof(DocumentArchive::_impl_.use_optimized_text_vertical_alignment_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.annotation_author_storage_)>(
          reinterpret_cast<char*>(&_impl_.annotation_author_storage_),
          reinterpret_cast<char*>(&other->_impl_.annotation_author_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[13]);
}

// ===================================================================

class FormattingSymbolsArchive_CurrencySymbol::_Internal {
 public:
  using HasBits = decltype(std::declval<FormattingSymbolsArchive_CurrencySymbol>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FormattingSymbolsArchive_CurrencySymbol::FormattingSymbolsArchive_CurrencySymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.FormattingSymbolsArchive.CurrencySymbol)
}
FormattingSymbolsArchive_CurrencySymbol::FormattingSymbolsArchive_CurrencySymbol(const FormattingSymbolsArchive_CurrencySymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormattingSymbolsArchive_CurrencySymbol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.symbol_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_symbol()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSK.FormattingSymbolsArchive.CurrencySymbol)
}

inline void FormattingSymbolsArchive_CurrencySymbol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.symbol_){}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FormattingSymbolsArchive_CurrencySymbol::~FormattingSymbolsArchive_CurrencySymbol() {
  // @@protoc_insertion_point(destructor:TSK.FormattingSymbolsArchive.CurrencySymbol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormattingSymbolsArchive_CurrencySymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.symbol_.Destroy();
}

void FormattingSymbolsArchive_CurrencySymbol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormattingSymbolsArchive_CurrencySymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormattingSymbolsArchive_CurrencySymbol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.CurrencySymbol.code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.CurrencySymbol.symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormattingSymbolsArchive_CurrencySymbol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.CurrencySymbol.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // required string symbol = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.CurrencySymbol.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FormattingSymbolsArchive.CurrencySymbol)
  return target;
}

size_t FormattingSymbolsArchive_CurrencySymbol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (_internal_has_symbol()) {
    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  return total_size;
}
size_t FormattingSymbolsArchive_CurrencySymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());

    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormattingSymbolsArchive_CurrencySymbol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormattingSymbolsArchive_CurrencySymbol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormattingSymbolsArchive_CurrencySymbol::GetClassData() const { return &_class_data_; }


void FormattingSymbolsArchive_CurrencySymbol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormattingSymbolsArchive_CurrencySymbol*>(&to_msg);
  auto& from = static_cast<const FormattingSymbolsArchive_CurrencySymbol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_symbol(from._internal_symbol());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormattingSymbolsArchive_CurrencySymbol::CopyFrom(const FormattingSymbolsArchive_CurrencySymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormattingSymbolsArchive_CurrencySymbol::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FormattingSymbolsArchive_CurrencySymbol::InternalSwap(FormattingSymbolsArchive_CurrencySymbol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FormattingSymbolsArchive_CurrencySymbol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[14]);
}

// ===================================================================

class FormattingSymbolsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormattingSymbolsArchive>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_calendar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numbering_system(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_am_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pm_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_short_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_medium_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_long_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_full_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_short_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_medium_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_long_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_full_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_decimal_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_grouping_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_currency_decimal_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_currency_grouping_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_plus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_exponential_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_percent_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_per_mille_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_infinity_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_nan_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_decimal_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_scientific_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_percent_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_currency_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

FormattingSymbolsArchive::FormattingSymbolsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.FormattingSymbolsArchive)
}
FormattingSymbolsArchive::FormattingSymbolsArchive(const FormattingSymbolsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormattingSymbolsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.months_){from._impl_.months_}
    , decltype(_impl_.standalone_months_){from._impl_.standalone_months_}
    , decltype(_impl_.short_months_){from._impl_.short_months_}
    , decltype(_impl_.standalone_short_months_){from._impl_.standalone_short_months_}
    , decltype(_impl_.weekdays_){from._impl_.weekdays_}
    , decltype(_impl_.standalone_weekdays_){from._impl_.standalone_weekdays_}
    , decltype(_impl_.short_weekdays_){from._impl_.short_weekdays_}
    , decltype(_impl_.standalone_short_weekdays_){from._impl_.standalone_short_weekdays_}
    , decltype(_impl_.tiny_months_){from._impl_.tiny_months_}
    , decltype(_impl_.standalone_tiny_months_){from._impl_.standalone_tiny_months_}
    , decltype(_impl_.tiny_weekdays_){from._impl_.tiny_weekdays_}
    , decltype(_impl_.standalone_tiny_weekdays_){from._impl_.standalone_tiny_weekdays_}
    , decltype(_impl_.quarters_){from._impl_.quarters_}
    , decltype(_impl_.standalone_quarters_){from._impl_.standalone_quarters_}
    , decltype(_impl_.short_quarters_){from._impl_.short_quarters_}
    , decltype(_impl_.standalone_short_quarters_){from._impl_.standalone_short_quarters_}
    , decltype(_impl_.eras_){from._impl_.eras_}
    , decltype(_impl_.long_eras_){from._impl_.long_eras_}
    , decltype(_impl_.currency_symbols_){from._impl_.currency_symbols_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.calendar_){}
    , decltype(_impl_.numbering_system_){}
    , decltype(_impl_.am_symbol_){}
    , decltype(_impl_.pm_symbol_){}
    , decltype(_impl_.short_date_pattern_){}
    , decltype(_impl_.medium_date_pattern_){}
    , decltype(_impl_.long_date_pattern_){}
    , decltype(_impl_.full_date_pattern_){}
    , decltype(_impl_.short_time_pattern_){}
    , decltype(_impl_.medium_time_pattern_){}
    , decltype(_impl_.long_time_pattern_){}
    , decltype(_impl_.full_time_pattern_){}
    , decltype(_impl_.decimal_separator_){}
    , decltype(_impl_.grouping_separator_){}
    , decltype(_impl_.currency_decimal_separator_){}
    , decltype(_impl_.currency_grouping_separator_){}
    , decltype(_impl_.plus_sign_){}
    , decltype(_impl_.minus_sign_){}
    , decltype(_impl_.exponential_symbol_){}
    , decltype(_impl_.percent_symbol_){}
    , decltype(_impl_.per_mille_symbol_){}
    , decltype(_impl_.infinity_symbol_){}
    , decltype(_impl_.nan_symbol_){}
    , decltype(_impl_.decimal_pattern_){}
    , decltype(_impl_.scientific_pattern_){}
    , decltype(_impl_.percent_pattern_){}
    , decltype(_impl_.currency_pattern_){}
    , decltype(_impl_.currency_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.calendar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calendar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_calendar()) {
    _this->_impl_.calendar_.Set(from._internal_calendar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.numbering_system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.numbering_system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_numbering_system()) {
    _this->_impl_.numbering_system_.Set(from._internal_numbering_system(), 
      _this->GetArenaForAllocation());
  }
  _impl_.am_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.am_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_am_symbol()) {
    _this->_impl_.am_symbol_.Set(from._internal_am_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pm_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pm_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pm_symbol()) {
    _this->_impl_.pm_symbol_.Set(from._internal_pm_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.short_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_short_date_pattern()) {
    _this->_impl_.short_date_pattern_.Set(from._internal_short_date_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.medium_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.medium_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_medium_date_pattern()) {
    _this->_impl_.medium_date_pattern_.Set(from._internal_medium_date_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.long_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.long_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_long_date_pattern()) {
    _this->_impl_.long_date_pattern_.Set(from._internal_long_date_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.full_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_date_pattern()) {
    _this->_impl_.full_date_pattern_.Set(from._internal_full_date_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.short_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_short_time_pattern()) {
    _this->_impl_.short_time_pattern_.Set(from._internal_short_time_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.medium_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.medium_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_medium_time_pattern()) {
    _this->_impl_.medium_time_pattern_.Set(from._internal_medium_time_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.long_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.long_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_long_time_pattern()) {
    _this->_impl_.long_time_pattern_.Set(from._internal_long_time_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.full_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_time_pattern()) {
    _this->_impl_.full_time_pattern_.Set(from._internal_full_time_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.decimal_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_decimal_separator()) {
    _this->_impl_.decimal_separator_.Set(from._internal_decimal_separator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.grouping_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grouping_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_grouping_separator()) {
    _this->_impl_.grouping_separator_.Set(from._internal_grouping_separator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_decimal_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_decimal_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_decimal_separator()) {
    _this->_impl_.currency_decimal_separator_.Set(from._internal_currency_decimal_separator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_grouping_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_grouping_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_grouping_separator()) {
    _this->_impl_.currency_grouping_separator_.Set(from._internal_currency_grouping_separator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.plus_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plus_sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_plus_sign()) {
    _this->_impl_.plus_sign_.Set(from._internal_plus_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.minus_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.minus_sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_minus_sign()) {
    _this->_impl_.minus_sign_.Set(from._internal_minus_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exponential_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exponential_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_exponential_symbol()) {
    _this->_impl_.exponential_symbol_.Set(from._internal_exponential_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.percent_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.percent_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_percent_symbol()) {
    _this->_impl_.percent_symbol_.Set(from._internal_percent_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.per_mille_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.per_mille_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_per_mille_symbol()) {
    _this->_impl_.per_mille_symbol_.Set(from._internal_per_mille_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.infinity_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.infinity_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_infinity_symbol()) {
    _this->_impl_.infinity_symbol_.Set(from._internal_infinity_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nan_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nan_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nan_symbol()) {
    _this->_impl_.nan_symbol_.Set(from._internal_nan_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.decimal_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_decimal_pattern()) {
    _this->_impl_.decimal_pattern_.Set(from._internal_decimal_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scientific_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scientific_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scientific_pattern()) {
    _this->_impl_.scientific_pattern_.Set(from._internal_scientific_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.percent_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.percent_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_percent_pattern()) {
    _this->_impl_.percent_pattern_.Set(from._internal_percent_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_pattern()) {
    _this->_impl_.currency_pattern_.Set(from._internal_currency_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSK.FormattingSymbolsArchive)
}

inline void FormattingSymbolsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.months_){arena}
    , decltype(_impl_.standalone_months_){arena}
    , decltype(_impl_.short_months_){arena}
    , decltype(_impl_.standalone_short_months_){arena}
    , decltype(_impl_.weekdays_){arena}
    , decltype(_impl_.standalone_weekdays_){arena}
    , decltype(_impl_.short_weekdays_){arena}
    , decltype(_impl_.standalone_short_weekdays_){arena}
    , decltype(_impl_.tiny_months_){arena}
    , decltype(_impl_.standalone_tiny_months_){arena}
    , decltype(_impl_.tiny_weekdays_){arena}
    , decltype(_impl_.standalone_tiny_weekdays_){arena}
    , decltype(_impl_.quarters_){arena}
    , decltype(_impl_.standalone_quarters_){arena}
    , decltype(_impl_.short_quarters_){arena}
    , decltype(_impl_.standalone_short_quarters_){arena}
    , decltype(_impl_.eras_){arena}
    , decltype(_impl_.long_eras_){arena}
    , decltype(_impl_.currency_symbols_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.calendar_){}
    , decltype(_impl_.numbering_system_){}
    , decltype(_impl_.am_symbol_){}
    , decltype(_impl_.pm_symbol_){}
    , decltype(_impl_.short_date_pattern_){}
    , decltype(_impl_.medium_date_pattern_){}
    , decltype(_impl_.long_date_pattern_){}
    , decltype(_impl_.full_date_pattern_){}
    , decltype(_impl_.short_time_pattern_){}
    , decltype(_impl_.medium_time_pattern_){}
    , decltype(_impl_.long_time_pattern_){}
    , decltype(_impl_.full_time_pattern_){}
    , decltype(_impl_.decimal_separator_){}
    , decltype(_impl_.grouping_separator_){}
    , decltype(_impl_.currency_decimal_separator_){}
    , decltype(_impl_.currency_grouping_separator_){}
    , decltype(_impl_.plus_sign_){}
    , decltype(_impl_.minus_sign_){}
    , decltype(_impl_.exponential_symbol_){}
    , decltype(_impl_.percent_symbol_){}
    , decltype(_impl_.per_mille_symbol_){}
    , decltype(_impl_.infinity_symbol_){}
    , decltype(_impl_.nan_symbol_){}
    , decltype(_impl_.decimal_pattern_){}
    , decltype(_impl_.scientific_pattern_){}
    , decltype(_impl_.percent_pattern_){}
    , decltype(_impl_.currency_pattern_){}
    , decltype(_impl_.currency_code_){}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.calendar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calendar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.numbering_system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.numbering_system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.am_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.am_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pm_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pm_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.short_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.medium_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.medium_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.long_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.long_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_date_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_date_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.short_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.medium_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.medium_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.long_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.long_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_time_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_time_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.decimal_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.grouping_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grouping_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_decimal_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_decimal_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_grouping_separator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_grouping_separator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.plus_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plus_sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.minus_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.minus_sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exponential_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exponential_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.percent_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.percent_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.per_mille_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.per_mille_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.infinity_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.infinity_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nan_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nan_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.decimal_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scientific_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scientific_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.percent_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.percent_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FormattingSymbolsArchive::~FormattingSymbolsArchive() {
  // @@protoc_insertion_point(destructor:TSK.FormattingSymbolsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormattingSymbolsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.months_.~RepeatedPtrField();
  _impl_.standalone_months_.~RepeatedPtrField();
  _impl_.short_months_.~RepeatedPtrField();
  _impl_.standalone_short_months_.~RepeatedPtrField();
  _impl_.weekdays_.~RepeatedPtrField();
  _impl_.standalone_weekdays_.~RepeatedPtrField();
  _impl_.short_weekdays_.~RepeatedPtrField();
  _impl_.standalone_short_weekdays_.~RepeatedPtrField();
  _impl_.tiny_months_.~RepeatedPtrField();
  _impl_.standalone_tiny_months_.~RepeatedPtrField();
  _impl_.tiny_weekdays_.~RepeatedPtrField();
  _impl_.standalone_tiny_weekdays_.~RepeatedPtrField();
  _impl_.quarters_.~RepeatedPtrField();
  _impl_.standalone_quarters_.~RepeatedPtrField();
  _impl_.short_quarters_.~RepeatedPtrField();
  _impl_.standalone_short_quarters_.~RepeatedPtrField();
  _impl_.eras_.~RepeatedPtrField();
  _impl_.long_eras_.~RepeatedPtrField();
  _impl_.currency_symbols_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.calendar_.Destroy();
  _impl_.numbering_system_.Destroy();
  _impl_.am_symbol_.Destroy();
  _impl_.pm_symbol_.Destroy();
  _impl_.short_date_pattern_.Destroy();
  _impl_.medium_date_pattern_.Destroy();
  _impl_.long_date_pattern_.Destroy();
  _impl_.full_date_pattern_.Destroy();
  _impl_.short_time_pattern_.Destroy();
  _impl_.medium_time_pattern_.Destroy();
  _impl_.long_time_pattern_.Destroy();
  _impl_.full_time_pattern_.Destroy();
  _impl_.decimal_separator_.Destroy();
  _impl_.grouping_separator_.Destroy();
  _impl_.currency_decimal_separator_.Destroy();
  _impl_.currency_grouping_separator_.Destroy();
  _impl_.plus_sign_.Destroy();
  _impl_.minus_sign_.Destroy();
  _impl_.exponential_symbol_.Destroy();
  _impl_.percent_symbol_.Destroy();
  _impl_.per_mille_symbol_.Destroy();
  _impl_.infinity_symbol_.Destroy();
  _impl_.nan_symbol_.Destroy();
  _impl_.decimal_pattern_.Destroy();
  _impl_.scientific_pattern_.Destroy();
  _impl_.percent_pattern_.Destroy();
  _impl_.currency_pattern_.Destroy();
  _impl_.currency_code_.Destroy();
}

void FormattingSymbolsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormattingSymbolsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FormattingSymbolsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.months_.Clear();
  _impl_.standalone_months_.Clear();
  _impl_.short_months_.Clear();
  _impl_.standalone_short_months_.Clear();
  _impl_.weekdays_.Clear();
  _impl_.standalone_weekdays_.Clear();
  _impl_.short_weekdays_.Clear();
  _impl_.standalone_short_weekdays_.Clear();
  _impl_.tiny_months_.Clear();
  _impl_.standalone_tiny_months_.Clear();
  _impl_.tiny_weekdays_.Clear();
  _impl_.standalone_tiny_weekdays_.Clear();
  _impl_.quarters_.Clear();
  _impl_.standalone_quarters_.Clear();
  _impl_.short_quarters_.Clear();
  _impl_.standalone_short_quarters_.Clear();
  _impl_.eras_.Clear();
  _impl_.long_eras_.Clear();
  _impl_.currency_symbols_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.calendar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.numbering_system_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.am_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pm_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.short_date_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.medium_date_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.long_date_pattern_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.full_date_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.short_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.medium_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.long_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.full_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.decimal_separator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.grouping_separator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.currency_decimal_separator_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.currency_grouping_separator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.plus_sign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.minus_sign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.exponential_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.percent_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.per_mille_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.infinity_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.nan_symbol_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.decimal_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.scientific_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.percent_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.currency_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormattingSymbolsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calendar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_calendar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.calendar");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string numbering_system = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_numbering_system();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.numbering_system");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string months = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_months();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.months");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_months = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_months();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_months");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string short_months = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_short_months();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_months");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_short_months = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_short_months();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_short_months");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string weekdays = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_weekdays();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.weekdays");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_weekdays = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_weekdays();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_weekdays");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string short_weekdays = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_short_weekdays();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_weekdays");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_short_weekdays = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_short_weekdays();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_short_weekdays");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string am_symbol = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_am_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.am_symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pm_symbol = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_pm_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.pm_symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string tiny_months = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tiny_months();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.tiny_months");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_tiny_months = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_tiny_months();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_tiny_months");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tiny_weekdays = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tiny_weekdays();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.tiny_weekdays");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_tiny_weekdays = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_standalone_tiny_weekdays();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_tiny_weekdays");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string quarters = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_quarters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.quarters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_quarters = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_standalone_quarters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_quarters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string short_quarters = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_short_quarters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_quarters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string standalone_short_quarters = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_standalone_short_quarters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_short_quarters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string eras = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_eras();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.eras");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string long_eras = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_long_eras();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.long_eras");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string short_date_pattern = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_short_date_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_date_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string medium_date_pattern = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_medium_date_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.medium_date_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string long_date_pattern = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_long_date_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.long_date_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string full_date_pattern = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_full_date_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.full_date_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string short_time_pattern = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_short_time_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_time_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string medium_time_pattern = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_medium_time_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.medium_time_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string long_time_pattern = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_long_time_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.long_time_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string full_time_pattern = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_full_time_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.full_time_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string decimal_separator = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_decimal_separator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.decimal_separator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string grouping_separator = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_grouping_separator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.grouping_separator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currency_decimal_separator = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_currency_decimal_separator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_decimal_separator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currency_grouping_separator = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency_grouping_separator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_grouping_separator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string plus_sign = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_plus_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.plus_sign");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string minus_sign = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_minus_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.minus_sign");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string exponential_symbol = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_exponential_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.exponential_symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string percent_symbol = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_percent_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.percent_symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string per_mille_symbol = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_per_mille_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.per_mille_symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string infinity_symbol = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_infinity_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.infinity_symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string nan_symbol = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_nan_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.nan_symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string decimal_pattern = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_decimal_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.decimal_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string scientific_pattern = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_scientific_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.scientific_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string percent_pattern = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_percent_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.percent_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currency_pattern = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_currency_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_pattern");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_currency_symbols(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormattingSymbolsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FormattingSymbolsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional string calendar = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calendar().data(), static_cast<int>(this->_internal_calendar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.calendar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_calendar(), target);
  }

  // optional string numbering_system = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_numbering_system().data(), static_cast<int>(this->_internal_numbering_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.numbering_system");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_numbering_system(), target);
  }

  // repeated string months = 4;
  for (int i = 0, n = this->_internal_months_size(); i < n; i++) {
    const auto& s = this->_internal_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.months");
    target = stream->WriteString(4, s, target);
  }

  // repeated string standalone_months = 5;
  for (int i = 0, n = this->_internal_standalone_months_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_months");
    target = stream->WriteString(5, s, target);
  }

  // repeated string short_months = 6;
  for (int i = 0, n = this->_internal_short_months_size(); i < n; i++) {
    const auto& s = this->_internal_short_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_months");
    target = stream->WriteString(6, s, target);
  }

  // repeated string standalone_short_months = 7;
  for (int i = 0, n = this->_internal_standalone_short_months_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_short_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_short_months");
    target = stream->WriteString(7, s, target);
  }

  // repeated string weekdays = 8;
  for (int i = 0, n = this->_internal_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.weekdays");
    target = stream->WriteString(8, s, target);
  }

  // repeated string standalone_weekdays = 9;
  for (int i = 0, n = this->_internal_standalone_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_weekdays");
    target = stream->WriteString(9, s, target);
  }

  // repeated string short_weekdays = 10;
  for (int i = 0, n = this->_internal_short_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_short_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_weekdays");
    target = stream->WriteString(10, s, target);
  }

  // repeated string standalone_short_weekdays = 11;
  for (int i = 0, n = this->_internal_standalone_short_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_short_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_short_weekdays");
    target = stream->WriteString(11, s, target);
  }

  // optional string am_symbol = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_am_symbol().data(), static_cast<int>(this->_internal_am_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.am_symbol");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_am_symbol(), target);
  }

  // optional string pm_symbol = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pm_symbol().data(), static_cast<int>(this->_internal_pm_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.pm_symbol");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pm_symbol(), target);
  }

  // repeated string tiny_months = 14;
  for (int i = 0, n = this->_internal_tiny_months_size(); i < n; i++) {
    const auto& s = this->_internal_tiny_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.tiny_months");
    target = stream->WriteString(14, s, target);
  }

  // repeated string standalone_tiny_months = 15;
  for (int i = 0, n = this->_internal_standalone_tiny_months_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_tiny_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_tiny_months");
    target = stream->WriteString(15, s, target);
  }

  // repeated string tiny_weekdays = 16;
  for (int i = 0, n = this->_internal_tiny_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_tiny_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.tiny_weekdays");
    target = stream->WriteString(16, s, target);
  }

  // repeated string standalone_tiny_weekdays = 17;
  for (int i = 0, n = this->_internal_standalone_tiny_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_tiny_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_tiny_weekdays");
    target = stream->WriteString(17, s, target);
  }

  // repeated string quarters = 18;
  for (int i = 0, n = this->_internal_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.quarters");
    target = stream->WriteString(18, s, target);
  }

  // repeated string standalone_quarters = 19;
  for (int i = 0, n = this->_internal_standalone_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_quarters");
    target = stream->WriteString(19, s, target);
  }

  // repeated string short_quarters = 20;
  for (int i = 0, n = this->_internal_short_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_short_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_quarters");
    target = stream->WriteString(20, s, target);
  }

  // repeated string standalone_short_quarters = 21;
  for (int i = 0, n = this->_internal_standalone_short_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_short_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_short_quarters");
    target = stream->WriteString(21, s, target);
  }

  // repeated string eras = 22;
  for (int i = 0, n = this->_internal_eras_size(); i < n; i++) {
    const auto& s = this->_internal_eras(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.eras");
    target = stream->WriteString(22, s, target);
  }

  // repeated string long_eras = 23;
  for (int i = 0, n = this->_internal_long_eras_size(); i < n; i++) {
    const auto& s = this->_internal_long_eras(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.long_eras");
    target = stream->WriteString(23, s, target);
  }

  // optional string short_date_pattern = 24;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_date_pattern().data(), static_cast<int>(this->_internal_short_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_date_pattern");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_short_date_pattern(), target);
  }

  // optional string medium_date_pattern = 25;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_medium_date_pattern().data(), static_cast<int>(this->_internal_medium_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.medium_date_pattern");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_medium_date_pattern(), target);
  }

  // optional string long_date_pattern = 26;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_long_date_pattern().data(), static_cast<int>(this->_internal_long_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.long_date_pattern");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_long_date_pattern(), target);
  }

  // optional string full_date_pattern = 27;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_date_pattern().data(), static_cast<int>(this->_internal_full_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.full_date_pattern");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_full_date_pattern(), target);
  }

  // optional string short_time_pattern = 28;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_time_pattern().data(), static_cast<int>(this->_internal_short_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_time_pattern");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_short_time_pattern(), target);
  }

  // optional string medium_time_pattern = 29;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_medium_time_pattern().data(), static_cast<int>(this->_internal_medium_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.medium_time_pattern");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_medium_time_pattern(), target);
  }

  // optional string long_time_pattern = 30;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_long_time_pattern().data(), static_cast<int>(this->_internal_long_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.long_time_pattern");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_long_time_pattern(), target);
  }

  // optional string full_time_pattern = 31;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_time_pattern().data(), static_cast<int>(this->_internal_full_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.full_time_pattern");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_full_time_pattern(), target);
  }

  // optional string decimal_separator = 32;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_separator().data(), static_cast<int>(this->_internal_decimal_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.decimal_separator");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_decimal_separator(), target);
  }

  // optional string grouping_separator = 33;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_grouping_separator().data(), static_cast<int>(this->_internal_grouping_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.grouping_separator");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_grouping_separator(), target);
  }

  // optional string currency_decimal_separator = 34;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_decimal_separator().data(), static_cast<int>(this->_internal_currency_decimal_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_decimal_separator");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_currency_decimal_separator(), target);
  }

  // optional string currency_grouping_separator = 35;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_grouping_separator().data(), static_cast<int>(this->_internal_currency_grouping_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_grouping_separator");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_currency_grouping_separator(), target);
  }

  // optional string plus_sign = 36;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_plus_sign().data(), static_cast<int>(this->_internal_plus_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.plus_sign");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_plus_sign(), target);
  }

  // optional string minus_sign = 37;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_minus_sign().data(), static_cast<int>(this->_internal_minus_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.minus_sign");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_minus_sign(), target);
  }

  // optional string exponential_symbol = 38;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exponential_symbol().data(), static_cast<int>(this->_internal_exponential_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.exponential_symbol");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_exponential_symbol(), target);
  }

  // optional string percent_symbol = 39;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_percent_symbol().data(), static_cast<int>(this->_internal_percent_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.percent_symbol");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_percent_symbol(), target);
  }

  // optional string per_mille_symbol = 40;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_per_mille_symbol().data(), static_cast<int>(this->_internal_per_mille_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.per_mille_symbol");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_per_mille_symbol(), target);
  }

  // optional string infinity_symbol = 41;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_infinity_symbol().data(), static_cast<int>(this->_internal_infinity_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.infinity_symbol");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_infinity_symbol(), target);
  }

  // optional string nan_symbol = 42;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nan_symbol().data(), static_cast<int>(this->_internal_nan_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.nan_symbol");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_nan_symbol(), target);
  }

  // optional string decimal_pattern = 43;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_pattern().data(), static_cast<int>(this->_internal_decimal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.decimal_pattern");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_decimal_pattern(), target);
  }

  // optional string scientific_pattern = 44;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scientific_pattern().data(), static_cast<int>(this->_internal_scientific_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.scientific_pattern");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_scientific_pattern(), target);
  }

  // optional string percent_pattern = 45;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_percent_pattern().data(), static_cast<int>(this->_internal_percent_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.percent_pattern");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_percent_pattern(), target);
  }

  // optional string currency_pattern = 46;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_pattern().data(), static_cast<int>(this->_internal_currency_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_pattern");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_currency_pattern(), target);
  }

  // optional string currency_code = 47;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_currency_code(), target);
  }

  // repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_currency_symbols_size()); i < n; i++) {
    const auto& repfield = this->_internal_currency_symbols(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FormattingSymbolsArchive)
  return target;
}

size_t FormattingSymbolsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FormattingSymbolsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string months = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.months_.size());
  for (int i = 0, n = _impl_.months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.months_.Get(i));
  }

  // repeated string standalone_months = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_months_.size());
  for (int i = 0, n = _impl_.standalone_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_months_.Get(i));
  }

  // repeated string short_months = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.short_months_.size());
  for (int i = 0, n = _impl_.short_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.short_months_.Get(i));
  }

  // repeated string standalone_short_months = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_short_months_.size());
  for (int i = 0, n = _impl_.standalone_short_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_short_months_.Get(i));
  }

  // repeated string weekdays = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.weekdays_.size());
  for (int i = 0, n = _impl_.weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.weekdays_.Get(i));
  }

  // repeated string standalone_weekdays = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_weekdays_.size());
  for (int i = 0, n = _impl_.standalone_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_weekdays_.Get(i));
  }

  // repeated string short_weekdays = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.short_weekdays_.size());
  for (int i = 0, n = _impl_.short_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.short_weekdays_.Get(i));
  }

  // repeated string standalone_short_weekdays = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_short_weekdays_.size());
  for (int i = 0, n = _impl_.standalone_short_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_short_weekdays_.Get(i));
  }

  // repeated string tiny_months = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tiny_months_.size());
  for (int i = 0, n = _impl_.tiny_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tiny_months_.Get(i));
  }

  // repeated string standalone_tiny_months = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_tiny_months_.size());
  for (int i = 0, n = _impl_.standalone_tiny_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_tiny_months_.Get(i));
  }

  // repeated string tiny_weekdays = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tiny_weekdays_.size());
  for (int i = 0, n = _impl_.tiny_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tiny_weekdays_.Get(i));
  }

  // repeated string standalone_tiny_weekdays = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_tiny_weekdays_.size());
  for (int i = 0, n = _impl_.standalone_tiny_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_tiny_weekdays_.Get(i));
  }

  // repeated string quarters = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.quarters_.size());
  for (int i = 0, n = _impl_.quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.quarters_.Get(i));
  }

  // repeated string standalone_quarters = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_quarters_.size());
  for (int i = 0, n = _impl_.standalone_quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_quarters_.Get(i));
  }

  // repeated string short_quarters = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.short_quarters_.size());
  for (int i = 0, n = _impl_.short_quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.short_quarters_.Get(i));
  }

  // repeated string standalone_short_quarters = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.standalone_short_quarters_.size());
  for (int i = 0, n = _impl_.standalone_short_quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.standalone_short_quarters_.Get(i));
  }

  // repeated string eras = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.eras_.size());
  for (int i = 0, n = _impl_.eras_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.eras_.Get(i));
  }

  // repeated string long_eras = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.long_eras_.size());
  for (int i = 0, n = _impl_.long_eras_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.long_eras_.Get(i));
  }

  // repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
  total_size += 2UL * this->_internal_currency_symbols_size();
  for (const auto& msg : this->_impl_.currency_symbols_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string calendar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calendar());
    }

    // optional string numbering_system = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_numbering_system());
    }

    // optional string am_symbol = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_am_symbol());
    }

    // optional string pm_symbol = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pm_symbol());
    }

    // optional string short_date_pattern = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_date_pattern());
    }

    // optional string medium_date_pattern = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_medium_date_pattern());
    }

    // optional string long_date_pattern = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_long_date_pattern());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string full_date_pattern = 27;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_date_pattern());
    }

    // optional string short_time_pattern = 28;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_time_pattern());
    }

    // optional string medium_time_pattern = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_medium_time_pattern());
    }

    // optional string long_time_pattern = 30;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_long_time_pattern());
    }

    // optional string full_time_pattern = 31;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_time_pattern());
    }

    // optional string decimal_separator = 32;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_separator());
    }

    // optional string grouping_separator = 33;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_grouping_separator());
    }

    // optional string currency_decimal_separator = 34;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_decimal_separator());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string currency_grouping_separator = 35;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_grouping_separator());
    }

    // optional string plus_sign = 36;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_plus_sign());
    }

    // optional string minus_sign = 37;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_minus_sign());
    }

    // optional string exponential_symbol = 38;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exponential_symbol());
    }

    // optional string percent_symbol = 39;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_percent_symbol());
    }

    // optional string per_mille_symbol = 40;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_per_mille_symbol());
    }

    // optional string infinity_symbol = 41;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_infinity_symbol());
    }

    // optional string nan_symbol = 42;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nan_symbol());
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional string decimal_pattern = 43;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_pattern());
    }

    // optional string scientific_pattern = 44;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scientific_pattern());
    }

    // optional string percent_pattern = 45;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_percent_pattern());
    }

    // optional string currency_pattern = 46;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_pattern());
    }

    // optional string currency_code = 47;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormattingSymbolsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormattingSymbolsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormattingSymbolsArchive::GetClassData() const { return &_class_data_; }


void FormattingSymbolsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormattingSymbolsArchive*>(&to_msg);
  auto& from = static_cast<const FormattingSymbolsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.FormattingSymbolsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.months_.MergeFrom(from._impl_.months_);
  _this->_impl_.standalone_months_.MergeFrom(from._impl_.standalone_months_);
  _this->_impl_.short_months_.MergeFrom(from._impl_.short_months_);
  _this->_impl_.standalone_short_months_.MergeFrom(from._impl_.standalone_short_months_);
  _this->_impl_.weekdays_.MergeFrom(from._impl_.weekdays_);
  _this->_impl_.standalone_weekdays_.MergeFrom(from._impl_.standalone_weekdays_);
  _this->_impl_.short_weekdays_.MergeFrom(from._impl_.short_weekdays_);
  _this->_impl_.standalone_short_weekdays_.MergeFrom(from._impl_.standalone_short_weekdays_);
  _this->_impl_.tiny_months_.MergeFrom(from._impl_.tiny_months_);
  _this->_impl_.standalone_tiny_months_.MergeFrom(from._impl_.standalone_tiny_months_);
  _this->_impl_.tiny_weekdays_.MergeFrom(from._impl_.tiny_weekdays_);
  _this->_impl_.standalone_tiny_weekdays_.MergeFrom(from._impl_.standalone_tiny_weekdays_);
  _this->_impl_.quarters_.MergeFrom(from._impl_.quarters_);
  _this->_impl_.standalone_quarters_.MergeFrom(from._impl_.standalone_quarters_);
  _this->_impl_.short_quarters_.MergeFrom(from._impl_.short_quarters_);
  _this->_impl_.standalone_short_quarters_.MergeFrom(from._impl_.standalone_short_quarters_);
  _this->_impl_.eras_.MergeFrom(from._impl_.eras_);
  _this->_impl_.long_eras_.MergeFrom(from._impl_.long_eras_);
  _this->_impl_.currency_symbols_.MergeFrom(from._impl_.currency_symbols_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_calendar(from._internal_calendar());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_numbering_system(from._internal_numbering_system());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_am_symbol(from._internal_am_symbol());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_pm_symbol(from._internal_pm_symbol());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_short_date_pattern(from._internal_short_date_pattern());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_medium_date_pattern(from._internal_medium_date_pattern());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_long_date_pattern(from._internal_long_date_pattern());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_full_date_pattern(from._internal_full_date_pattern());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_short_time_pattern(from._internal_short_time_pattern());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_medium_time_pattern(from._internal_medium_time_pattern());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_long_time_pattern(from._internal_long_time_pattern());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_full_time_pattern(from._internal_full_time_pattern());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_decimal_separator(from._internal_decimal_separator());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_grouping_separator(from._internal_grouping_separator());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_set_currency_decimal_separator(from._internal_currency_decimal_separator());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_set_currency_grouping_separator(from._internal_currency_grouping_separator());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_set_plus_sign(from._internal_plus_sign());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_set_minus_sign(from._internal_minus_sign());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_set_exponential_symbol(from._internal_exponential_symbol());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_set_percent_symbol(from._internal_percent_symbol());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_set_per_mille_symbol(from._internal_per_mille_symbol());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_set_infinity_symbol(from._internal_infinity_symbol());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_set_nan_symbol(from._internal_nan_symbol());
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_set_decimal_pattern(from._internal_decimal_pattern());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_set_scientific_pattern(from._internal_scientific_pattern());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_set_percent_pattern(from._internal_percent_pattern());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_set_currency_pattern(from._internal_currency_pattern());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormattingSymbolsArchive::CopyFrom(const FormattingSymbolsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FormattingSymbolsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormattingSymbolsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.currency_symbols_))
    return false;
  return true;
}

void FormattingSymbolsArchive::InternalSwap(FormattingSymbolsArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.months_.InternalSwap(&other->_impl_.months_);
  _impl_.standalone_months_.InternalSwap(&other->_impl_.standalone_months_);
  _impl_.short_months_.InternalSwap(&other->_impl_.short_months_);
  _impl_.standalone_short_months_.InternalSwap(&other->_impl_.standalone_short_months_);
  _impl_.weekdays_.InternalSwap(&other->_impl_.weekdays_);
  _impl_.standalone_weekdays_.InternalSwap(&other->_impl_.standalone_weekdays_);
  _impl_.short_weekdays_.InternalSwap(&other->_impl_.short_weekdays_);
  _impl_.standalone_short_weekdays_.InternalSwap(&other->_impl_.standalone_short_weekdays_);
  _impl_.tiny_months_.InternalSwap(&other->_impl_.tiny_months_);
  _impl_.standalone_tiny_months_.InternalSwap(&other->_impl_.standalone_tiny_months_);
  _impl_.tiny_weekdays_.InternalSwap(&other->_impl_.tiny_weekdays_);
  _impl_.standalone_tiny_weekdays_.InternalSwap(&other->_impl_.standalone_tiny_weekdays_);
  _impl_.quarters_.InternalSwap(&other->_impl_.quarters_);
  _impl_.standalone_quarters_.InternalSwap(&other->_impl_.standalone_quarters_);
  _impl_.short_quarters_.InternalSwap(&other->_impl_.short_quarters_);
  _impl_.standalone_short_quarters_.InternalSwap(&other->_impl_.standalone_short_quarters_);
  _impl_.eras_.InternalSwap(&other->_impl_.eras_);
  _impl_.long_eras_.InternalSwap(&other->_impl_.long_eras_);
  _impl_.currency_symbols_.InternalSwap(&other->_impl_.currency_symbols_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calendar_, lhs_arena,
      &other->_impl_.calendar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.numbering_system_, lhs_arena,
      &other->_impl_.numbering_system_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.am_symbol_, lhs_arena,
      &other->_impl_.am_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pm_symbol_, lhs_arena,
      &other->_impl_.pm_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.short_date_pattern_, lhs_arena,
      &other->_impl_.short_date_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.medium_date_pattern_, lhs_arena,
      &other->_impl_.medium_date_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.long_date_pattern_, lhs_arena,
      &other->_impl_.long_date_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_date_pattern_, lhs_arena,
      &other->_impl_.full_date_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.short_time_pattern_, lhs_arena,
      &other->_impl_.short_time_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.medium_time_pattern_, lhs_arena,
      &other->_impl_.medium_time_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.long_time_pattern_, lhs_arena,
      &other->_impl_.long_time_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_time_pattern_, lhs_arena,
      &other->_impl_.full_time_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decimal_separator_, lhs_arena,
      &other->_impl_.decimal_separator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.grouping_separator_, lhs_arena,
      &other->_impl_.grouping_separator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_decimal_separator_, lhs_arena,
      &other->_impl_.currency_decimal_separator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_grouping_separator_, lhs_arena,
      &other->_impl_.currency_grouping_separator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plus_sign_, lhs_arena,
      &other->_impl_.plus_sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.minus_sign_, lhs_arena,
      &other->_impl_.minus_sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exponential_symbol_, lhs_arena,
      &other->_impl_.exponential_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.percent_symbol_, lhs_arena,
      &other->_impl_.percent_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.per_mille_symbol_, lhs_arena,
      &other->_impl_.per_mille_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.infinity_symbol_, lhs_arena,
      &other->_impl_.infinity_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nan_symbol_, lhs_arena,
      &other->_impl_.nan_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decimal_pattern_, lhs_arena,
      &other->_impl_.decimal_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scientific_pattern_, lhs_arena,
      &other->_impl_.scientific_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.percent_pattern_, lhs_arena,
      &other->_impl_.percent_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_pattern_, lhs_arena,
      &other->_impl_.currency_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FormattingSymbolsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[15]);
}

// ===================================================================

class DocumentSupportCollaborationState::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSupportCollaborationState>()._impl_._has_bits_);
  static const ::TSP::Reference& collaboration_command_history(const DocumentSupportCollaborationState* msg);
  static void set_has_collaboration_command_history(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& collaboration_session_state(const DocumentSupportCollaborationState* msg);
  static void set_has_collaboration_session_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
DocumentSupportCollaborationState::_Internal::collaboration_command_history(const DocumentSupportCollaborationState* msg) {
  return *msg->_impl_.collaboration_command_history_;
}
const ::TSP::Reference&
DocumentSupportCollaborationState::_Internal::collaboration_session_state(const DocumentSupportCollaborationState* msg) {
  return *msg->_impl_.collaboration_session_state_;
}
void DocumentSupportCollaborationState::clear_collaboration_command_history() {
  if (_impl_.collaboration_command_history_ != nullptr) _impl_.collaboration_command_history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DocumentSupportCollaborationState::clear_collaboration_session_state() {
  if (_impl_.collaboration_session_state_ != nullptr) _impl_.collaboration_session_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DocumentSupportCollaborationState::DocumentSupportCollaborationState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentSupportCollaborationState)
}
DocumentSupportCollaborationState::DocumentSupportCollaborationState(const DocumentSupportCollaborationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentSupportCollaborationState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collaboration_command_history_){nullptr}
    , decltype(_impl_.collaboration_session_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_collaboration_command_history()) {
    _this->_impl_.collaboration_command_history_ = new ::TSP::Reference(*from._impl_.collaboration_command_history_);
  }
  if (from._internal_has_collaboration_session_state()) {
    _this->_impl_.collaboration_session_state_ = new ::TSP::Reference(*from._impl_.collaboration_session_state_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentSupportCollaborationState)
}

inline void DocumentSupportCollaborationState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collaboration_command_history_){nullptr}
    , decltype(_impl_.collaboration_session_state_){nullptr}
  };
}

DocumentSupportCollaborationState::~DocumentSupportCollaborationState() {
  // @@protoc_insertion_point(destructor:TSK.DocumentSupportCollaborationState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentSupportCollaborationState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.collaboration_command_history_;
  if (this != internal_default_instance()) delete _impl_.collaboration_session_state_;
}

void DocumentSupportCollaborationState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentSupportCollaborationState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentSupportCollaborationState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.collaboration_command_history_ != nullptr);
      _impl_.collaboration_command_history_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.collaboration_session_state_ != nullptr);
      _impl_.collaboration_session_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSupportCollaborationState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference collaboration_command_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_command_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_session_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_session_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentSupportCollaborationState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentSupportCollaborationState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference collaboration_command_history = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::collaboration_command_history(this),
        _Internal::collaboration_command_history(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference collaboration_session_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::collaboration_session_state(this),
        _Internal::collaboration_session_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentSupportCollaborationState)
  return target;
}

size_t DocumentSupportCollaborationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentSupportCollaborationState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference collaboration_command_history = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collaboration_command_history_);
    }

    // optional .TSP.Reference collaboration_session_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collaboration_session_state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSupportCollaborationState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentSupportCollaborationState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSupportCollaborationState::GetClassData() const { return &_class_data_; }


void DocumentSupportCollaborationState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentSupportCollaborationState*>(&to_msg);
  auto& from = static_cast<const DocumentSupportCollaborationState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentSupportCollaborationState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_collaboration_command_history()->::TSP::Reference::MergeFrom(
          from._internal_collaboration_command_history());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_collaboration_session_state()->::TSP::Reference::MergeFrom(
          from._internal_collaboration_session_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSupportCollaborationState::CopyFrom(const DocumentSupportCollaborationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentSupportCollaborationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSupportCollaborationState::IsInitialized() const {
  if (_internal_has_collaboration_command_history()) {
    if (!_impl_.collaboration_command_history_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_session_state()) {
    if (!_impl_.collaboration_session_state_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSupportCollaborationState::InternalSwap(DocumentSupportCollaborationState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentSupportCollaborationState, _impl_.collaboration_session_state_)
      + sizeof(DocumentSupportCollaborationState::_impl_.collaboration_session_state_)
      - PROTOBUF_FIELD_OFFSET(DocumentSupportCollaborationState, _impl_.collaboration_command_history_)>(
          reinterpret_cast<char*>(&_impl_.collaboration_command_history_),
          reinterpret_cast<char*>(&other->_impl_.collaboration_command_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSupportCollaborationState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[16]);
}

// ===================================================================

class DocumentSupportArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSupportArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& command_history(const DocumentSupportArchive* msg);
  static void set_has_command_history(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_undo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_redo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_undo_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redo_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& web_state(const DocumentSupportArchive* msg);
  static void set_has_web_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_in_collaboration_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_action_string_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& collaboration_state(const DocumentSupportArchive* msg);
  static void set_has_collaboration_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& activity_notification_map(const DocumentSupportArchive* msg);
  static void set_has_activity_notification_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& removed_author_auditor_pending_state(const DocumentSupportArchive* msg);
  static void set_has_removed_author_auditor_pending_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& command_selection_behavior_history(const DocumentSupportArchive* msg);
  static void set_has_command_selection_behavior_history(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& view_state(const DocumentSupportArchive* msg);
  static void set_has_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& collaboration_command_history(const DocumentSupportArchive* msg);
  static void set_has_collaboration_command_history(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& collaboration_session_state(const DocumentSupportArchive* msg);
  static void set_has_collaboration_session_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::TSP::Reference&
DocumentSupportArchive::_Internal::command_history(const DocumentSupportArchive* msg) {
  return *msg->_impl_.command_history_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::web_state(const DocumentSupportArchive* msg) {
  return *msg->_impl_.web_state_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::collaboration_state(const DocumentSupportArchive* msg) {
  return *msg->_impl_.collaboration_state_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::activity_notification_map(const DocumentSupportArchive* msg) {
  return *msg->_impl_.activity_notification_map_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::removed_author_auditor_pending_state(const DocumentSupportArchive* msg) {
  return *msg->_impl_.removed_author_auditor_pending_state_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::command_selection_behavior_history(const DocumentSupportArchive* msg) {
  return *msg->_impl_.command_selection_behavior_history_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::view_state(const DocumentSupportArchive* msg) {
  return *msg->_impl_.view_state_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::collaboration_command_history(const DocumentSupportArchive* msg) {
  return *msg->_impl_.collaboration_command_history_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::collaboration_session_state(const DocumentSupportArchive* msg) {
  return *msg->_impl_.collaboration_session_state_;
}
void DocumentSupportArchive::clear_command_history() {
  if (_impl_.command_history_ != nullptr) _impl_.command_history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void DocumentSupportArchive::clear_web_state() {
  if (_impl_.web_state_ != nullptr) _impl_.web_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void DocumentSupportArchive::clear_collaboration_state() {
  if (_impl_.collaboration_state_ != nullptr) _impl_.collaboration_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void DocumentSupportArchive::clear_activity_notification_map() {
  if (_impl_.activity_notification_map_ != nullptr) _impl_.activity_notification_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void DocumentSupportArchive::clear_removed_author_auditor_pending_state() {
  if (_impl_.removed_author_auditor_pending_state_ != nullptr) _impl_.removed_author_auditor_pending_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void DocumentSupportArchive::clear_command_selection_behavior_history() {
  if (_impl_.command_selection_behavior_history_ != nullptr) _impl_.command_selection_behavior_history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void DocumentSupportArchive::clear_view_state() {
  if (_impl_.view_state_ != nullptr) _impl_.view_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void DocumentSupportArchive::clear_collaboration_command_history() {
  if (_impl_.collaboration_command_history_ != nullptr) _impl_.collaboration_command_history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void DocumentSupportArchive::clear_collaboration_session_state() {
  if (_impl_.collaboration_session_state_ != nullptr) _impl_.collaboration_session_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
DocumentSupportArchive::DocumentSupportArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentSupportArchive)
}
DocumentSupportArchive::DocumentSupportArchive(const DocumentSupportArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentSupportArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_action_string_){}
    , decltype(_impl_.redo_action_string_){}
    , decltype(_impl_.action_string_localization_){}
    , decltype(_impl_.command_history_){nullptr}
    , decltype(_impl_.command_selection_behavior_history_){nullptr}
    , decltype(_impl_.view_state_){nullptr}
    , decltype(_impl_.web_state_){nullptr}
    , decltype(_impl_.collaboration_command_history_){nullptr}
    , decltype(_impl_.collaboration_session_state_){nullptr}
    , decltype(_impl_.collaboration_state_){nullptr}
    , decltype(_impl_.activity_notification_map_){nullptr}
    , decltype(_impl_.removed_author_auditor_pending_state_){nullptr}
    , decltype(_impl_.undo_count_){}
    , decltype(_impl_.redo_count_){}
    , decltype(_impl_.is_in_collaboration_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.undo_action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.undo_action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_undo_action_string()) {
    _this->_impl_.undo_action_string_.Set(from._internal_undo_action_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redo_action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redo_action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_redo_action_string()) {
    _this->_impl_.redo_action_string_.Set(from._internal_redo_action_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_string_localization_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_localization_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_string_localization()) {
    _this->_impl_.action_string_localization_.Set(from._internal_action_string_localization(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_command_history()) {
    _this->_impl_.command_history_ = new ::TSP::Reference(*from._impl_.command_history_);
  }
  if (from._internal_has_command_selection_behavior_history()) {
    _this->_impl_.command_selection_behavior_history_ = new ::TSP::Reference(*from._impl_.command_selection_behavior_history_);
  }
  if (from._internal_has_view_state()) {
    _this->_impl_.view_state_ = new ::TSP::Reference(*from._impl_.view_state_);
  }
  if (from._internal_has_web_state()) {
    _this->_impl_.web_state_ = new ::TSP::Reference(*from._impl_.web_state_);
  }
  if (from._internal_has_collaboration_command_history()) {
    _this->_impl_.collaboration_command_history_ = new ::TSP::Reference(*from._impl_.collaboration_command_history_);
  }
  if (from._internal_has_collaboration_session_state()) {
    _this->_impl_.collaboration_session_state_ = new ::TSP::Reference(*from._impl_.collaboration_session_state_);
  }
  if (from._internal_has_collaboration_state()) {
    _this->_impl_.collaboration_state_ = new ::TSP::Reference(*from._impl_.collaboration_state_);
  }
  if (from._internal_has_activity_notification_map()) {
    _this->_impl_.activity_notification_map_ = new ::TSP::Reference(*from._impl_.activity_notification_map_);
  }
  if (from._internal_has_removed_author_auditor_pending_state()) {
    _this->_impl_.removed_author_auditor_pending_state_ = new ::TSP::Reference(*from._impl_.removed_author_auditor_pending_state_);
  }
  ::memcpy(&_impl_.undo_count_, &from._impl_.undo_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_in_collaboration_mode_) -
    reinterpret_cast<char*>(&_impl_.undo_count_)) + sizeof(_impl_.is_in_collaboration_mode_));
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentSupportArchive)
}

inline void DocumentSupportArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_action_string_){}
    , decltype(_impl_.redo_action_string_){}
    , decltype(_impl_.action_string_localization_){}
    , decltype(_impl_.command_history_){nullptr}
    , decltype(_impl_.command_selection_behavior_history_){nullptr}
    , decltype(_impl_.view_state_){nullptr}
    , decltype(_impl_.web_state_){nullptr}
    , decltype(_impl_.collaboration_command_history_){nullptr}
    , decltype(_impl_.collaboration_session_state_){nullptr}
    , decltype(_impl_.collaboration_state_){nullptr}
    , decltype(_impl_.activity_notification_map_){nullptr}
    , decltype(_impl_.removed_author_auditor_pending_state_){nullptr}
    , decltype(_impl_.undo_count_){0u}
    , decltype(_impl_.redo_count_){0u}
    , decltype(_impl_.is_in_collaboration_mode_){false}
  };
  _impl_.undo_action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.undo_action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redo_action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redo_action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_string_localization_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_localization_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentSupportArchive::~DocumentSupportArchive() {
  // @@protoc_insertion_point(destructor:TSK.DocumentSupportArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentSupportArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.undo_action_string_.Destroy();
  _impl_.redo_action_string_.Destroy();
  _impl_.action_string_localization_.Destroy();
  if (this != internal_default_instance()) delete _impl_.command_history_;
  if (this != internal_default_instance()) delete _impl_.command_selection_behavior_history_;
  if (this != internal_default_instance()) delete _impl_.view_state_;
  if (this != internal_default_instance()) delete _impl_.web_state_;
  if (this != internal_default_instance()) delete _impl_.collaboration_command_history_;
  if (this != internal_default_instance()) delete _impl_.collaboration_session_state_;
  if (this != internal_default_instance()) delete _impl_.collaboration_state_;
  if (this != internal_default_instance()) delete _impl_.activity_notification_map_;
  if (this != internal_default_instance()) delete _impl_.removed_author_auditor_pending_state_;
}

void DocumentSupportArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentSupportArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentSupportArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.undo_action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.redo_action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.action_string_localization_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.command_history_ != nullptr);
      _impl_.command_history_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.command_selection_behavior_history_ != nullptr);
      _impl_.command_selection_behavior_history_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.view_state_ != nullptr);
      _impl_.view_state_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.web_state_ != nullptr);
      _impl_.web_state_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.collaboration_command_history_ != nullptr);
      _impl_.collaboration_command_history_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.collaboration_session_state_ != nullptr);
      _impl_.collaboration_session_state_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.collaboration_state_ != nullptr);
      _impl_.collaboration_state_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.activity_notification_map_ != nullptr);
      _impl_.activity_notification_map_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.removed_author_auditor_pending_state_ != nullptr);
      _impl_.removed_author_auditor_pending_state_->Clear();
    }
  }
  if (cached_has_bits & 0x00007000u) {
    ::memset(&_impl_.undo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_in_collaboration_mode_) -
        reinterpret_cast<char*>(&_impl_.undo_count_)) + sizeof(_impl_.is_in_collaboration_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSupportArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_selection_behavior_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference view_state = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 undo_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_undo_count(&has_bits);
          _impl_.undo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redo_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_redo_count(&has_bits);
          _impl_.redo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string undo_action_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_undo_action_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.DocumentSupportArchive.undo_action_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string redo_action_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_redo_action_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.DocumentSupportArchive.redo_action_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference web_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_in_collaboration_mode = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_in_collaboration_mode(&has_bits);
          _impl_.is_in_collaboration_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_command_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_session_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string action_string_localization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_action_string_localization();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.DocumentSupportArchive.action_string_localization");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference activity_notification_map = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_notification_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference removed_author_auditor_pending_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_author_auditor_pending_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentSupportArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentSupportArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference command_history = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command_history(this),
        _Internal::command_history(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::command_selection_behavior_history(this),
        _Internal::command_selection_behavior_history(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference view_state = 3 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::view_state(this),
        _Internal::view_state(this).GetCachedSize(), target, stream);
  }

  // optional uint32 undo_count = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undo_count(), target);
  }

  // optional uint32 redo_count = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_redo_count(), target);
  }

  // optional string undo_action_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_undo_action_string().data(), static_cast<int>(this->_internal_undo_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentSupportArchive.undo_action_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_undo_action_string(), target);
  }

  // optional string redo_action_string = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_redo_action_string().data(), static_cast<int>(this->_internal_redo_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentSupportArchive.redo_action_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_redo_action_string(), target);
  }

  // optional .TSP.Reference web_state = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::web_state(this),
        _Internal::web_state(this).GetCachedSize(), target, stream);
  }

  // optional bool is_in_collaboration_mode = 9 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_in_collaboration_mode(), target);
  }

  // optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::collaboration_command_history(this),
        _Internal::collaboration_command_history(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::collaboration_session_state(this),
        _Internal::collaboration_session_state(this).GetCachedSize(), target, stream);
  }

  // optional string action_string_localization = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string_localization().data(), static_cast<int>(this->_internal_action_string_localization().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentSupportArchive.action_string_localization");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_action_string_localization(), target);
  }

  // optional .TSP.Reference collaboration_state = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::collaboration_state(this),
        _Internal::collaboration_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference activity_notification_map = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::activity_notification_map(this),
        _Internal::activity_notification_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference removed_author_auditor_pending_state = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::removed_author_auditor_pending_state(this),
        _Internal::removed_author_auditor_pending_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentSupportArchive)
  return target;
}

size_t DocumentSupportArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentSupportArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string undo_action_string = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_undo_action_string());
    }

    // optional string redo_action_string = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redo_action_string());
    }

    // optional string action_string_localization = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_string_localization());
    }

    // optional .TSP.Reference command_history = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_history_);
    }

    // optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_selection_behavior_history_);
    }

    // optional .TSP.Reference view_state = 3 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.view_state_);
    }

    // optional .TSP.Reference web_state = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.web_state_);
    }

    // optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collaboration_command_history_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collaboration_session_state_);
    }

    // optional .TSP.Reference collaboration_state = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collaboration_state_);
    }

    // optional .TSP.Reference activity_notification_map = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activity_notification_map_);
    }

    // optional .TSP.Reference removed_author_auditor_pending_state = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.removed_author_auditor_pending_state_);
    }

    // optional uint32 undo_count = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undo_count());
    }

    // optional uint32 redo_count = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redo_count());
    }

    // optional bool is_in_collaboration_mode = 9 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSupportArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentSupportArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSupportArchive::GetClassData() const { return &_class_data_; }


void DocumentSupportArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentSupportArchive*>(&to_msg);
  auto& from = static_cast<const DocumentSupportArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentSupportArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_undo_action_string(from._internal_undo_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_redo_action_string(from._internal_redo_action_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_action_string_localization(from._internal_action_string_localization());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_command_history()->::TSP::Reference::MergeFrom(
          from._internal_command_history());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_command_selection_behavior_history()->::TSP::Reference::MergeFrom(
          from._internal_command_selection_behavior_history());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_view_state()->::TSP::Reference::MergeFrom(
          from._internal_view_state());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_web_state()->::TSP::Reference::MergeFrom(
          from._internal_web_state());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_collaboration_command_history()->::TSP::Reference::MergeFrom(
          from._internal_collaboration_command_history());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_collaboration_session_state()->::TSP::Reference::MergeFrom(
          from._internal_collaboration_session_state());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_collaboration_state()->::TSP::Reference::MergeFrom(
          from._internal_collaboration_state());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_activity_notification_map()->::TSP::Reference::MergeFrom(
          from._internal_activity_notification_map());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_removed_author_auditor_pending_state()->::TSP::Reference::MergeFrom(
          from._internal_removed_author_auditor_pending_state());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.undo_count_ = from._impl_.undo_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.redo_count_ = from._impl_.redo_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_in_collaboration_mode_ = from._impl_.is_in_collaboration_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSupportArchive::CopyFrom(const DocumentSupportArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentSupportArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSupportArchive::IsInitialized() const {
  if (_internal_has_command_history()) {
    if (!_impl_.command_history_->IsInitialized()) return false;
  }
  if (_internal_has_command_selection_behavior_history()) {
    if (!_impl_.command_selection_behavior_history_->IsInitialized()) return false;
  }
  if (_internal_has_view_state()) {
    if (!_impl_.view_state_->IsInitialized()) return false;
  }
  if (_internal_has_web_state()) {
    if (!_impl_.web_state_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_command_history()) {
    if (!_impl_.collaboration_command_history_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_session_state()) {
    if (!_impl_.collaboration_session_state_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_state()) {
    if (!_impl_.collaboration_state_->IsInitialized()) return false;
  }
  if (_internal_has_activity_notification_map()) {
    if (!_impl_.activity_notification_map_->IsInitialized()) return false;
  }
  if (_internal_has_removed_author_auditor_pending_state()) {
    if (!_impl_.removed_author_auditor_pending_state_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSupportArchive::InternalSwap(DocumentSupportArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.undo_action_string_, lhs_arena,
      &other->_impl_.undo_action_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redo_action_string_, lhs_arena,
      &other->_impl_.redo_action_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_string_localization_, lhs_arena,
      &other->_impl_.action_string_localization_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentSupportArchive, _impl_.is_in_collaboration_mode_)
      + sizeof(DocumentSupportArchive::_impl_.is_in_collaboration_mode_)
      - PROTOBUF_FIELD_OFFSET(DocumentSupportArchive, _impl_.command_history_)>(
          reinterpret_cast<char*>(&_impl_.command_history_),
          reinterpret_cast<char*>(&other->_impl_.command_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSupportArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[17]);
}

// ===================================================================

class ViewStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewStateArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& view_state_root(const ViewStateArchive* msg);
  static void set_has_view_state_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_document_revision_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
ViewStateArchive::_Internal::view_state_root(const ViewStateArchive* msg) {
  return *msg->_impl_.view_state_root_;
}
void ViewStateArchive::clear_view_state_root() {
  if (_impl_.view_state_root_ != nullptr) _impl_.view_state_root_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ViewStateArchive::ViewStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ViewStateArchive)
}
ViewStateArchive::ViewStateArchive(const ViewStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_revision_identifier_){}
    , decltype(_impl_.view_state_root_){nullptr}
    , decltype(_impl_.document_revision_sequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_revision_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_revision_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_document_revision_identifier()) {
    _this->_impl_.document_revision_identifier_.Set(from._internal_document_revision_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_view_state_root()) {
    _this->_impl_.view_state_root_ = new ::TSP::Reference(*from._impl_.view_state_root_);
  }
  _this->_impl_.document_revision_sequence_ = from._impl_.document_revision_sequence_;
  // @@protoc_insertion_point(copy_constructor:TSK.ViewStateArchive)
}

inline void ViewStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_revision_identifier_){}
    , decltype(_impl_.view_state_root_){nullptr}
    , decltype(_impl_.document_revision_sequence_){0}
  };
  _impl_.document_revision_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_revision_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewStateArchive::~ViewStateArchive() {
  // @@protoc_insertion_point(destructor:TSK.ViewStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_revision_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.view_state_root_;
}

void ViewStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ViewStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.document_revision_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.view_state_root_ != nullptr);
      _impl_.view_state_root_->Clear();
    }
  }
  _impl_.document_revision_sequence_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference view_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_state_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 document_revision_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_document_revision_sequence(&has_bits);
          _impl_.document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string document_revision_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_document_revision_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.ViewStateArchive.document_revision_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ViewStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference view_state_root = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::view_state_root(this),
        _Internal::view_state_root(this).GetCachedSize(), target, stream);
  }

  // optional int32 document_revision_sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_document_revision_sequence(), target);
  }

  // optional string document_revision_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_revision_identifier().data(), static_cast<int>(this->_internal_document_revision_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ViewStateArchive.document_revision_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_document_revision_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ViewStateArchive)
  return target;
}

size_t ViewStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ViewStateArchive)
  size_t total_size = 0;

  // required .TSP.Reference view_state_root = 1;
  if (_internal_has_view_state_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.view_state_root_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string document_revision_identifier = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_revision_identifier());
  }

  // optional int32 document_revision_sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_document_revision_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewStateArchive::GetClassData() const { return &_class_data_; }


void ViewStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewStateArchive*>(&to_msg);
  auto& from = static_cast<const ViewStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ViewStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_document_revision_identifier(from._internal_document_revision_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_view_state_root()->::TSP::Reference::MergeFrom(
          from._internal_view_state_root());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.document_revision_sequence_ = from._impl_.document_revision_sequence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewStateArchive::CopyFrom(const ViewStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ViewStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_view_state_root()) {
    if (!_impl_.view_state_root_->IsInitialized()) return false;
  }
  return true;
}

void ViewStateArchive::InternalSwap(ViewStateArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_revision_identifier_, lhs_arena,
      &other->_impl_.document_revision_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewStateArchive, _impl_.document_revision_sequence_)
      + sizeof(ViewStateArchive::_impl_.document_revision_sequence_)
      - PROTOBUF_FIELD_OFFSET(ViewStateArchive, _impl_.view_state_root_)>(
          reinterpret_cast<char*>(&_impl_.view_state_root_),
          reinterpret_cast<char*>(&other->_impl_.view_state_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[18]);
}

// ===================================================================

class CommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& undoredostate(const CommandArchive* msg);
  static void set_has_undoredostate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& undocollection(const CommandArchive* msg);
  static void set_has_undocollection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shadowed_by_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shadowed_by_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_hold_until_group_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_originated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSP::Reference&
CommandArchive::_Internal::undoredostate(const CommandArchive* msg) {
  return *msg->_impl_.undoredostate_;
}
const ::TSP::Reference&
CommandArchive::_Internal::undocollection(const CommandArchive* msg) {
  return *msg->_impl_.undocollection_;
}
void CommandArchive::clear_undoredostate() {
  if (_impl_.undoredostate_ != nullptr) _impl_.undoredostate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandArchive::clear_undocollection() {
  if (_impl_.undocollection_ != nullptr) _impl_.undocollection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandArchive::CommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandArchive)
}
CommandArchive::CommandArchive(const CommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undoredostate_){nullptr}
    , decltype(_impl_.undocollection_){nullptr}
    , decltype(_impl_.shadowed_by_transform_){}
    , decltype(_impl_.shadowed_by_commit_){}
    , decltype(_impl_.remote_){}
    , decltype(_impl_.should_hold_until_group_commit_){}
    , decltype(_impl_.server_originated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_undoredostate()) {
    _this->_impl_.undoredostate_ = new ::TSP::Reference(*from._impl_.undoredostate_);
  }
  if (from._internal_has_undocollection()) {
    _this->_impl_.undocollection_ = new ::TSP::Reference(*from._impl_.undocollection_);
  }
  ::memcpy(&_impl_.shadowed_by_transform_, &from._impl_.shadowed_by_transform_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_originated_) -
    reinterpret_cast<char*>(&_impl_.shadowed_by_transform_)) + sizeof(_impl_.server_originated_));
  // @@protoc_insertion_point(copy_constructor:TSK.CommandArchive)
}

inline void CommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undoredostate_){nullptr}
    , decltype(_impl_.undocollection_){nullptr}
    , decltype(_impl_.shadowed_by_transform_){false}
    , decltype(_impl_.shadowed_by_commit_){false}
    , decltype(_impl_.remote_){false}
    , decltype(_impl_.should_hold_until_group_commit_){false}
    , decltype(_impl_.server_originated_){false}
  };
}

CommandArchive::~CommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.undoredostate_;
  if (this != internal_default_instance()) delete _impl_.undocollection_;
}

void CommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.undoredostate_ != nullptr);
      _impl_.undoredostate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.undocollection_ != nullptr);
      _impl_.undocollection_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.shadowed_by_transform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_originated_) -
        reinterpret_cast<char*>(&_impl_.shadowed_by_transform_)) + sizeof(_impl_.server_originated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference undoRedoState = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_undoredostate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undoCollection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_undocollection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shadowed_by_transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shadowed_by_transform(&has_bits);
          _impl_.shadowed_by_transform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shadowed_by_commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shadowed_by_commit(&has_bits);
          _impl_.shadowed_by_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remote = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_remote(&has_bits);
          _impl_.remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_hold_until_group_commit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_should_hold_until_group_commit(&has_bits);
          _impl_.should_hold_until_group_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool server_originated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_server_originated(&has_bits);
          _impl_.server_originated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference undoRedoState = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::undoredostate(this),
        _Internal::undoredostate(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undoCollection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::undocollection(this),
        _Internal::undocollection(this).GetCachedSize(), target, stream);
  }

  // optional bool shadowed_by_transform = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_shadowed_by_transform(), target);
  }

  // optional bool shadowed_by_commit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_shadowed_by_commit(), target);
  }

  // optional bool remote = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_remote(), target);
  }

  // optional bool should_hold_until_group_commit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_should_hold_until_group_commit(), target);
  }

  // optional bool server_originated = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_server_originated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandArchive)
  return target;
}

size_t CommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Reference undoRedoState = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undoredostate_);
    }

    // optional .TSP.Reference undoCollection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undocollection_);
    }

    // optional bool shadowed_by_transform = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool shadowed_by_commit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool remote = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool should_hold_until_group_commit = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool server_originated = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandArchive::GetClassData() const { return &_class_data_; }


void CommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandArchive*>(&to_msg);
  auto& from = static_cast<const CommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_undoredostate()->::TSP::Reference::MergeFrom(
          from._internal_undoredostate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_undocollection()->::TSP::Reference::MergeFrom(
          from._internal_undocollection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.shadowed_by_transform_ = from._impl_.shadowed_by_transform_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.shadowed_by_commit_ = from._impl_.shadowed_by_commit_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.remote_ = from._impl_.remote_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.should_hold_until_group_commit_ = from._impl_.should_hold_until_group_commit_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_originated_ = from._impl_.server_originated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandArchive::CopyFrom(const CommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandArchive::IsInitialized() const {
  if (_internal_has_undoredostate()) {
    if (!_impl_.undoredostate_->IsInitialized()) return false;
  }
  if (_internal_has_undocollection()) {
    if (!_impl_.undocollection_->IsInitialized()) return false;
  }
  return true;
}

void CommandArchive::InternalSwap(CommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandArchive, _impl_.server_originated_)
      + sizeof(CommandArchive::_impl_.server_originated_)
      - PROTOBUF_FIELD_OFFSET(CommandArchive, _impl_.undoredostate_)>(
          reinterpret_cast<char*>(&_impl_.undoredostate_),
          reinterpret_cast<char*>(&other->_impl_.undoredostate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[19]);
}

// ===================================================================

class CommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandGroupArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& process_results(const CommandGroupArchive* msg);
  static void set_has_process_results(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_coalesce_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CommandGroupArchive::_Internal::super(const CommandGroupArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::IndexSet&
CommandGroupArchive::_Internal::process_results(const CommandGroupArchive* msg) {
  return *msg->_impl_.process_results_;
}
void CommandGroupArchive::clear_commands() {
  _impl_.commands_.Clear();
}
void CommandGroupArchive::clear_process_results() {
  if (_impl_.process_results_ != nullptr) _impl_.process_results_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandGroupArchive::CommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandGroupArchive)
}
CommandGroupArchive::CommandGroupArchive(const CommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandGroupArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){from._impl_.commands_}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.process_results_){nullptr}
    , decltype(_impl_.can_coalesce_group_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_string()) {
    _this->_impl_.action_string_.Set(from._internal_action_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_process_results()) {
    _this->_impl_.process_results_ = new ::TSP::IndexSet(*from._impl_.process_results_);
  }
  _this->_impl_.can_coalesce_group_ = from._impl_.can_coalesce_group_;
  // @@protoc_insertion_point(copy_constructor:TSK.CommandGroupArchive)
}

inline void CommandGroupArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){arena}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.process_results_){nullptr}
    , decltype(_impl_.can_coalesce_group_){false}
  };
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandGroupArchive::~CommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandGroupArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.~RepeatedPtrField();
  _impl_.action_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.process_results_;
}

void CommandGroupArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandGroupArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.process_results_ != nullptr);
      _impl_.process_results_->Clear();
    }
  }
  _impl_.can_coalesce_group_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandGroupArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.IndexSet process_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_results(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string action_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.CommandGroupArchive.action_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool can_coalesce_group = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_can_coalesce_group(&has_bits);
          _impl_.can_coalesce_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandGroupArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandGroupArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference commands = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.IndexSet process_results = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::process_results(this),
        _Internal::process_results(this).GetCachedSize(), target, stream);
  }

  // optional string action_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CommandGroupArchive.action_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action_string(), target);
  }

  // optional bool can_coalesce_group = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_can_coalesce_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandGroupArchive)
  return target;
}

size_t CommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandGroupArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 2;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->_impl_.commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string action_string = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_string());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.IndexSet process_results = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.process_results_);
    }

    // optional bool can_coalesce_group = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandGroupArchive::GetClassData() const { return &_class_data_; }


void CommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandGroupArchive*>(&to_msg);
  auto& from = static_cast<const CommandGroupArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_process_results()->::TSP::IndexSet::MergeFrom(
          from._internal_process_results());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.can_coalesce_group_ = from._impl_.can_coalesce_group_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandGroupArchive::CopyFrom(const CommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_process_results()) {
    if (!_impl_.process_results_->IsInitialized()) return false;
  }
  return true;
}

void CommandGroupArchive::InternalSwap(CommandGroupArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_string_, lhs_arena,
      &other->_impl_.action_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandGroupArchive, _impl_.can_coalesce_group_)
      + sizeof(CommandGroupArchive::_impl_.can_coalesce_group_)
      - PROTOBUF_FIELD_OFFSET(CommandGroupArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandGroupArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[20]);
}

// ===================================================================

class InducedCommandCollectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InducedCommandCollectionArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const InducedCommandCollectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& inducing_command(const InducedCommandCollectionArchive* msg);
  static void set_has_inducing_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& indexes_of_processed_induced_commands(const InducedCommandCollectionArchive* msg);
  static void set_has_indexes_of_processed_induced_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InducedCommandCollectionArchive::_Internal::super(const InducedCommandCollectionArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
InducedCommandCollectionArchive::_Internal::inducing_command(const InducedCommandCollectionArchive* msg) {
  return *msg->_impl_.inducing_command_;
}
const ::TSP::IndexSet&
InducedCommandCollectionArchive::_Internal::indexes_of_processed_induced_commands(const InducedCommandCollectionArchive* msg) {
  return *msg->_impl_.indexes_of_processed_induced_commands_;
}
void InducedCommandCollectionArchive::clear_inducing_command() {
  if (_impl_.inducing_command_ != nullptr) _impl_.inducing_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InducedCommandCollectionArchive::clear_induced_commands() {
  _impl_.induced_commands_.Clear();
}
void InducedCommandCollectionArchive::clear_indexes_of_processed_induced_commands() {
  if (_impl_.indexes_of_processed_induced_commands_ != nullptr) _impl_.indexes_of_processed_induced_commands_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
InducedCommandCollectionArchive::InducedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.InducedCommandCollectionArchive)
}
InducedCommandCollectionArchive::InducedCommandCollectionArchive(const InducedCommandCollectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InducedCommandCollectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.induced_commands_){from._impl_.induced_commands_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.inducing_command_){nullptr}
    , decltype(_impl_.indexes_of_processed_induced_commands_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_inducing_command()) {
    _this->_impl_.inducing_command_ = new ::TSP::Reference(*from._impl_.inducing_command_);
  }
  if (from._internal_has_indexes_of_processed_induced_commands()) {
    _this->_impl_.indexes_of_processed_induced_commands_ = new ::TSP::IndexSet(*from._impl_.indexes_of_processed_induced_commands_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.InducedCommandCollectionArchive)
}

inline void InducedCommandCollectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.induced_commands_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.inducing_command_){nullptr}
    , decltype(_impl_.indexes_of_processed_induced_commands_){nullptr}
  };
}

InducedCommandCollectionArchive::~InducedCommandCollectionArchive() {
  // @@protoc_insertion_point(destructor:TSK.InducedCommandCollectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InducedCommandCollectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.induced_commands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.inducing_command_;
  if (this != internal_default_instance()) delete _impl_.indexes_of_processed_induced_commands_;
}

void InducedCommandCollectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InducedCommandCollectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.InducedCommandCollectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.induced_commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.inducing_command_ != nullptr);
      _impl_.inducing_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.indexes_of_processed_induced_commands_ != nullptr);
      _impl_.indexes_of_processed_induced_commands_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InducedCommandCollectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inducing_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inducing_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference induced_commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_induced_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexes_of_processed_induced_commands(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InducedCommandCollectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.InducedCommandCollectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inducing_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inducing_command(this),
        _Internal::inducing_command(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference induced_commands = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_induced_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_induced_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::indexes_of_processed_induced_commands(this),
        _Internal::indexes_of_processed_induced_commands(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.InducedCommandCollectionArchive)
  return target;
}

size_t InducedCommandCollectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.InducedCommandCollectionArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference induced_commands = 3;
  total_size += 1UL * this->_internal_induced_commands_size();
  for (const auto& msg : this->_impl_.induced_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference inducing_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inducing_command_);
    }

    // optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.indexes_of_processed_induced_commands_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InducedCommandCollectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InducedCommandCollectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InducedCommandCollectionArchive::GetClassData() const { return &_class_data_; }


void InducedCommandCollectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InducedCommandCollectionArchive*>(&to_msg);
  auto& from = static_cast<const InducedCommandCollectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.InducedCommandCollectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.induced_commands_.MergeFrom(from._impl_.induced_commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_inducing_command()->::TSP::Reference::MergeFrom(
          from._internal_inducing_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_indexes_of_processed_induced_commands()->::TSP::IndexSet::MergeFrom(
          from._internal_indexes_of_processed_induced_commands());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InducedCommandCollectionArchive::CopyFrom(const InducedCommandCollectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.InducedCommandCollectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InducedCommandCollectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.induced_commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_inducing_command()) {
    if (!_impl_.inducing_command_->IsInitialized()) return false;
  }
  if (_internal_has_indexes_of_processed_induced_commands()) {
    if (!_impl_.indexes_of_processed_induced_commands_->IsInitialized()) return false;
  }
  return true;
}

void InducedCommandCollectionArchive::InternalSwap(InducedCommandCollectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.induced_commands_.InternalSwap(&other->_impl_.induced_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InducedCommandCollectionArchive, _impl_.indexes_of_processed_induced_commands_)
      + sizeof(InducedCommandCollectionArchive::_impl_.indexes_of_processed_induced_commands_)
      - PROTOBUF_FIELD_OFFSET(InducedCommandCollectionArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InducedCommandCollectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[21]);
}

// ===================================================================

class PropagatedCommandCollectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropagatedCommandCollectionArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const PropagatedCommandCollectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& propagatable_command(const PropagatedCommandCollectionArchive* msg);
  static void set_has_propagatable_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_propagatable_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& propagating_command(const PropagatedCommandCollectionArchive* msg);
  static void set_has_propagating_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_propagating_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
PropagatedCommandCollectionArchive::_Internal::super(const PropagatedCommandCollectionArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
PropagatedCommandCollectionArchive::_Internal::propagatable_command(const PropagatedCommandCollectionArchive* msg) {
  return *msg->_impl_.propagatable_command_;
}
const ::TSP::Reference&
PropagatedCommandCollectionArchive::_Internal::propagating_command(const PropagatedCommandCollectionArchive* msg) {
  return *msg->_impl_.propagating_command_;
}
void PropagatedCommandCollectionArchive::clear_propagatable_command() {
  if (_impl_.propagatable_command_ != nullptr) _impl_.propagatable_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PropagatedCommandCollectionArchive::clear_propagating_command() {
  if (_impl_.propagating_command_ != nullptr) _impl_.propagating_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PropagatedCommandCollectionArchive::PropagatedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.PropagatedCommandCollectionArchive)
}
PropagatedCommandCollectionArchive::PropagatedCommandCollectionArchive(const PropagatedCommandCollectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropagatedCommandCollectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.propagatable_command_){nullptr}
    , decltype(_impl_.propagating_command_){nullptr}
    , decltype(_impl_.propagatable_command_process_result_){}
    , decltype(_impl_.propagating_command_process_result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_propagatable_command()) {
    _this->_impl_.propagatable_command_ = new ::TSP::Reference(*from._impl_.propagatable_command_);
  }
  if (from._internal_has_propagating_command()) {
    _this->_impl_.propagating_command_ = new ::TSP::Reference(*from._impl_.propagating_command_);
  }
  ::memcpy(&_impl_.propagatable_command_process_result_, &from._impl_.propagatable_command_process_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.propagating_command_process_result_) -
    reinterpret_cast<char*>(&_impl_.propagatable_command_process_result_)) + sizeof(_impl_.propagating_command_process_result_));
  // @@protoc_insertion_point(copy_constructor:TSK.PropagatedCommandCollectionArchive)
}

inline void PropagatedCommandCollectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.propagatable_command_){nullptr}
    , decltype(_impl_.propagating_command_){nullptr}
    , decltype(_impl_.propagatable_command_process_result_){false}
    , decltype(_impl_.propagating_command_process_result_){false}
  };
}

PropagatedCommandCollectionArchive::~PropagatedCommandCollectionArchive() {
  // @@protoc_insertion_point(destructor:TSK.PropagatedCommandCollectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropagatedCommandCollectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.propagatable_command_;
  if (this != internal_default_instance()) delete _impl_.propagating_command_;
}

void PropagatedCommandCollectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropagatedCommandCollectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.PropagatedCommandCollectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.propagatable_command_ != nullptr);
      _impl_.propagatable_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.propagating_command_ != nullptr);
      _impl_.propagating_command_->Clear();
    }
  }
  ::memset(&_impl_.propagatable_command_process_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.propagating_command_process_result_) -
      reinterpret_cast<char*>(&_impl_.propagatable_command_process_result_)) + sizeof(_impl_.propagating_command_process_result_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagatedCommandCollectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference propagatable_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_propagatable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool propagatable_command_process_result = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_propagatable_command_process_result(&has_bits);
          _impl_.propagatable_command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference propagating_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_propagating_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool propagating_command_process_result = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_propagating_command_process_result(&has_bits);
          _impl_.propagating_command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropagatedCommandCollectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.PropagatedCommandCollectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference propagatable_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::propagatable_command(this),
        _Internal::propagatable_command(this).GetCachedSize(), target, stream);
  }

  // optional bool propagatable_command_process_result = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_propagatable_command_process_result(), target);
  }

  // required .TSP.Reference propagating_command = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::propagating_command(this),
        _Internal::propagating_command(this).GetCachedSize(), target, stream);
  }

  // optional bool propagating_command_process_result = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_propagating_command_process_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.PropagatedCommandCollectionArchive)
  return target;
}

size_t PropagatedCommandCollectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.PropagatedCommandCollectionArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_propagatable_command()) {
    // required .TSP.Reference propagatable_command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.propagatable_command_);
  }

  if (_internal_has_propagating_command()) {
    // required .TSP.Reference propagating_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.propagating_command_);
  }

  return total_size;
}
size_t PropagatedCommandCollectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.PropagatedCommandCollectionArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference propagatable_command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.propagatable_command_);

    // required .TSP.Reference propagating_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.propagating_command_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional bool propagatable_command_process_result = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool propagating_command_process_result = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropagatedCommandCollectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropagatedCommandCollectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropagatedCommandCollectionArchive::GetClassData() const { return &_class_data_; }


void PropagatedCommandCollectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropagatedCommandCollectionArchive*>(&to_msg);
  auto& from = static_cast<const PropagatedCommandCollectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.PropagatedCommandCollectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_propagatable_command()->::TSP::Reference::MergeFrom(
          from._internal_propagatable_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_propagating_command()->::TSP::Reference::MergeFrom(
          from._internal_propagating_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.propagatable_command_process_result_ = from._impl_.propagatable_command_process_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.propagating_command_process_result_ = from._impl_.propagating_command_process_result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropagatedCommandCollectionArchive::CopyFrom(const PropagatedCommandCollectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.PropagatedCommandCollectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagatedCommandCollectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_propagatable_command()) {
    if (!_impl_.propagatable_command_->IsInitialized()) return false;
  }
  if (_internal_has_propagating_command()) {
    if (!_impl_.propagating_command_->IsInitialized()) return false;
  }
  return true;
}

void PropagatedCommandCollectionArchive::InternalSwap(PropagatedCommandCollectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropagatedCommandCollectionArchive, _impl_.propagating_command_process_result_)
      + sizeof(PropagatedCommandCollectionArchive::_impl_.propagating_command_process_result_)
      - PROTOBUF_FIELD_OFFSET(PropagatedCommandCollectionArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagatedCommandCollectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[22]);
}

// ===================================================================

class FinalCommandPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FinalCommandPairArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const FinalCommandPairArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& command(const FinalCommandPairArchive* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& final_command(const FinalCommandPairArchive* msg);
  static void set_has_final_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_final_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
FinalCommandPairArchive::_Internal::super(const FinalCommandPairArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
FinalCommandPairArchive::_Internal::command(const FinalCommandPairArchive* msg) {
  return *msg->_impl_.command_;
}
const ::TSP::Reference&
FinalCommandPairArchive::_Internal::final_command(const FinalCommandPairArchive* msg) {
  return *msg->_impl_.final_command_;
}
void FinalCommandPairArchive::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FinalCommandPairArchive::clear_final_command() {
  if (_impl_.final_command_ != nullptr) _impl_.final_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
FinalCommandPairArchive::FinalCommandPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.FinalCommandPairArchive)
}
FinalCommandPairArchive::FinalCommandPairArchive(const FinalCommandPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FinalCommandPairArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.final_command_){nullptr}
    , decltype(_impl_.command_process_result_){}
    , decltype(_impl_.final_command_process_result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::TSP::Reference(*from._impl_.command_);
  }
  if (from._internal_has_final_command()) {
    _this->_impl_.final_command_ = new ::TSP::Reference(*from._impl_.final_command_);
  }
  ::memcpy(&_impl_.command_process_result_, &from._impl_.command_process_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.final_command_process_result_) -
    reinterpret_cast<char*>(&_impl_.command_process_result_)) + sizeof(_impl_.final_command_process_result_));
  // @@protoc_insertion_point(copy_constructor:TSK.FinalCommandPairArchive)
}

inline void FinalCommandPairArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.final_command_){nullptr}
    , decltype(_impl_.command_process_result_){false}
    , decltype(_impl_.final_command_process_result_){false}
  };
}

FinalCommandPairArchive::~FinalCommandPairArchive() {
  // @@protoc_insertion_point(destructor:TSK.FinalCommandPairArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FinalCommandPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.command_;
  if (this != internal_default_instance()) delete _impl_.final_command_;
}

void FinalCommandPairArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FinalCommandPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FinalCommandPairArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.final_command_ != nullptr);
      _impl_.final_command_->Clear();
    }
  }
  ::memset(&_impl_.command_process_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.final_command_process_result_) -
      reinterpret_cast<char*>(&_impl_.command_process_result_)) + sizeof(_impl_.final_command_process_result_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalCommandPairArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_process_result = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_command_process_result(&has_bits);
          _impl_.command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference final_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool final_command_process_result = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_final_command_process_result(&has_bits);
          _impl_.final_command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FinalCommandPairArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FinalCommandPairArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // optional bool command_process_result = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_command_process_result(), target);
  }

  // required .TSP.Reference final_command = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::final_command(this),
        _Internal::final_command(this).GetCachedSize(), target, stream);
  }

  // optional bool final_command_process_result = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_final_command_process_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FinalCommandPairArchive)
  return target;
}

size_t FinalCommandPairArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.FinalCommandPairArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_command()) {
    // required .TSP.Reference command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_);
  }

  if (_internal_has_final_command()) {
    // required .TSP.Reference final_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.final_command_);
  }

  return total_size;
}
size_t FinalCommandPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FinalCommandPairArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_);

    // required .TSP.Reference final_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.final_command_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional bool command_process_result = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool final_command_process_result = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FinalCommandPairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FinalCommandPairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FinalCommandPairArchive::GetClassData() const { return &_class_data_; }


void FinalCommandPairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FinalCommandPairArchive*>(&to_msg);
  auto& from = static_cast<const FinalCommandPairArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.FinalCommandPairArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_command()->::TSP::Reference::MergeFrom(
          from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_final_command()->::TSP::Reference::MergeFrom(
          from._internal_final_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.command_process_result_ = from._impl_.command_process_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.final_command_process_result_ = from._impl_.final_command_process_result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FinalCommandPairArchive::CopyFrom(const FinalCommandPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FinalCommandPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalCommandPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  if (_internal_has_final_command()) {
    if (!_impl_.final_command_->IsInitialized()) return false;
  }
  return true;
}

void FinalCommandPairArchive::InternalSwap(FinalCommandPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FinalCommandPairArchive, _impl_.final_command_process_result_)
      + sizeof(FinalCommandPairArchive::_impl_.final_command_process_result_)
      - PROTOBUF_FIELD_OFFSET(FinalCommandPairArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalCommandPairArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[23]);
}

// ===================================================================

class CommandContainerArchive::_Internal {
 public:
};

void CommandContainerArchive::clear_commands() {
  _impl_.commands_.Clear();
}
CommandContainerArchive::CommandContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandContainerArchive)
}
CommandContainerArchive::CommandContainerArchive(const CommandContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandContainerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.commands_){from._impl_.commands_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.CommandContainerArchive)
}

inline void CommandContainerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.commands_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommandContainerArchive::~CommandContainerArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandContainerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.~RepeatedPtrField();
}

void CommandContainerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandContainerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandContainerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandContainerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandContainerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandContainerArchive)
  return target;
}

size_t CommandContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandContainerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 1;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->_impl_.commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandContainerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandContainerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandContainerArchive::GetClassData() const { return &_class_data_; }


void CommandContainerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandContainerArchive*>(&to_msg);
  auto& from = static_cast<const CommandContainerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandContainerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandContainerArchive::CopyFrom(const CommandContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandContainerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.commands_))
    return false;
  return true;
}

void CommandContainerArchive::InternalSwap(CommandContainerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandContainerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[24]);
}

// ===================================================================

class ProgressiveCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ProgressiveCommandGroupArchive>()._impl_._has_bits_);
  static const ::TSK::CommandGroupArchive& super(const ProgressiveCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandGroupArchive&
ProgressiveCommandGroupArchive::_Internal::super(const ProgressiveCommandGroupArchive* msg) {
  return *msg->_impl_.super_;
}
ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ProgressiveCommandGroupArchive)
}
ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive(const ProgressiveCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProgressiveCommandGroupArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandGroupArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ProgressiveCommandGroupArchive)
}

inline void ProgressiveCommandGroupArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ProgressiveCommandGroupArchive::~ProgressiveCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TSK.ProgressiveCommandGroupArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProgressiveCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ProgressiveCommandGroupArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProgressiveCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ProgressiveCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgressiveCommandGroupArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProgressiveCommandGroupArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ProgressiveCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ProgressiveCommandGroupArchive)
  return target;
}

size_t ProgressiveCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ProgressiveCommandGroupArchive)
  size_t total_size = 0;

  // required .TSK.CommandGroupArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgressiveCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProgressiveCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgressiveCommandGroupArchive::GetClassData() const { return &_class_data_; }


void ProgressiveCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProgressiveCommandGroupArchive*>(&to_msg);
  auto& from = static_cast<const ProgressiveCommandGroupArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ProgressiveCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandGroupArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgressiveCommandGroupArchive::CopyFrom(const ProgressiveCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ProgressiveCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressiveCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ProgressiveCommandGroupArchive::InternalSwap(ProgressiveCommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgressiveCommandGroupArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[25]);
}

// ===================================================================

class FormatStructArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormatStructArchive>()._impl_._has_bits_);
  static void set_has_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_duration_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_custom_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_custom_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_requires_fraction_replacement(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_control_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_control_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_control_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_control_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_slider_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_slider_position(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_decimal_width(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_min_integer_width(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_num_nonspace_integer_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_num_nonspace_decimal_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_index_from_right_last_integer(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSP::IndexSet& inters_str_insertion_indexes(const FormatStructArchive* msg);
  static void set_has_inters_str_insertion_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_hash_decimal_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_total_num_decimal_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_is_complex(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_contains_integer_token(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_multiple_choice_list_initial_value(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_multiple_choice_list_id(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_use_automatic_duration_units(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSP::UUID& custom_uid(const FormatStructArchive* msg);
  static void set_has_custom_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::CustomFormatArchive& custom_format(const FormatStructArchive* msg);
  static void set_has_custom_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uses_plus_sign(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_bool_true_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bool_false_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::IndexSet&
FormatStructArchive::_Internal::inters_str_insertion_indexes(const FormatStructArchive* msg) {
  return *msg->_impl_.inters_str_insertion_indexes_;
}
const ::TSP::UUID&
FormatStructArchive::_Internal::custom_uid(const FormatStructArchive* msg) {
  return *msg->_impl_.custom_uid_;
}
const ::TSK::CustomFormatArchive&
FormatStructArchive::_Internal::custom_format(const FormatStructArchive* msg) {
  return *msg->_impl_.custom_format_;
}
void FormatStructArchive::clear_inters_str_insertion_indexes() {
  if (_impl_.inters_str_insertion_indexes_ != nullptr) _impl_.inters_str_insertion_indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void FormatStructArchive::clear_custom_uid() {
  if (_impl_.custom_uid_ != nullptr) _impl_.custom_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
FormatStructArchive::FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.FormatStructArchive)
}
FormatStructArchive::FormatStructArchive(const FormatStructArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormatStructArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interstitial_strings_){from._impl_.interstitial_strings_}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.date_time_format_){}
    , decltype(_impl_.custom_format_string_){}
    , decltype(_impl_.bool_true_string_){}
    , decltype(_impl_.bool_false_string_){}
    , decltype(_impl_.inters_str_insertion_indexes_){nullptr}
    , decltype(_impl_.custom_uid_){nullptr}
    , decltype(_impl_.custom_format_){nullptr}
    , decltype(_impl_.format_type_){}
    , decltype(_impl_.decimal_places_){}
    , decltype(_impl_.negative_style_){}
    , decltype(_impl_.duration_style_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.show_thousands_separator_){}
    , decltype(_impl_.use_accounting_style_){}
    , decltype(_impl_.base_use_minus_sign_){}
    , decltype(_impl_.suppress_date_format_){}
    , decltype(_impl_.base_places_){}
    , decltype(_impl_.fraction_accuracy_){}
    , decltype(_impl_.duration_unit_largest_){}
    , decltype(_impl_.duration_unit_smallest_){}
    , decltype(_impl_.scale_factor_){}
    , decltype(_impl_.custom_id_){}
    , decltype(_impl_.control_format_type_){}
    , decltype(_impl_.control_minimum_){}
    , decltype(_impl_.control_maximum_){}
    , decltype(_impl_.control_increment_){}
    , decltype(_impl_.slider_orientation_){}
    , decltype(_impl_.slider_position_){}
    , decltype(_impl_.suppress_time_format_){}
    , decltype(_impl_.requires_fraction_replacement_){}
    , decltype(_impl_.is_complex_){}
    , decltype(_impl_.contains_integer_token_){}
    , decltype(_impl_.decimal_width_){}
    , decltype(_impl_.min_integer_width_){}
    , decltype(_impl_.num_nonspace_integer_digits_){}
    , decltype(_impl_.num_nonspace_decimal_digits_){}
    , decltype(_impl_.index_from_right_last_integer_){}
    , decltype(_impl_.num_hash_decimal_digits_){}
    , decltype(_impl_.total_num_decimal_digits_){}
    , decltype(_impl_.multiple_choice_list_initial_value_){}
    , decltype(_impl_.multiple_choice_list_id_){}
    , decltype(_impl_.use_automatic_duration_units_){}
    , decltype(_impl_.uses_plus_sign_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date_time_format()) {
    _this->_impl_.date_time_format_.Set(from._internal_date_time_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_format_string()) {
    _this->_impl_.custom_format_string_.Set(from._internal_custom_format_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bool_true_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bool_true_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bool_true_string()) {
    _this->_impl_.bool_true_string_.Set(from._internal_bool_true_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bool_false_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bool_false_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bool_false_string()) {
    _this->_impl_.bool_false_string_.Set(from._internal_bool_false_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inters_str_insertion_indexes()) {
    _this->_impl_.inters_str_insertion_indexes_ = new ::TSP::IndexSet(*from._impl_.inters_str_insertion_indexes_);
  }
  if (from._internal_has_custom_uid()) {
    _this->_impl_.custom_uid_ = new ::TSP::UUID(*from._impl_.custom_uid_);
  }
  if (from._internal_has_custom_format()) {
    _this->_impl_.custom_format_ = new ::TSK::CustomFormatArchive(*from._impl_.custom_format_);
  }
  ::memcpy(&_impl_.format_type_, &from._impl_.format_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uses_plus_sign_) -
    reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.uses_plus_sign_));
  // @@protoc_insertion_point(copy_constructor:TSK.FormatStructArchive)
}

inline void FormatStructArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interstitial_strings_){arena}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.date_time_format_){}
    , decltype(_impl_.custom_format_string_){}
    , decltype(_impl_.bool_true_string_){}
    , decltype(_impl_.bool_false_string_){}
    , decltype(_impl_.inters_str_insertion_indexes_){nullptr}
    , decltype(_impl_.custom_uid_){nullptr}
    , decltype(_impl_.custom_format_){nullptr}
    , decltype(_impl_.format_type_){0u}
    , decltype(_impl_.decimal_places_){0u}
    , decltype(_impl_.negative_style_){0u}
    , decltype(_impl_.duration_style_){0u}
    , decltype(_impl_.base_){0u}
    , decltype(_impl_.show_thousands_separator_){false}
    , decltype(_impl_.use_accounting_style_){false}
    , decltype(_impl_.base_use_minus_sign_){false}
    , decltype(_impl_.suppress_date_format_){false}
    , decltype(_impl_.base_places_){0u}
    , decltype(_impl_.fraction_accuracy_){0u}
    , decltype(_impl_.duration_unit_largest_){0u}
    , decltype(_impl_.duration_unit_smallest_){0u}
    , decltype(_impl_.scale_factor_){0}
    , decltype(_impl_.custom_id_){0u}
    , decltype(_impl_.control_format_type_){0u}
    , decltype(_impl_.control_minimum_){0}
    , decltype(_impl_.control_maximum_){0}
    , decltype(_impl_.control_increment_){0}
    , decltype(_impl_.slider_orientation_){0u}
    , decltype(_impl_.slider_position_){0u}
    , decltype(_impl_.suppress_time_format_){false}
    , decltype(_impl_.requires_fraction_replacement_){false}
    , decltype(_impl_.is_complex_){false}
    , decltype(_impl_.contains_integer_token_){false}
    , decltype(_impl_.decimal_width_){0u}
    , decltype(_impl_.min_integer_width_){0u}
    , decltype(_impl_.num_nonspace_integer_digits_){0u}
    , decltype(_impl_.num_nonspace_decimal_digits_){0u}
    , decltype(_impl_.index_from_right_last_integer_){0u}
    , decltype(_impl_.num_hash_decimal_digits_){0u}
    , decltype(_impl_.total_num_decimal_digits_){0u}
    , decltype(_impl_.multiple_choice_list_initial_value_){0u}
    , decltype(_impl_.multiple_choice_list_id_){0u}
    , decltype(_impl_.use_automatic_duration_units_){false}
    , decltype(_impl_.uses_plus_sign_){false}
  };
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bool_true_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bool_true_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bool_false_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bool_false_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FormatStructArchive::~FormatStructArchive() {
  // @@protoc_insertion_point(destructor:TSK.FormatStructArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormatStructArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.interstitial_strings_.~RepeatedPtrField();
  _impl_.currency_code_.Destroy();
  _impl_.date_time_format_.Destroy();
  _impl_.custom_format_string_.Destroy();
  _impl_.bool_true_string_.Destroy();
  _impl_.bool_false_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inters_str_insertion_indexes_;
  if (this != internal_default_instance()) delete _impl_.custom_uid_;
  if (this != internal_default_instance()) delete _impl_.custom_format_;
}

void FormatStructArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormatStructArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FormatStructArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.interstitial_strings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.date_time_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.custom_format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.bool_true_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.bool_false_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.inters_str_insertion_indexes_ != nullptr);
      _impl_.inters_str_insertion_indexes_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.custom_uid_ != nullptr);
      _impl_.custom_uid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.custom_format_ != nullptr);
      _impl_.custom_format_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.format_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_use_minus_sign_) -
        reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.base_use_minus_sign_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.suppress_date_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.control_format_type_) -
        reinterpret_cast<char*>(&_impl_.suppress_date_format_)) + sizeof(_impl_.control_format_type_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.control_minimum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_complex_) -
        reinterpret_cast<char*>(&_impl_.control_minimum_)) + sizeof(_impl_.is_complex_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.contains_integer_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_num_decimal_digits_) -
        reinterpret_cast<char*>(&_impl_.contains_integer_token_)) + sizeof(_impl_.total_num_decimal_digits_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.multiple_choice_list_initial_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.uses_plus_sign_) -
        reinterpret_cast<char*>(&_impl_.multiple_choice_list_initial_value_)) + sizeof(_impl_.uses_plus_sign_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormatStructArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 format_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_format_type(&_impl_._has_bits_);
          _impl_.format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 decimal_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_decimal_places(&_impl_._has_bits_);
          _impl_.decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormatStructArchive.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 negative_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_negative_style(&_impl_._has_bits_);
          _impl_.negative_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_thousands_separator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_show_thousands_separator(&_impl_._has_bits_);
          _impl_.show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_accounting_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_accounting_style(&_impl_._has_bits_);
          _impl_.use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_duration_style(&_impl_._has_bits_);
          _impl_.duration_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_base(&_impl_._has_bits_);
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_places = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_base_places(&_impl_._has_bits_);
          _impl_.base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool base_use_minus_sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_base_use_minus_sign(&_impl_._has_bits_);
          _impl_.base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fraction_accuracy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_fraction_accuracy(&_impl_._has_bits_);
          _impl_.fraction_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_date_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_suppress_date_format(&_impl_._has_bits_);
          _impl_.suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_time_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_suppress_time_format(&_impl_._has_bits_);
          _impl_.suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string date_time_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_date_time_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormatStructArchive.date_time_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_unit_largest = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_duration_unit_largest(&_impl_._has_bits_);
          _impl_.duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_unit_smallest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_duration_unit_smallest(&_impl_._has_bits_);
          _impl_.duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_custom_id(&_impl_._has_bits_);
          _impl_.custom_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_format_string = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_custom_format_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormatStructArchive.custom_format_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double scale_factor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_scale_factor(&_impl_._has_bits_);
          _impl_.scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_fraction_replacement = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_requires_fraction_replacement(&_impl_._has_bits_);
          _impl_.requires_fraction_replacement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double control_minimum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_control_minimum(&_impl_._has_bits_);
          _impl_.control_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double control_maximum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_control_maximum(&_impl_._has_bits_);
          _impl_.control_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double control_increment = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_control_increment(&_impl_._has_bits_);
          _impl_.control_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 control_format_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_control_format_type(&_impl_._has_bits_);
          _impl_.control_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slider_orientation = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_slider_orientation(&_impl_._has_bits_);
          _impl_.slider_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slider_position = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_slider_position(&_impl_._has_bits_);
          _impl_.slider_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 decimal_width = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_decimal_width(&_impl_._has_bits_);
          _impl_.decimal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_integer_width = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_min_integer_width(&_impl_._has_bits_);
          _impl_.min_integer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_nonspace_integer_digits = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_num_nonspace_integer_digits(&_impl_._has_bits_);
          _impl_.num_nonspace_integer_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_nonspace_decimal_digits = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_num_nonspace_decimal_digits(&_impl_._has_bits_);
          _impl_.num_nonspace_decimal_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index_from_right_last_integer = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_index_from_right_last_integer(&_impl_._has_bits_);
          _impl_.index_from_right_last_integer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string interstitial_strings = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_interstitial_strings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.FormatStructArchive.interstitial_strings");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inters_str_insertion_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_hash_decimal_digits = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_hash_decimal_digits(&_impl_._has_bits_);
          _impl_.num_hash_decimal_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_num_decimal_digits = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total_num_decimal_digits(&_impl_._has_bits_);
          _impl_.total_num_decimal_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_complex = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_complex(&_impl_._has_bits_);
          _impl_.is_complex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_integer_token = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_contains_integer_token(&_impl_._has_bits_);
          _impl_.contains_integer_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multiple_choice_list_initial_value = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_multiple_choice_list_initial_value(&_impl_._has_bits_);
          _impl_.multiple_choice_list_initial_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multiple_choice_list_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_multiple_choice_list_id(&_impl_._has_bits_);
          _impl_.multiple_choice_list_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_automatic_duration_units = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_use_automatic_duration_units(&_impl_._has_bits_);
          _impl_.use_automatic_duration_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID custom_uid = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CustomFormatArchive custom_format = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uses_plus_sign = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_uses_plus_sign(&_impl_._has_bits_);
          _impl_.uses_plus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bool_true_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_bool_true_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormatStructArchive.bool_true_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string bool_false_string = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_bool_false_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.FormatStructArchive.bool_false_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag && tag < 160000u)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormatStructArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FormatStructArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 format_type = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_format_type(), target);
  }

  // optional uint32 decimal_places = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_decimal_places(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency_code(), target);
  }

  // optional uint32 negative_style = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_negative_style(), target);
  }

  // optional bool show_thousands_separator = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_show_thousands_separator(), target);
  }

  // optional bool use_accounting_style = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_accounting_style(), target);
  }

  // optional uint32 duration_style = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_duration_style(), target);
  }

  // optional uint32 base = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_base(), target);
  }

  // optional uint32 base_places = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_base_places(), target);
  }

  // optional bool base_use_minus_sign = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_base_use_minus_sign(), target);
  }

  // optional uint32 fraction_accuracy = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_fraction_accuracy(), target);
  }

  // optional bool suppress_date_format = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_suppress_date_format(), target);
  }

  // optional bool suppress_time_format = 13;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_suppress_time_format(), target);
  }

  // optional string date_time_format = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_time_format().data(), static_cast<int>(this->_internal_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.date_time_format");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_date_time_format(), target);
  }

  // optional uint32 duration_unit_largest = 15;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_duration_unit_largest(), target);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_duration_unit_smallest(), target);
  }

  // optional uint32 custom_id = 17;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_custom_id(), target);
  }

  // optional string custom_format_string = 18;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_format_string().data(), static_cast<int>(this->_internal_custom_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.custom_format_string");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_custom_format_string(), target);
  }

  // optional double scale_factor = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_scale_factor(), target);
  }

  // optional bool requires_fraction_replacement = 20;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_requires_fraction_replacement(), target);
  }

  // optional double control_minimum = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_control_minimum(), target);
  }

  // optional double control_maximum = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_control_maximum(), target);
  }

  // optional double control_increment = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_control_increment(), target);
  }

  // optional uint32 control_format_type = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_control_format_type(), target);
  }

  // optional uint32 slider_orientation = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_slider_orientation(), target);
  }

  // optional uint32 slider_position = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_slider_position(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 decimal_width = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_decimal_width(), target);
  }

  // optional uint32 min_integer_width = 28;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_min_integer_width(), target);
  }

  // optional uint32 num_nonspace_integer_digits = 29;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_num_nonspace_integer_digits(), target);
  }

  // optional uint32 num_nonspace_decimal_digits = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_num_nonspace_decimal_digits(), target);
  }

  // optional uint32 index_from_right_last_integer = 31;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_index_from_right_last_integer(), target);
  }

  // repeated string interstitial_strings = 32;
  for (int i = 0, n = this->_internal_interstitial_strings_size(); i < n; i++) {
    const auto& s = this->_internal_interstitial_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.interstitial_strings");
    target = stream->WriteString(32, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::inters_str_insertion_indexes(this),
        _Internal::inters_str_insertion_indexes(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 num_hash_decimal_digits = 34;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_num_hash_decimal_digits(), target);
  }

  // optional uint32 total_num_decimal_digits = 35;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_total_num_decimal_digits(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_complex = 36;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_is_complex(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool contains_integer_token = 37;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_contains_integer_token(), target);
  }

  // optional uint32 multiple_choice_list_initial_value = 38;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_multiple_choice_list_initial_value(), target);
  }

  // optional uint32 multiple_choice_list_id = 39;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_multiple_choice_list_id(), target);
  }

  // optional bool use_automatic_duration_units = 40;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_use_automatic_duration_units(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID custom_uid = 41;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::custom_uid(this),
        _Internal::custom_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CustomFormatArchive custom_format = 42;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::custom_format(this),
        _Internal::custom_format(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool uses_plus_sign = 43;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_uses_plus_sign(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string bool_true_string = 44;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bool_true_string().data(), static_cast<int>(this->_internal_bool_true_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.bool_true_string");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_bool_true_string(), target);
  }

  // optional string bool_false_string = 45;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bool_false_string().data(), static_cast<int>(this->_internal_bool_false_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.bool_false_string");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_bool_false_string(), target);
  }

  // Extension range [10000, 20000)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 20000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FormatStructArchive)
  return target;
}

size_t FormatStructArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FormatStructArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string interstitial_strings = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.interstitial_strings_.size());
  for (int i = 0, n = _impl_.interstitial_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.interstitial_strings_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string date_time_format = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_time_format());
    }

    // optional string custom_format_string = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_format_string());
    }

    // optional string bool_true_string = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bool_true_string());
    }

    // optional string bool_false_string = 45;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bool_false_string());
    }

    // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inters_str_insertion_indexes_);
    }

    // optional .TSP.UUID custom_uid = 41;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_uid_);
    }

    // optional .TSK.CustomFormatArchive custom_format = 42;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_format_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 format_type = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_type());
    }

    // optional uint32 decimal_places = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimal_places());
    }

    // optional uint32 negative_style = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_negative_style());
    }

    // optional uint32 duration_style = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_style());
    }

    // optional uint32 base = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base());
    }

    // optional bool show_thousands_separator = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool use_accounting_style = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool base_use_minus_sign = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool suppress_date_format = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional uint32 base_places = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_places());
    }

    // optional uint32 fraction_accuracy = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fraction_accuracy());
    }

    // optional uint32 duration_unit_largest = 15;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_unit_largest());
    }

    // optional uint32 duration_unit_smallest = 16;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_duration_unit_smallest());
    }

    // optional double scale_factor = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional uint32 custom_id = 17;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_id());
    }

    // optional uint32 control_format_type = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_control_format_type());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double control_minimum = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double control_maximum = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double control_increment = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional uint32 slider_orientation = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_slider_orientation());
    }

    // optional uint32 slider_position = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_slider_position());
    }

    // optional bool suppress_time_format = 13;
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 1;
    }

    // optional bool requires_fraction_replacement = 20;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_complex = 36;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool contains_integer_token = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional uint32 decimal_width = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_decimal_width());
    }

    // optional uint32 min_integer_width = 28;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_min_integer_width());
    }

    // optional uint32 num_nonspace_integer_digits = 29;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_num_nonspace_integer_digits());
    }

    // optional uint32 num_nonspace_decimal_digits = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_num_nonspace_decimal_digits());
    }

    // optional uint32 index_from_right_last_integer = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_index_from_right_last_integer());
    }

    // optional uint32 num_hash_decimal_digits = 34;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_num_hash_decimal_digits());
    }

    // optional uint32 total_num_decimal_digits = 35;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_total_num_decimal_digits());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 multiple_choice_list_initial_value = 38;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_multiple_choice_list_initial_value());
    }

    // optional uint32 multiple_choice_list_id = 39;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_multiple_choice_list_id());
    }

    // optional bool use_automatic_duration_units = 40;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool uses_plus_sign = 43;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormatStructArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormatStructArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormatStructArchive::GetClassData() const { return &_class_data_; }


void FormatStructArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormatStructArchive*>(&to_msg);
  auto& from = static_cast<const FormatStructArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.FormatStructArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.interstitial_strings_.MergeFrom(from._impl_.interstitial_strings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_date_time_format(from._internal_date_time_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_custom_format_string(from._internal_custom_format_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_bool_true_string(from._internal_bool_true_string());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_bool_false_string(from._internal_bool_false_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_inters_str_insertion_indexes()->::TSP::IndexSet::MergeFrom(
          from._internal_inters_str_insertion_indexes());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_custom_uid()->::TSP::UUID::MergeFrom(
          from._internal_custom_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_custom_format()->::TSK::CustomFormatArchive::MergeFrom(
          from._internal_custom_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.format_type_ = from._impl_.format_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.decimal_places_ = from._impl_.decimal_places_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.negative_style_ = from._impl_.negative_style_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.duration_style_ = from._impl_.duration_style_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.base_ = from._impl_.base_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.show_thousands_separator_ = from._impl_.show_thousands_separator_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.use_accounting_style_ = from._impl_.use_accounting_style_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.base_use_minus_sign_ = from._impl_.base_use_minus_sign_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.suppress_date_format_ = from._impl_.suppress_date_format_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.base_places_ = from._impl_.base_places_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.fraction_accuracy_ = from._impl_.fraction_accuracy_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.duration_unit_largest_ = from._impl_.duration_unit_largest_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.duration_unit_smallest_ = from._impl_.duration_unit_smallest_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.scale_factor_ = from._impl_.scale_factor_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.custom_id_ = from._impl_.custom_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.control_format_type_ = from._impl_.control_format_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.control_minimum_ = from._impl_.control_minimum_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.control_maximum_ = from._impl_.control_maximum_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.control_increment_ = from._impl_.control_increment_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.slider_orientation_ = from._impl_.slider_orientation_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.slider_position_ = from._impl_.slider_position_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.suppress_time_format_ = from._impl_.suppress_time_format_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.requires_fraction_replacement_ = from._impl_.requires_fraction_replacement_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.is_complex_ = from._impl_.is_complex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.contains_integer_token_ = from._impl_.contains_integer_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.decimal_width_ = from._impl_.decimal_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.min_integer_width_ = from._impl_.min_integer_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_nonspace_integer_digits_ = from._impl_.num_nonspace_integer_digits_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.num_nonspace_decimal_digits_ = from._impl_.num_nonspace_decimal_digits_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.index_from_right_last_integer_ = from._impl_.index_from_right_last_integer_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.num_hash_decimal_digits_ = from._impl_.num_hash_decimal_digits_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.total_num_decimal_digits_ = from._impl_.total_num_decimal_digits_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.multiple_choice_list_initial_value_ = from._impl_.multiple_choice_list_initial_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.multiple_choice_list_id_ = from._impl_.multiple_choice_list_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.use_automatic_duration_units_ = from._impl_.use_automatic_duration_units_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.uses_plus_sign_ = from._impl_.uses_plus_sign_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormatStructArchive::CopyFrom(const FormatStructArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FormatStructArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatStructArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_inters_str_insertion_indexes()) {
    if (!_impl_.inters_str_insertion_indexes_->IsInitialized()) return false;
  }
  if (_internal_has_custom_uid()) {
    if (!_impl_.custom_uid_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format()) {
    if (!_impl_.custom_format_->IsInitialized()) return false;
  }
  return true;
}

void FormatStructArchive::InternalSwap(FormatStructArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.interstitial_strings_.InternalSwap(&other->_impl_.interstitial_strings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_time_format_, lhs_arena,
      &other->_impl_.date_time_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_format_string_, lhs_arena,
      &other->_impl_.custom_format_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bool_true_string_, lhs_arena,
      &other->_impl_.bool_true_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bool_false_string_, lhs_arena,
      &other->_impl_.bool_false_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormatStructArchive, _impl_.uses_plus_sign_)
      + sizeof(FormatStructArchive::_impl_.uses_plus_sign_)
      - PROTOBUF_FIELD_OFFSET(FormatStructArchive, _impl_.inters_str_insertion_indexes_)>(
          reinterpret_cast<char*>(&_impl_.inters_str_insertion_indexes_),
          reinterpret_cast<char*>(&other->_impl_.inters_str_insertion_indexes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormatStructArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[26]);
}

// ===================================================================

class CustomFormatArchive_Condition::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomFormatArchive_Condition>()._impl_._has_bits_);
  static void set_has_condition_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_condition_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& condition_format(const CustomFormatArchive_Condition* msg);
  static void set_has_condition_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_condition_value_dbl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
CustomFormatArchive_Condition::_Internal::condition_format(const CustomFormatArchive_Condition* msg) {
  return *msg->_impl_.condition_format_;
}
CustomFormatArchive_Condition::CustomFormatArchive_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CustomFormatArchive.Condition)
}
CustomFormatArchive_Condition::CustomFormatArchive_Condition(const CustomFormatArchive_Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomFormatArchive_Condition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.condition_format_){nullptr}
    , decltype(_impl_.condition_type_){}
    , decltype(_impl_.condition_value_){}
    , decltype(_impl_.condition_value_dbl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_condition_format()) {
    _this->_impl_.condition_format_ = new ::TSK::FormatStructArchive(*from._impl_.condition_format_);
  }
  ::memcpy(&_impl_.condition_type_, &from._impl_.condition_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.condition_value_dbl_) -
    reinterpret_cast<char*>(&_impl_.condition_type_)) + sizeof(_impl_.condition_value_dbl_));
  // @@protoc_insertion_point(copy_constructor:TSK.CustomFormatArchive.Condition)
}

inline void CustomFormatArchive_Condition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.condition_format_){nullptr}
    , decltype(_impl_.condition_type_){0u}
    , decltype(_impl_.condition_value_){0}
    , decltype(_impl_.condition_value_dbl_){0}
  };
}

CustomFormatArchive_Condition::~CustomFormatArchive_Condition() {
  // @@protoc_insertion_point(destructor:TSK.CustomFormatArchive.Condition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomFormatArchive_Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.condition_format_;
}

void CustomFormatArchive_Condition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomFormatArchive_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CustomFormatArchive.Condition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.condition_format_ != nullptr);
    _impl_.condition_format_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.condition_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.condition_value_dbl_) -
        reinterpret_cast<char*>(&_impl_.condition_type_)) + sizeof(_impl_.condition_value_dbl_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomFormatArchive_Condition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 condition_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_condition_type(&has_bits);
          _impl_.condition_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float condition_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_condition_value(&has_bits);
          _impl_.condition_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive condition_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double condition_value_dbl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_condition_value_dbl(&has_bits);
          _impl_.condition_value_dbl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomFormatArchive_Condition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CustomFormatArchive.Condition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 condition_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_condition_type(), target);
  }

  // optional float condition_value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_condition_value(), target);
  }

  // required .TSK.FormatStructArchive condition_format = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::condition_format(this),
        _Internal::condition_format(this).GetCachedSize(), target, stream);
  }

  // optional double condition_value_dbl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_condition_value_dbl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CustomFormatArchive.Condition)
  return target;
}

size_t CustomFormatArchive_Condition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.CustomFormatArchive.Condition)
  size_t total_size = 0;

  if (_internal_has_condition_format()) {
    // required .TSK.FormatStructArchive condition_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.condition_format_);
  }

  if (_internal_has_condition_type()) {
    // required uint32 condition_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_condition_type());
  }

  return total_size;
}
size_t CustomFormatArchive_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CustomFormatArchive.Condition)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.FormatStructArchive condition_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.condition_format_);

    // required uint32 condition_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_condition_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional float condition_value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional double condition_value_dbl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomFormatArchive_Condition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomFormatArchive_Condition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomFormatArchive_Condition::GetClassData() const { return &_class_data_; }


void CustomFormatArchive_Condition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomFormatArchive_Condition*>(&to_msg);
  auto& from = static_cast<const CustomFormatArchive_Condition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CustomFormatArchive.Condition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_condition_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_condition_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.condition_type_ = from._impl_.condition_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.condition_value_ = from._impl_.condition_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.condition_value_dbl_ = from._impl_.condition_value_dbl_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomFormatArchive_Condition::CopyFrom(const CustomFormatArchive_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CustomFormatArchive.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatArchive_Condition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_condition_format()) {
    if (!_impl_.condition_format_->IsInitialized()) return false;
  }
  return true;
}

void CustomFormatArchive_Condition::InternalSwap(CustomFormatArchive_Condition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomFormatArchive_Condition, _impl_.condition_value_dbl_)
      + sizeof(CustomFormatArchive_Condition::_impl_.condition_value_dbl_)
      - PROTOBUF_FIELD_OFFSET(CustomFormatArchive_Condition, _impl_.condition_format_)>(
          reinterpret_cast<char*>(&_impl_.condition_format_),
          reinterpret_cast<char*>(&other->_impl_.condition_format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomFormatArchive_Condition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[27]);
}

// ===================================================================

class CustomFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomFormatArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_type_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& default_format(const CustomFormatArchive* msg);
  static void set_has_default_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::FormatStructArchive&
CustomFormatArchive::_Internal::default_format(const CustomFormatArchive* msg) {
  return *msg->_impl_.default_format_;
}
CustomFormatArchive::CustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CustomFormatArchive)
}
CustomFormatArchive::CustomFormatArchive(const CustomFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomFormatArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conditions_){from._impl_.conditions_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.default_format_){nullptr}
    , decltype(_impl_.format_type_pre_bnc_){}
    , decltype(_impl_.format_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_default_format()) {
    _this->_impl_.default_format_ = new ::TSK::FormatStructArchive(*from._impl_.default_format_);
  }
  ::memcpy(&_impl_.format_type_pre_bnc_, &from._impl_.format_type_pre_bnc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.format_type_) -
    reinterpret_cast<char*>(&_impl_.format_type_pre_bnc_)) + sizeof(_impl_.format_type_));
  // @@protoc_insertion_point(copy_constructor:TSK.CustomFormatArchive)
}

inline void CustomFormatArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conditions_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.default_format_){nullptr}
    , decltype(_impl_.format_type_pre_bnc_){0u}
    , decltype(_impl_.format_type_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomFormatArchive::~CustomFormatArchive() {
  // @@protoc_insertion_point(destructor:TSK.CustomFormatArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conditions_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.default_format_;
}

void CustomFormatArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CustomFormatArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conditions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.default_format_ != nullptr);
      _impl_.default_format_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.format_type_pre_bnc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.format_type_) -
        reinterpret_cast<char*>(&_impl_.format_type_pre_bnc_)) + sizeof(_impl_.format_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomFormatArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.CustomFormatArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 format_type_pre_bnc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_format_type_pre_bnc(&has_bits);
          _impl_.format_type_pre_bnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive default_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 format_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_format_type(&has_bits);
          _impl_.format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomFormatArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CustomFormatArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CustomFormatArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 format_type_pre_bnc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_format_type_pre_bnc(), target);
  }

  // required .TSK.FormatStructArchive default_format = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::default_format(this),
        _Internal::default_format(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conditions_size()); i < n; i++) {
    const auto& repfield = this->_internal_conditions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 format_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_format_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CustomFormatArchive)
  return target;
}

size_t CustomFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.CustomFormatArchive)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_default_format()) {
    // required .TSK.FormatStructArchive default_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_format_);
  }

  if (_internal_has_format_type_pre_bnc()) {
    // required uint32 format_type_pre_bnc = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_type_pre_bnc());
  }

  return total_size;
}
size_t CustomFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CustomFormatArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .TSK.FormatStructArchive default_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_format_);

    // required uint32 format_type_pre_bnc = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_type_pre_bnc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->_impl_.conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 format_type = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomFormatArchive::GetClassData() const { return &_class_data_; }


void CustomFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomFormatArchive*>(&to_msg);
  auto& from = static_cast<const CustomFormatArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CustomFormatArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.conditions_.MergeFrom(from._impl_.conditions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_default_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_default_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_type_pre_bnc_ = from._impl_.format_type_pre_bnc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.format_type_ = from._impl_.format_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomFormatArchive::CopyFrom(const CustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CustomFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.conditions_))
    return false;
  if (_internal_has_default_format()) {
    if (!_impl_.default_format_->IsInitialized()) return false;
  }
  return true;
}

void CustomFormatArchive::InternalSwap(CustomFormatArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.conditions_.InternalSwap(&other->_impl_.conditions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomFormatArchive, _impl_.format_type_)
      + sizeof(CustomFormatArchive::_impl_.format_type_)
      - PROTOBUF_FIELD_OFFSET(CustomFormatArchive, _impl_.default_format_)>(
          reinterpret_cast<char*>(&_impl_.default_format_),
          reinterpret_cast<char*>(&other->_impl_.default_format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomFormatArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[28]);
}

// ===================================================================

class CustomFormatListArchive::_Internal {
 public:
};

void CustomFormatListArchive::clear_uuids() {
  _impl_.uuids_.Clear();
}
CustomFormatListArchive::CustomFormatListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CustomFormatListArchive)
}
CustomFormatListArchive::CustomFormatListArchive(const CustomFormatListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomFormatListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuids_){from._impl_.uuids_}
    , decltype(_impl_.custom_formats_){from._impl_.custom_formats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.CustomFormatListArchive)
}

inline void CustomFormatListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuids_){arena}
    , decltype(_impl_.custom_formats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CustomFormatListArchive::~CustomFormatListArchive() {
  // @@protoc_insertion_point(destructor:TSK.CustomFormatListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomFormatListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuids_.~RepeatedPtrField();
  _impl_.custom_formats_.~RepeatedPtrField();
}

void CustomFormatListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomFormatListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CustomFormatListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuids_.Clear();
  _impl_.custom_formats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomFormatListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.CustomFormatArchive custom_formats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_formats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomFormatListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CustomFormatListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uuids_size()); i < n; i++) {
    const auto& repfield = this->_internal_uuids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.CustomFormatArchive custom_formats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_formats_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_formats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CustomFormatListArchive)
  return target;
}

size_t CustomFormatListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CustomFormatListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  total_size += 1UL * this->_internal_uuids_size();
  for (const auto& msg : this->_impl_.uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.CustomFormatArchive custom_formats = 2;
  total_size += 1UL * this->_internal_custom_formats_size();
  for (const auto& msg : this->_impl_.custom_formats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomFormatListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomFormatListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomFormatListArchive::GetClassData() const { return &_class_data_; }


void CustomFormatListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomFormatListArchive*>(&to_msg);
  auto& from = static_cast<const CustomFormatListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CustomFormatListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uuids_.MergeFrom(from._impl_.uuids_);
  _this->_impl_.custom_formats_.MergeFrom(from._impl_.custom_formats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomFormatListArchive::CopyFrom(const CustomFormatListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CustomFormatListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uuids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_formats_))
    return false;
  return true;
}

void CustomFormatListArchive::InternalSwap(CustomFormatListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uuids_.InternalSwap(&other->_impl_.uuids_);
  _impl_.custom_formats_.InternalSwap(&other->_impl_.custom_formats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomFormatListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[29]);
}

// ===================================================================

class AnnotationAuthorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotationAuthorArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Color& color(const AnnotationAuthorArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_public_author(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Color&
AnnotationAuthorArchive::_Internal::color(const AnnotationAuthorArchive* msg) {
  return *msg->_impl_.color_;
}
void AnnotationAuthorArchive::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AnnotationAuthorArchive::AnnotationAuthorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.AnnotationAuthorArchive)
}
AnnotationAuthorArchive::AnnotationAuthorArchive(const AnnotationAuthorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnotationAuthorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_ids_){from._impl_.public_ids_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.public_id_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.is_public_author_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_id()) {
    _this->_impl_.public_id_.Set(from._internal_public_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::TSP::Color(*from._impl_.color_);
  }
  _this->_impl_.is_public_author_ = from._impl_.is_public_author_;
  // @@protoc_insertion_point(copy_constructor:TSK.AnnotationAuthorArchive)
}

inline void AnnotationAuthorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_ids_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.public_id_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.is_public_author_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnnotationAuthorArchive::~AnnotationAuthorArchive() {
  // @@protoc_insertion_point(destructor:TSK.AnnotationAuthorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotationAuthorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_ids_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.public_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_;
}

void AnnotationAuthorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotationAuthorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AnnotationAuthorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.public_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
  }
  _impl_.is_public_author_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationAuthorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.AnnotationAuthorArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string public_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_public_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.AnnotationAuthorArchive.public_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_public_author = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_public_author(&has_bits);
          _impl_.is_public_author_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string public_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.AnnotationAuthorArchive.public_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationAuthorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AnnotationAuthorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AnnotationAuthorArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional string public_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AnnotationAuthorArchive.public_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_id(), target);
  }

  // optional bool is_public_author = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_public_author(), target);
  }

  // repeated string public_ids = 5;
  for (int i = 0, n = this->_internal_public_ids_size(); i < n; i++) {
    const auto& s = this->_internal_public_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AnnotationAuthorArchive.public_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AnnotationAuthorArchive)
  return target;
}

size_t AnnotationAuthorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AnnotationAuthorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string public_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.public_ids_.size());
  for (int i = 0, n = _impl_.public_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.public_ids_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string public_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_id());
    }

    // optional .TSP.Color color = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional bool is_public_author = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationAuthorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnotationAuthorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationAuthorArchive::GetClassData() const { return &_class_data_; }


void AnnotationAuthorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnotationAuthorArchive*>(&to_msg);
  auto& from = static_cast<const AnnotationAuthorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.AnnotationAuthorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.public_ids_.MergeFrom(from._impl_.public_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_public_id(from._internal_public_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_color()->::TSP::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_public_author_ = from._impl_.is_public_author_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationAuthorArchive::CopyFrom(const AnnotationAuthorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AnnotationAuthorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationAuthorArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  return true;
}

void AnnotationAuthorArchive::InternalSwap(AnnotationAuthorArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.public_ids_.InternalSwap(&other->_impl_.public_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_id_, lhs_arena,
      &other->_impl_.public_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationAuthorArchive, _impl_.is_public_author_)
      + sizeof(AnnotationAuthorArchive::_impl_.is_public_author_)
      - PROTOBUF_FIELD_OFFSET(AnnotationAuthorArchive, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationAuthorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[30]);
}

// ===================================================================

class DeprecatedChangeAuthorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DeprecatedChangeAuthorArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Color& change_color(const DeprecatedChangeAuthorArchive* msg);
  static void set_has_change_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Color&
DeprecatedChangeAuthorArchive::_Internal::change_color(const DeprecatedChangeAuthorArchive* msg) {
  return *msg->_impl_.change_color_;
}
void DeprecatedChangeAuthorArchive::clear_change_color() {
  if (_impl_.change_color_ != nullptr) _impl_.change_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.DeprecatedChangeAuthorArchive)
}
DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive(const DeprecatedChangeAuthorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeprecatedChangeAuthorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.change_color_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_change_color()) {
    _this->_impl_.change_color_ = new ::TSP::Color(*from._impl_.change_color_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.DeprecatedChangeAuthorArchive)
}

inline void DeprecatedChangeAuthorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.change_color_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeprecatedChangeAuthorArchive::~DeprecatedChangeAuthorArchive() {
  // @@protoc_insertion_point(destructor:TSK.DeprecatedChangeAuthorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeprecatedChangeAuthorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.change_color_;
}

void DeprecatedChangeAuthorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeprecatedChangeAuthorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DeprecatedChangeAuthorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.change_color_ != nullptr);
      _impl_.change_color_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecatedChangeAuthorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.DeprecatedChangeAuthorArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color change_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeprecatedChangeAuthorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DeprecatedChangeAuthorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DeprecatedChangeAuthorArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Color change_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::change_color(this),
        _Internal::change_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DeprecatedChangeAuthorArchive)
  return target;
}

size_t DeprecatedChangeAuthorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DeprecatedChangeAuthorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSP.Color change_color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_color_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeprecatedChangeAuthorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeprecatedChangeAuthorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeprecatedChangeAuthorArchive::GetClassData() const { return &_class_data_; }


void DeprecatedChangeAuthorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeprecatedChangeAuthorArchive*>(&to_msg);
  auto& from = static_cast<const DeprecatedChangeAuthorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.DeprecatedChangeAuthorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_change_color()->::TSP::Color::MergeFrom(
          from._internal_change_color());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeprecatedChangeAuthorArchive::CopyFrom(const DeprecatedChangeAuthorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DeprecatedChangeAuthorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedChangeAuthorArchive::IsInitialized() const {
  if (_internal_has_change_color()) {
    if (!_impl_.change_color_->IsInitialized()) return false;
  }
  return true;
}

void DeprecatedChangeAuthorArchive::InternalSwap(DeprecatedChangeAuthorArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.change_color_, other->_impl_.change_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecatedChangeAuthorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[31]);
}

// ===================================================================

class AnnotationAuthorStorageArchive::_Internal {
 public:
};

void AnnotationAuthorStorageArchive::clear_annotation_author() {
  _impl_.annotation_author_.Clear();
}
AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.AnnotationAuthorStorageArchive)
}
AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive(const AnnotationAuthorStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnotationAuthorStorageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_author_){from._impl_.annotation_author_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.AnnotationAuthorStorageArchive)
}

inline void AnnotationAuthorStorageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_author_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnnotationAuthorStorageArchive::~AnnotationAuthorStorageArchive() {
  // @@protoc_insertion_point(destructor:TSK.AnnotationAuthorStorageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotationAuthorStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_author_.~RepeatedPtrField();
}

void AnnotationAuthorStorageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotationAuthorStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AnnotationAuthorStorageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_author_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationAuthorStorageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference annotation_author = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_author(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationAuthorStorageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AnnotationAuthorStorageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference annotation_author = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_author_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation_author(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AnnotationAuthorStorageArchive)
  return target;
}

size_t AnnotationAuthorStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AnnotationAuthorStorageArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference annotation_author = 1;
  total_size += 1UL * this->_internal_annotation_author_size();
  for (const auto& msg : this->_impl_.annotation_author_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationAuthorStorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnotationAuthorStorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationAuthorStorageArchive::GetClassData() const { return &_class_data_; }


void AnnotationAuthorStorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnotationAuthorStorageArchive*>(&to_msg);
  auto& from = static_cast<const AnnotationAuthorStorageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.AnnotationAuthorStorageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotation_author_.MergeFrom(from._impl_.annotation_author_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationAuthorStorageArchive::CopyFrom(const AnnotationAuthorStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AnnotationAuthorStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationAuthorStorageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.annotation_author_))
    return false;
  return true;
}

void AnnotationAuthorStorageArchive::InternalSwap(AnnotationAuthorStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotation_author_.InternalSwap(&other->_impl_.annotation_author_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationAuthorStorageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[32]);
}

// ===================================================================

class SetAnnotationAuthorColorCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAnnotationAuthorColorCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& annotation_author(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_annotation_author(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Color& color(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Color& old_color(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_old_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
SetAnnotationAuthorColorCommandArchive::_Internal::super(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
SetAnnotationAuthorColorCommandArchive::_Internal::annotation_author(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->_impl_.annotation_author_;
}
const ::TSP::Color&
SetAnnotationAuthorColorCommandArchive::_Internal::color(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->_impl_.color_;
}
const ::TSP::Color&
SetAnnotationAuthorColorCommandArchive::_Internal::old_color(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->_impl_.old_color_;
}
void SetAnnotationAuthorColorCommandArchive::clear_annotation_author() {
  if (_impl_.annotation_author_ != nullptr) _impl_.annotation_author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SetAnnotationAuthorColorCommandArchive::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SetAnnotationAuthorColorCommandArchive::clear_old_color() {
  if (_impl_.old_color_ != nullptr) _impl_.old_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.SetAnnotationAuthorColorCommandArchive)
}
SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive(const SetAnnotationAuthorColorCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetAnnotationAuthorColorCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.annotation_author_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.old_color_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_annotation_author()) {
    _this->_impl_.annotation_author_ = new ::TSP::Reference(*from._impl_.annotation_author_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::TSP::Color(*from._impl_.color_);
  }
  if (from._internal_has_old_color()) {
    _this->_impl_.old_color_ = new ::TSP::Color(*from._impl_.old_color_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.SetAnnotationAuthorColorCommandArchive)
}

inline void SetAnnotationAuthorColorCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.annotation_author_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.old_color_){nullptr}
  };
}

SetAnnotationAuthorColorCommandArchive::~SetAnnotationAuthorColorCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.SetAnnotationAuthorColorCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAnnotationAuthorColorCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.annotation_author_;
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.old_color_;
}

void SetAnnotationAuthorColorCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAnnotationAuthorColorCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.SetAnnotationAuthorColorCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.annotation_author_ != nullptr);
      _impl_.annotation_author_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_color_ != nullptr);
      _impl_.old_color_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAnnotationAuthorColorCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference annotation_author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color old_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAnnotationAuthorColorCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.SetAnnotationAuthorColorCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference annotation_author = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::annotation_author(this),
        _Internal::annotation_author(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Color old_color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_color(this),
        _Internal::old_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.SetAnnotationAuthorColorCommandArchive)
  return target;
}

size_t SetAnnotationAuthorColorCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.SetAnnotationAuthorColorCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference annotation_author = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.annotation_author_);
    }

    // optional .TSP.Color color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional .TSP.Color old_color = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_color_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAnnotationAuthorColorCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetAnnotationAuthorColorCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAnnotationAuthorColorCommandArchive::GetClassData() const { return &_class_data_; }


void SetAnnotationAuthorColorCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetAnnotationAuthorColorCommandArchive*>(&to_msg);
  auto& from = static_cast<const SetAnnotationAuthorColorCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.SetAnnotationAuthorColorCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_annotation_author()->::TSP::Reference::MergeFrom(
          from._internal_annotation_author());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_color()->::TSP::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_color()->::TSP::Color::MergeFrom(
          from._internal_old_color());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAnnotationAuthorColorCommandArchive::CopyFrom(const SetAnnotationAuthorColorCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.SetAnnotationAuthorColorCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAnnotationAuthorColorCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_annotation_author()) {
    if (!_impl_.annotation_author_->IsInitialized()) return false;
  }
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  if (_internal_has_old_color()) {
    if (!_impl_.old_color_->IsInitialized()) return false;
  }
  return true;
}

void SetAnnotationAuthorColorCommandArchive::InternalSwap(SetAnnotationAuthorColorCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, _impl_.old_color_)
      + sizeof(SetAnnotationAuthorColorCommandArchive::_impl_.old_color_)
      - PROTOBUF_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAnnotationAuthorColorCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[33]);
}

// ===================================================================

class SetActivityAuthorShareParticipantIDCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SetActivityAuthorShareParticipantIDCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const SetActivityAuthorShareParticipantIDCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& activity_author(const SetActivityAuthorShareParticipantIDCommandArchive* msg);
  static void set_has_activity_author(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_share_participant_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_share_participant_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSK::CommandArchive&
SetActivityAuthorShareParticipantIDCommandArchive::_Internal::super(const SetActivityAuthorShareParticipantIDCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
SetActivityAuthorShareParticipantIDCommandArchive::_Internal::activity_author(const SetActivityAuthorShareParticipantIDCommandArchive* msg) {
  return *msg->_impl_.activity_author_;
}
void SetActivityAuthorShareParticipantIDCommandArchive::clear_activity_author() {
  if (_impl_.activity_author_ != nullptr) _impl_.activity_author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SetActivityAuthorShareParticipantIDCommandArchive::SetActivityAuthorShareParticipantIDCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
}
SetActivityAuthorShareParticipantIDCommandArchive::SetActivityAuthorShareParticipantIDCommandArchive(const SetActivityAuthorShareParticipantIDCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetActivityAuthorShareParticipantIDCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.share_participant_id_){}
    , decltype(_impl_.old_share_participant_id_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.activity_author_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_share_participant_id()) {
    _this->_impl_.share_participant_id_.Set(from._internal_share_participant_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_share_participant_id()) {
    _this->_impl_.old_share_participant_id_.Set(from._internal_old_share_participant_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_activity_author()) {
    _this->_impl_.activity_author_ = new ::TSP::Reference(*from._impl_.activity_author_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
}

inline void SetActivityAuthorShareParticipantIDCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.share_participant_id_){}
    , decltype(_impl_.old_share_participant_id_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.activity_author_){nullptr}
  };
  _impl_.share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetActivityAuthorShareParticipantIDCommandArchive::~SetActivityAuthorShareParticipantIDCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetActivityAuthorShareParticipantIDCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.share_participant_id_.Destroy();
  _impl_.old_share_participant_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.activity_author_;
}

void SetActivityAuthorShareParticipantIDCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetActivityAuthorShareParticipantIDCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.share_participant_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.old_share_participant_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.activity_author_ != nullptr);
      _impl_.activity_author_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActivityAuthorShareParticipantIDCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference activity_author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string share_participant_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_share_participant_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.SetActivityAuthorShareParticipantIDCommandArchive.share_participant_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string old_share_participant_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_old_share_participant_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.SetActivityAuthorShareParticipantIDCommandArchive.old_share_participant_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetActivityAuthorShareParticipantIDCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference activity_author = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activity_author(this),
        _Internal::activity_author(this).GetCachedSize(), target, stream);
  }

  // optional string share_participant_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_share_participant_id().data(), static_cast<int>(this->_internal_share_participant_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.SetActivityAuthorShareParticipantIDCommandArchive.share_participant_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_share_participant_id(), target);
  }

  // optional string old_share_participant_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_share_participant_id().data(), static_cast<int>(this->_internal_old_share_participant_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.SetActivityAuthorShareParticipantIDCommandArchive.old_share_participant_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_old_share_participant_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
  return target;
}

size_t SetActivityAuthorShareParticipantIDCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string share_participant_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_share_participant_id());
    }

    // optional string old_share_participant_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_share_participant_id());
    }

  }
  // optional .TSP.Reference activity_author = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activity_author_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetActivityAuthorShareParticipantIDCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetActivityAuthorShareParticipantIDCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetActivityAuthorShareParticipantIDCommandArchive::GetClassData() const { return &_class_data_; }


void SetActivityAuthorShareParticipantIDCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetActivityAuthorShareParticipantIDCommandArchive*>(&to_msg);
  auto& from = static_cast<const SetActivityAuthorShareParticipantIDCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_share_participant_id(from._internal_share_participant_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_old_share_participant_id(from._internal_old_share_participant_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_activity_author()->::TSP::Reference::MergeFrom(
          from._internal_activity_author());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetActivityAuthorShareParticipantIDCommandArchive::CopyFrom(const SetActivityAuthorShareParticipantIDCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.SetActivityAuthorShareParticipantIDCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActivityAuthorShareParticipantIDCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_activity_author()) {
    if (!_impl_.activity_author_->IsInitialized()) return false;
  }
  return true;
}

void SetActivityAuthorShareParticipantIDCommandArchive::InternalSwap(SetActivityAuthorShareParticipantIDCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.share_participant_id_, lhs_arena,
      &other->_impl_.share_participant_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_share_participant_id_, lhs_arena,
      &other->_impl_.old_share_participant_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetActivityAuthorShareParticipantIDCommandArchive, _impl_.activity_author_)
      + sizeof(SetActivityAuthorShareParticipantIDCommandArchive::_impl_.activity_author_)
      - PROTOBUF_FIELD_OFFSET(SetActivityAuthorShareParticipantIDCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActivityAuthorShareParticipantIDCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[34]);
}

// ===================================================================

class CommandBehaviorSelectionPathStorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBehaviorSelectionPathStorageArchive>()._impl_._has_bits_);
  static const ::TSK::SelectionPathArchive& archived_selection(const CommandBehaviorSelectionPathStorageArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::SelectionPathArchive& archived_old_selection(const CommandBehaviorSelectionPathStorageArchive* msg);
  static void set_has_archived_old_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::SelectionPathArchive& archived_new_selection(const CommandBehaviorSelectionPathStorageArchive* msg);
  static void set_has_archived_new_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& forward_selection_path_transformer(const CommandBehaviorSelectionPathStorageArchive* msg);
  static void set_has_forward_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& reverse_selection_path_transformer(const CommandBehaviorSelectionPathStorageArchive* msg);
  static void set_has_reverse_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::SelectionPathArchive&
CommandBehaviorSelectionPathStorageArchive::_Internal::archived_selection(const CommandBehaviorSelectionPathStorageArchive* msg) {
  return *msg->_impl_.archived_selection_;
}
const ::TSK::SelectionPathArchive&
CommandBehaviorSelectionPathStorageArchive::_Internal::archived_old_selection(const CommandBehaviorSelectionPathStorageArchive* msg) {
  return *msg->_impl_.archived_old_selection_;
}
const ::TSK::SelectionPathArchive&
CommandBehaviorSelectionPathStorageArchive::_Internal::archived_new_selection(const CommandBehaviorSelectionPathStorageArchive* msg) {
  return *msg->_impl_.archived_new_selection_;
}
const ::TSP::Reference&
CommandBehaviorSelectionPathStorageArchive::_Internal::forward_selection_path_transformer(const CommandBehaviorSelectionPathStorageArchive* msg) {
  return *msg->_impl_.forward_selection_path_transformer_;
}
const ::TSP::Reference&
CommandBehaviorSelectionPathStorageArchive::_Internal::reverse_selection_path_transformer(const CommandBehaviorSelectionPathStorageArchive* msg) {
  return *msg->_impl_.reverse_selection_path_transformer_;
}
void CommandBehaviorSelectionPathStorageArchive::clear_forward_selection_path_transformer() {
  if (_impl_.forward_selection_path_transformer_ != nullptr) _impl_.forward_selection_path_transformer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandBehaviorSelectionPathStorageArchive::clear_reverse_selection_path_transformer() {
  if (_impl_.reverse_selection_path_transformer_ != nullptr) _impl_.reverse_selection_path_transformer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandBehaviorSelectionPathStorageArchive::CommandBehaviorSelectionPathStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandBehaviorSelectionPathStorageArchive)
}
CommandBehaviorSelectionPathStorageArchive::CommandBehaviorSelectionPathStorageArchive(const CommandBehaviorSelectionPathStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBehaviorSelectionPathStorageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.archived_selection_){nullptr}
    , decltype(_impl_.archived_old_selection_){nullptr}
    , decltype(_impl_.archived_new_selection_){nullptr}
    , decltype(_impl_.forward_selection_path_transformer_){nullptr}
    , decltype(_impl_.reverse_selection_path_transformer_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_archived_selection()) {
    _this->_impl_.archived_selection_ = new ::TSK::SelectionPathArchive(*from._impl_.archived_selection_);
  }
  if (from._internal_has_archived_old_selection()) {
    _this->_impl_.archived_old_selection_ = new ::TSK::SelectionPathArchive(*from._impl_.archived_old_selection_);
  }
  if (from._internal_has_archived_new_selection()) {
    _this->_impl_.archived_new_selection_ = new ::TSK::SelectionPathArchive(*from._impl_.archived_new_selection_);
  }
  if (from._internal_has_forward_selection_path_transformer()) {
    _this->_impl_.forward_selection_path_transformer_ = new ::TSP::Reference(*from._impl_.forward_selection_path_transformer_);
  }
  if (from._internal_has_reverse_selection_path_transformer()) {
    _this->_impl_.reverse_selection_path_transformer_ = new ::TSP::Reference(*from._impl_.reverse_selection_path_transformer_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CommandBehaviorSelectionPathStorageArchive)
}

inline void CommandBehaviorSelectionPathStorageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.archived_selection_){nullptr}
    , decltype(_impl_.archived_old_selection_){nullptr}
    , decltype(_impl_.archived_new_selection_){nullptr}
    , decltype(_impl_.forward_selection_path_transformer_){nullptr}
    , decltype(_impl_.reverse_selection_path_transformer_){nullptr}
  };
}

CommandBehaviorSelectionPathStorageArchive::~CommandBehaviorSelectionPathStorageArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandBehaviorSelectionPathStorageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBehaviorSelectionPathStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.archived_selection_;
  if (this != internal_default_instance()) delete _impl_.archived_old_selection_;
  if (this != internal_default_instance()) delete _impl_.archived_new_selection_;
  if (this != internal_default_instance()) delete _impl_.forward_selection_path_transformer_;
  if (this != internal_default_instance()) delete _impl_.reverse_selection_path_transformer_;
}

void CommandBehaviorSelectionPathStorageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBehaviorSelectionPathStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandBehaviorSelectionPathStorageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.archived_selection_ != nullptr);
      _impl_.archived_selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.archived_old_selection_ != nullptr);
      _impl_.archived_old_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.archived_new_selection_ != nullptr);
      _impl_.archived_new_selection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.forward_selection_path_transformer_ != nullptr);
      _impl_.forward_selection_path_transformer_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.reverse_selection_path_transformer_ != nullptr);
      _impl_.reverse_selection_path_transformer_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBehaviorSelectionPathStorageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.SelectionPathArchive archived_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive archived_old_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_old_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive archived_new_selection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_new_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference forward_selection_path_transformer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference reverse_selection_path_transformer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBehaviorSelectionPathStorageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandBehaviorSelectionPathStorageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.SelectionPathArchive archived_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::archived_selection(this),
        _Internal::archived_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.SelectionPathArchive archived_old_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::archived_old_selection(this),
        _Internal::archived_old_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.SelectionPathArchive archived_new_selection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::archived_new_selection(this),
        _Internal::archived_new_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference forward_selection_path_transformer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::forward_selection_path_transformer(this),
        _Internal::forward_selection_path_transformer(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference reverse_selection_path_transformer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::reverse_selection_path_transformer(this),
        _Internal::reverse_selection_path_transformer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandBehaviorSelectionPathStorageArchive)
  return target;
}

size_t CommandBehaviorSelectionPathStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandBehaviorSelectionPathStorageArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSK.SelectionPathArchive archived_selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archived_selection_);
    }

    // optional .TSK.SelectionPathArchive archived_old_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archived_old_selection_);
    }

    // optional .TSK.SelectionPathArchive archived_new_selection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archived_new_selection_);
    }

    // optional .TSP.Reference forward_selection_path_transformer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.forward_selection_path_transformer_);
    }

    // optional .TSP.Reference reverse_selection_path_transformer = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reverse_selection_path_transformer_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBehaviorSelectionPathStorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBehaviorSelectionPathStorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBehaviorSelectionPathStorageArchive::GetClassData() const { return &_class_data_; }


void CommandBehaviorSelectionPathStorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBehaviorSelectionPathStorageArchive*>(&to_msg);
  auto& from = static_cast<const CommandBehaviorSelectionPathStorageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandBehaviorSelectionPathStorageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_archived_selection()->::TSK::SelectionPathArchive::MergeFrom(
          from._internal_archived_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_archived_old_selection()->::TSK::SelectionPathArchive::MergeFrom(
          from._internal_archived_old_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_archived_new_selection()->::TSK::SelectionPathArchive::MergeFrom(
          from._internal_archived_new_selection());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_forward_selection_path_transformer()->::TSP::Reference::MergeFrom(
          from._internal_forward_selection_path_transformer());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_reverse_selection_path_transformer()->::TSP::Reference::MergeFrom(
          from._internal_reverse_selection_path_transformer());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBehaviorSelectionPathStorageArchive::CopyFrom(const CommandBehaviorSelectionPathStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandBehaviorSelectionPathStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBehaviorSelectionPathStorageArchive::IsInitialized() const {
  if (_internal_has_archived_selection()) {
    if (!_impl_.archived_selection_->IsInitialized()) return false;
  }
  if (_internal_has_archived_old_selection()) {
    if (!_impl_.archived_old_selection_->IsInitialized()) return false;
  }
  if (_internal_has_archived_new_selection()) {
    if (!_impl_.archived_new_selection_->IsInitialized()) return false;
  }
  if (_internal_has_forward_selection_path_transformer()) {
    if (!_impl_.forward_selection_path_transformer_->IsInitialized()) return false;
  }
  if (_internal_has_reverse_selection_path_transformer()) {
    if (!_impl_.reverse_selection_path_transformer_->IsInitialized()) return false;
  }
  return true;
}

void CommandBehaviorSelectionPathStorageArchive::InternalSwap(CommandBehaviorSelectionPathStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBehaviorSelectionPathStorageArchive, _impl_.reverse_selection_path_transformer_)
      + sizeof(CommandBehaviorSelectionPathStorageArchive::_impl_.reverse_selection_path_transformer_)
      - PROTOBUF_FIELD_OFFSET(CommandBehaviorSelectionPathStorageArchive, _impl_.archived_selection_)>(
          reinterpret_cast<char*>(&_impl_.archived_selection_),
          reinterpret_cast<char*>(&other->_impl_.archived_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBehaviorSelectionPathStorageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[35]);
}

// ===================================================================

class CommandBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBehaviorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& selection_behavior(const CommandBehaviorArchive* msg);
  static void set_has_selection_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& activity_behavior(const CommandBehaviorArchive* msg);
  static void set_has_activity_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
CommandBehaviorArchive::_Internal::selection_behavior(const CommandBehaviorArchive* msg) {
  return *msg->_impl_.selection_behavior_;
}
const ::TSP::Reference&
CommandBehaviorArchive::_Internal::activity_behavior(const CommandBehaviorArchive* msg) {
  return *msg->_impl_.activity_behavior_;
}
void CommandBehaviorArchive::clear_selection_behavior() {
  if (_impl_.selection_behavior_ != nullptr) _impl_.selection_behavior_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandBehaviorArchive::clear_activity_behavior() {
  if (_impl_.activity_behavior_ != nullptr) _impl_.activity_behavior_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandBehaviorArchive::CommandBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandBehaviorArchive)
}
CommandBehaviorArchive::CommandBehaviorArchive(const CommandBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_behavior_){nullptr}
    , decltype(_impl_.activity_behavior_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection_behavior()) {
    _this->_impl_.selection_behavior_ = new ::TSP::Reference(*from._impl_.selection_behavior_);
  }
  if (from._internal_has_activity_behavior()) {
    _this->_impl_.activity_behavior_ = new ::TSP::Reference(*from._impl_.activity_behavior_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CommandBehaviorArchive)
}

inline void CommandBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_behavior_){nullptr}
    , decltype(_impl_.activity_behavior_){nullptr}
  };
}

CommandBehaviorArchive::~CommandBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.selection_behavior_;
  if (this != internal_default_instance()) delete _impl_.activity_behavior_;
}

void CommandBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.selection_behavior_ != nullptr);
      _impl_.selection_behavior_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.activity_behavior_ != nullptr);
      _impl_.activity_behavior_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference selection_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_behavior(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference activity_behavior = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_behavior(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference selection_behavior = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::selection_behavior(this),
        _Internal::selection_behavior(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference activity_behavior = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activity_behavior(this),
        _Internal::activity_behavior(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandBehaviorArchive)
  return target;
}

size_t CommandBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandBehaviorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference selection_behavior = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selection_behavior_);
    }

    // optional .TSP.Reference activity_behavior = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activity_behavior_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBehaviorArchive::GetClassData() const { return &_class_data_; }


void CommandBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const CommandBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_selection_behavior()->::TSP::Reference::MergeFrom(
          from._internal_selection_behavior());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_activity_behavior()->::TSP::Reference::MergeFrom(
          from._internal_activity_behavior());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBehaviorArchive::CopyFrom(const CommandBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBehaviorArchive::IsInitialized() const {
  if (_internal_has_selection_behavior()) {
    if (!_impl_.selection_behavior_->IsInitialized()) return false;
  }
  if (_internal_has_activity_behavior()) {
    if (!_impl_.activity_behavior_->IsInitialized()) return false;
  }
  return true;
}

void CommandBehaviorArchive::InternalSwap(CommandBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBehaviorArchive, _impl_.activity_behavior_)
      + sizeof(CommandBehaviorArchive::_impl_.activity_behavior_)
      - PROTOBUF_FIELD_OFFSET(CommandBehaviorArchive, _impl_.selection_behavior_)>(
          reinterpret_cast<char*>(&_impl_.selection_behavior_),
          reinterpret_cast<char*>(&other->_impl_.selection_behavior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[36]);
}

// ===================================================================

class CommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSelectionBehaviorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& selection_path_storage(const CommandSelectionBehaviorArchive* msg);
  static void set_has_selection_path_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_additional_forward_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_additional_reverse_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Reference&
CommandSelectionBehaviorArchive::_Internal::selection_path_storage(const CommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.selection_path_storage_;
}
void CommandSelectionBehaviorArchive::clear_selection_path_storage() {
  if (_impl_.selection_path_storage_ != nullptr) _impl_.selection_path_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSelectionBehaviorArchive::clear_additional_selection_behaviors() {
  _impl_.additional_selection_behaviors_.Clear();
}
CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandSelectionBehaviorArchive)
}
CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive(const CommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSelectionBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_selection_behaviors_){from._impl_.additional_selection_behaviors_}
    , decltype(_impl_.selection_path_storage_){nullptr}
    , decltype(_impl_.selection_flags_){}
    , decltype(_impl_.additional_forward_selection_flags_){}
    , decltype(_impl_.additional_reverse_selection_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection_path_storage()) {
    _this->_impl_.selection_path_storage_ = new ::TSP::Reference(*from._impl_.selection_path_storage_);
  }
  ::memcpy(&_impl_.selection_flags_, &from._impl_.selection_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.additional_reverse_selection_flags_) -
    reinterpret_cast<char*>(&_impl_.selection_flags_)) + sizeof(_impl_.additional_reverse_selection_flags_));
  // @@protoc_insertion_point(copy_constructor:TSK.CommandSelectionBehaviorArchive)
}

inline void CommandSelectionBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_selection_behaviors_){arena}
    , decltype(_impl_.selection_path_storage_){nullptr}
    , decltype(_impl_.selection_flags_){uint64_t{0u}}
    , decltype(_impl_.additional_forward_selection_flags_){uint64_t{0u}}
    , decltype(_impl_.additional_reverse_selection_flags_){uint64_t{0u}}
  };
}

CommandSelectionBehaviorArchive::~CommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandSelectionBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_selection_behaviors_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.selection_path_storage_;
}

void CommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_selection_behaviors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.selection_path_storage_ != nullptr);
    _impl_.selection_path_storage_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.additional_reverse_selection_flags_) -
        reinterpret_cast<char*>(&_impl_.selection_flags_)) + sizeof(_impl_.additional_reverse_selection_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference selection_path_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 selection_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_selection_flags(&has_bits);
          _impl_.selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 additional_forward_selection_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_additional_forward_selection_flags(&has_bits);
          _impl_.additional_forward_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 additional_reverse_selection_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_additional_reverse_selection_flags(&has_bits);
          _impl_.additional_reverse_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference additional_selection_behaviors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_selection_behaviors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSelectionBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference selection_path_storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::selection_path_storage(this),
        _Internal::selection_path_storage(this).GetCachedSize(), target, stream);
  }

  // optional uint64 selection_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_selection_flags(), target);
  }

  // optional uint64 additional_forward_selection_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_additional_forward_selection_flags(), target);
  }

  // optional uint64 additional_reverse_selection_flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_additional_reverse_selection_flags(), target);
  }

  // repeated .TSP.Reference additional_selection_behaviors = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_selection_behaviors_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_selection_behaviors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandSelectionBehaviorArchive)
  return target;
}

size_t CommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandSelectionBehaviorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference additional_selection_behaviors = 5;
  total_size += 1UL * this->_internal_additional_selection_behaviors_size();
  for (const auto& msg : this->_impl_.additional_selection_behaviors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference selection_path_storage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selection_path_storage_);
    }

    // optional uint64 selection_flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_selection_flags());
    }

    // optional uint64 additional_forward_selection_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_additional_forward_selection_flags());
    }

    // optional uint64 additional_reverse_selection_flags = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_additional_reverse_selection_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }


void CommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSelectionBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const CommandSelectionBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_selection_behaviors_.MergeFrom(from._impl_.additional_selection_behaviors_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_selection_path_storage()->::TSP::Reference::MergeFrom(
          from._internal_selection_path_storage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.selection_flags_ = from._impl_.selection_flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.additional_forward_selection_flags_ = from._impl_.additional_forward_selection_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.additional_reverse_selection_flags_ = from._impl_.additional_reverse_selection_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSelectionBehaviorArchive::CopyFrom(const CommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSelectionBehaviorArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.additional_selection_behaviors_))
    return false;
  if (_internal_has_selection_path_storage()) {
    if (!_impl_.selection_path_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommandSelectionBehaviorArchive::InternalSwap(CommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.additional_selection_behaviors_.InternalSwap(&other->_impl_.additional_selection_behaviors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSelectionBehaviorArchive, _impl_.additional_reverse_selection_flags_)
      + sizeof(CommandSelectionBehaviorArchive::_impl_.additional_reverse_selection_flags_)
      - PROTOBUF_FIELD_OFFSET(CommandSelectionBehaviorArchive, _impl_.selection_path_storage_)>(
          reinterpret_cast<char*>(&_impl_.selection_path_storage_),
          reinterpret_cast<char*>(&other->_impl_.selection_path_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSelectionBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[37]);
}

// ===================================================================

class SelectionPathTransformerArchive::_Internal {
 public:
};

void SelectionPathTransformerArchive::clear_selection_transformers() {
  _impl_.selection_transformers_.Clear();
}
SelectionPathTransformerArchive::SelectionPathTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.SelectionPathTransformerArchive)
}
SelectionPathTransformerArchive::SelectionPathTransformerArchive(const SelectionPathTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectionPathTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_transformers_){from._impl_.selection_transformers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.SelectionPathTransformerArchive)
}

inline void SelectionPathTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_transformers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectionPathTransformerArchive::~SelectionPathTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSK.SelectionPathTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectionPathTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selection_transformers_.~RepeatedPtrField();
}

void SelectionPathTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectionPathTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.SelectionPathTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_transformers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionPathTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference selection_transformers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection_transformers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionPathTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.SelectionPathTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference selection_transformers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selection_transformers_size()); i < n; i++) {
    const auto& repfield = this->_internal_selection_transformers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.SelectionPathTransformerArchive)
  return target;
}

size_t SelectionPathTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.SelectionPathTransformerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selection_transformers = 1;
  total_size += 1UL * this->_internal_selection_transformers_size();
  for (const auto& msg : this->_impl_.selection_transformers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionPathTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectionPathTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionPathTransformerArchive::GetClassData() const { return &_class_data_; }


void SelectionPathTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectionPathTransformerArchive*>(&to_msg);
  auto& from = static_cast<const SelectionPathTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.SelectionPathTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selection_transformers_.MergeFrom(from._impl_.selection_transformers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionPathTransformerArchive::CopyFrom(const SelectionPathTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.SelectionPathTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionPathTransformerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selection_transformers_))
    return false;
  return true;
}

void SelectionPathTransformerArchive::InternalSwap(SelectionPathTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.selection_transformers_.InternalSwap(&other->_impl_.selection_transformers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionPathTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[38]);
}

// ===================================================================

class SelectionPathArchive::_Internal {
 public:
};

void SelectionPathArchive::clear_ordered_selections() {
  _impl_.ordered_selections_.Clear();
}
SelectionPathArchive::SelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.SelectionPathArchive)
}
SelectionPathArchive::SelectionPathArchive(const SelectionPathArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectionPathArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ordered_selections_){from._impl_.ordered_selections_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.SelectionPathArchive)
}

inline void SelectionPathArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ordered_selections_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectionPathArchive::~SelectionPathArchive() {
  // @@protoc_insertion_point(destructor:TSK.SelectionPathArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectionPathArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ordered_selections_.~RepeatedPtrField();
}

void SelectionPathArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectionPathArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.SelectionPathArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ordered_selections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionPathArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference ordered_selections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ordered_selections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionPathArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.SelectionPathArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference ordered_selections = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ordered_selections_size()); i < n; i++) {
    const auto& repfield = this->_internal_ordered_selections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.SelectionPathArchive)
  return target;
}

size_t SelectionPathArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.SelectionPathArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference ordered_selections = 1;
  total_size += 1UL * this->_internal_ordered_selections_size();
  for (const auto& msg : this->_impl_.ordered_selections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionPathArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectionPathArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionPathArchive::GetClassData() const { return &_class_data_; }


void SelectionPathArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectionPathArchive*>(&to_msg);
  auto& from = static_cast<const SelectionPathArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.SelectionPathArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ordered_selections_.MergeFrom(from._impl_.ordered_selections_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionPathArchive::CopyFrom(const SelectionPathArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.SelectionPathArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionPathArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ordered_selections_))
    return false;
  return true;
}

void SelectionPathArchive::InternalSwap(SelectionPathArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ordered_selections_.InternalSwap(&other->_impl_.ordered_selections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionPathArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[39]);
}

// ===================================================================

class DocumentSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& document_root(const DocumentSelectionArchive* msg);
  static void set_has_document_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
DocumentSelectionArchive::_Internal::document_root(const DocumentSelectionArchive* msg) {
  return *msg->_impl_.document_root_;
}
void DocumentSelectionArchive::clear_document_root() {
  if (_impl_.document_root_ != nullptr) _impl_.document_root_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DocumentSelectionArchive::DocumentSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentSelectionArchive)
}
DocumentSelectionArchive::DocumentSelectionArchive(const DocumentSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_root_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document_root()) {
    _this->_impl_.document_root_ = new ::TSP::Reference(*from._impl_.document_root_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentSelectionArchive)
}

inline void DocumentSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_root_){nullptr}
  };
}

DocumentSelectionArchive::~DocumentSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSK.DocumentSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.document_root_;
}

void DocumentSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.document_root_ != nullptr);
    _impl_.document_root_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference document_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference document_root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::document_root(this),
        _Internal::document_root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentSelectionArchive)
  return target;
}

size_t DocumentSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference document_root = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_root_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSelectionArchive::GetClassData() const { return &_class_data_; }


void DocumentSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentSelectionArchive*>(&to_msg);
  auto& from = static_cast<const DocumentSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document_root()) {
    _this->_internal_mutable_document_root()->::TSP::Reference::MergeFrom(
        from._internal_document_root());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSelectionArchive::CopyFrom(const DocumentSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSelectionArchive::IsInitialized() const {
  if (_internal_has_document_root()) {
    if (!_impl_.document_root_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSelectionArchive::InternalSwap(DocumentSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.document_root_, other->_impl_.document_root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[40]);
}

// ===================================================================

class IdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<IdOperationArgs>()._impl_._has_bits_);
  static const ::TSP::UUIDPath& id_path(const IdOperationArgs* msg);
  static void set_has_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUIDPath&
IdOperationArgs::_Internal::id_path(const IdOperationArgs* msg) {
  return *msg->_impl_.id_path_;
}
void IdOperationArgs::clear_id_path() {
  if (_impl_.id_path_ != nullptr) _impl_.id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IdOperationArgs::IdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.IdOperationArgs)
}
IdOperationArgs::IdOperationArgs(const IdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdOperationArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id_path()) {
    _this->_impl_.id_path_ = new ::TSP::UUIDPath(*from._impl_.id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.IdOperationArgs)
}

inline void IdOperationArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_path_){nullptr}
  };
}

IdOperationArgs::~IdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.IdOperationArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_path_;
}

void IdOperationArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.IdOperationArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.id_path_ != nullptr);
    _impl_.id_path_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdOperationArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUIDPath id_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdOperationArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.IdOperationArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUIDPath id_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id_path(this),
        _Internal::id_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.IdOperationArgs)
  return target;
}

size_t IdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.IdOperationArgs)
  size_t total_size = 0;

  // required .TSP.UUIDPath id_path = 1;
  if (_internal_has_id_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_path_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdOperationArgs::GetClassData() const { return &_class_data_; }


void IdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdOperationArgs*>(&to_msg);
  auto& from = static_cast<const IdOperationArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.IdOperationArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id_path()) {
    _this->_internal_mutable_id_path()->::TSP::UUIDPath::MergeFrom(
        from._internal_id_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdOperationArgs::CopyFrom(const IdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.IdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_id_path()) {
    if (!_impl_.id_path_->IsInitialized()) return false;
  }
  return true;
}

void IdOperationArgs::InternalSwap(IdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.id_path_, other->_impl_.id_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdOperationArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[41]);
}

// ===================================================================

class AddIdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<AddIdOperationArgs>()._impl_._has_bits_);
  static const ::TSK::IdOperationArgs& super(const AddIdOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::IdOperationArgs&
AddIdOperationArgs::_Internal::super(const AddIdOperationArgs* msg) {
  return *msg->_impl_.super_;
}
AddIdOperationArgs::AddIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.AddIdOperationArgs)
}
AddIdOperationArgs::AddIdOperationArgs(const AddIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddIdOperationArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::IdOperationArgs(*from._impl_.super_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TSK.AddIdOperationArgs)
}

inline void AddIdOperationArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.index_){0}
  };
}

AddIdOperationArgs::~AddIdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.AddIdOperationArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void AddIdOperationArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AddIdOperationArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddIdOperationArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddIdOperationArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AddIdOperationArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AddIdOperationArgs)
  return target;
}

size_t AddIdOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.AddIdOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_index()) {
    // required int32 index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t AddIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AddIdOperationArgs)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required int32 index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddIdOperationArgs::GetClassData() const { return &_class_data_; }


void AddIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddIdOperationArgs*>(&to_msg);
  auto& from = static_cast<const AddIdOperationArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.AddIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddIdOperationArgs::CopyFrom(const AddIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AddIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddIdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void AddIdOperationArgs::InternalSwap(AddIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddIdOperationArgs, _impl_.index_)
      + sizeof(AddIdOperationArgs::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(AddIdOperationArgs, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddIdOperationArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[42]);
}

// ===================================================================

class RemoveIdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveIdOperationArgs>()._impl_._has_bits_);
  static const ::TSK::IdOperationArgs& super(const RemoveIdOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::IdOperationArgs&
RemoveIdOperationArgs::_Internal::super(const RemoveIdOperationArgs* msg) {
  return *msg->_impl_.super_;
}
RemoveIdOperationArgs::RemoveIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.RemoveIdOperationArgs)
}
RemoveIdOperationArgs::RemoveIdOperationArgs(const RemoveIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveIdOperationArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::IdOperationArgs(*from._impl_.super_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TSK.RemoveIdOperationArgs)
}

inline void RemoveIdOperationArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.index_){0}
  };
}

RemoveIdOperationArgs::~RemoveIdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.RemoveIdOperationArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void RemoveIdOperationArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.RemoveIdOperationArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveIdOperationArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveIdOperationArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.RemoveIdOperationArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.RemoveIdOperationArgs)
  return target;
}

size_t RemoveIdOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.RemoveIdOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_index()) {
    // required int32 index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t RemoveIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.RemoveIdOperationArgs)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required int32 index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveIdOperationArgs::GetClassData() const { return &_class_data_; }


void RemoveIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveIdOperationArgs*>(&to_msg);
  auto& from = static_cast<const RemoveIdOperationArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.RemoveIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveIdOperationArgs::CopyFrom(const RemoveIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.RemoveIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveIdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void RemoveIdOperationArgs::InternalSwap(RemoveIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveIdOperationArgs, _impl_.index_)
      + sizeof(RemoveIdOperationArgs::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(RemoveIdOperationArgs, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveIdOperationArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[43]);
}

// ===================================================================

class RearrangeIdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<RearrangeIdOperationArgs>()._impl_._has_bits_);
  static const ::TSK::IdOperationArgs& super(const RearrangeIdOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::IdOperationArgs&
RearrangeIdOperationArgs::_Internal::super(const RearrangeIdOperationArgs* msg) {
  return *msg->_impl_.super_;
}
RearrangeIdOperationArgs::RearrangeIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.RearrangeIdOperationArgs)
}
RearrangeIdOperationArgs::RearrangeIdOperationArgs(const RearrangeIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RearrangeIdOperationArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.from_index_){}
    , decltype(_impl_.to_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::IdOperationArgs(*from._impl_.super_);
  }
  ::memcpy(&_impl_.from_index_, &from._impl_.from_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_index_) -
    reinterpret_cast<char*>(&_impl_.from_index_)) + sizeof(_impl_.to_index_));
  // @@protoc_insertion_point(copy_constructor:TSK.RearrangeIdOperationArgs)
}

inline void RearrangeIdOperationArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.from_index_){0}
    , decltype(_impl_.to_index_){0}
  };
}

RearrangeIdOperationArgs::~RearrangeIdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.RearrangeIdOperationArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RearrangeIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void RearrangeIdOperationArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RearrangeIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.RearrangeIdOperationArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.from_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.to_index_) -
        reinterpret_cast<char*>(&_impl_.from_index_)) + sizeof(_impl_.to_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RearrangeIdOperationArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 from_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_from_index(&has_bits);
          _impl_.from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 to_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_to_index(&has_bits);
          _impl_.to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RearrangeIdOperationArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.RearrangeIdOperationArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required int32 from_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_from_index(), target);
  }

  // required int32 to_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.RearrangeIdOperationArgs)
  return target;
}

size_t RearrangeIdOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.RearrangeIdOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_from_index()) {
    // required int32 from_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from_index());
  }

  if (_internal_has_to_index()) {
    // required int32 to_index = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_index());
  }

  return total_size;
}
size_t RearrangeIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.RearrangeIdOperationArgs)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required int32 from_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from_index());

    // required int32 to_index = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RearrangeIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RearrangeIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RearrangeIdOperationArgs::GetClassData() const { return &_class_data_; }


void RearrangeIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RearrangeIdOperationArgs*>(&to_msg);
  auto& from = static_cast<const RearrangeIdOperationArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.RearrangeIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.from_index_ = from._impl_.from_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.to_index_ = from._impl_.to_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RearrangeIdOperationArgs::CopyFrom(const RearrangeIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.RearrangeIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RearrangeIdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void RearrangeIdOperationArgs::InternalSwap(RearrangeIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RearrangeIdOperationArgs, _impl_.to_index_)
      + sizeof(RearrangeIdOperationArgs::_impl_.to_index_)
      - PROTOBUF_FIELD_OFFSET(RearrangeIdOperationArgs, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RearrangeIdOperationArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[44]);
}

// ===================================================================

class IdPlacementOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<IdPlacementOperationArgs>()._impl_._has_bits_);
  static const ::TSK::IdOperationArgs& super(const IdPlacementOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::IdOperationArgs&
IdPlacementOperationArgs::_Internal::super(const IdPlacementOperationArgs* msg) {
  return *msg->_impl_.super_;
}
IdPlacementOperationArgs::IdPlacementOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.IdPlacementOperationArgs)
}
IdPlacementOperationArgs::IdPlacementOperationArgs(const IdPlacementOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdPlacementOperationArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.from_index_){}
    , decltype(_impl_.to_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::IdOperationArgs(*from._impl_.super_);
  }
  ::memcpy(&_impl_.from_index_, &from._impl_.from_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_index_) -
    reinterpret_cast<char*>(&_impl_.from_index_)) + sizeof(_impl_.to_index_));
  // @@protoc_insertion_point(copy_constructor:TSK.IdPlacementOperationArgs)
}

inline void IdPlacementOperationArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.from_index_){0}
    , decltype(_impl_.to_index_){0}
  };
}

IdPlacementOperationArgs::~IdPlacementOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.IdPlacementOperationArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdPlacementOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void IdPlacementOperationArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdPlacementOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.IdPlacementOperationArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.from_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.to_index_) -
        reinterpret_cast<char*>(&_impl_.from_index_)) + sizeof(_impl_.to_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdPlacementOperationArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 from_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_from_index(&has_bits);
          _impl_.from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 to_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_to_index(&has_bits);
          _impl_.to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdPlacementOperationArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.IdPlacementOperationArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required int32 from_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_from_index(), target);
  }

  // required int32 to_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.IdPlacementOperationArgs)
  return target;
}

size_t IdPlacementOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.IdPlacementOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_from_index()) {
    // required int32 from_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from_index());
  }

  if (_internal_has_to_index()) {
    // required int32 to_index = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_index());
  }

  return total_size;
}
size_t IdPlacementOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.IdPlacementOperationArgs)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required int32 from_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from_index());

    // required int32 to_index = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdPlacementOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdPlacementOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdPlacementOperationArgs::GetClassData() const { return &_class_data_; }


void IdPlacementOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdPlacementOperationArgs*>(&to_msg);
  auto& from = static_cast<const IdPlacementOperationArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.IdPlacementOperationArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.from_index_ = from._impl_.from_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.to_index_ = from._impl_.to_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdPlacementOperationArgs::CopyFrom(const IdPlacementOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.IdPlacementOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdPlacementOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void IdPlacementOperationArgs::InternalSwap(IdPlacementOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdPlacementOperationArgs, _impl_.to_index_)
      + sizeof(IdPlacementOperationArgs::_impl_.to_index_)
      - PROTOBUF_FIELD_OFFSET(IdPlacementOperationArgs, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdPlacementOperationArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[45]);
}

// ===================================================================

class NullCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NullCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const NullCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
NullCommandArchive::_Internal::super(const NullCommandArchive* msg) {
  return *msg->_impl_.super_;
}
NullCommandArchive::NullCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.NullCommandArchive)
}
NullCommandArchive::NullCommandArchive(const NullCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NullCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.NullCommandArchive)
}

inline void NullCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

NullCommandArchive::~NullCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.NullCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NullCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void NullCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NullCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.NullCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NullCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NullCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.NullCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.NullCommandArchive)
  return target;
}

size_t NullCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.NullCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NullCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NullCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NullCommandArchive::GetClassData() const { return &_class_data_; }


void NullCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NullCommandArchive*>(&to_msg);
  auto& from = static_cast<const NullCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.NullCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NullCommandArchive::CopyFrom(const NullCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.NullCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void NullCommandArchive::InternalSwap(NullCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NullCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[46]);
}

// ===================================================================

class GroupCommitCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupCommitCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const GroupCommitCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_coalesce_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
GroupCommitCommandArchive::_Internal::super(const GroupCommitCommandArchive* msg) {
  return *msg->_impl_.super_;
}
GroupCommitCommandArchive::GroupCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.GroupCommitCommandArchive)
}
GroupCommitCommandArchive::GroupCommitCommandArchive(const GroupCommitCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupCommitCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.can_coalesce_group_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.can_coalesce_group_ = from._impl_.can_coalesce_group_;
  // @@protoc_insertion_point(copy_constructor:TSK.GroupCommitCommandArchive)
}

inline void GroupCommitCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.can_coalesce_group_){false}
  };
}

GroupCommitCommandArchive::~GroupCommitCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.GroupCommitCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupCommitCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void GroupCommitCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupCommitCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.GroupCommitCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.can_coalesce_group_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupCommitCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_coalesce_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_can_coalesce_group(&has_bits);
          _impl_.can_coalesce_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupCommitCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.GroupCommitCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool can_coalesce_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_coalesce_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.GroupCommitCommandArchive)
  return target;
}

size_t GroupCommitCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.GroupCommitCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool can_coalesce_group = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupCommitCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupCommitCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupCommitCommandArchive::GetClassData() const { return &_class_data_; }


void GroupCommitCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupCommitCommandArchive*>(&to_msg);
  auto& from = static_cast<const GroupCommitCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.GroupCommitCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.can_coalesce_group_ = from._impl_.can_coalesce_group_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupCommitCommandArchive::CopyFrom(const GroupCommitCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.GroupCommitCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCommitCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void GroupCommitCommandArchive::InternalSwap(GroupCommitCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupCommitCommandArchive, _impl_.can_coalesce_group_)
      + sizeof(GroupCommitCommandArchive::_impl_.can_coalesce_group_)
      - PROTOBUF_FIELD_OFFSET(GroupCommitCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupCommitCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[47]);
}

// ===================================================================

class UpgradeDocPostProcessingCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UpgradeDocPostProcessingCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const UpgradeDocPostProcessingCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
UpgradeDocPostProcessingCommandArchive::_Internal::super(const UpgradeDocPostProcessingCommandArchive* msg) {
  return *msg->_impl_.super_;
}
UpgradeDocPostProcessingCommandArchive::UpgradeDocPostProcessingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.UpgradeDocPostProcessingCommandArchive)
}
UpgradeDocPostProcessingCommandArchive::UpgradeDocPostProcessingCommandArchive(const UpgradeDocPostProcessingCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpgradeDocPostProcessingCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.UpgradeDocPostProcessingCommandArchive)
}

inline void UpgradeDocPostProcessingCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

UpgradeDocPostProcessingCommandArchive::~UpgradeDocPostProcessingCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.UpgradeDocPostProcessingCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpgradeDocPostProcessingCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void UpgradeDocPostProcessingCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpgradeDocPostProcessingCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.UpgradeDocPostProcessingCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpgradeDocPostProcessingCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpgradeDocPostProcessingCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.UpgradeDocPostProcessingCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.UpgradeDocPostProcessingCommandArchive)
  return target;
}

size_t UpgradeDocPostProcessingCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.UpgradeDocPostProcessingCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpgradeDocPostProcessingCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpgradeDocPostProcessingCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpgradeDocPostProcessingCommandArchive::GetClassData() const { return &_class_data_; }


void UpgradeDocPostProcessingCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpgradeDocPostProcessingCommandArchive*>(&to_msg);
  auto& from = static_cast<const UpgradeDocPostProcessingCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.UpgradeDocPostProcessingCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpgradeDocPostProcessingCommandArchive::CopyFrom(const UpgradeDocPostProcessingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.UpgradeDocPostProcessingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeDocPostProcessingCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void UpgradeDocPostProcessingCommandArchive::InternalSwap(UpgradeDocPostProcessingCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpgradeDocPostProcessingCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[48]);
}

// ===================================================================

class InducedCommandCollectionCommitCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InducedCommandCollectionCommitCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const InducedCommandCollectionCommitCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InducedCommandCollectionCommitCommandArchive::_Internal::super(const InducedCommandCollectionCommitCommandArchive* msg) {
  return *msg->_impl_.super_;
}
InducedCommandCollectionCommitCommandArchive::InducedCommandCollectionCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.InducedCommandCollectionCommitCommandArchive)
}
InducedCommandCollectionCommitCommandArchive::InducedCommandCollectionCommitCommandArchive(const InducedCommandCollectionCommitCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InducedCommandCollectionCommitCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.InducedCommandCollectionCommitCommandArchive)
}

inline void InducedCommandCollectionCommitCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

InducedCommandCollectionCommitCommandArchive::~InducedCommandCollectionCommitCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.InducedCommandCollectionCommitCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InducedCommandCollectionCommitCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void InducedCommandCollectionCommitCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InducedCommandCollectionCommitCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.InducedCommandCollectionCommitCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InducedCommandCollectionCommitCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InducedCommandCollectionCommitCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.InducedCommandCollectionCommitCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.InducedCommandCollectionCommitCommandArchive)
  return target;
}

size_t InducedCommandCollectionCommitCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.InducedCommandCollectionCommitCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InducedCommandCollectionCommitCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InducedCommandCollectionCommitCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InducedCommandCollectionCommitCommandArchive::GetClassData() const { return &_class_data_; }


void InducedCommandCollectionCommitCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InducedCommandCollectionCommitCommandArchive*>(&to_msg);
  auto& from = static_cast<const InducedCommandCollectionCommitCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.InducedCommandCollectionCommitCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InducedCommandCollectionCommitCommandArchive::CopyFrom(const InducedCommandCollectionCommitCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.InducedCommandCollectionCommitCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InducedCommandCollectionCommitCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void InducedCommandCollectionCommitCommandArchive::InternalSwap(InducedCommandCollectionCommitCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InducedCommandCollectionCommitCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[49]);
}

// ===================================================================

class ActivityCommitCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityCommitCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ActivityCommitCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& activity(const ActivityCommitCommandArchive* msg);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& author(const ActivityCommitCommandArchive* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_was_activity_committed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ActivityCommitCommandArchive::_Internal::super(const ActivityCommitCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ActivityCommitCommandArchive::_Internal::activity(const ActivityCommitCommandArchive* msg) {
  return *msg->_impl_.activity_;
}
const ::TSP::Reference&
ActivityCommitCommandArchive::_Internal::author(const ActivityCommitCommandArchive* msg) {
  return *msg->_impl_.author_;
}
void ActivityCommitCommandArchive::clear_activity() {
  if (_impl_.activity_ != nullptr) _impl_.activity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ActivityCommitCommandArchive::clear_author() {
  if (_impl_.author_ != nullptr) _impl_.author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ActivityCommitCommandArchive::ActivityCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityCommitCommandArchive)
}
ActivityCommitCommandArchive::ActivityCommitCommandArchive(const ActivityCommitCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityCommitCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.activity_){nullptr}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.was_activity_committed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_activity()) {
    _this->_impl_.activity_ = new ::TSP::Reference(*from._impl_.activity_);
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::TSP::Reference(*from._impl_.author_);
  }
  _this->_impl_.was_activity_committed_ = from._impl_.was_activity_committed_;
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityCommitCommandArchive)
}

inline void ActivityCommitCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.activity_){nullptr}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.was_activity_committed_){true}
  };
}

ActivityCommitCommandArchive::~ActivityCommitCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityCommitCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityCommitCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.activity_;
  if (this != internal_default_instance()) delete _impl_.author_;
}

void ActivityCommitCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityCommitCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityCommitCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.activity_ != nullptr);
      _impl_.activity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.author_ != nullptr);
      _impl_.author_->Clear();
    }
    _impl_.was_activity_committed_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityCommitCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference activity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference author = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_activity_committed = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_was_activity_committed(&has_bits);
          _impl_.was_activity_committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityCommitCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityCommitCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference activity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activity(this),
        _Internal::activity(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference author = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // optional bool was_activity_committed = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_was_activity_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityCommitCommandArchive)
  return target;
}

size_t ActivityCommitCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityCommitCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference activity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activity_);
    }

    // optional .TSP.Reference author = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.author_);
    }

    // optional bool was_activity_committed = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityCommitCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityCommitCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityCommitCommandArchive::GetClassData() const { return &_class_data_; }


void ActivityCommitCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityCommitCommandArchive*>(&to_msg);
  auto& from = static_cast<const ActivityCommitCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityCommitCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_activity()->::TSP::Reference::MergeFrom(
          from._internal_activity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_author()->::TSP::Reference::MergeFrom(
          from._internal_author());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.was_activity_committed_ = from._impl_.was_activity_committed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityCommitCommandArchive::CopyFrom(const ActivityCommitCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityCommitCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCommitCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_activity()) {
    if (!_impl_.activity_->IsInitialized()) return false;
  }
  if (_internal_has_author()) {
    if (!_impl_.author_->IsInitialized()) return false;
  }
  return true;
}

void ActivityCommitCommandArchive::InternalSwap(ActivityCommitCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityCommitCommandArchive, _impl_.author_)
      + sizeof(ActivityCommitCommandArchive::_impl_.author_)
      - PROTOBUF_FIELD_OFFSET(ActivityCommitCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.was_activity_committed_, other->_impl_.was_activity_committed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityCommitCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[50]);
}

// ===================================================================

class ExecuteTestBetweenRollbackAndReapplyCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecuteTestBetweenRollbackAndReapplyCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ExecuteTestBetweenRollbackAndReapplyCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ExecuteTestBetweenRollbackAndReapplyCommandArchive::_Internal::super(const ExecuteTestBetweenRollbackAndReapplyCommandArchive* msg) {
  return *msg->_impl_.super_;
}
ExecuteTestBetweenRollbackAndReapplyCommandArchive::ExecuteTestBetweenRollbackAndReapplyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
}
ExecuteTestBetweenRollbackAndReapplyCommandArchive::ExecuteTestBetweenRollbackAndReapplyCommandArchive(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteTestBetweenRollbackAndReapplyCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
}

inline void ExecuteTestBetweenRollbackAndReapplyCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ExecuteTestBetweenRollbackAndReapplyCommandArchive::~ExecuteTestBetweenRollbackAndReapplyCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteTestBetweenRollbackAndReapplyCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteTestBetweenRollbackAndReapplyCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteTestBetweenRollbackAndReapplyCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  return target;
}

size_t ExecuteTestBetweenRollbackAndReapplyCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteTestBetweenRollbackAndReapplyCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteTestBetweenRollbackAndReapplyCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteTestBetweenRollbackAndReapplyCommandArchive::GetClassData() const { return &_class_data_; }


void ExecuteTestBetweenRollbackAndReapplyCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteTestBetweenRollbackAndReapplyCommandArchive*>(&to_msg);
  auto& from = static_cast<const ExecuteTestBetweenRollbackAndReapplyCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::CopyFrom(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteTestBetweenRollbackAndReapplyCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::InternalSwap(ExecuteTestBetweenRollbackAndReapplyCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteTestBetweenRollbackAndReapplyCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[51]);
}

// ===================================================================

class ChangeDocumentPackageTypeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeDocumentPackageTypeCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangeDocumentPackageTypeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_package_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_package_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
ChangeDocumentPackageTypeCommandArchive::_Internal::super(const ChangeDocumentPackageTypeCommandArchive* msg) {
  return *msg->_impl_.super_;
}
ChangeDocumentPackageTypeCommandArchive::ChangeDocumentPackageTypeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ChangeDocumentPackageTypeCommandArchive)
}
ChangeDocumentPackageTypeCommandArchive::ChangeDocumentPackageTypeCommandArchive(const ChangeDocumentPackageTypeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeDocumentPackageTypeCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_package_type_){}
    , decltype(_impl_.old_package_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.new_package_type_, &from._impl_.new_package_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_package_type_) -
    reinterpret_cast<char*>(&_impl_.new_package_type_)) + sizeof(_impl_.old_package_type_));
  // @@protoc_insertion_point(copy_constructor:TSK.ChangeDocumentPackageTypeCommandArchive)
}

inline void ChangeDocumentPackageTypeCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_package_type_){0}
    , decltype(_impl_.old_package_type_){0}
  };
}

ChangeDocumentPackageTypeCommandArchive::~ChangeDocumentPackageTypeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.ChangeDocumentPackageTypeCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeDocumentPackageTypeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ChangeDocumentPackageTypeCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeDocumentPackageTypeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.new_package_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.old_package_type_) -
        reinterpret_cast<char*>(&_impl_.new_package_type_)) + sizeof(_impl_.old_package_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentPackageTypeCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(val))) {
            _internal_set_new_package_type(static_cast<::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(val))) {
            _internal_set_old_package_type(static_cast<::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeDocumentPackageTypeCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_new_package_type(), target);
  }

  // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_old_package_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ChangeDocumentPackageTypeCommandArchive)
  return target;
}

size_t ChangeDocumentPackageTypeCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_new_package_type()) {
    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_package_type());
  }

  if (_internal_has_old_package_type()) {
    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_old_package_type());
  }

  return total_size;
}
size_t ChangeDocumentPackageTypeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_package_type());

    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_old_package_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeDocumentPackageTypeCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeDocumentPackageTypeCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeDocumentPackageTypeCommandArchive::GetClassData() const { return &_class_data_; }


void ChangeDocumentPackageTypeCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeDocumentPackageTypeCommandArchive*>(&to_msg);
  auto& from = static_cast<const ChangeDocumentPackageTypeCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.new_package_type_ = from._impl_.new_package_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.old_package_type_ = from._impl_.old_package_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeDocumentPackageTypeCommandArchive::CopyFrom(const ChangeDocumentPackageTypeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentPackageTypeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ChangeDocumentPackageTypeCommandArchive::InternalSwap(ChangeDocumentPackageTypeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentPackageTypeCommandArchive, _impl_.old_package_type_)
      + sizeof(ChangeDocumentPackageTypeCommandArchive::_impl_.old_package_type_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentPackageTypeCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentPackageTypeCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[52]);
}

// ===================================================================

class CreateLocalStorageSnapshotCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateLocalStorageSnapshotCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CreateLocalStorageSnapshotCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snapshot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CreateLocalStorageSnapshotCommandArchive::_Internal::super(const CreateLocalStorageSnapshotCommandArchive* msg) {
  return *msg->_impl_.super_;
}
CreateLocalStorageSnapshotCommandArchive::CreateLocalStorageSnapshotCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CreateLocalStorageSnapshotCommandArchive)
}
CreateLocalStorageSnapshotCommandArchive::CreateLocalStorageSnapshotCommandArchive(const CreateLocalStorageSnapshotCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateLocalStorageSnapshotCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snapshot_id_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.snapshot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_snapshot_id()) {
    _this->_impl_.snapshot_id_.Set(from._internal_snapshot_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CreateLocalStorageSnapshotCommandArchive)
}

inline void CreateLocalStorageSnapshotCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snapshot_id_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.snapshot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateLocalStorageSnapshotCommandArchive::~CreateLocalStorageSnapshotCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.CreateLocalStorageSnapshotCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateLocalStorageSnapshotCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snapshot_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CreateLocalStorageSnapshotCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateLocalStorageSnapshotCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.snapshot_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLocalStorageSnapshotCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string snapshot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_snapshot_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateLocalStorageSnapshotCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string snapshot_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snapshot_id().data(), static_cast<int>(this->_internal_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snapshot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CreateLocalStorageSnapshotCommandArchive)
  return target;
}

size_t CreateLocalStorageSnapshotCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string snapshot_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateLocalStorageSnapshotCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateLocalStorageSnapshotCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateLocalStorageSnapshotCommandArchive::GetClassData() const { return &_class_data_; }


void CreateLocalStorageSnapshotCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateLocalStorageSnapshotCommandArchive*>(&to_msg);
  auto& from = static_cast<const CreateLocalStorageSnapshotCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_snapshot_id(from._internal_snapshot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateLocalStorageSnapshotCommandArchive::CopyFrom(const CreateLocalStorageSnapshotCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLocalStorageSnapshotCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CreateLocalStorageSnapshotCommandArchive::InternalSwap(CreateLocalStorageSnapshotCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snapshot_id_, lhs_arena,
      &other->_impl_.snapshot_id_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLocalStorageSnapshotCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[53]);
}

// ===================================================================

class BlockDiffsAtCurrentRevisionCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockDiffsAtCurrentRevisionCommand>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const BlockDiffsAtCurrentRevisionCommand* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
BlockDiffsAtCurrentRevisionCommand::_Internal::super(const BlockDiffsAtCurrentRevisionCommand* msg) {
  return *msg->_impl_.super_;
}
BlockDiffsAtCurrentRevisionCommand::BlockDiffsAtCurrentRevisionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.BlockDiffsAtCurrentRevisionCommand)
}
BlockDiffsAtCurrentRevisionCommand::BlockDiffsAtCurrentRevisionCommand(const BlockDiffsAtCurrentRevisionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockDiffsAtCurrentRevisionCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.BlockDiffsAtCurrentRevisionCommand)
}

inline void BlockDiffsAtCurrentRevisionCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

BlockDiffsAtCurrentRevisionCommand::~BlockDiffsAtCurrentRevisionCommand() {
  // @@protoc_insertion_point(destructor:TSK.BlockDiffsAtCurrentRevisionCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockDiffsAtCurrentRevisionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void BlockDiffsAtCurrentRevisionCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockDiffsAtCurrentRevisionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockDiffsAtCurrentRevisionCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockDiffsAtCurrentRevisionCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.BlockDiffsAtCurrentRevisionCommand)
  return target;
}

size_t BlockDiffsAtCurrentRevisionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockDiffsAtCurrentRevisionCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockDiffsAtCurrentRevisionCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockDiffsAtCurrentRevisionCommand::GetClassData() const { return &_class_data_; }


void BlockDiffsAtCurrentRevisionCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockDiffsAtCurrentRevisionCommand*>(&to_msg);
  auto& from = static_cast<const BlockDiffsAtCurrentRevisionCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockDiffsAtCurrentRevisionCommand::CopyFrom(const BlockDiffsAtCurrentRevisionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockDiffsAtCurrentRevisionCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void BlockDiffsAtCurrentRevisionCommand::InternalSwap(BlockDiffsAtCurrentRevisionCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockDiffsAtCurrentRevisionCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[54]);
}

// ===================================================================

class RangeAddress::_Internal {
 public:
};

RangeAddress::RangeAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.RangeAddress)
}
RangeAddress::RangeAddress(const RangeAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_identifier_){from._impl_.address_identifier_}
    , decltype(_impl_.range_list_){from._impl_.range_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.RangeAddress)
}

inline void RangeAddress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_identifier_){arena}
    , decltype(_impl_.range_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangeAddress::~RangeAddress() {
  // @@protoc_insertion_point(destructor:TSK.RangeAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_identifier_.~RepeatedField();
  _impl_.range_list_.~RepeatedField();
}

void RangeAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.RangeAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_identifier_.Clear();
  _impl_.range_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 address_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address_identifier(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 range_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_range_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_range_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.RangeAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address_identifier = 1;
  for (int i = 0, n = this->_internal_address_identifier_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address_identifier(i), target);
  }

  // repeated uint32 range_list = 2;
  for (int i = 0, n = this->_internal_range_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_range_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.RangeAddress)
  return target;
}

size_t RangeAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.RangeAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address_identifier = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.address_identifier_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_address_identifier_size());
    total_size += data_size;
  }

  // repeated uint32 range_list = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.range_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_range_list_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeAddress::GetClassData() const { return &_class_data_; }


void RangeAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeAddress*>(&to_msg);
  auto& from = static_cast<const RangeAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.RangeAddress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_identifier_.MergeFrom(from._impl_.address_identifier_);
  _this->_impl_.range_list_.MergeFrom(from._impl_.range_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeAddress::CopyFrom(const RangeAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.RangeAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeAddress::IsInitialized() const {
  return true;
}

void RangeAddress::InternalSwap(RangeAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_identifier_.InternalSwap(&other->_impl_.address_identifier_);
  _impl_.range_list_.InternalSwap(&other->_impl_.range_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[55]);
}

// ===================================================================

class Operation::_Internal {
 public:
  using HasBits = decltype(std::declval<Operation>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_noop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_insert_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preserve_lower_priority_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transform_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_property_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_to_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_dominating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_object_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_object_counter_space(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_identifier_){from._impl_.address_identifier_}
    , decltype(_impl_.range_list_){from._impl_.range_list_}
    , /*decltype(_impl_._range_list_cached_byte_size_)*/{0}
    , decltype(_impl_.noop_){}
    , decltype(_impl_.preserve_lower_priority_location_){}
    , decltype(_impl_.dominating_){}
    , decltype(_impl_.property_id_){}
    , decltype(_impl_.object_counter_space_){}
    , decltype(_impl_.object_count_){}
    , decltype(_impl_.insert_length_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.transform_behavior_){}
    , decltype(_impl_.from_index_){}
    , decltype(_impl_.to_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.noop_, &from._impl_.noop_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_index_) -
    reinterpret_cast<char*>(&_impl_.noop_)) + sizeof(_impl_.to_index_));
  // @@protoc_insertion_point(copy_constructor:TSK.Operation)
}

inline void Operation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_identifier_){arena}
    , decltype(_impl_.range_list_){arena}
    , /*decltype(_impl_._range_list_cached_byte_size_)*/{0}
    , decltype(_impl_.noop_){false}
    , decltype(_impl_.preserve_lower_priority_location_){false}
    , decltype(_impl_.dominating_){false}
    , decltype(_impl_.property_id_){0u}
    , decltype(_impl_.object_counter_space_){0}
    , decltype(_impl_.object_count_){-1}
    , decltype(_impl_.insert_length_){uint64_t{1u}}
    , decltype(_impl_.type_){6}
    , decltype(_impl_.transform_behavior_){7u}
    , decltype(_impl_.from_index_){-1}
    , decltype(_impl_.to_index_){-1}
  };
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:TSK.Operation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_identifier_.~RepeatedField();
  _impl_.range_list_.~RepeatedField();
}

void Operation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.Operation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_identifier_.Clear();
  _impl_.range_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.noop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.object_counter_space_) -
        reinterpret_cast<char*>(&_impl_.noop_)) + sizeof(_impl_.object_counter_space_));
    _impl_.object_count_ = -1;
    _impl_.insert_length_ = uint64_t{1u};
    _impl_.type_ = 6;
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.transform_behavior_ = 7u;
    _impl_.from_index_ = -1;
    _impl_.to_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::Operation_OperationType_IsValid(val))) {
            _internal_set_type(static_cast<::TSK::Operation_OperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool noop = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_noop(&has_bits);
          _impl_.noop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 address_identifier = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_address_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 insert_length = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_insert_length(&has_bits);
          _impl_.insert_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_lower_priority_location = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_preserve_lower_priority_location(&has_bits);
          _impl_.preserve_lower_priority_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 range_list = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_range_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_range_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 transform_behavior = 7 [default = 7];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_transform_behavior(&has_bits);
          _impl_.transform_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 property_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_property_id(&has_bits);
          _impl_.property_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 from_index = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_from_index(&has_bits);
          _impl_.from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 to_index = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_to_index(&has_bits);
          _impl_.to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dominating = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_dominating(&has_bits);
          _impl_.dominating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 object_count = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_object_count(&has_bits);
          _impl_.object_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 object_counter_space = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_object_counter_space(&has_bits);
          _impl_.object_counter_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.Operation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool noop = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_noop(), target);
  }

  // repeated fixed64 address_identifier = 3 [packed = true];
  if (this->_internal_address_identifier_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_address_identifier(), target);
  }

  // optional uint64 insert_length = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_insert_length(), target);
  }

  // optional bool preserve_lower_priority_location = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_preserve_lower_priority_location(), target);
  }

  // repeated uint32 range_list = 6 [packed = true];
  {
    int byte_size = _impl_._range_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_range_list(), byte_size, target);
    }
  }

  // optional uint32 transform_behavior = 7 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_transform_behavior(), target);
  }

  // optional uint32 property_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_property_id(), target);
  }

  // optional int32 from_index = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_from_index(), target);
  }

  // optional int32 to_index = 10 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_to_index(), target);
  }

  // optional bool dominating = 11 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_dominating(), target);
  }

  // optional int32 object_count = 12 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_object_count(), target);
  }

  // optional int32 object_counter_space = 13 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_object_counter_space(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.Operation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 address_identifier = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_address_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 range_list = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.range_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._range_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool noop = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_lower_priority_location = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool dominating = 11 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 property_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_property_id());
    }

    // optional int32 object_counter_space = 13 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_counter_space());
    }

    // optional int32 object_count = 12 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_count());
    }

    // optional uint64 insert_length = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_insert_length());
    }

    // optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 transform_behavior = 7 [default = 7];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transform_behavior());
    }

    // optional int32 from_index = 9 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from_index());
    }

    // optional int32 to_index = 10 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }


void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operation*>(&to_msg);
  auto& from = static_cast<const Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.Operation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_identifier_.MergeFrom(from._impl_.address_identifier_);
  _this->_impl_.range_list_.MergeFrom(from._impl_.range_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.noop_ = from._impl_.noop_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.preserve_lower_priority_location_ = from._impl_.preserve_lower_priority_location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dominating_ = from._impl_.dominating_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.property_id_ = from._impl_.property_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.object_counter_space_ = from._impl_.object_counter_space_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.object_count_ = from._impl_.object_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.insert_length_ = from._impl_.insert_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.transform_behavior_ = from._impl_.transform_behavior_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.from_index_ = from._impl_.from_index_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.to_index_ = from._impl_.to_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.address_identifier_.InternalSwap(&other->_impl_.address_identifier_);
  _impl_.range_list_.InternalSwap(&other->_impl_.range_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, _impl_.object_counter_space_)
      + sizeof(Operation::_impl_.object_counter_space_)
      - PROTOBUF_FIELD_OFFSET(Operation, _impl_.noop_)>(
          reinterpret_cast<char*>(&_impl_.noop_),
          reinterpret_cast<char*>(&other->_impl_.noop_));
  swap(_impl_.object_count_, other->_impl_.object_count_);
  swap(_impl_.insert_length_, other->_impl_.insert_length_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.transform_behavior_, other->_impl_.transform_behavior_);
  swap(_impl_.from_index_, other->_impl_.from_index_);
  swap(_impl_.to_index_, other->_impl_.to_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[56]);
}

// ===================================================================

class OperationTransformer::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationTransformer>()._impl_._has_bits_);
  static void set_has_higher_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OperationTransformer::OperationTransformer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OperationTransformer)
}
OperationTransformer::OperationTransformer(const OperationTransformer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationTransformer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operations_){from._impl_.operations_}
    , decltype(_impl_.higher_priority_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.higher_priority_ = from._impl_.higher_priority_;
  // @@protoc_insertion_point(copy_constructor:TSK.OperationTransformer)
}

inline void OperationTransformer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operations_){arena}
    , decltype(_impl_.higher_priority_){false}
  };
}

OperationTransformer::~OperationTransformer() {
  // @@protoc_insertion_point(destructor:TSK.OperationTransformer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationTransformer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operations_.~RepeatedPtrField();
}

void OperationTransformer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationTransformer::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationTransformer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operations_.Clear();
  _impl_.higher_priority_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationTransformer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool higher_priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_higher_priority(&has_bits);
          _impl_.higher_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.Operation operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationTransformer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationTransformer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool higher_priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_higher_priority(), target);
  }

  // repeated .TSK.Operation operations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operations_size()); i < n; i++) {
    const auto& repfield = this->_internal_operations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationTransformer)
  return target;
}

size_t OperationTransformer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationTransformer)
  size_t total_size = 0;

  // required bool higher_priority = 1;
  if (_internal_has_higher_priority()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.Operation operations = 2;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->_impl_.operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationTransformer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationTransformer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationTransformer::GetClassData() const { return &_class_data_; }


void OperationTransformer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationTransformer*>(&to_msg);
  auto& from = static_cast<const OperationTransformer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationTransformer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operations_.MergeFrom(from._impl_.operations_);
  if (from._internal_has_higher_priority()) {
    _this->_internal_set_higher_priority(from._internal_higher_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationTransformer::CopyFrom(const OperationTransformer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationTransformer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTransformer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void OperationTransformer::InternalSwap(OperationTransformer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.operations_.InternalSwap(&other->_impl_.operations_);
  swap(_impl_.higher_priority_, other->_impl_.higher_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationTransformer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[57]);
}

// ===================================================================

class TransformerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformerEntry>()._impl_._has_bits_);
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::OperationTransformer& transformer(const TransformerEntry* msg);
  static void set_has_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::OperationTransformer&
TransformerEntry::_Internal::transformer(const TransformerEntry* msg) {
  return *msg->_impl_.transformer_;
}
TransformerEntry::TransformerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.TransformerEntry)
}
TransformerEntry::TransformerEntry(const TransformerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransformerEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_){nullptr}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.creation_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer()) {
    _this->_impl_.transformer_ = new ::TSK::OperationTransformer(*from._impl_.transformer_);
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creation_time_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.creation_time_));
  // @@protoc_insertion_point(copy_constructor:TSK.TransformerEntry)
}

inline void TransformerEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_){nullptr}
    , decltype(_impl_.sequence_){uint64_t{0u}}
    , decltype(_impl_.creation_time_){0}
  };
}

TransformerEntry::~TransformerEntry() {
  // @@protoc_insertion_point(destructor:TSK.TransformerEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransformerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transformer_;
}

void TransformerEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransformerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.TransformerEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformer_ != nullptr);
    _impl_.transformer_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.creation_time_) -
        reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.creation_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformerEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double creation_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_creation_time(&has_bits);
          _impl_.creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.OperationTransformer transformer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformerEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.TransformerEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 sequence = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequence(), target);
  }

  // required double creation_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_creation_time(), target);
  }

  // required .TSK.OperationTransformer transformer = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::transformer(this),
        _Internal::transformer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.TransformerEntry)
  return target;
}

size_t TransformerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.TransformerEntry)
  size_t total_size = 0;

  if (_internal_has_transformer()) {
    // required .TSK.OperationTransformer transformer = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_);
  }

  if (_internal_has_sequence()) {
    // required uint64 sequence = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence());
  }

  if (_internal_has_creation_time()) {
    // required double creation_time = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TransformerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.TransformerEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.OperationTransformer transformer = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_);

    // required uint64 sequence = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence());

    // required double creation_time = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformerEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransformerEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformerEntry::GetClassData() const { return &_class_data_; }


void TransformerEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransformerEntry*>(&to_msg);
  auto& from = static_cast<const TransformerEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.TransformerEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transformer()->::TSK::OperationTransformer::MergeFrom(
          from._internal_transformer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.creation_time_ = from._impl_.creation_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformerEntry::CopyFrom(const TransformerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.TransformerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_transformer()) {
    if (!_impl_.transformer_->IsInitialized()) return false;
  }
  return true;
}

void TransformerEntry::InternalSwap(TransformerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformerEntry, _impl_.creation_time_)
      + sizeof(TransformerEntry::_impl_.creation_time_)
      - PROTOBUF_FIELD_OFFSET(TransformerEntry, _impl_.transformer_)>(
          reinterpret_cast<char*>(&_impl_.transformer_),
          reinterpret_cast<char*>(&other->_impl_.transformer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformerEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[58]);
}

// ===================================================================

class OutgoingCommandQueueItem::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueueItem>()._impl_._has_bits_);
  static const ::TSP::Reference& command(const OutgoingCommandQueueItem* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serialized_json_without_data_base64_encoded_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& serialized_json_without_data_base64_encoded_data(const OutgoingCommandQueueItem* msg);
  static void set_has_serialized_json_without_data_base64_encoded_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
OutgoingCommandQueueItem::_Internal::command(const OutgoingCommandQueueItem* msg) {
  return *msg->_impl_.command_;
}
const ::TSP::DataReference&
OutgoingCommandQueueItem::_Internal::serialized_json_without_data_base64_encoded_data(const OutgoingCommandQueueItem* msg) {
  return *msg->_impl_.serialized_json_without_data_base64_encoded_data_;
}
void OutgoingCommandQueueItem::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OutgoingCommandQueueItem::clear_serialized_json_without_data_base64_encoded_data() {
  if (_impl_.serialized_json_without_data_base64_encoded_data_ != nullptr) _impl_.serialized_json_without_data_base64_encoded_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void OutgoingCommandQueueItem::clear_large_data_list() {
  _impl_.large_data_list_.Clear();
}
OutgoingCommandQueueItem::OutgoingCommandQueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueueItem)
}
OutgoingCommandQueueItem::OutgoingCommandQueueItem(const OutgoingCommandQueueItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutgoingCommandQueueItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_to_data_map_entries_){from._impl_.uuid_to_data_map_entries_}
    , decltype(_impl_.large_data_list_){from._impl_.large_data_list_}
    , decltype(_impl_.serialized_json_without_data_base64_encoded_string_){}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.serialized_json_without_data_base64_encoded_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serialized_json_without_data_base64_encoded_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_json_without_data_base64_encoded_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_json_without_data_base64_encoded_string()) {
    _this->_impl_.serialized_json_without_data_base64_encoded_string_.Set(from._internal_serialized_json_without_data_base64_encoded_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::TSP::Reference(*from._impl_.command_);
  }
  if (from._internal_has_serialized_json_without_data_base64_encoded_data()) {
    _this->_impl_.serialized_json_without_data_base64_encoded_data_ = new ::TSP::DataReference(*from._impl_.serialized_json_without_data_base64_encoded_data_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueueItem)
}

inline void OutgoingCommandQueueItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_to_data_map_entries_){arena}
    , decltype(_impl_.large_data_list_){arena}
    , decltype(_impl_.serialized_json_without_data_base64_encoded_string_){}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.serialized_json_without_data_base64_encoded_data_){nullptr}
  };
  _impl_.serialized_json_without_data_base64_encoded_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_json_without_data_base64_encoded_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutgoingCommandQueueItem::~OutgoingCommandQueueItem() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueueItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingCommandQueueItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_to_data_map_entries_.~RepeatedPtrField();
  _impl_.large_data_list_.~RepeatedPtrField();
  _impl_.serialized_json_without_data_base64_encoded_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.command_;
  if (this != internal_default_instance()) delete _impl_.serialized_json_without_data_base64_encoded_data_;
}

void OutgoingCommandQueueItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingCommandQueueItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueueItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_to_data_map_entries_.Clear();
  _impl_.large_data_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.serialized_json_without_data_base64_encoded_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.serialized_json_without_data_base64_encoded_data_ != nullptr);
      _impl_.serialized_json_without_data_base64_encoded_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueueItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string serialized_json_without_data_base64_encoded_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serialized_json_without_data_base64_encoded_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuid_to_data_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_serialized_json_without_data_base64_encoded_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference large_data_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_large_data_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutgoingCommandQueueItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueueItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // optional string serialized_json_without_data_base64_encoded_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serialized_json_without_data_base64_encoded_string().data(), static_cast<int>(this->_internal_serialized_json_without_data_base64_encoded_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serialized_json_without_data_base64_encoded_string(), target);
  }

  // repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uuid_to_data_map_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_uuid_to_data_map_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::serialized_json_without_data_base64_encoded_data(this),
        _Internal::serialized_json_without_data_base64_encoded_data(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.DataReference large_data_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_large_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_large_data_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueueItem)
  return target;
}

size_t OutgoingCommandQueueItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueueItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
  total_size += 1UL * this->_internal_uuid_to_data_map_entries_size();
  for (const auto& msg : this->_impl_.uuid_to_data_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataReference large_data_list = 5;
  total_size += 1UL * this->_internal_large_data_list_size();
  for (const auto& msg : this->_impl_.large_data_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string serialized_json_without_data_base64_encoded_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialized_json_without_data_base64_encoded_string());
    }

    // optional .TSP.Reference command = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_);
    }

    // optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.serialized_json_without_data_base64_encoded_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueueItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutgoingCommandQueueItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueueItem::GetClassData() const { return &_class_data_; }


void OutgoingCommandQueueItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutgoingCommandQueueItem*>(&to_msg);
  auto& from = static_cast<const OutgoingCommandQueueItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueueItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uuid_to_data_map_entries_.MergeFrom(from._impl_.uuid_to_data_map_entries_);
  _this->_impl_.large_data_list_.MergeFrom(from._impl_.large_data_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_serialized_json_without_data_base64_encoded_string(from._internal_serialized_json_without_data_base64_encoded_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_command()->::TSP::Reference::MergeFrom(
          from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_serialized_json_without_data_base64_encoded_data()->::TSP::DataReference::MergeFrom(
          from._internal_serialized_json_without_data_base64_encoded_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueueItem::CopyFrom(const OutgoingCommandQueueItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueueItem::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uuid_to_data_map_entries_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.large_data_list_))
    return false;
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  if (_internal_has_serialized_json_without_data_base64_encoded_data()) {
    if (!_impl_.serialized_json_without_data_base64_encoded_data_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueueItem::InternalSwap(OutgoingCommandQueueItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.uuid_to_data_map_entries_.InternalSwap(&other->_impl_.uuid_to_data_map_entries_);
  _impl_.large_data_list_.InternalSwap(&other->_impl_.large_data_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_json_without_data_base64_encoded_string_, lhs_arena,
      &other->_impl_.serialized_json_without_data_base64_encoded_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItem, _impl_.serialized_json_without_data_base64_encoded_data_)
      + sizeof(OutgoingCommandQueueItem::_impl_.serialized_json_without_data_base64_encoded_data_)
      - PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItem, _impl_.command_)>(
          reinterpret_cast<char*>(&_impl_.command_),
          reinterpret_cast<char*>(&other->_impl_.command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueueItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[59]);
}

// ===================================================================

class OutgoingCommandQueueItemUUIDToDataMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueueItemUUIDToDataMapEntry>()._impl_._has_bits_);
  static const ::TSP::UUID& uuid(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& data(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
OutgoingCommandQueueItemUUIDToDataMapEntry::_Internal::uuid(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg) {
  return *msg->_impl_.uuid_;
}
const ::TSP::DataReference&
OutgoingCommandQueueItemUUIDToDataMapEntry::_Internal::data(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg) {
  return *msg->_impl_.data_;
}
void OutgoingCommandQueueItemUUIDToDataMapEntry::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OutgoingCommandQueueItemUUIDToDataMapEntry::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
OutgoingCommandQueueItemUUIDToDataMapEntry::OutgoingCommandQueueItemUUIDToDataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
}
OutgoingCommandQueueItemUUIDToDataMapEntry::OutgoingCommandQueueItemUUIDToDataMapEntry(const OutgoingCommandQueueItemUUIDToDataMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutgoingCommandQueueItemUUIDToDataMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSP::UUID(*from._impl_.uuid_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::TSP::DataReference(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
}

inline void OutgoingCommandQueueItemUUIDToDataMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.data_){nullptr}
  };
}

OutgoingCommandQueueItemUUIDToDataMapEntry::~OutgoingCommandQueueItemUUIDToDataMapEntry() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingCommandQueueItemUUIDToDataMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uuid_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
      _impl_.uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueueItemUUIDToDataMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.DataReference data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutgoingCommandQueueItemUUIDToDataMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.DataReference data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  return target;
}

size_t OutgoingCommandQueueItemUUIDToDataMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);
  }

  if (_internal_has_data()) {
    // required .TSP.DataReference data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return total_size;
}
size_t OutgoingCommandQueueItemUUIDToDataMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);

    // required .TSP.DataReference data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueueItemUUIDToDataMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutgoingCommandQueueItemUUIDToDataMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueueItemUUIDToDataMapEntry::GetClassData() const { return &_class_data_; }


void OutgoingCommandQueueItemUUIDToDataMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutgoingCommandQueueItemUUIDToDataMapEntry*>(&to_msg);
  auto& from = static_cast<const OutgoingCommandQueueItemUUIDToDataMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uuid()->::TSP::UUID::MergeFrom(
          from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::TSP::DataReference::MergeFrom(
          from._internal_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::CopyFrom(const OutgoingCommandQueueItemUUIDToDataMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueueItemUUIDToDataMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!_impl_.uuid_->IsInitialized()) return false;
  }
  if (_internal_has_data()) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::InternalSwap(OutgoingCommandQueueItemUUIDToDataMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItemUUIDToDataMapEntry, _impl_.data_)
      + sizeof(OutgoingCommandQueueItemUUIDToDataMapEntry::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItemUUIDToDataMapEntry, _impl_.uuid_)>(
          reinterpret_cast<char*>(&_impl_.uuid_),
          reinterpret_cast<char*>(&other->_impl_.uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueueItemUUIDToDataMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[60]);
}

// ===================================================================

class CollaborationAppliedCommandDocumentRevisionMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationAppliedCommandDocumentRevisionMapping>()._impl_._has_bits_);
  static const ::TSP::Reference& command(const CollaborationAppliedCommandDocumentRevisionMapping* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& document_revision_identifier(const CollaborationAppliedCommandDocumentRevisionMapping* msg);
  static void set_has_document_revision_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Date& timestamp(const CollaborationAppliedCommandDocumentRevisionMapping* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
CollaborationAppliedCommandDocumentRevisionMapping::_Internal::command(const CollaborationAppliedCommandDocumentRevisionMapping* msg) {
  return *msg->_impl_.command_;
}
const ::TSP::UUID&
CollaborationAppliedCommandDocumentRevisionMapping::_Internal::document_revision_identifier(const CollaborationAppliedCommandDocumentRevisionMapping* msg) {
  return *msg->_impl_.document_revision_identifier_;
}
const ::TSP::Date&
CollaborationAppliedCommandDocumentRevisionMapping::_Internal::timestamp(const CollaborationAppliedCommandDocumentRevisionMapping* msg) {
  return *msg->_impl_.timestamp_;
}
void CollaborationAppliedCommandDocumentRevisionMapping::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CollaborationAppliedCommandDocumentRevisionMapping::clear_document_revision_identifier() {
  if (_impl_.document_revision_identifier_ != nullptr) _impl_.document_revision_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CollaborationAppliedCommandDocumentRevisionMapping::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CollaborationAppliedCommandDocumentRevisionMapping::CollaborationAppliedCommandDocumentRevisionMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
}
CollaborationAppliedCommandDocumentRevisionMapping::CollaborationAppliedCommandDocumentRevisionMapping(const CollaborationAppliedCommandDocumentRevisionMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationAppliedCommandDocumentRevisionMapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remaining_command_operations_){from._impl_.remaining_command_operations_}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.document_revision_identifier_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.document_revision_sequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::TSP::Reference(*from._impl_.command_);
  }
  if (from._internal_has_document_revision_identifier()) {
    _this->_impl_.document_revision_identifier_ = new ::TSP::UUID(*from._impl_.document_revision_identifier_);
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::TSP::Date(*from._impl_.timestamp_);
  }
  _this->_impl_.document_revision_sequence_ = from._impl_.document_revision_sequence_;
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
}

inline void CollaborationAppliedCommandDocumentRevisionMapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remaining_command_operations_){arena}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.document_revision_identifier_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.document_revision_sequence_){0}
  };
}

CollaborationAppliedCommandDocumentRevisionMapping::~CollaborationAppliedCommandDocumentRevisionMapping() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationAppliedCommandDocumentRevisionMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remaining_command_operations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.command_;
  if (this != internal_default_instance()) delete _impl_.document_revision_identifier_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void CollaborationAppliedCommandDocumentRevisionMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationAppliedCommandDocumentRevisionMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remaining_command_operations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.document_revision_identifier_ != nullptr);
      _impl_.document_revision_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  _impl_.document_revision_sequence_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationAppliedCommandDocumentRevisionMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID document_revision_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_revision_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 document_revision_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_document_revision_sequence(&has_bits);
          _impl_.document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.Operation remaining_command_operations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remaining_command_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationAppliedCommandDocumentRevisionMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID document_revision_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::document_revision_identifier(this),
        _Internal::document_revision_identifier(this).GetCachedSize(), target, stream);
  }

  // optional int32 document_revision_sequence = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_document_revision_sequence(), target);
  }

  // repeated .TSK.Operation remaining_command_operations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remaining_command_operations_size()); i < n; i++) {
    const auto& repfield = this->_internal_remaining_command_operations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Date timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
  return target;
}

size_t CollaborationAppliedCommandDocumentRevisionMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.Operation remaining_command_operations = 4;
  total_size += 1UL * this->_internal_remaining_command_operations_size();
  for (const auto& msg : this->_impl_.remaining_command_operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_);
    }

    // optional .TSP.UUID document_revision_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.document_revision_identifier_);
    }

    // optional .TSP.Date timestamp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // optional int32 document_revision_sequence = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_document_revision_sequence());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationAppliedCommandDocumentRevisionMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationAppliedCommandDocumentRevisionMapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationAppliedCommandDocumentRevisionMapping::GetClassData() const { return &_class_data_; }


void CollaborationAppliedCommandDocumentRevisionMapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationAppliedCommandDocumentRevisionMapping*>(&to_msg);
  auto& from = static_cast<const CollaborationAppliedCommandDocumentRevisionMapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.remaining_command_operations_.MergeFrom(from._impl_.remaining_command_operations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_command()->::TSP::Reference::MergeFrom(
          from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_document_revision_identifier()->::TSP::UUID::MergeFrom(
          from._internal_document_revision_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_timestamp()->::TSP::Date::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.document_revision_sequence_ = from._impl_.document_revision_sequence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationAppliedCommandDocumentRevisionMapping::CopyFrom(const CollaborationAppliedCommandDocumentRevisionMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationAppliedCommandDocumentRevisionMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationAppliedCommandDocumentRevisionMapping::IsInitialized() const {
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  if (_internal_has_document_revision_identifier()) {
    if (!_impl_.document_revision_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_timestamp()) {
    if (!_impl_.timestamp_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationAppliedCommandDocumentRevisionMapping::InternalSwap(CollaborationAppliedCommandDocumentRevisionMapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.remaining_command_operations_.InternalSwap(&other->_impl_.remaining_command_operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationAppliedCommandDocumentRevisionMapping, _impl_.document_revision_sequence_)
      + sizeof(CollaborationAppliedCommandDocumentRevisionMapping::_impl_.document_revision_sequence_)
      - PROTOBUF_FIELD_OFFSET(CollaborationAppliedCommandDocumentRevisionMapping, _impl_.command_)>(
          reinterpret_cast<char*>(&_impl_.command_),
          reinterpret_cast<char*>(&other->_impl_.command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationAppliedCommandDocumentRevisionMapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[61]);
}

// ===================================================================

class CollaborationDocumentSessionState_AcknowledgementObserverEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationDocumentSessionState_AcknowledgementObserverEntry>()._impl_._has_bits_);
  static const ::TSP::UUID& command_identifier(const CollaborationDocumentSessionState_AcknowledgementObserverEntry* msg);
  static void set_has_command_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
CollaborationDocumentSessionState_AcknowledgementObserverEntry::_Internal::command_identifier(const CollaborationDocumentSessionState_AcknowledgementObserverEntry* msg) {
  return *msg->_impl_.command_identifier_;
}
void CollaborationDocumentSessionState_AcknowledgementObserverEntry::clear_command_identifier() {
  if (_impl_.command_identifier_ != nullptr) _impl_.command_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CollaborationDocumentSessionState_AcknowledgementObserverEntry::clear_acknowledgement_observers() {
  _impl_.acknowledgement_observers_.Clear();
}
CollaborationDocumentSessionState_AcknowledgementObserverEntry::CollaborationDocumentSessionState_AcknowledgementObserverEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
}
CollaborationDocumentSessionState_AcknowledgementObserverEntry::CollaborationDocumentSessionState_AcknowledgementObserverEntry(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationDocumentSessionState_AcknowledgementObserverEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgement_observers_){from._impl_.acknowledgement_observers_}
    , decltype(_impl_.command_identifier_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command_identifier()) {
    _this->_impl_.command_identifier_ = new ::TSP::UUID(*from._impl_.command_identifier_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
}

inline void CollaborationDocumentSessionState_AcknowledgementObserverEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgement_observers_){arena}
    , decltype(_impl_.command_identifier_){nullptr}
  };
}

CollaborationDocumentSessionState_AcknowledgementObserverEntry::~CollaborationDocumentSessionState_AcknowledgementObserverEntry() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationDocumentSessionState_AcknowledgementObserverEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.acknowledgement_observers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.command_identifier_;
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acknowledgement_observers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.command_identifier_ != nullptr);
    _impl_.command_identifier_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationDocumentSessionState_AcknowledgementObserverEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID command_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference acknowledgement_observers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acknowledgement_observers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationDocumentSessionState_AcknowledgementObserverEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID command_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command_identifier(this),
        _Internal::command_identifier(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference acknowledgement_observers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_acknowledgement_observers_size()); i < n; i++) {
    const auto& repfield = this->_internal_acknowledgement_observers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  return target;
}

size_t CollaborationDocumentSessionState_AcknowledgementObserverEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  size_t total_size = 0;

  // required .TSP.UUID command_identifier = 1;
  if (_internal_has_command_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_identifier_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference acknowledgement_observers = 2;
  total_size += 1UL * this->_internal_acknowledgement_observers_size();
  for (const auto& msg : this->_impl_.acknowledgement_observers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationDocumentSessionState_AcknowledgementObserverEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationDocumentSessionState_AcknowledgementObserverEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationDocumentSessionState_AcknowledgementObserverEntry::GetClassData() const { return &_class_data_; }


void CollaborationDocumentSessionState_AcknowledgementObserverEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationDocumentSessionState_AcknowledgementObserverEntry*>(&to_msg);
  auto& from = static_cast<const CollaborationDocumentSessionState_AcknowledgementObserverEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.acknowledgement_observers_.MergeFrom(from._impl_.acknowledgement_observers_);
  if (from._internal_has_command_identifier()) {
    _this->_internal_mutable_command_identifier()->::TSP::UUID::MergeFrom(
        from._internal_command_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::CopyFrom(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationDocumentSessionState_AcknowledgementObserverEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.acknowledgement_observers_))
    return false;
  if (_internal_has_command_identifier()) {
    if (!_impl_.command_identifier_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::InternalSwap(CollaborationDocumentSessionState_AcknowledgementObserverEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.acknowledgement_observers_.InternalSwap(&other->_impl_.acknowledgement_observers_);
  swap(_impl_.command_identifier_, other->_impl_.command_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationDocumentSessionState_AcknowledgementObserverEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[62]);
}

// ===================================================================

class CollaborationDocumentSessionState::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationDocumentSessionState>()._impl_._has_bits_);
  static void set_has_mailbox_request_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& mailbox_request_document_revision_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_mailbox_request_document_revision_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_command_send_marker_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::UUID& last_command_send_marker_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_last_command_send_marker_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& last_too_old_command_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_last_too_old_command_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& unprocessed_operation_entries_pending_resume_process_diffs(const CollaborationDocumentSessionState* msg);
  static void set_has_unprocessed_operation_entries_pending_resume_process_diffs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& send_pending_command_queue(const CollaborationDocumentSessionState* msg);
  static void set_has_send_pending_command_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& last_enqueued_document_load_command_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_last_enqueued_document_load_command_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count_of_command_queue_items_in_last_outgoing_command_group(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::mailbox_request_document_revision_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->_impl_.mailbox_request_document_revision_identifier_;
}
const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::last_command_send_marker_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->_impl_.last_command_send_marker_identifier_;
}
const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::last_too_old_command_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->_impl_.last_too_old_command_identifier_;
}
const ::TSP::Reference&
CollaborationDocumentSessionState::_Internal::unprocessed_operation_entries_pending_resume_process_diffs(const CollaborationDocumentSessionState* msg) {
  return *msg->_impl_.unprocessed_operation_entries_pending_resume_process_diffs_;
}
const ::TSP::Reference&
CollaborationDocumentSessionState::_Internal::send_pending_command_queue(const CollaborationDocumentSessionState* msg) {
  return *msg->_impl_.send_pending_command_queue_;
}
const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::last_enqueued_document_load_command_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->_impl_.last_enqueued_document_load_command_identifier_;
}
void CollaborationDocumentSessionState::clear_rsvp_command_queue_items() {
  _impl_.rsvp_command_queue_items_.Clear();
}
void CollaborationDocumentSessionState::clear_collaborator_cursor_transformer_entries() {
  _impl_.collaborator_cursor_transformer_entries_.Clear();
}
void CollaborationDocumentSessionState::clear_acknowledged_commands_pending_resume_process_diffs() {
  _impl_.acknowledged_commands_pending_resume_process_diffs_.Clear();
}
void CollaborationDocumentSessionState::clear_unprocessed_commands_pending_resume_process_diffs() {
  _impl_.unprocessed_commands_pending_resume_process_diffs_.Clear();
}
void CollaborationDocumentSessionState::clear_transformer_from_unprocessed_command_operations_entries() {
  _impl_.transformer_from_unprocessed_command_operations_entries_.Clear();
}
void CollaborationDocumentSessionState::clear_mailbox_request_document_revision_identifier() {
  if (_impl_.mailbox_request_document_revision_identifier_ != nullptr) _impl_.mailbox_request_document_revision_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CollaborationDocumentSessionState::clear_last_command_send_marker_identifier() {
  if (_impl_.last_command_send_marker_identifier_ != nullptr) _impl_.last_command_send_marker_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CollaborationDocumentSessionState::clear_skipped_acknowledged_commands_pending_resume_process_diffs() {
  _impl_.skipped_acknowledged_commands_pending_resume_process_diffs_.Clear();
}
void CollaborationDocumentSessionState::clear_last_too_old_command_identifier() {
  if (_impl_.last_too_old_command_identifier_ != nullptr) _impl_.last_too_old_command_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CollaborationDocumentSessionState::clear_unprocessed_operation_entries_pending_resume_process_diffs() {
  if (_impl_.unprocessed_operation_entries_pending_resume_process_diffs_ != nullptr) _impl_.unprocessed_operation_entries_pending_resume_process_diffs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CollaborationDocumentSessionState::clear_send_pending_command_queue() {
  if (_impl_.send_pending_command_queue_ != nullptr) _impl_.send_pending_command_queue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CollaborationDocumentSessionState::clear_last_enqueued_document_load_command_identifier() {
  if (_impl_.last_enqueued_document_load_command_identifier_ != nullptr) _impl_.last_enqueued_document_load_command_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CollaborationDocumentSessionState::CollaborationDocumentSessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationDocumentSessionState)
}
CollaborationDocumentSessionState::CollaborationDocumentSessionState(const CollaborationDocumentSessionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborationDocumentSessionState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collaborator_ids_){from._impl_.collaborator_ids_}
    , decltype(_impl_.rsvp_command_queue_items_){from._impl_.rsvp_command_queue_items_}
    , decltype(_impl_.collaborator_cursor_transformer_entries_){from._impl_.collaborator_cursor_transformer_entries_}
    , decltype(_impl_.acknowledged_commands_pending_resume_process_diffs_){from._impl_.acknowledged_commands_pending_resume_process_diffs_}
    , decltype(_impl_.unprocessed_commands_pending_resume_process_diffs_){from._impl_.unprocessed_commands_pending_resume_process_diffs_}
    , decltype(_impl_.command_acknowledgement_observer_entries_){from._impl_.command_acknowledgement_observer_entries_}
    , decltype(_impl_.transformer_from_unprocessed_command_operations_entries_){from._impl_.transformer_from_unprocessed_command_operations_entries_}
    , decltype(_impl_.skipped_acknowledged_commands_pending_resume_process_diffs_){from._impl_.skipped_acknowledged_commands_pending_resume_process_diffs_}
    , decltype(_impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_){from._impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_}
    , decltype(_impl_.mailbox_request_document_revision_identifier_){nullptr}
    , decltype(_impl_.last_command_send_marker_identifier_){nullptr}
    , decltype(_impl_.last_too_old_command_identifier_){nullptr}
    , decltype(_impl_.unprocessed_operation_entries_pending_resume_process_diffs_){nullptr}
    , decltype(_impl_.send_pending_command_queue_){nullptr}
    , decltype(_impl_.last_enqueued_document_load_command_identifier_){nullptr}
    , decltype(_impl_.mailbox_request_document_revision_sequence_){}
    , decltype(_impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_){}
    , decltype(_impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_){}
    , decltype(_impl_.count_of_command_queue_items_in_last_outgoing_command_group_){}
    , decltype(_impl_.last_command_send_marker_sequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mailbox_request_document_revision_identifier()) {
    _this->_impl_.mailbox_request_document_revision_identifier_ = new ::TSP::UUID(*from._impl_.mailbox_request_document_revision_identifier_);
  }
  if (from._internal_has_last_command_send_marker_identifier()) {
    _this->_impl_.last_command_send_marker_identifier_ = new ::TSP::UUID(*from._impl_.last_command_send_marker_identifier_);
  }
  if (from._internal_has_last_too_old_command_identifier()) {
    _this->_impl_.last_too_old_command_identifier_ = new ::TSP::UUID(*from._impl_.last_too_old_command_identifier_);
  }
  if (from._internal_has_unprocessed_operation_entries_pending_resume_process_diffs()) {
    _this->_impl_.unprocessed_operation_entries_pending_resume_process_diffs_ = new ::TSP::Reference(*from._impl_.unprocessed_operation_entries_pending_resume_process_diffs_);
  }
  if (from._internal_has_send_pending_command_queue()) {
    _this->_impl_.send_pending_command_queue_ = new ::TSP::Reference(*from._impl_.send_pending_command_queue_);
  }
  if (from._internal_has_last_enqueued_document_load_command_identifier()) {
    _this->_impl_.last_enqueued_document_load_command_identifier_ = new ::TSP::UUID(*from._impl_.last_enqueued_document_load_command_identifier_);
  }
  ::memcpy(&_impl_.mailbox_request_document_revision_sequence_, &from._impl_.mailbox_request_document_revision_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_command_send_marker_sequence_) -
    reinterpret_cast<char*>(&_impl_.mailbox_request_document_revision_sequence_)) + sizeof(_impl_.last_command_send_marker_sequence_));
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationDocumentSessionState)
}

inline void CollaborationDocumentSessionState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collaborator_ids_){arena}
    , decltype(_impl_.rsvp_command_queue_items_){arena}
    , decltype(_impl_.collaborator_cursor_transformer_entries_){arena}
    , decltype(_impl_.acknowledged_commands_pending_resume_process_diffs_){arena}
    , decltype(_impl_.unprocessed_commands_pending_resume_process_diffs_){arena}
    , decltype(_impl_.command_acknowledgement_observer_entries_){arena}
    , decltype(_impl_.transformer_from_unprocessed_command_operations_entries_){arena}
    , decltype(_impl_.skipped_acknowledged_commands_pending_resume_process_diffs_){arena}
    , decltype(_impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_){arena}
    , decltype(_impl_.mailbox_request_document_revision_identifier_){nullptr}
    , decltype(_impl_.last_command_send_marker_identifier_){nullptr}
    , decltype(_impl_.last_too_old_command_identifier_){nullptr}
    , decltype(_impl_.unprocessed_operation_entries_pending_resume_process_diffs_){nullptr}
    , decltype(_impl_.send_pending_command_queue_){nullptr}
    , decltype(_impl_.last_enqueued_document_load_command_identifier_){nullptr}
    , decltype(_impl_.mailbox_request_document_revision_sequence_){0}
    , decltype(_impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_){false}
    , decltype(_impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_){uint64_t{0u}}
    , decltype(_impl_.count_of_command_queue_items_in_last_outgoing_command_group_){uint64_t{0u}}
    , decltype(_impl_.last_command_send_marker_sequence_){0}
  };
}

CollaborationDocumentSessionState::~CollaborationDocumentSessionState() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationDocumentSessionState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborationDocumentSessionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collaborator_ids_.~RepeatedPtrField();
  _impl_.rsvp_command_queue_items_.~RepeatedPtrField();
  _impl_.collaborator_cursor_transformer_entries_.~RepeatedPtrField();
  _impl_.acknowledged_commands_pending_resume_process_diffs_.~RepeatedPtrField();
  _impl_.unprocessed_commands_pending_resume_process_diffs_.~RepeatedPtrField();
  _impl_.command_acknowledgement_observer_entries_.~RepeatedPtrField();
  _impl_.transformer_from_unprocessed_command_operations_entries_.~RepeatedPtrField();
  _impl_.skipped_acknowledged_commands_pending_resume_process_diffs_.~RepeatedPtrField();
  _impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.mailbox_request_document_revision_identifier_;
  if (this != internal_default_instance()) delete _impl_.last_command_send_marker_identifier_;
  if (this != internal_default_instance()) delete _impl_.last_too_old_command_identifier_;
  if (this != internal_default_instance()) delete _impl_.unprocessed_operation_entries_pending_resume_process_diffs_;
  if (this != internal_default_instance()) delete _impl_.send_pending_command_queue_;
  if (this != internal_default_instance()) delete _impl_.last_enqueued_document_load_command_identifier_;
}

void CollaborationDocumentSessionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborationDocumentSessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationDocumentSessionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collaborator_ids_.Clear();
  _impl_.rsvp_command_queue_items_.Clear();
  _impl_.collaborator_cursor_transformer_entries_.Clear();
  _impl_.acknowledged_commands_pending_resume_process_diffs_.Clear();
  _impl_.unprocessed_commands_pending_resume_process_diffs_.Clear();
  _impl_.command_acknowledgement_observer_entries_.Clear();
  _impl_.transformer_from_unprocessed_command_operations_entries_.Clear();
  _impl_.skipped_acknowledged_commands_pending_resume_process_diffs_.Clear();
  _impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.mailbox_request_document_revision_identifier_ != nullptr);
      _impl_.mailbox_request_document_revision_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.last_command_send_marker_identifier_ != nullptr);
      _impl_.last_command_send_marker_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.last_too_old_command_identifier_ != nullptr);
      _impl_.last_too_old_command_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.unprocessed_operation_entries_pending_resume_process_diffs_ != nullptr);
      _impl_.unprocessed_operation_entries_pending_resume_process_diffs_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.send_pending_command_queue_ != nullptr);
      _impl_.send_pending_command_queue_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.last_enqueued_document_load_command_identifier_ != nullptr);
      _impl_.last_enqueued_document_load_command_identifier_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.mailbox_request_document_revision_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_) -
        reinterpret_cast<char*>(&_impl_.mailbox_request_document_revision_sequence_)) + sizeof(_impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_command_send_marker_sequence_) -
        reinterpret_cast<char*>(&_impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_)) + sizeof(_impl_.last_command_send_marker_sequence_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationDocumentSessionState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string collaborator_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collaborator_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.CollaborationDocumentSessionState.collaborator_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference rsvp_command_queue_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsvp_command_queue_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborator_cursor_transformer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acknowledged_commands_pending_resume_process_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unprocessed_commands_pending_resume_process_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command_acknowledgement_observer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transformer_from_unprocessed_command_operations_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mailbox_request_document_revision_sequence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mailbox_request_document_revision_sequence(&has_bits);
          _impl_.mailbox_request_document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mailbox_request_document_revision_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(&has_bits);
          _impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_command_send_marker_sequence = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_last_command_send_marker_sequence(&has_bits);
          _impl_.last_command_send_marker_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID last_command_send_marker_identifier = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_command_send_marker_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skipped_acknowledged_commands_pending_resume_process_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID last_too_old_command_identifier = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_too_old_command_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_unprocessed_operation_entries_pending_resume_process_diffs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference send_pending_command_queue = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_pending_command_queue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(&has_bits);
          _impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_enqueued_document_load_command_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.CollaborationAppliedCommandDocumentRevisionMapping applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 count_of_command_queue_items_in_last_outgoing_command_group = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_count_of_command_queue_items_in_last_outgoing_command_group(&has_bits);
          _impl_.count_of_command_queue_items_in_last_outgoing_command_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborationDocumentSessionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationDocumentSessionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string collaborator_ids = 1;
  for (int i = 0, n = this->_internal_collaborator_ids_size(); i < n; i++) {
    const auto& s = this->_internal_collaborator_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CollaborationDocumentSessionState.collaborator_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated .TSP.Reference rsvp_command_queue_items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rsvp_command_queue_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_rsvp_command_queue_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collaborator_cursor_transformer_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_collaborator_cursor_transformer_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_acknowledged_commands_pending_resume_process_diffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_acknowledged_commands_pending_resume_process_diffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unprocessed_commands_pending_resume_process_diffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_unprocessed_commands_pending_resume_process_diffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_command_acknowledgement_observer_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_command_acknowledgement_observer_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transformer_from_unprocessed_command_operations_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_transformer_from_unprocessed_command_operations_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mailbox_request_document_revision_sequence = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_mailbox_request_document_revision_sequence(), target);
  }

  // optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::mailbox_request_document_revision_identifier(this),
        _Internal::mailbox_request_document_revision_identifier(this).GetCachedSize(), target, stream);
  }

  // optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(), target);
  }

  // optional int32 last_command_send_marker_sequence = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_last_command_send_marker_sequence(), target);
  }

  // optional .TSP.UUID last_command_send_marker_identifier = 14;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::last_command_send_marker_identifier(this),
        _Internal::last_command_send_marker_identifier(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skipped_acknowledged_commands_pending_resume_process_diffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_skipped_acknowledged_commands_pending_resume_process_diffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID last_too_old_command_identifier = 16;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::last_too_old_command_identifier(this),
        _Internal::last_too_old_command_identifier(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::unprocessed_operation_entries_pending_resume_process_diffs(this),
        _Internal::unprocessed_operation_entries_pending_resume_process_diffs(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference send_pending_command_queue = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::send_pending_command_queue(this),
        _Internal::send_pending_command_queue(this).GetCachedSize(), target, stream);
  }

  // optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(), target);
  }

  // optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::last_enqueued_document_load_command_identifier(this),
        _Internal::last_enqueued_document_load_command_identifier(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.CollaborationAppliedCommandDocumentRevisionMapping applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 count_of_command_queue_items_in_last_outgoing_command_group = 22 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_count_of_command_queue_items_in_last_outgoing_command_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationDocumentSessionState)
  return target;
}

size_t CollaborationDocumentSessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationDocumentSessionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collaborator_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.collaborator_ids_.size());
  for (int i = 0, n = _impl_.collaborator_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.collaborator_ids_.Get(i));
  }

  // repeated .TSP.Reference rsvp_command_queue_items = 3;
  total_size += 1UL * this->_internal_rsvp_command_queue_items_size();
  for (const auto& msg : this->_impl_.rsvp_command_queue_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
  total_size += 1UL * this->_internal_collaborator_cursor_transformer_entries_size();
  for (const auto& msg : this->_impl_.collaborator_cursor_transformer_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
  total_size += 1UL * this->_internal_acknowledged_commands_pending_resume_process_diffs_size();
  for (const auto& msg : this->_impl_.acknowledged_commands_pending_resume_process_diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
  total_size += 1UL * this->_internal_unprocessed_commands_pending_resume_process_diffs_size();
  for (const auto& msg : this->_impl_.unprocessed_commands_pending_resume_process_diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
  total_size += 1UL * this->_internal_command_acknowledgement_observer_entries_size();
  for (const auto& msg : this->_impl_.command_acknowledgement_observer_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
  total_size += 1UL * this->_internal_transformer_from_unprocessed_command_operations_entries_size();
  for (const auto& msg : this->_impl_.transformer_from_unprocessed_command_operations_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
  total_size += 1UL * this->_internal_skipped_acknowledged_commands_pending_resume_process_diffs_size();
  for (const auto& msg : this->_impl_.skipped_acknowledged_commands_pending_resume_process_diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.CollaborationAppliedCommandDocumentRevisionMapping applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs = 21;
  total_size += 2UL * this->_internal_applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_size();
  for (const auto& msg : this->_impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mailbox_request_document_revision_identifier_);
    }

    // optional .TSP.UUID last_command_send_marker_identifier = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_command_send_marker_identifier_);
    }

    // optional .TSP.UUID last_too_old_command_identifier = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_too_old_command_identifier_);
    }

    // optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unprocessed_operation_entries_pending_resume_process_diffs_);
    }

    // optional .TSP.Reference send_pending_command_queue = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.send_pending_command_queue_);
    }

    // optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_enqueued_document_load_command_identifier_);
    }

    // optional int32 mailbox_request_document_revision_sequence = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mailbox_request_document_revision_sequence());
    }

    // optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_count_of_send_pending_command_queue_items_moved_from_rsvp_queue());
    }

    // optional uint64 count_of_command_queue_items_in_last_outgoing_command_group = 22 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_count_of_command_queue_items_in_last_outgoing_command_group());
    }

    // optional int32 last_command_send_marker_sequence = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_command_send_marker_sequence());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationDocumentSessionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborationDocumentSessionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationDocumentSessionState::GetClassData() const { return &_class_data_; }


void CollaborationDocumentSessionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborationDocumentSessionState*>(&to_msg);
  auto& from = static_cast<const CollaborationDocumentSessionState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationDocumentSessionState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collaborator_ids_.MergeFrom(from._impl_.collaborator_ids_);
  _this->_impl_.rsvp_command_queue_items_.MergeFrom(from._impl_.rsvp_command_queue_items_);
  _this->_impl_.collaborator_cursor_transformer_entries_.MergeFrom(from._impl_.collaborator_cursor_transformer_entries_);
  _this->_impl_.acknowledged_commands_pending_resume_process_diffs_.MergeFrom(from._impl_.acknowledged_commands_pending_resume_process_diffs_);
  _this->_impl_.unprocessed_commands_pending_resume_process_diffs_.MergeFrom(from._impl_.unprocessed_commands_pending_resume_process_diffs_);
  _this->_impl_.command_acknowledgement_observer_entries_.MergeFrom(from._impl_.command_acknowledgement_observer_entries_);
  _this->_impl_.transformer_from_unprocessed_command_operations_entries_.MergeFrom(from._impl_.transformer_from_unprocessed_command_operations_entries_);
  _this->_impl_.skipped_acknowledged_commands_pending_resume_process_diffs_.MergeFrom(from._impl_.skipped_acknowledged_commands_pending_resume_process_diffs_);
  _this->_impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_.MergeFrom(from._impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mailbox_request_document_revision_identifier()->::TSP::UUID::MergeFrom(
          from._internal_mailbox_request_document_revision_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_command_send_marker_identifier()->::TSP::UUID::MergeFrom(
          from._internal_last_command_send_marker_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_too_old_command_identifier()->::TSP::UUID::MergeFrom(
          from._internal_last_too_old_command_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_unprocessed_operation_entries_pending_resume_process_diffs()->::TSP::Reference::MergeFrom(
          from._internal_unprocessed_operation_entries_pending_resume_process_diffs());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_send_pending_command_queue()->::TSP::Reference::MergeFrom(
          from._internal_send_pending_command_queue());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_last_enqueued_document_load_command_identifier()->::TSP::UUID::MergeFrom(
          from._internal_last_enqueued_document_load_command_identifier());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mailbox_request_document_revision_sequence_ = from._impl_.mailbox_request_document_revision_sequence_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_ = from._impl_.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_ = from._impl_.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.count_of_command_queue_items_in_last_outgoing_command_group_ = from._impl_.count_of_command_queue_items_in_last_outgoing_command_group_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.last_command_send_marker_sequence_ = from._impl_.last_command_send_marker_sequence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationDocumentSessionState::CopyFrom(const CollaborationDocumentSessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationDocumentSessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationDocumentSessionState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rsvp_command_queue_items_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.collaborator_cursor_transformer_entries_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.acknowledged_commands_pending_resume_process_diffs_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.unprocessed_commands_pending_resume_process_diffs_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.command_acknowledgement_observer_entries_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.transformer_from_unprocessed_command_operations_entries_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.skipped_acknowledged_commands_pending_resume_process_diffs_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_))
    return false;
  if (_internal_has_mailbox_request_document_revision_identifier()) {
    if (!_impl_.mailbox_request_document_revision_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_last_command_send_marker_identifier()) {
    if (!_impl_.last_command_send_marker_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_last_too_old_command_identifier()) {
    if (!_impl_.last_too_old_command_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_unprocessed_operation_entries_pending_resume_process_diffs()) {
    if (!_impl_.unprocessed_operation_entries_pending_resume_process_diffs_->IsInitialized()) return false;
  }
  if (_internal_has_send_pending_command_queue()) {
    if (!_impl_.send_pending_command_queue_->IsInitialized()) return false;
  }
  if (_internal_has_last_enqueued_document_load_command_identifier()) {
    if (!_impl_.last_enqueued_document_load_command_identifier_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationDocumentSessionState::InternalSwap(CollaborationDocumentSessionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.collaborator_ids_.InternalSwap(&other->_impl_.collaborator_ids_);
  _impl_.rsvp_command_queue_items_.InternalSwap(&other->_impl_.rsvp_command_queue_items_);
  _impl_.collaborator_cursor_transformer_entries_.InternalSwap(&other->_impl_.collaborator_cursor_transformer_entries_);
  _impl_.acknowledged_commands_pending_resume_process_diffs_.InternalSwap(&other->_impl_.acknowledged_commands_pending_resume_process_diffs_);
  _impl_.unprocessed_commands_pending_resume_process_diffs_.InternalSwap(&other->_impl_.unprocessed_commands_pending_resume_process_diffs_);
  _impl_.command_acknowledgement_observer_entries_.InternalSwap(&other->_impl_.command_acknowledgement_observer_entries_);
  _impl_.transformer_from_unprocessed_command_operations_entries_.InternalSwap(&other->_impl_.transformer_from_unprocessed_command_operations_entries_);
  _impl_.skipped_acknowledged_commands_pending_resume_process_diffs_.InternalSwap(&other->_impl_.skipped_acknowledged_commands_pending_resume_process_diffs_);
  _impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_.InternalSwap(&other->_impl_.applied_command_document_revision_mappings_to_notify_pending_resume_process_diffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationDocumentSessionState, _impl_.last_command_send_marker_sequence_)
      + sizeof(CollaborationDocumentSessionState::_impl_.last_command_send_marker_sequence_)
      - PROTOBUF_FIELD_OFFSET(CollaborationDocumentSessionState, _impl_.mailbox_request_document_revision_identifier_)>(
          reinterpret_cast<char*>(&_impl_.mailbox_request_document_revision_identifier_),
          reinterpret_cast<char*>(&other->_impl_.mailbox_request_document_revision_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationDocumentSessionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[63]);
}

// ===================================================================

class NativeContentDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<NativeContentDescription>()._impl_._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void NativeContentDescription::clear_drawable_descriptions() {
  _impl_.drawable_descriptions_.Clear();
}
NativeContentDescription::NativeContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.NativeContentDescription)
}
NativeContentDescription::NativeContentDescription(const NativeContentDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NativeContentDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_descriptions_){from._impl_.drawable_descriptions_}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.app_version_){}
    , decltype(_impl_.document_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_version()) {
    _this->_impl_.app_version_.Set(from._internal_app_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_document_id()) {
    _this->_impl_.document_id_.Set(from._internal_document_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSK.NativeContentDescription)
}

inline void NativeContentDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_descriptions_){arena}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.app_version_){}
    , decltype(_impl_.document_id_){}
  };
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NativeContentDescription::~NativeContentDescription() {
  // @@protoc_insertion_point(destructor:TSK.NativeContentDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NativeContentDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawable_descriptions_.~RepeatedPtrField();
  _impl_.app_name_.Destroy();
  _impl_.app_version_.Destroy();
  _impl_.document_id_.Destroy();
}

void NativeContentDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NativeContentDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.NativeContentDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawable_descriptions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.app_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.document_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NativeContentDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.NativeContentDescription.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string app_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.NativeContentDescription.app_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string document_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_document_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.NativeContentDescription.document_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawable_descriptions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NativeContentDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.NativeContentDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.NativeContentDescription.app_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_name(), target);
  }

  // optional string app_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_version().data(), static_cast<int>(this->_internal_app_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.NativeContentDescription.app_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_version(), target);
  }

  // optional string document_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_id().data(), static_cast<int>(this->_internal_document_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.NativeContentDescription.document_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_document_id(), target);
  }

  // repeated .TSP.Reference drawable_descriptions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawable_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawable_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.NativeContentDescription)
  return target;
}

size_t NativeContentDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.NativeContentDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawable_descriptions = 4;
  total_size += 1UL * this->_internal_drawable_descriptions_size();
  for (const auto& msg : this->_impl_.drawable_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string app_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional string app_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_version());
    }

    // optional string document_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_document_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NativeContentDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NativeContentDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NativeContentDescription::GetClassData() const { return &_class_data_; }


void NativeContentDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NativeContentDescription*>(&to_msg);
  auto& from = static_cast<const NativeContentDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.NativeContentDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawable_descriptions_.MergeFrom(from._impl_.drawable_descriptions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_app_version(from._internal_app_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_document_id(from._internal_document_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NativeContentDescription::CopyFrom(const NativeContentDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.NativeContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeContentDescription::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawable_descriptions_))
    return false;
  return true;
}

void NativeContentDescription::InternalSwap(NativeContentDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawable_descriptions_.InternalSwap(&other->_impl_.drawable_descriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_version_, lhs_arena,
      &other->_impl_.app_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_id_, lhs_arena,
      &other->_impl_.document_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NativeContentDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[64]);
}

// ===================================================================

class StructuredTextImportSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredTextImportSettings>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starting_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transpose_rows_and_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_collapse_consecutive(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::IndexSet& column_offsets(const StructuredTextImportSettings* msg);
  static void set_has_column_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_automatic_delimiters(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_automatic_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_source_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSP::IndexSet&
StructuredTextImportSettings::_Internal::column_offsets(const StructuredTextImportSettings* msg) {
  return *msg->_impl_.column_offsets_;
}
void StructuredTextImportSettings::clear_column_offsets() {
  if (_impl_.column_offsets_ != nullptr) _impl_.column_offsets_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StructuredTextImportSettings::StructuredTextImportSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.StructuredTextImportSettings)
}
StructuredTextImportSettings::StructuredTextImportSettings(const StructuredTextImportSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructuredTextImportSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decimal_separators_){from._impl_.decimal_separators_}
    , decltype(_impl_.thousands_separators_){from._impl_.thousands_separators_}
    , decltype(_impl_.delimiters_){from._impl_.delimiters_}
    , decltype(_impl_.text_qualifiers_){from._impl_.text_qualifiers_}
    , decltype(_impl_.column_offsets_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.starting_row_){}
    , decltype(_impl_.source_encoding_){}
    , decltype(_impl_.transpose_rows_and_columns_){}
    , decltype(_impl_.collapse_consecutive_){}
    , decltype(_impl_.automatic_delimiters_){}
    , decltype(_impl_.automatic_offsets_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_offsets()) {
    _this->_impl_.column_offsets_ = new ::TSP::IndexSet(*from._impl_.column_offsets_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.automatic_offsets_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.automatic_offsets_));
  // @@protoc_insertion_point(copy_constructor:TSK.StructuredTextImportSettings)
}

inline void StructuredTextImportSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decimal_separators_){arena}
    , decltype(_impl_.thousands_separators_){arena}
    , decltype(_impl_.delimiters_){arena}
    , decltype(_impl_.text_qualifiers_){arena}
    , decltype(_impl_.column_offsets_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.starting_row_){0}
    , decltype(_impl_.source_encoding_){uint64_t{0u}}
    , decltype(_impl_.transpose_rows_and_columns_){false}
    , decltype(_impl_.collapse_consecutive_){false}
    , decltype(_impl_.automatic_delimiters_){false}
    , decltype(_impl_.automatic_offsets_){false}
  };
}

StructuredTextImportSettings::~StructuredTextImportSettings() {
  // @@protoc_insertion_point(destructor:TSK.StructuredTextImportSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredTextImportSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decimal_separators_.~RepeatedPtrField();
  _impl_.thousands_separators_.~RepeatedPtrField();
  _impl_.delimiters_.~RepeatedPtrField();
  _impl_.text_qualifiers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.column_offsets_;
}

void StructuredTextImportSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredTextImportSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.StructuredTextImportSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decimal_separators_.Clear();
  _impl_.thousands_separators_.Clear();
  _impl_.delimiters_.Clear();
  _impl_.text_qualifiers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.column_offsets_ != nullptr);
    _impl_.column_offsets_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.automatic_offsets_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.automatic_offsets_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructuredTextImportSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.StructuredTextImportType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::StructuredTextImportType_IsValid(val))) {
            _internal_set_type(static_cast<::TSK::StructuredTextImportType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required int32 starting_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_starting_row(&has_bits);
          _impl_.starting_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string decimal_separators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_decimal_separators();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.StructuredTextImportSettings.decimal_separators");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string thousands_separators = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_thousands_separators();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.StructuredTextImportSettings.thousands_separators");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool transpose_rows_and_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_transpose_rows_and_columns(&has_bits);
          _impl_.transpose_rows_and_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string delimiters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_delimiters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.StructuredTextImportSettings.delimiters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string text_qualifiers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_text_qualifiers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.StructuredTextImportSettings.text_qualifiers");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool collapse_consecutive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_collapse_consecutive(&has_bits);
          _impl_.collapse_consecutive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.IndexSet column_offsets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_offsets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automatic_delimiters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_automatic_delimiters(&has_bits);
          _impl_.automatic_delimiters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automatic_offsets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_automatic_offsets(&has_bits);
          _impl_.automatic_offsets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 source_encoding = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_source_encoding(&has_bits);
          _impl_.source_encoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredTextImportSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.StructuredTextImportSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.StructuredTextImportType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required int32 starting_row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_starting_row(), target);
  }

  // repeated string decimal_separators = 3;
  for (int i = 0, n = this->_internal_decimal_separators_size(); i < n; i++) {
    const auto& s = this->_internal_decimal_separators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.decimal_separators");
    target = stream->WriteString(3, s, target);
  }

  // repeated string thousands_separators = 4;
  for (int i = 0, n = this->_internal_thousands_separators_size(); i < n; i++) {
    const auto& s = this->_internal_thousands_separators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.thousands_separators");
    target = stream->WriteString(4, s, target);
  }

  // optional bool transpose_rows_and_columns = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_transpose_rows_and_columns(), target);
  }

  // repeated string delimiters = 6;
  for (int i = 0, n = this->_internal_delimiters_size(); i < n; i++) {
    const auto& s = this->_internal_delimiters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.delimiters");
    target = stream->WriteString(6, s, target);
  }

  // repeated string text_qualifiers = 7;
  for (int i = 0, n = this->_internal_text_qualifiers_size(); i < n; i++) {
    const auto& s = this->_internal_text_qualifiers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.text_qualifiers");
    target = stream->WriteString(7, s, target);
  }

  // optional bool collapse_consecutive = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_collapse_consecutive(), target);
  }

  // optional .TSP.IndexSet column_offsets = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::column_offsets(this),
        _Internal::column_offsets(this).GetCachedSize(), target, stream);
  }

  // optional bool automatic_delimiters = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_automatic_delimiters(), target);
  }

  // optional bool automatic_offsets = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_automatic_offsets(), target);
  }

  // optional uint64 source_encoding = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_source_encoding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.StructuredTextImportSettings)
  return target;
}

size_t StructuredTextImportSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.StructuredTextImportSettings)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .TSK.StructuredTextImportType type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_starting_row()) {
    // required int32 starting_row = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starting_row());
  }

  return total_size;
}
size_t StructuredTextImportSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.StructuredTextImportSettings)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.StructuredTextImportType type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required int32 starting_row = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starting_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string decimal_separators = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.decimal_separators_.size());
  for (int i = 0, n = _impl_.decimal_separators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.decimal_separators_.Get(i));
  }

  // repeated string thousands_separators = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.thousands_separators_.size());
  for (int i = 0, n = _impl_.thousands_separators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.thousands_separators_.Get(i));
  }

  // repeated string delimiters = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.delimiters_.size());
  for (int i = 0, n = _impl_.delimiters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.delimiters_.Get(i));
  }

  // repeated string text_qualifiers = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.text_qualifiers_.size());
  for (int i = 0, n = _impl_.text_qualifiers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.text_qualifiers_.Get(i));
  }

  // optional .TSP.IndexSet column_offsets = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_offsets_);
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint64 source_encoding = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_encoding());
    }

    // optional bool transpose_rows_and_columns = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool collapse_consecutive = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool automatic_delimiters = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool automatic_offsets = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructuredTextImportSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructuredTextImportSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructuredTextImportSettings::GetClassData() const { return &_class_data_; }


void StructuredTextImportSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructuredTextImportSettings*>(&to_msg);
  auto& from = static_cast<const StructuredTextImportSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.StructuredTextImportSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.decimal_separators_.MergeFrom(from._impl_.decimal_separators_);
  _this->_impl_.thousands_separators_.MergeFrom(from._impl_.thousands_separators_);
  _this->_impl_.delimiters_.MergeFrom(from._impl_.delimiters_);
  _this->_impl_.text_qualifiers_.MergeFrom(from._impl_.text_qualifiers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_offsets()->::TSP::IndexSet::MergeFrom(
          from._internal_column_offsets());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.starting_row_ = from._impl_.starting_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.source_encoding_ = from._impl_.source_encoding_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.transpose_rows_and_columns_ = from._impl_.transpose_rows_and_columns_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.collapse_consecutive_ = from._impl_.collapse_consecutive_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.automatic_delimiters_ = from._impl_.automatic_delimiters_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.automatic_offsets_ = from._impl_.automatic_offsets_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructuredTextImportSettings::CopyFrom(const StructuredTextImportSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.StructuredTextImportSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredTextImportSettings::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_column_offsets()) {
    if (!_impl_.column_offsets_->IsInitialized()) return false;
  }
  return true;
}

void StructuredTextImportSettings::InternalSwap(StructuredTextImportSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.decimal_separators_.InternalSwap(&other->_impl_.decimal_separators_);
  _impl_.thousands_separators_.InternalSwap(&other->_impl_.thousands_separators_);
  _impl_.delimiters_.InternalSwap(&other->_impl_.delimiters_);
  _impl_.text_qualifiers_.InternalSwap(&other->_impl_.text_qualifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredTextImportSettings, _impl_.automatic_offsets_)
      + sizeof(StructuredTextImportSettings::_impl_.automatic_offsets_)
      - PROTOBUF_FIELD_OFFSET(StructuredTextImportSettings, _impl_.column_offsets_)>(
          reinterpret_cast<char*>(&_impl_.column_offsets_),
          reinterpret_cast<char*>(&other->_impl_.column_offsets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredTextImportSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[65]);
}

// ===================================================================

class OperationStorageCommandOperationsEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageCommandOperationsEntry>()._impl_._has_bits_);
  static void set_has_command_identifier_same_as_revision_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_originated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coalesced_command_entry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OperationStorageCommandOperationsEntry::OperationStorageCommandOperationsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageCommandOperationsEntry)
}
OperationStorageCommandOperationsEntry::OperationStorageCommandOperationsEntry(const OperationStorageCommandOperationsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationStorageCommandOperationsEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_identifier_){from._impl_.command_identifier_}
    , decltype(_impl_.operations_){from._impl_.operations_}
    , decltype(_impl_.coalesced_command_entry_count_){}
    , decltype(_impl_.command_identifier_same_as_revision_identifier_){}
    , decltype(_impl_.server_originated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.coalesced_command_entry_count_, &from._impl_.coalesced_command_entry_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_originated_) -
    reinterpret_cast<char*>(&_impl_.coalesced_command_entry_count_)) + sizeof(_impl_.server_originated_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageCommandOperationsEntry)
}

inline void OperationStorageCommandOperationsEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_identifier_){arena}
    , decltype(_impl_.operations_){arena}
    , decltype(_impl_.coalesced_command_entry_count_){uint64_t{0u}}
    , decltype(_impl_.command_identifier_same_as_revision_identifier_){false}
    , decltype(_impl_.server_originated_){false}
  };
}

OperationStorageCommandOperationsEntry::~OperationStorageCommandOperationsEntry() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageCommandOperationsEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationStorageCommandOperationsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_identifier_.~RepeatedField();
  _impl_.operations_.~RepeatedPtrField();
}

void OperationStorageCommandOperationsEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationStorageCommandOperationsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageCommandOperationsEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_identifier_.Clear();
  _impl_.operations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.coalesced_command_entry_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_originated_) -
        reinterpret_cast<char*>(&_impl_.coalesced_command_entry_count_)) + sizeof(_impl_.server_originated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageCommandOperationsEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool command_identifier_same_as_revision_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_command_identifier_same_as_revision_identifier(&has_bits);
          _impl_.command_identifier_same_as_revision_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 command_identifier = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_command_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_command_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.Operation operations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool server_originated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_originated(&has_bits);
          _impl_.server_originated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 coalesced_command_entry_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_coalesced_command_entry_count(&has_bits);
          _impl_.coalesced_command_entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationStorageCommandOperationsEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageCommandOperationsEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool command_identifier_same_as_revision_identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_command_identifier_same_as_revision_identifier(), target);
  }

  // repeated fixed64 command_identifier = 2 [packed = true];
  if (this->_internal_command_identifier_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_command_identifier(), target);
  }

  // repeated .TSK.Operation operations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operations_size()); i < n; i++) {
    const auto& repfield = this->_internal_operations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool server_originated = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_server_originated(), target);
  }

  // optional uint64 coalesced_command_entry_count = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_coalesced_command_entry_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageCommandOperationsEntry)
  return target;
}

size_t OperationStorageCommandOperationsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageCommandOperationsEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 command_identifier = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_command_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .TSK.Operation operations = 3;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->_impl_.operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 coalesced_command_entry_count = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_coalesced_command_entry_count());
    }

    // optional bool command_identifier_same_as_revision_identifier = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool server_originated = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageCommandOperationsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationStorageCommandOperationsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageCommandOperationsEntry::GetClassData() const { return &_class_data_; }


void OperationStorageCommandOperationsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationStorageCommandOperationsEntry*>(&to_msg);
  auto& from = static_cast<const OperationStorageCommandOperationsEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageCommandOperationsEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.command_identifier_.MergeFrom(from._impl_.command_identifier_);
  _this->_impl_.operations_.MergeFrom(from._impl_.operations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.coalesced_command_entry_count_ = from._impl_.coalesced_command_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.command_identifier_same_as_revision_identifier_ = from._impl_.command_identifier_same_as_revision_identifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_originated_ = from._impl_.server_originated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageCommandOperationsEntry::CopyFrom(const OperationStorageCommandOperationsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageCommandOperationsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageCommandOperationsEntry::IsInitialized() const {
  return true;
}

void OperationStorageCommandOperationsEntry::InternalSwap(OperationStorageCommandOperationsEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.command_identifier_.InternalSwap(&other->_impl_.command_identifier_);
  _impl_.operations_.InternalSwap(&other->_impl_.operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorageCommandOperationsEntry, _impl_.server_originated_)
      + sizeof(OperationStorageCommandOperationsEntry::_impl_.server_originated_)
      - PROTOBUF_FIELD_OFFSET(OperationStorageCommandOperationsEntry, _impl_.coalesced_command_entry_count_)>(
          reinterpret_cast<char*>(&_impl_.coalesced_command_entry_count_),
          reinterpret_cast<char*>(&other->_impl_.coalesced_command_entry_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageCommandOperationsEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[66]);
}

// ===================================================================

class OperationStorageEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageEntry>()._impl_._has_bits_);
  static void set_has_document_revision_sequence_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_entry_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time_diff_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperationStorageEntry::OperationStorageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageEntry)
}
OperationStorageEntry::OperationStorageEntry(const OperationStorageEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationStorageEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_revision_identifier_){from._impl_.document_revision_identifier_}
    , decltype(_impl_.command_operation_entries_){from._impl_.command_operation_entries_}
    , decltype(_impl_.file_format_version_){from._impl_.file_format_version_}
    , /*decltype(_impl_._file_format_version_cached_byte_size_)*/{0}
    , decltype(_impl_.document_revision_sequence_delta_){}
    , decltype(_impl_.creation_time_diff_bucket_){}
    , decltype(_impl_.first_entry_creation_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.document_revision_sequence_delta_, &from._impl_.document_revision_sequence_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.first_entry_creation_time_) -
    reinterpret_cast<char*>(&_impl_.document_revision_sequence_delta_)) + sizeof(_impl_.first_entry_creation_time_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageEntry)
}

inline void OperationStorageEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_revision_identifier_){arena}
    , decltype(_impl_.command_operation_entries_){arena}
    , decltype(_impl_.file_format_version_){arena}
    , /*decltype(_impl_._file_format_version_cached_byte_size_)*/{0}
    , decltype(_impl_.document_revision_sequence_delta_){0}
    , decltype(_impl_.creation_time_diff_bucket_){0}
    , decltype(_impl_.first_entry_creation_time_){0}
  };
}

OperationStorageEntry::~OperationStorageEntry() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationStorageEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_revision_identifier_.~RepeatedField();
  _impl_.command_operation_entries_.~RepeatedPtrField();
  _impl_.file_format_version_.~RepeatedField();
}

void OperationStorageEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationStorageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_revision_identifier_.Clear();
  _impl_.command_operation_entries_.Clear();
  _impl_.file_format_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.document_revision_sequence_delta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.first_entry_creation_time_) -
        reinterpret_cast<char*>(&_impl_.document_revision_sequence_delta_)) + sizeof(_impl_.first_entry_creation_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 document_revision_identifier = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_document_revision_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 document_revision_sequence_delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_document_revision_sequence_delta(&has_bits);
          _impl_.document_revision_sequence_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command_operation_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double first_entry_creation_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_first_entry_creation_time(&has_bits);
          _impl_.first_entry_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 creation_time_diff_bucket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_creation_time_diff_bucket(&has_bits);
          _impl_.creation_time_diff_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 file_format_version = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_file_format_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_file_format_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationStorageEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 document_revision_identifier = 1 [packed = true];
  if (this->_internal_document_revision_identifier_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_document_revision_identifier(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 document_revision_sequence_delta = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_document_revision_sequence_delta(), target);
  }

  // repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_command_operation_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_command_operation_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double first_entry_creation_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_first_entry_creation_time(), target);
  }

  // optional int32 creation_time_diff_bucket = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_creation_time_diff_bucket(), target);
  }

  // repeated uint32 file_format_version = 6 [packed = true];
  {
    int byte_size = _impl_._file_format_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_file_format_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageEntry)
  return target;
}

size_t OperationStorageEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 document_revision_identifier = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_document_revision_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
  total_size += 1UL * this->_internal_command_operation_entries_size();
  for (const auto& msg : this->_impl_.command_operation_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 file_format_version = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.file_format_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._file_format_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 document_revision_sequence_delta = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_document_revision_sequence_delta());
    }

    // optional int32 creation_time_diff_bucket = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_creation_time_diff_bucket());
    }

    // optional double first_entry_creation_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationStorageEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageEntry::GetClassData() const { return &_class_data_; }


void OperationStorageEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationStorageEntry*>(&to_msg);
  auto& from = static_cast<const OperationStorageEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.document_revision_identifier_.MergeFrom(from._impl_.document_revision_identifier_);
  _this->_impl_.command_operation_entries_.MergeFrom(from._impl_.command_operation_entries_);
  _this->_impl_.file_format_version_.MergeFrom(from._impl_.file_format_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.document_revision_sequence_delta_ = from._impl_.document_revision_sequence_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.creation_time_diff_bucket_ = from._impl_.creation_time_diff_bucket_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.first_entry_creation_time_ = from._impl_.first_entry_creation_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageEntry::CopyFrom(const OperationStorageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageEntry::IsInitialized() const {
  return true;
}

void OperationStorageEntry::InternalSwap(OperationStorageEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.document_revision_identifier_.InternalSwap(&other->_impl_.document_revision_identifier_);
  _impl_.command_operation_entries_.InternalSwap(&other->_impl_.command_operation_entries_);
  _impl_.file_format_version_.InternalSwap(&other->_impl_.file_format_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorageEntry, _impl_.first_entry_creation_time_)
      + sizeof(OperationStorageEntry::_impl_.first_entry_creation_time_)
      - PROTOBUF_FIELD_OFFSET(OperationStorageEntry, _impl_.document_revision_sequence_delta_)>(
          reinterpret_cast<char*>(&_impl_.document_revision_sequence_delta_),
          reinterpret_cast<char*>(&other->_impl_.document_revision_sequence_delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[67]);
}

// ===================================================================

class OperationStorageEntryArray::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageEntryArray>()._impl_._has_bits_);
  static const ::TSP::LargeArray& large_array(const OperationStorageEntryArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
OperationStorageEntryArray::_Internal::large_array(const OperationStorageEntryArray* msg) {
  return *msg->_impl_.large_array_;
}
void OperationStorageEntryArray::clear_large_array() {
  if (_impl_.large_array_ != nullptr) _impl_.large_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OperationStorageEntryArray::OperationStorageEntryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageEntryArray)
}
OperationStorageEntryArray::OperationStorageEntryArray(const OperationStorageEntryArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationStorageEntryArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    _this->_impl_.large_array_ = new ::TSP::LargeArray(*from._impl_.large_array_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageEntryArray)
}

inline void OperationStorageEntryArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}
  };
}

OperationStorageEntryArray::~OperationStorageEntryArray() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageEntryArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationStorageEntryArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_array_;
}

void OperationStorageEntryArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationStorageEntryArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageEntryArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_ != nullptr);
    _impl_.large_array_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageEntryArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationStorageEntryArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageEntryArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array(this),
        _Internal::large_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageEntryArray)
  return target;
}

size_t OperationStorageEntryArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageEntryArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_array_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageEntryArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationStorageEntryArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageEntryArray::GetClassData() const { return &_class_data_; }


void OperationStorageEntryArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationStorageEntryArray*>(&to_msg);
  auto& from = static_cast<const OperationStorageEntryArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageEntryArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _this->_internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(
        from._internal_large_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageEntryArray::CopyFrom(const OperationStorageEntryArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageEntryArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageEntryArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!_impl_.large_array_->IsInitialized()) return false;
  }
  return true;
}

void OperationStorageEntryArray::InternalSwap(OperationStorageEntryArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_array_, other->_impl_.large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageEntryArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[68]);
}

// ===================================================================

class OperationStorageEntryArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageEntryArraySegment>()._impl_._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const OperationStorageEntryArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_document_revision_sequence_before_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_segment_first_entry_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::LargeArraySegment&
OperationStorageEntryArraySegment::_Internal::large_array_segment(const OperationStorageEntryArraySegment* msg) {
  return *msg->_impl_.large_array_segment_;
}
void OperationStorageEntryArraySegment::clear_large_array_segment() {
  if (_impl_.large_array_segment_ != nullptr) _impl_.large_array_segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OperationStorageEntryArraySegment::OperationStorageEntryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageEntryArraySegment)
}
OperationStorageEntryArraySegment::OperationStorageEntryArraySegment(const OperationStorageEntryArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationStorageEntryArraySegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elements_){from._impl_.elements_}
    , decltype(_impl_.large_array_segment_){nullptr}
    , decltype(_impl_.last_document_revision_sequence_before_segment_){}
    , decltype(_impl_.last_document_revision_sequence_){}
    , decltype(_impl_.segment_first_entry_creation_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    _this->_impl_.large_array_segment_ = new ::TSP::LargeArraySegment(*from._impl_.large_array_segment_);
  }
  ::memcpy(&_impl_.last_document_revision_sequence_before_segment_, &from._impl_.last_document_revision_sequence_before_segment_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.segment_first_entry_creation_time_) -
    reinterpret_cast<char*>(&_impl_.last_document_revision_sequence_before_segment_)) + sizeof(_impl_.segment_first_entry_creation_time_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageEntryArraySegment)
}

inline void OperationStorageEntryArraySegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elements_){arena}
    , decltype(_impl_.large_array_segment_){nullptr}
    , decltype(_impl_.last_document_revision_sequence_before_segment_){0}
    , decltype(_impl_.last_document_revision_sequence_){0}
    , decltype(_impl_.segment_first_entry_creation_time_){0}
  };
}

OperationStorageEntryArraySegment::~OperationStorageEntryArraySegment() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageEntryArraySegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationStorageEntryArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elements_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.large_array_segment_;
}

void OperationStorageEntryArraySegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationStorageEntryArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageEntryArraySegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elements_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_segment_ != nullptr);
    _impl_.large_array_segment_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.last_document_revision_sequence_before_segment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.segment_first_entry_creation_time_) -
        reinterpret_cast<char*>(&_impl_.last_document_revision_sequence_before_segment_)) + sizeof(_impl_.segment_first_entry_creation_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageEntryArraySegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.OperationStorageEntry elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_document_revision_sequence_before_segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_document_revision_sequence_before_segment(&has_bits);
          _impl_.last_document_revision_sequence_before_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_document_revision_sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_document_revision_sequence(&has_bits);
          _impl_.last_document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double segment_first_entry_creation_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_segment_first_entry_creation_time(&has_bits);
          _impl_.segment_first_entry_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationStorageEntryArraySegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageEntryArraySegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array_segment(this),
        _Internal::large_array_segment(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.OperationStorageEntry elements = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 last_document_revision_sequence_before_segment = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_document_revision_sequence_before_segment(), target);
  }

  // optional int32 last_document_revision_sequence = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_last_document_revision_sequence(), target);
  }

  // optional double segment_first_entry_creation_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_segment_first_entry_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageEntryArraySegment)
  return target;
}

size_t OperationStorageEntryArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageEntryArraySegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.OperationStorageEntry elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_impl_.elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.LargeArraySegment large_array_segment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.large_array_segment_);
    }

    // optional int32 last_document_revision_sequence_before_segment = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_document_revision_sequence_before_segment());
    }

    // optional int32 last_document_revision_sequence = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_document_revision_sequence());
    }

    // optional double segment_first_entry_creation_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageEntryArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationStorageEntryArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageEntryArraySegment::GetClassData() const { return &_class_data_; }


void OperationStorageEntryArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationStorageEntryArraySegment*>(&to_msg);
  auto& from = static_cast<const OperationStorageEntryArraySegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageEntryArraySegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elements_.MergeFrom(from._impl_.elements_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(
          from._internal_large_array_segment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.last_document_revision_sequence_before_segment_ = from._impl_.last_document_revision_sequence_before_segment_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_document_revision_sequence_ = from._impl_.last_document_revision_sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.segment_first_entry_creation_time_ = from._impl_.segment_first_entry_creation_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageEntryArraySegment::CopyFrom(const OperationStorageEntryArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageEntryArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageEntryArraySegment::IsInitialized() const {
  return true;
}

void OperationStorageEntryArraySegment::InternalSwap(OperationStorageEntryArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorageEntryArraySegment, _impl_.segment_first_entry_creation_time_)
      + sizeof(OperationStorageEntryArraySegment::_impl_.segment_first_entry_creation_time_)
      - PROTOBUF_FIELD_OFFSET(OperationStorageEntryArraySegment, _impl_.large_array_segment_)>(
          reinterpret_cast<char*>(&_impl_.large_array_segment_),
          reinterpret_cast<char*>(&other->_impl_.large_array_segment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageEntryArraySegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[69]);
}

// ===================================================================

class OperationStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorage>()._impl_._has_bits_);
  static const ::TSP::Reference& entries(const OperationStorage* msg);
  static void set_has_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_unskippable_document_revision_before_entries_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_unskippable_document_revision_in_entries_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::IndexSet& days_with_an_entry(const OperationStorage* msg);
  static void set_has_days_with_an_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::Reference&
OperationStorage::_Internal::entries(const OperationStorage* msg) {
  return *msg->_impl_.entries_;
}
const ::TSP::IndexSet&
OperationStorage::_Internal::days_with_an_entry(const OperationStorage* msg) {
  return *msg->_impl_.days_with_an_entry_;
}
void OperationStorage::clear_entries() {
  if (_impl_.entries_ != nullptr) _impl_.entries_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OperationStorage::clear_days_with_an_entry() {
  if (_impl_.days_with_an_entry_ != nullptr) _impl_.days_with_an_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
OperationStorage::OperationStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorage)
}
OperationStorage::OperationStorage(const OperationStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationStorage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_document_revision_identifier_){from._impl_.last_document_revision_identifier_}
    , decltype(_impl_.last_unskippable_document_revision_before_entries_identifier_){from._impl_.last_unskippable_document_revision_before_entries_identifier_}
    , decltype(_impl_.last_unskippable_document_revision_in_entries_identifier_){from._impl_.last_unskippable_document_revision_in_entries_identifier_}
    , decltype(_impl_.entries_){nullptr}
    , decltype(_impl_.days_with_an_entry_){nullptr}
    , decltype(_impl_.operation_count_){}
    , decltype(_impl_.last_document_revision_sequence_){}
    , decltype(_impl_.last_unskippable_document_revision_before_entries_sequence_){}
    , decltype(_impl_.last_unskippable_document_revision_in_entries_sequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entries()) {
    _this->_impl_.entries_ = new ::TSP::Reference(*from._impl_.entries_);
  }
  if (from._internal_has_days_with_an_entry()) {
    _this->_impl_.days_with_an_entry_ = new ::TSP::IndexSet(*from._impl_.days_with_an_entry_);
  }
  ::memcpy(&_impl_.operation_count_, &from._impl_.operation_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_unskippable_document_revision_in_entries_sequence_) -
    reinterpret_cast<char*>(&_impl_.operation_count_)) + sizeof(_impl_.last_unskippable_document_revision_in_entries_sequence_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorage)
}

inline void OperationStorage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_document_revision_identifier_){arena}
    , decltype(_impl_.last_unskippable_document_revision_before_entries_identifier_){arena}
    , decltype(_impl_.last_unskippable_document_revision_in_entries_identifier_){arena}
    , decltype(_impl_.entries_){nullptr}
    , decltype(_impl_.days_with_an_entry_){nullptr}
    , decltype(_impl_.operation_count_){uint64_t{0u}}
    , decltype(_impl_.last_document_revision_sequence_){0}
    , decltype(_impl_.last_unskippable_document_revision_before_entries_sequence_){0}
    , decltype(_impl_.last_unskippable_document_revision_in_entries_sequence_){0}
  };
}

OperationStorage::~OperationStorage() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.last_document_revision_identifier_.~RepeatedField();
  _impl_.last_unskippable_document_revision_before_entries_identifier_.~RepeatedField();
  _impl_.last_unskippable_document_revision_in_entries_identifier_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.entries_;
  if (this != internal_default_instance()) delete _impl_.days_with_an_entry_;
}

void OperationStorage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_document_revision_identifier_.Clear();
  _impl_.last_unskippable_document_revision_before_entries_identifier_.Clear();
  _impl_.last_unskippable_document_revision_in_entries_identifier_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.entries_ != nullptr);
      _impl_.entries_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.days_with_an_entry_ != nullptr);
      _impl_.days_with_an_entry_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.operation_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_unskippable_document_revision_in_entries_sequence_) -
        reinterpret_cast<char*>(&_impl_.operation_count_)) + sizeof(_impl_.last_unskippable_document_revision_in_entries_sequence_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entries(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 operation_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_operation_count(&has_bits);
          _impl_.operation_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_document_revision_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_document_revision_sequence(&has_bits);
          _impl_.last_document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 last_document_revision_identifier = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_last_document_revision_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_last_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_last_unskippable_document_revision_before_entries_sequence(&has_bits);
          _impl_.last_unskippable_document_revision_before_entries_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_last_unskippable_document_revision_before_entries_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_last_unskippable_document_revision_before_entries_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_last_unskippable_document_revision_in_entries_sequence(&has_bits);
          _impl_.last_unskippable_document_revision_in_entries_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_last_unskippable_document_revision_in_entries_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_last_unskippable_document_revision_in_entries_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.IndexSet days_with_an_entry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_days_with_an_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationStorage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference entries = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entries(this),
        _Internal::entries(this).GetCachedSize(), target, stream);
  }

  // required uint64 operation_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operation_count(), target);
  }

  // optional int32 last_document_revision_sequence = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_document_revision_sequence(), target);
  }

  // repeated fixed64 last_document_revision_identifier = 4 [packed = true];
  if (this->_internal_last_document_revision_identifier_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_last_document_revision_identifier(), target);
  }

  // optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_last_unskippable_document_revision_before_entries_sequence(), target);
  }

  // repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
  if (this->_internal_last_unskippable_document_revision_before_entries_identifier_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_last_unskippable_document_revision_before_entries_identifier(), target);
  }

  // optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_last_unskippable_document_revision_in_entries_sequence(), target);
  }

  // repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
  if (this->_internal_last_unskippable_document_revision_in_entries_identifier_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_last_unskippable_document_revision_in_entries_identifier(), target);
  }

  // optional .TSP.IndexSet days_with_an_entry = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::days_with_an_entry(this),
        _Internal::days_with_an_entry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorage)
  return target;
}

size_t OperationStorage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.OperationStorage)
  size_t total_size = 0;

  if (_internal_has_entries()) {
    // required .TSP.Reference entries = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entries_);
  }

  if (_internal_has_operation_count()) {
    // required uint64 operation_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_operation_count());
  }

  return total_size;
}
size_t OperationStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSP.Reference entries = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entries_);

    // required uint64 operation_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_operation_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 last_document_revision_identifier = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_last_document_revision_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_last_unskippable_document_revision_before_entries_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_last_unskippable_document_revision_in_entries_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional .TSP.IndexSet days_with_an_entry = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.days_with_an_entry_);
  }

  if (cached_has_bits & 0x00000038u) {
    // optional int32 last_document_revision_sequence = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_document_revision_sequence());
    }

    // optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_unskippable_document_revision_before_entries_sequence());
    }

    // optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_unskippable_document_revision_in_entries_sequence());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationStorage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorage::GetClassData() const { return &_class_data_; }


void OperationStorage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationStorage*>(&to_msg);
  auto& from = static_cast<const OperationStorage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.last_document_revision_identifier_.MergeFrom(from._impl_.last_document_revision_identifier_);
  _this->_impl_.last_unskippable_document_revision_before_entries_identifier_.MergeFrom(from._impl_.last_unskippable_document_revision_before_entries_identifier_);
  _this->_impl_.last_unskippable_document_revision_in_entries_identifier_.MergeFrom(from._impl_.last_unskippable_document_revision_in_entries_identifier_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_entries()->::TSP::Reference::MergeFrom(
          from._internal_entries());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_days_with_an_entry()->::TSP::IndexSet::MergeFrom(
          from._internal_days_with_an_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.operation_count_ = from._impl_.operation_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_document_revision_sequence_ = from._impl_.last_document_revision_sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.last_unskippable_document_revision_before_entries_sequence_ = from._impl_.last_unskippable_document_revision_before_entries_sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.last_unskippable_document_revision_in_entries_sequence_ = from._impl_.last_unskippable_document_revision_in_entries_sequence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorage::CopyFrom(const OperationStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_entries()) {
    if (!_impl_.entries_->IsInitialized()) return false;
  }
  if (_internal_has_days_with_an_entry()) {
    if (!_impl_.days_with_an_entry_->IsInitialized()) return false;
  }
  return true;
}

void OperationStorage::InternalSwap(OperationStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.last_document_revision_identifier_.InternalSwap(&other->_impl_.last_document_revision_identifier_);
  _impl_.last_unskippable_document_revision_before_entries_identifier_.InternalSwap(&other->_impl_.last_unskippable_document_revision_before_entries_identifier_);
  _impl_.last_unskippable_document_revision_in_entries_identifier_.InternalSwap(&other->_impl_.last_unskippable_document_revision_in_entries_identifier_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorage, _impl_.last_unskippable_document_revision_in_entries_sequence_)
      + sizeof(OperationStorage::_impl_.last_unskippable_document_revision_in_entries_sequence_)
      - PROTOBUF_FIELD_OFFSET(OperationStorage, _impl_.entries_)>(
          reinterpret_cast<char*>(&_impl_.entries_),
          reinterpret_cast<char*>(&other->_impl_.entries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[70]);
}

// ===================================================================

class OutgoingCommandQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueue>()._impl_._has_bits_);
  static const ::TSP::LargeObjectArray& large_object_array(const OutgoingCommandQueue* msg);
  static void set_has_large_object_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeObjectArray&
OutgoingCommandQueue::_Internal::large_object_array(const OutgoingCommandQueue* msg) {
  return *msg->_impl_.large_object_array_;
}
void OutgoingCommandQueue::clear_large_object_array() {
  if (_impl_.large_object_array_ != nullptr) _impl_.large_object_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OutgoingCommandQueue::OutgoingCommandQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueue)
}
OutgoingCommandQueue::OutgoingCommandQueue(const OutgoingCommandQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutgoingCommandQueue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array()) {
    _this->_impl_.large_object_array_ = new ::TSP::LargeObjectArray(*from._impl_.large_object_array_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueue)
}

inline void OutgoingCommandQueue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_){nullptr}
  };
}

OutgoingCommandQueue::~OutgoingCommandQueue() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingCommandQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_object_array_;
}

void OutgoingCommandQueue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingCommandQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_object_array_ != nullptr);
    _impl_.large_object_array_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeObjectArray large_object_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutgoingCommandQueue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeObjectArray large_object_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_object_array(this),
        _Internal::large_object_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueue)
  return target;
}

size_t OutgoingCommandQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeObjectArray large_object_array = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_object_array_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutgoingCommandQueue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueue::GetClassData() const { return &_class_data_; }


void OutgoingCommandQueue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutgoingCommandQueue*>(&to_msg);
  auto& from = static_cast<const OutgoingCommandQueue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array()) {
    _this->_internal_mutable_large_object_array()->::TSP::LargeObjectArray::MergeFrom(
        from._internal_large_object_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueue::CopyFrom(const OutgoingCommandQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueue::IsInitialized() const {
  if (_internal_has_large_object_array()) {
    if (!_impl_.large_object_array_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueue::InternalSwap(OutgoingCommandQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_object_array_, other->_impl_.large_object_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[71]);
}

// ===================================================================

class OutgoingCommandQueueSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueueSegment>()._impl_._has_bits_);
  static const ::TSP::LargeObjectArraySegment& large_object_array_segment(const OutgoingCommandQueueSegment* msg);
  static void set_has_large_object_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeObjectArraySegment&
OutgoingCommandQueueSegment::_Internal::large_object_array_segment(const OutgoingCommandQueueSegment* msg) {
  return *msg->_impl_.large_object_array_segment_;
}
void OutgoingCommandQueueSegment::clear_large_object_array_segment() {
  if (_impl_.large_object_array_segment_ != nullptr) _impl_.large_object_array_segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OutgoingCommandQueueSegment::OutgoingCommandQueueSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueueSegment)
}
OutgoingCommandQueueSegment::OutgoingCommandQueueSegment(const OutgoingCommandQueueSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutgoingCommandQueueSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_segment_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array_segment()) {
    _this->_impl_.large_object_array_segment_ = new ::TSP::LargeObjectArraySegment(*from._impl_.large_object_array_segment_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueueSegment)
}

inline void OutgoingCommandQueueSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_object_array_segment_){nullptr}
  };
}

OutgoingCommandQueueSegment::~OutgoingCommandQueueSegment() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueueSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingCommandQueueSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_object_array_segment_;
}

void OutgoingCommandQueueSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingCommandQueueSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueueSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_object_array_segment_ != nullptr);
    _impl_.large_object_array_segment_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueueSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutgoingCommandQueueSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueueSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_object_array_segment(this),
        _Internal::large_object_array_segment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueueSegment)
  return target;
}

size_t OutgoingCommandQueueSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueueSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_object_array_segment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueueSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutgoingCommandQueueSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueueSegment::GetClassData() const { return &_class_data_; }


void OutgoingCommandQueueSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutgoingCommandQueueSegment*>(&to_msg);
  auto& from = static_cast<const OutgoingCommandQueueSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueueSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array_segment()) {
    _this->_internal_mutable_large_object_array_segment()->::TSP::LargeObjectArraySegment::MergeFrom(
        from._internal_large_object_array_segment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueueSegment::CopyFrom(const OutgoingCommandQueueSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueueSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueueSegment::IsInitialized() const {
  if (_internal_has_large_object_array_segment()) {
    if (!_impl_.large_object_array_segment_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueueSegment::InternalSwap(OutgoingCommandQueueSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_object_array_segment_, other->_impl_.large_object_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueueSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[72]);
}

// ===================================================================

class DataReferenceRecord_ContainerUUIDToReferencedDataPair::_Internal {
 public:
  using HasBits = decltype(std::declval<DataReferenceRecord_ContainerUUIDToReferencedDataPair>()._impl_._has_bits_);
  static const ::TSP::UUID& container_uuid(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg);
  static void set_has_container_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& referenced_data(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg);
  static void set_has_referenced_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
DataReferenceRecord_ContainerUUIDToReferencedDataPair::_Internal::container_uuid(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg) {
  return *msg->_impl_.container_uuid_;
}
const ::TSP::DataReference&
DataReferenceRecord_ContainerUUIDToReferencedDataPair::_Internal::referenced_data(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg) {
  return *msg->_impl_.referenced_data_;
}
void DataReferenceRecord_ContainerUUIDToReferencedDataPair::clear_container_uuid() {
  if (_impl_.container_uuid_ != nullptr) _impl_.container_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DataReferenceRecord_ContainerUUIDToReferencedDataPair::clear_referenced_data() {
  if (_impl_.referenced_data_ != nullptr) _impl_.referenced_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DataReferenceRecord_ContainerUUIDToReferencedDataPair::DataReferenceRecord_ContainerUUIDToReferencedDataPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
}
DataReferenceRecord_ContainerUUIDToReferencedDataPair::DataReferenceRecord_ContainerUUIDToReferencedDataPair(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataReferenceRecord_ContainerUUIDToReferencedDataPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.container_uuid_){nullptr}
    , decltype(_impl_.referenced_data_){nullptr}
    , decltype(_impl_.reference_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container_uuid()) {
    _this->_impl_.container_uuid_ = new ::TSP::UUID(*from._impl_.container_uuid_);
  }
  if (from._internal_has_referenced_data()) {
    _this->_impl_.referenced_data_ = new ::TSP::DataReference(*from._impl_.referenced_data_);
  }
  _this->_impl_.reference_count_ = from._impl_.reference_count_;
  // @@protoc_insertion_point(copy_constructor:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
}

inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.container_uuid_){nullptr}
    , decltype(_impl_.referenced_data_){nullptr}
    , decltype(_impl_.reference_count_){0u}
  };
}

DataReferenceRecord_ContainerUUIDToReferencedDataPair::~DataReferenceRecord_ContainerUUIDToReferencedDataPair() {
  // @@protoc_insertion_point(destructor:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.container_uuid_;
  if (this != internal_default_instance()) delete _impl_.referenced_data_;
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.container_uuid_ != nullptr);
      _impl_.container_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.referenced_data_ != nullptr);
      _impl_.referenced_data_->Clear();
    }
  }
  _impl_.reference_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataReferenceRecord_ContainerUUIDToReferencedDataPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID container_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.DataReference referenced_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_referenced_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 reference_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reference_count(&has_bits);
          _impl_.reference_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataReferenceRecord_ContainerUUIDToReferencedDataPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID container_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::container_uuid(this),
        _Internal::container_uuid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.DataReference referenced_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::referenced_data(this),
        _Internal::referenced_data(this).GetCachedSize(), target, stream);
  }

  // required uint32 reference_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reference_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  return target;
}

size_t DataReferenceRecord_ContainerUUIDToReferencedDataPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  size_t total_size = 0;

  if (_internal_has_container_uuid()) {
    // required .TSP.UUID container_uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.container_uuid_);
  }

  if (_internal_has_referenced_data()) {
    // required .TSP.DataReference referenced_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.referenced_data_);
  }

  if (_internal_has_reference_count()) {
    // required uint32 reference_count = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reference_count());
  }

  return total_size;
}
size_t DataReferenceRecord_ContainerUUIDToReferencedDataPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID container_uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.container_uuid_);

    // required .TSP.DataReference referenced_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.referenced_data_);

    // required uint32 reference_count = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reference_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataReferenceRecord_ContainerUUIDToReferencedDataPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataReferenceRecord_ContainerUUIDToReferencedDataPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataReferenceRecord_ContainerUUIDToReferencedDataPair::GetClassData() const { return &_class_data_; }


void DataReferenceRecord_ContainerUUIDToReferencedDataPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataReferenceRecord_ContainerUUIDToReferencedDataPair*>(&to_msg);
  auto& from = static_cast<const DataReferenceRecord_ContainerUUIDToReferencedDataPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_container_uuid()->::TSP::UUID::MergeFrom(
          from._internal_container_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_referenced_data()->::TSP::DataReference::MergeFrom(
          from._internal_referenced_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reference_count_ = from._impl_.reference_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::CopyFrom(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_container_uuid()) {
    if (!_impl_.container_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_referenced_data()) {
    if (!_impl_.referenced_data_->IsInitialized()) return false;
  }
  return true;
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::InternalSwap(DataReferenceRecord_ContainerUUIDToReferencedDataPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataReferenceRecord_ContainerUUIDToReferencedDataPair, _impl_.reference_count_)
      + sizeof(DataReferenceRecord_ContainerUUIDToReferencedDataPair::_impl_.reference_count_)
      - PROTOBUF_FIELD_OFFSET(DataReferenceRecord_ContainerUUIDToReferencedDataPair, _impl_.container_uuid_)>(
          reinterpret_cast<char*>(&_impl_.container_uuid_),
          reinterpret_cast<char*>(&other->_impl_.container_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataReferenceRecord_ContainerUUIDToReferencedDataPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[73]);
}

// ===================================================================

class DataReferenceRecord::_Internal {
 public:
};

void DataReferenceRecord::clear_unbounded_referenced_datas() {
  _impl_.unbounded_referenced_datas_.Clear();
}
DataReferenceRecord::DataReferenceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.DataReferenceRecord)
}
DataReferenceRecord::DataReferenceRecord(const DataReferenceRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataReferenceRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.added_container_uuid_to_referenced_data_pairs_){from._impl_.added_container_uuid_to_referenced_data_pairs_}
    , decltype(_impl_.removed_container_uuid_to_referenced_data_pairs_){from._impl_.removed_container_uuid_to_referenced_data_pairs_}
    , decltype(_impl_.unbounded_referenced_datas_){from._impl_.unbounded_referenced_datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.DataReferenceRecord)
}

inline void DataReferenceRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.added_container_uuid_to_referenced_data_pairs_){arena}
    , decltype(_impl_.removed_container_uuid_to_referenced_data_pairs_){arena}
    , decltype(_impl_.unbounded_referenced_datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataReferenceRecord::~DataReferenceRecord() {
  // @@protoc_insertion_point(destructor:TSK.DataReferenceRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataReferenceRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.added_container_uuid_to_referenced_data_pairs_.~RepeatedPtrField();
  _impl_.removed_container_uuid_to_referenced_data_pairs_.~RepeatedPtrField();
  _impl_.unbounded_referenced_datas_.~RepeatedPtrField();
}

void DataReferenceRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataReferenceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DataReferenceRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.added_container_uuid_to_referenced_data_pairs_.Clear();
  _impl_.removed_container_uuid_to_referenced_data_pairs_.Clear();
  _impl_.unbounded_referenced_datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataReferenceRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_added_container_uuid_to_referenced_data_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_container_uuid_to_referenced_data_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference unbounded_referenced_datas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unbounded_referenced_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataReferenceRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DataReferenceRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_added_container_uuid_to_referenced_data_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_added_container_uuid_to_referenced_data_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_container_uuid_to_referenced_data_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed_container_uuid_to_referenced_data_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.DataReference unbounded_referenced_datas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unbounded_referenced_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_unbounded_referenced_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DataReferenceRecord)
  return target;
}

size_t DataReferenceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DataReferenceRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
  total_size += 1UL * this->_internal_added_container_uuid_to_referenced_data_pairs_size();
  for (const auto& msg : this->_impl_.added_container_uuid_to_referenced_data_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
  total_size += 1UL * this->_internal_removed_container_uuid_to_referenced_data_pairs_size();
  for (const auto& msg : this->_impl_.removed_container_uuid_to_referenced_data_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataReference unbounded_referenced_datas = 3;
  total_size += 1UL * this->_internal_unbounded_referenced_datas_size();
  for (const auto& msg : this->_impl_.unbounded_referenced_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataReferenceRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataReferenceRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataReferenceRecord::GetClassData() const { return &_class_data_; }


void DataReferenceRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataReferenceRecord*>(&to_msg);
  auto& from = static_cast<const DataReferenceRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.DataReferenceRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.added_container_uuid_to_referenced_data_pairs_.MergeFrom(from._impl_.added_container_uuid_to_referenced_data_pairs_);
  _this->_impl_.removed_container_uuid_to_referenced_data_pairs_.MergeFrom(from._impl_.removed_container_uuid_to_referenced_data_pairs_);
  _this->_impl_.unbounded_referenced_datas_.MergeFrom(from._impl_.unbounded_referenced_datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataReferenceRecord::CopyFrom(const DataReferenceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DataReferenceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReferenceRecord::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.added_container_uuid_to_referenced_data_pairs_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.removed_container_uuid_to_referenced_data_pairs_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.unbounded_referenced_datas_))
    return false;
  return true;
}

void DataReferenceRecord::InternalSwap(DataReferenceRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.added_container_uuid_to_referenced_data_pairs_.InternalSwap(&other->_impl_.added_container_uuid_to_referenced_data_pairs_);
  _impl_.removed_container_uuid_to_referenced_data_pairs_.InternalSwap(&other->_impl_.removed_container_uuid_to_referenced_data_pairs_);
  _impl_.unbounded_referenced_datas_.InternalSwap(&other->_impl_.unbounded_referenced_datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataReferenceRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[74]);
}

// ===================================================================

class CommandAssetChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAssetChunkArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandAssetChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asset_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_asset_chunk_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resume_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_materialized_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandAssetChunkArchive::_Internal::super(const CommandAssetChunkArchive* msg) {
  return *msg->_impl_.super_;
}
CommandAssetChunkArchive::CommandAssetChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandAssetChunkArchive)
}
CommandAssetChunkArchive::CommandAssetChunkArchive(const CommandAssetChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandAssetChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.asset_chunk_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.asset_chunk_length_){}
    , decltype(_impl_.resume_position_){}
    , decltype(_impl_.materialized_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_asset_chunk()) {
    _this->_impl_.asset_chunk_.Set(from._internal_asset_chunk(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.asset_chunk_length_, &from._impl_.asset_chunk_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.materialized_length_) -
    reinterpret_cast<char*>(&_impl_.asset_chunk_length_)) + sizeof(_impl_.materialized_length_));
  // @@protoc_insertion_point(copy_constructor:TSK.CommandAssetChunkArchive)
}

inline void CommandAssetChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.asset_chunk_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.asset_chunk_length_){int64_t{0}}
    , decltype(_impl_.resume_position_){int64_t{0}}
    , decltype(_impl_.materialized_length_){int64_t{0}}
  };
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandAssetChunkArchive::~CommandAssetChunkArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandAssetChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandAssetChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digest_.Destroy();
  _impl_.asset_chunk_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandAssetChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandAssetChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandAssetChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.asset_chunk_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.asset_chunk_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.materialized_length_) -
        reinterpret_cast<char*>(&_impl_.asset_chunk_length_)) + sizeof(_impl_.materialized_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAssetChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.CommandAssetChunkArchive.digest");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string asset_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_asset_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.CommandAssetChunkArchive.asset_chunk");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 asset_chunk_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_asset_chunk_length(&has_bits);
          _impl_.asset_chunk_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 resume_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_resume_position(&has_bits);
          _impl_.resume_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 materialized_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_materialized_length(&has_bits);
          _impl_.materialized_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandAssetChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandAssetChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CommandAssetChunkArchive.digest");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // optional string asset_chunk = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_asset_chunk().data(), static_cast<int>(this->_internal_asset_chunk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CommandAssetChunkArchive.asset_chunk");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset_chunk(), target);
  }

  // required int64 asset_chunk_length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_asset_chunk_length(), target);
  }

  // required int64 resume_position = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_resume_position(), target);
  }

  // required int64 materialized_length = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_materialized_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandAssetChunkArchive)
  return target;
}

size_t CommandAssetChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.CommandAssetChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_asset_chunk_length()) {
    // required int64 asset_chunk_length = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_asset_chunk_length());
  }

  if (_internal_has_resume_position()) {
    // required int64 resume_position = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_resume_position());
  }

  if (_internal_has_materialized_length()) {
    // required int64 materialized_length = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_materialized_length());
  }

  return total_size;
}
size_t CommandAssetChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandAssetChunkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required int64 asset_chunk_length = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_asset_chunk_length());

    // required int64 resume_position = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_resume_position());

    // required int64 materialized_length = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_materialized_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string digest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digest());
    }

    // optional string asset_chunk = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asset_chunk());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandAssetChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandAssetChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandAssetChunkArchive::GetClassData() const { return &_class_data_; }


void CommandAssetChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandAssetChunkArchive*>(&to_msg);
  auto& from = static_cast<const CommandAssetChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandAssetChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_asset_chunk(from._internal_asset_chunk());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.asset_chunk_length_ = from._impl_.asset_chunk_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.resume_position_ = from._impl_.resume_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.materialized_length_ = from._impl_.materialized_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandAssetChunkArchive::CopyFrom(const CommandAssetChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandAssetChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAssetChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandAssetChunkArchive::InternalSwap(CommandAssetChunkArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_chunk_, lhs_arena,
      &other->_impl_.asset_chunk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAssetChunkArchive, _impl_.materialized_length_)
      + sizeof(CommandAssetChunkArchive::_impl_.materialized_length_)
      - PROTOBUF_FIELD_OFFSET(CommandAssetChunkArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAssetChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[75]);
}

// ===================================================================

class AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetUploadStatusCommandArchive_AssetUploadStatusInfo>()._impl_._has_bits_);
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AssetUploadStatusCommandArchive_AssetUploadStatusInfo::AssetUploadStatusCommandArchive_AssetUploadStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
}
AssetUploadStatusCommandArchive_AssetUploadStatusInfo::AssetUploadStatusCommandArchive_AssetUploadStatusInfo(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetUploadStatusCommandArchive_AssetUploadStatusInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.upload_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.upload_status_ = from._impl_.upload_status_;
  // @@protoc_insertion_point(copy_constructor:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
}

inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.upload_status_){0}
  };
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetUploadStatusCommandArchive_AssetUploadStatusInfo::~AssetUploadStatusCommandArchive_AssetUploadStatusInfo() {
  // @@protoc_insertion_point(destructor:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digest_.Destroy();
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.digest_.ClearNonDefaultToEmpty();
  }
  _impl_.upload_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataUploadStatus upload_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataUploadStatus_IsValid(val))) {
            _internal_set_upload_status(static_cast<::TSP::DataUploadStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string digest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // optional .TSP.DataUploadStatus upload_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_upload_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  return target;
}

size_t AssetUploadStatusCommandArchive_AssetUploadStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string digest = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digest());
    }

    // optional .TSP.DataUploadStatus upload_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_upload_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetUploadStatusCommandArchive_AssetUploadStatusInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetUploadStatusCommandArchive_AssetUploadStatusInfo::GetClassData() const { return &_class_data_; }


void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetUploadStatusCommandArchive_AssetUploadStatusInfo*>(&to_msg);
  auto& from = static_cast<const AssetUploadStatusCommandArchive_AssetUploadStatusInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.upload_status_ = from._impl_.upload_status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::CopyFrom(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetUploadStatusCommandArchive_AssetUploadStatusInfo::IsInitialized() const {
  return true;
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::InternalSwap(AssetUploadStatusCommandArchive_AssetUploadStatusInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  swap(_impl_.upload_status_, other->_impl_.upload_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetUploadStatusCommandArchive_AssetUploadStatusInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[76]);
}

// ===================================================================

class AssetUploadStatusCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetUploadStatusCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const AssetUploadStatusCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
AssetUploadStatusCommandArchive::_Internal::super(const AssetUploadStatusCommandArchive* msg) {
  return *msg->_impl_.super_;
}
AssetUploadStatusCommandArchive::AssetUploadStatusCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.AssetUploadStatusCommandArchive)
}
AssetUploadStatusCommandArchive::AssetUploadStatusCommandArchive(const AssetUploadStatusCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetUploadStatusCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_list_){from._impl_.info_list_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.AssetUploadStatusCommandArchive)
}

inline void AssetUploadStatusCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_list_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

AssetUploadStatusCommandArchive::~AssetUploadStatusCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.AssetUploadStatusCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetUploadStatusCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void AssetUploadStatusCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetUploadStatusCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AssetUploadStatusCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetUploadStatusCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetUploadStatusCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AssetUploadStatusCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AssetUploadStatusCommandArchive)
  return target;
}

size_t AssetUploadStatusCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AssetUploadStatusCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
  total_size += 1UL * this->_internal_info_list_size();
  for (const auto& msg : this->_impl_.info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetUploadStatusCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetUploadStatusCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetUploadStatusCommandArchive::GetClassData() const { return &_class_data_; }


void AssetUploadStatusCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetUploadStatusCommandArchive*>(&to_msg);
  auto& from = static_cast<const AssetUploadStatusCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.AssetUploadStatusCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_list_.MergeFrom(from._impl_.info_list_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetUploadStatusCommandArchive::CopyFrom(const AssetUploadStatusCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AssetUploadStatusCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetUploadStatusCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void AssetUploadStatusCommandArchive::InternalSwap(AssetUploadStatusCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.info_list_.InternalSwap(&other->_impl_.info_list_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetUploadStatusCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[77]);
}

// ===================================================================

class AssetUnmaterializedOnServerCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetUnmaterializedOnServerCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const AssetUnmaterializedOnServerCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
AssetUnmaterializedOnServerCommandArchive::_Internal::super(const AssetUnmaterializedOnServerCommandArchive* msg) {
  return *msg->_impl_.super_;
}
AssetUnmaterializedOnServerCommandArchive::AssetUnmaterializedOnServerCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.AssetUnmaterializedOnServerCommandArchive)
}
AssetUnmaterializedOnServerCommandArchive::AssetUnmaterializedOnServerCommandArchive(const AssetUnmaterializedOnServerCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetUnmaterializedOnServerCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_list_){from._impl_.digest_list_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.AssetUnmaterializedOnServerCommandArchive)
}

inline void AssetUnmaterializedOnServerCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_list_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

AssetUnmaterializedOnServerCommandArchive::~AssetUnmaterializedOnServerCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.AssetUnmaterializedOnServerCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetUnmaterializedOnServerCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digest_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void AssetUnmaterializedOnServerCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetUnmaterializedOnServerCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.digest_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetUnmaterializedOnServerCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string digest_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_digest_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.AssetUnmaterializedOnServerCommandArchive.digest_list");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetUnmaterializedOnServerCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated string digest_list = 2;
  for (int i = 0, n = this->_internal_digest_list_size(); i < n; i++) {
    const auto& s = this->_internal_digest_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AssetUnmaterializedOnServerCommandArchive.digest_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AssetUnmaterializedOnServerCommandArchive)
  return target;
}

size_t AssetUnmaterializedOnServerCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string digest_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.digest_list_.size());
  for (int i = 0, n = _impl_.digest_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.digest_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetUnmaterializedOnServerCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetUnmaterializedOnServerCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetUnmaterializedOnServerCommandArchive::GetClassData() const { return &_class_data_; }


void AssetUnmaterializedOnServerCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetUnmaterializedOnServerCommandArchive*>(&to_msg);
  auto& from = static_cast<const AssetUnmaterializedOnServerCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.digest_list_.MergeFrom(from._impl_.digest_list_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetUnmaterializedOnServerCommandArchive::CopyFrom(const AssetUnmaterializedOnServerCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetUnmaterializedOnServerCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void AssetUnmaterializedOnServerCommandArchive::InternalSwap(AssetUnmaterializedOnServerCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.digest_list_.InternalSwap(&other->_impl_.digest_list_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetUnmaterializedOnServerCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[78]);
}

// ===================================================================

class PencilAnnotationUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationUIState>()._impl_._has_bits_);
  static void set_has_current_tool_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Color& pen_tool_color(const PencilAnnotationUIState* msg);
  static void set_has_pen_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pen_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pen_tool_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Color& highlighter_tool_color(const PencilAnnotationUIState* msg);
  static void set_has_highlighter_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_highlighter_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_highlighter_tool_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSP::Color&
PencilAnnotationUIState::_Internal::pen_tool_color(const PencilAnnotationUIState* msg) {
  return *msg->_impl_.pen_tool_color_;
}
const ::TSP::Color&
PencilAnnotationUIState::_Internal::highlighter_tool_color(const PencilAnnotationUIState* msg) {
  return *msg->_impl_.highlighter_tool_color_;
}
void PencilAnnotationUIState::clear_pen_tool_color() {
  if (_impl_.pen_tool_color_ != nullptr) _impl_.pen_tool_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PencilAnnotationUIState::clear_highlighter_tool_color() {
  if (_impl_.highlighter_tool_color_ != nullptr) _impl_.highlighter_tool_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PencilAnnotationUIState::PencilAnnotationUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.PencilAnnotationUIState)
}
PencilAnnotationUIState::PencilAnnotationUIState(const PencilAnnotationUIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PencilAnnotationUIState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pen_tool_color_){nullptr}
    , decltype(_impl_.highlighter_tool_color_){nullptr}
    , decltype(_impl_.current_tool_type_){}
    , decltype(_impl_.pen_tool_opacity_){}
    , decltype(_impl_.pen_tool_width_){}
    , decltype(_impl_.highlighter_tool_opacity_){}
    , decltype(_impl_.highlighter_tool_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pen_tool_color()) {
    _this->_impl_.pen_tool_color_ = new ::TSP::Color(*from._impl_.pen_tool_color_);
  }
  if (from._internal_has_highlighter_tool_color()) {
    _this->_impl_.highlighter_tool_color_ = new ::TSP::Color(*from._impl_.highlighter_tool_color_);
  }
  ::memcpy(&_impl_.current_tool_type_, &from._impl_.current_tool_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.highlighter_tool_width_) -
    reinterpret_cast<char*>(&_impl_.current_tool_type_)) + sizeof(_impl_.highlighter_tool_width_));
  // @@protoc_insertion_point(copy_constructor:TSK.PencilAnnotationUIState)
}

inline void PencilAnnotationUIState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pen_tool_color_){nullptr}
    , decltype(_impl_.highlighter_tool_color_){nullptr}
    , decltype(_impl_.current_tool_type_){0}
    , decltype(_impl_.pen_tool_opacity_){0}
    , decltype(_impl_.pen_tool_width_){0}
    , decltype(_impl_.highlighter_tool_opacity_){0}
    , decltype(_impl_.highlighter_tool_width_){0}
  };
}

PencilAnnotationUIState::~PencilAnnotationUIState() {
  // @@protoc_insertion_point(destructor:TSK.PencilAnnotationUIState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PencilAnnotationUIState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pen_tool_color_;
  if (this != internal_default_instance()) delete _impl_.highlighter_tool_color_;
}

void PencilAnnotationUIState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PencilAnnotationUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.PencilAnnotationUIState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pen_tool_color_ != nullptr);
      _impl_.pen_tool_color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.highlighter_tool_color_ != nullptr);
      _impl_.highlighter_tool_color_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.current_tool_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.highlighter_tool_width_) -
        reinterpret_cast<char*>(&_impl_.current_tool_type_)) + sizeof(_impl_.highlighter_tool_width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationUIState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::PencilAnnotationUIState_PencilAnnotationToolType_IsValid(val))) {
            _internal_set_current_tool_type(static_cast<::TSK::PencilAnnotationUIState_PencilAnnotationToolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color pen_tool_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen_tool_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pen_tool_opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_pen_tool_opacity(&has_bits);
          _impl_.pen_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pen_tool_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_pen_tool_width(&has_bits);
          _impl_.pen_tool_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color highlighter_tool_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlighter_tool_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float highlighter_tool_opacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_highlighter_tool_opacity(&has_bits);
          _impl_.highlighter_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float highlighter_tool_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_highlighter_tool_width(&has_bits);
          _impl_.highlighter_tool_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PencilAnnotationUIState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.PencilAnnotationUIState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_current_tool_type(), target);
  }

  // optional .TSP.Color pen_tool_color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pen_tool_color(this),
        _Internal::pen_tool_color(this).GetCachedSize(), target, stream);
  }

  // optional float pen_tool_opacity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pen_tool_opacity(), target);
  }

  // optional float pen_tool_width = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_pen_tool_width(), target);
  }

  // optional .TSP.Color highlighter_tool_color = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::highlighter_tool_color(this),
        _Internal::highlighter_tool_color(this).GetCachedSize(), target, stream);
  }

  // optional float highlighter_tool_opacity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_highlighter_tool_opacity(), target);
  }

  // optional float highlighter_tool_width = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_highlighter_tool_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.PencilAnnotationUIState)
  return target;
}

size_t PencilAnnotationUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.PencilAnnotationUIState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Color pen_tool_color = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pen_tool_color_);
    }

    // optional .TSP.Color highlighter_tool_color = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.highlighter_tool_color_);
    }

    // optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_current_tool_type());
    }

    // optional float pen_tool_opacity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pen_tool_width = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float highlighter_tool_opacity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float highlighter_tool_width = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationUIState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PencilAnnotationUIState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationUIState::GetClassData() const { return &_class_data_; }


void PencilAnnotationUIState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PencilAnnotationUIState*>(&to_msg);
  auto& from = static_cast<const PencilAnnotationUIState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.PencilAnnotationUIState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pen_tool_color()->::TSP::Color::MergeFrom(
          from._internal_pen_tool_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_highlighter_tool_color()->::TSP::Color::MergeFrom(
          from._internal_highlighter_tool_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.current_tool_type_ = from._impl_.current_tool_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pen_tool_opacity_ = from._impl_.pen_tool_opacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pen_tool_width_ = from._impl_.pen_tool_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.highlighter_tool_opacity_ = from._impl_.highlighter_tool_opacity_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.highlighter_tool_width_ = from._impl_.highlighter_tool_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationUIState::CopyFrom(const PencilAnnotationUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.PencilAnnotationUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationUIState::IsInitialized() const {
  if (_internal_has_pen_tool_color()) {
    if (!_impl_.pen_tool_color_->IsInitialized()) return false;
  }
  if (_internal_has_highlighter_tool_color()) {
    if (!_impl_.highlighter_tool_color_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationUIState::InternalSwap(PencilAnnotationUIState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PencilAnnotationUIState, _impl_.highlighter_tool_width_)
      + sizeof(PencilAnnotationUIState::_impl_.highlighter_tool_width_)
      - PROTOBUF_FIELD_OFFSET(PencilAnnotationUIState, _impl_.pen_tool_color_)>(
          reinterpret_cast<char*>(&_impl_.pen_tool_color_),
          reinterpret_cast<char*>(&other->_impl_.pen_tool_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationUIState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[79]);
}

// ===================================================================

class CollaboratorCursorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaboratorCursorArchive>()._impl_._has_bits_);
  static const ::TSP::UUIDPath& id_path(const CollaboratorCursorArchive* msg);
  static void set_has_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::UUIDPath&
CollaboratorCursorArchive::_Internal::id_path(const CollaboratorCursorArchive* msg) {
  return *msg->_impl_.id_path_;
}
void CollaboratorCursorArchive::clear_id_path() {
  if (_impl_.id_path_ != nullptr) _impl_.id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CollaboratorCursorArchive::CollaboratorCursorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CollaboratorCursorArchive)
}
CollaboratorCursorArchive::CollaboratorCursorArchive(const CollaboratorCursorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaboratorCursorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_id_path()) {
    _this->_impl_.id_path_ = new ::TSP::UUIDPath(*from._impl_.id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaboratorCursorArchive)
}

inline void CollaboratorCursorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_path_){nullptr}
  };
}

CollaboratorCursorArchive::~CollaboratorCursorArchive() {
  // @@protoc_insertion_point(destructor:TSK.CollaboratorCursorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaboratorCursorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  if (this != internal_default_instance()) delete _impl_.id_path_;
}

void CollaboratorCursorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaboratorCursorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaboratorCursorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.id_path_ != nullptr);
    _impl_.id_path_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaboratorCursorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUIDPath id_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800u <= tag && tag < 8000u)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaboratorCursorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaboratorCursorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUIDPath id_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id_path(this),
        _Internal::id_path(this).GetCachedSize(), target, stream);
  }

  // Extension range [100, 1000)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 100, 1000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaboratorCursorArchive)
  return target;
}

size_t CollaboratorCursorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaboratorCursorArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath id_path = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaboratorCursorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaboratorCursorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaboratorCursorArchive::GetClassData() const { return &_class_data_; }


void CollaboratorCursorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaboratorCursorArchive*>(&to_msg);
  auto& from = static_cast<const CollaboratorCursorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaboratorCursorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id_path()) {
    _this->_internal_mutable_id_path()->::TSP::UUIDPath::MergeFrom(
        from._internal_id_path());
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaboratorCursorArchive::CopyFrom(const CollaboratorCursorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaboratorCursorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaboratorCursorArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_id_path()) {
    if (!_impl_.id_path_->IsInitialized()) return false;
  }
  return true;
}

void CollaboratorCursorArchive::InternalSwap(CollaboratorCursorArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.id_path_, other->_impl_.id_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaboratorCursorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[80]);
}

// ===================================================================

class ActivityStreamArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityStreamArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& acknowledged_activity_array(const ActivityStreamArchive* msg);
  static void set_has_acknowledged_activity_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& unacknowledged_local_activity_array(const ActivityStreamArchive* msg);
  static void set_has_unacknowledged_local_activity_array(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& author_cache(const ActivityStreamArchive* msg);
  static void set_has_author_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& unacknowledged_remote_activity_array(const ActivityStreamArchive* msg);
  static void set_has_unacknowledged_remote_activity_array(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_did_upgrade_comments_to_activities(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::ActivityStreamTransformationStateArchive& activity_stream_transformation_state(const ActivityStreamArchive* msg);
  static void set_has_activity_stream_transformation_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::ActivityStreamActivityCounterArchive& activity_counter(const ActivityStreamArchive* msg);
  static void set_has_activity_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSP::Reference&
ActivityStreamArchive::_Internal::acknowledged_activity_array(const ActivityStreamArchive* msg) {
  return *msg->_impl_.acknowledged_activity_array_;
}
const ::TSP::Reference&
ActivityStreamArchive::_Internal::unacknowledged_local_activity_array(const ActivityStreamArchive* msg) {
  return *msg->_impl_.unacknowledged_local_activity_array_;
}
const ::TSP::Reference&
ActivityStreamArchive::_Internal::author_cache(const ActivityStreamArchive* msg) {
  return *msg->_impl_.author_cache_;
}
const ::TSP::Reference&
ActivityStreamArchive::_Internal::unacknowledged_remote_activity_array(const ActivityStreamArchive* msg) {
  return *msg->_impl_.unacknowledged_remote_activity_array_;
}
const ::TSK::ActivityStreamTransformationStateArchive&
ActivityStreamArchive::_Internal::activity_stream_transformation_state(const ActivityStreamArchive* msg) {
  return *msg->_impl_.activity_stream_transformation_state_;
}
const ::TSK::ActivityStreamActivityCounterArchive&
ActivityStreamArchive::_Internal::activity_counter(const ActivityStreamArchive* msg) {
  return *msg->_impl_.activity_counter_;
}
void ActivityStreamArchive::clear_acknowledged_activity_array() {
  if (_impl_.acknowledged_activity_array_ != nullptr) _impl_.acknowledged_activity_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActivityStreamArchive::clear_unacknowledged_local_activity_array() {
  if (_impl_.unacknowledged_local_activity_array_ != nullptr) _impl_.unacknowledged_local_activity_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ActivityStreamArchive::clear_author_cache() {
  if (_impl_.author_cache_ != nullptr) _impl_.author_cache_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ActivityStreamArchive::clear_unacknowledged_remote_activity_array() {
  if (_impl_.unacknowledged_remote_activity_array_ != nullptr) _impl_.unacknowledged_remote_activity_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ActivityStreamArchive::ActivityStreamArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamArchive)
}
ActivityStreamArchive::ActivityStreamArchive(const ActivityStreamArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledged_activity_array_){nullptr}
    , decltype(_impl_.unacknowledged_local_activity_array_){nullptr}
    , decltype(_impl_.author_cache_){nullptr}
    , decltype(_impl_.unacknowledged_remote_activity_array_){nullptr}
    , decltype(_impl_.activity_stream_transformation_state_){nullptr}
    , decltype(_impl_.activity_counter_){nullptr}
    , decltype(_impl_.did_upgrade_comments_to_activities_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acknowledged_activity_array()) {
    _this->_impl_.acknowledged_activity_array_ = new ::TSP::Reference(*from._impl_.acknowledged_activity_array_);
  }
  if (from._internal_has_unacknowledged_local_activity_array()) {
    _this->_impl_.unacknowledged_local_activity_array_ = new ::TSP::Reference(*from._impl_.unacknowledged_local_activity_array_);
  }
  if (from._internal_has_author_cache()) {
    _this->_impl_.author_cache_ = new ::TSP::Reference(*from._impl_.author_cache_);
  }
  if (from._internal_has_unacknowledged_remote_activity_array()) {
    _this->_impl_.unacknowledged_remote_activity_array_ = new ::TSP::Reference(*from._impl_.unacknowledged_remote_activity_array_);
  }
  if (from._internal_has_activity_stream_transformation_state()) {
    _this->_impl_.activity_stream_transformation_state_ = new ::TSK::ActivityStreamTransformationStateArchive(*from._impl_.activity_stream_transformation_state_);
  }
  if (from._internal_has_activity_counter()) {
    _this->_impl_.activity_counter_ = new ::TSK::ActivityStreamActivityCounterArchive(*from._impl_.activity_counter_);
  }
  _this->_impl_.did_upgrade_comments_to_activities_ = from._impl_.did_upgrade_comments_to_activities_;
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamArchive)
}

inline void ActivityStreamArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledged_activity_array_){nullptr}
    , decltype(_impl_.unacknowledged_local_activity_array_){nullptr}
    , decltype(_impl_.author_cache_){nullptr}
    , decltype(_impl_.unacknowledged_remote_activity_array_){nullptr}
    , decltype(_impl_.activity_stream_transformation_state_){nullptr}
    , decltype(_impl_.activity_counter_){nullptr}
    , decltype(_impl_.did_upgrade_comments_to_activities_){false}
  };
}

ActivityStreamArchive::~ActivityStreamArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.acknowledged_activity_array_;
  if (this != internal_default_instance()) delete _impl_.unacknowledged_local_activity_array_;
  if (this != internal_default_instance()) delete _impl_.author_cache_;
  if (this != internal_default_instance()) delete _impl_.unacknowledged_remote_activity_array_;
  if (this != internal_default_instance()) delete _impl_.activity_stream_transformation_state_;
  if (this != internal_default_instance()) delete _impl_.activity_counter_;
}

void ActivityStreamArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.acknowledged_activity_array_ != nullptr);
      _impl_.acknowledged_activity_array_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.unacknowledged_local_activity_array_ != nullptr);
      _impl_.unacknowledged_local_activity_array_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.author_cache_ != nullptr);
      _impl_.author_cache_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.unacknowledged_remote_activity_array_ != nullptr);
      _impl_.unacknowledged_remote_activity_array_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.activity_stream_transformation_state_ != nullptr);
      _impl_.activity_stream_transformation_state_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.activity_counter_ != nullptr);
      _impl_.activity_counter_->Clear();
    }
  }
  _impl_.did_upgrade_comments_to_activities_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference acknowledged_activity_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acknowledged_activity_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference unacknowledged_local_activity_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unacknowledged_local_activity_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference author_cache = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_author_cache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference unacknowledged_remote_activity_array = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unacknowledged_remote_activity_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_upgrade_comments_to_activities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_did_upgrade_comments_to_activities(&has_bits);
          _impl_.did_upgrade_comments_to_activities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.ActivityStreamTransformationStateArchive activity_stream_transformation_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_stream_transformation_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.ActivityStreamActivityCounterArchive activity_counter = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_counter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference acknowledged_activity_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::acknowledged_activity_array(this),
        _Internal::acknowledged_activity_array(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference unacknowledged_local_activity_array = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::unacknowledged_local_activity_array(this),
        _Internal::unacknowledged_local_activity_array(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference author_cache = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::author_cache(this),
        _Internal::author_cache(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference unacknowledged_remote_activity_array = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::unacknowledged_remote_activity_array(this),
        _Internal::unacknowledged_remote_activity_array(this).GetCachedSize(), target, stream);
  }

  // optional bool did_upgrade_comments_to_activities = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_did_upgrade_comments_to_activities(), target);
  }

  // optional .TSK.ActivityStreamTransformationStateArchive activity_stream_transformation_state = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::activity_stream_transformation_state(this),
        _Internal::activity_stream_transformation_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.ActivityStreamActivityCounterArchive activity_counter = 16;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::activity_counter(this),
        _Internal::activity_counter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamArchive)
  return target;
}

size_t ActivityStreamArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Reference acknowledged_activity_array = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acknowledged_activity_array_);
    }

    // optional .TSP.Reference unacknowledged_local_activity_array = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unacknowledged_local_activity_array_);
    }

    // optional .TSP.Reference author_cache = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.author_cache_);
    }

    // optional .TSP.Reference unacknowledged_remote_activity_array = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unacknowledged_remote_activity_array_);
    }

    // optional .TSK.ActivityStreamTransformationStateArchive activity_stream_transformation_state = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activity_stream_transformation_state_);
    }

    // optional .TSK.ActivityStreamActivityCounterArchive activity_counter = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activity_counter_);
    }

    // optional bool did_upgrade_comments_to_activities = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamArchive::GetClassData() const { return &_class_data_; }


void ActivityStreamArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamArchive*>(&to_msg);
  auto& from = static_cast<const ActivityStreamArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_acknowledged_activity_array()->::TSP::Reference::MergeFrom(
          from._internal_acknowledged_activity_array());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_unacknowledged_local_activity_array()->::TSP::Reference::MergeFrom(
          from._internal_unacknowledged_local_activity_array());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_author_cache()->::TSP::Reference::MergeFrom(
          from._internal_author_cache());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_unacknowledged_remote_activity_array()->::TSP::Reference::MergeFrom(
          from._internal_unacknowledged_remote_activity_array());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_activity_stream_transformation_state()->::TSK::ActivityStreamTransformationStateArchive::MergeFrom(
          from._internal_activity_stream_transformation_state());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_activity_counter()->::TSK::ActivityStreamActivityCounterArchive::MergeFrom(
          from._internal_activity_counter());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.did_upgrade_comments_to_activities_ = from._impl_.did_upgrade_comments_to_activities_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamArchive::CopyFrom(const ActivityStreamArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamArchive::IsInitialized() const {
  if (_internal_has_acknowledged_activity_array()) {
    if (!_impl_.acknowledged_activity_array_->IsInitialized()) return false;
  }
  if (_internal_has_unacknowledged_local_activity_array()) {
    if (!_impl_.unacknowledged_local_activity_array_->IsInitialized()) return false;
  }
  if (_internal_has_author_cache()) {
    if (!_impl_.author_cache_->IsInitialized()) return false;
  }
  if (_internal_has_unacknowledged_remote_activity_array()) {
    if (!_impl_.unacknowledged_remote_activity_array_->IsInitialized()) return false;
  }
  if (_internal_has_activity_stream_transformation_state()) {
    if (!_impl_.activity_stream_transformation_state_->IsInitialized()) return false;
  }
  return true;
}

void ActivityStreamArchive::InternalSwap(ActivityStreamArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityStreamArchive, _impl_.did_upgrade_comments_to_activities_)
      + sizeof(ActivityStreamArchive::_impl_.did_upgrade_comments_to_activities_)
      - PROTOBUF_FIELD_OFFSET(ActivityStreamArchive, _impl_.acknowledged_activity_array_)>(
          reinterpret_cast<char*>(&_impl_.acknowledged_activity_array_),
          reinterpret_cast<char*>(&other->_impl_.acknowledged_activity_array_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[81]);
}

// ===================================================================

class ActivityStreamActivityArray::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityStreamActivityArray>()._impl_._has_bits_);
  static const ::TSP::LargeObjectArray& large_array(const ActivityStreamActivityArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeObjectArray&
ActivityStreamActivityArray::_Internal::large_array(const ActivityStreamActivityArray* msg) {
  return *msg->_impl_.large_array_;
}
void ActivityStreamActivityArray::clear_large_array() {
  if (_impl_.large_array_ != nullptr) _impl_.large_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActivityStreamActivityArray::ActivityStreamActivityArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamActivityArray)
}
ActivityStreamActivityArray::ActivityStreamActivityArray(const ActivityStreamActivityArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamActivityArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    _this->_impl_.large_array_ = new ::TSP::LargeObjectArray(*from._impl_.large_array_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamActivityArray)
}

inline void ActivityStreamActivityArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}
  };
}

ActivityStreamActivityArray::~ActivityStreamActivityArray() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamActivityArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamActivityArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_array_;
}

void ActivityStreamActivityArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamActivityArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamActivityArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_ != nullptr);
    _impl_.large_array_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamActivityArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeObjectArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamActivityArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamActivityArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeObjectArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array(this),
        _Internal::large_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamActivityArray)
  return target;
}

size_t ActivityStreamActivityArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamActivityArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeObjectArray large_array = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_array_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamActivityArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamActivityArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamActivityArray::GetClassData() const { return &_class_data_; }


void ActivityStreamActivityArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamActivityArray*>(&to_msg);
  auto& from = static_cast<const ActivityStreamActivityArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamActivityArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _this->_internal_mutable_large_array()->::TSP::LargeObjectArray::MergeFrom(
        from._internal_large_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamActivityArray::CopyFrom(const ActivityStreamActivityArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamActivityArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamActivityArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!_impl_.large_array_->IsInitialized()) return false;
  }
  return true;
}

void ActivityStreamActivityArray::InternalSwap(ActivityStreamActivityArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_array_, other->_impl_.large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamActivityArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[82]);
}

// ===================================================================

class ActivityStreamActivityArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityStreamActivityArraySegment>()._impl_._has_bits_);
  static const ::TSP::LargeObjectArraySegment& large_array_segment(const ActivityStreamActivityArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeObjectArraySegment&
ActivityStreamActivityArraySegment::_Internal::large_array_segment(const ActivityStreamActivityArraySegment* msg) {
  return *msg->_impl_.large_array_segment_;
}
void ActivityStreamActivityArraySegment::clear_large_array_segment() {
  if (_impl_.large_array_segment_ != nullptr) _impl_.large_array_segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActivityStreamActivityArraySegment::ActivityStreamActivityArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamActivityArraySegment)
}
ActivityStreamActivityArraySegment::ActivityStreamActivityArraySegment(const ActivityStreamActivityArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamActivityArraySegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_segment_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    _this->_impl_.large_array_segment_ = new ::TSP::LargeObjectArraySegment(*from._impl_.large_array_segment_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamActivityArraySegment)
}

inline void ActivityStreamActivityArraySegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_segment_){nullptr}
  };
}

ActivityStreamActivityArraySegment::~ActivityStreamActivityArraySegment() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamActivityArraySegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamActivityArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_array_segment_;
}

void ActivityStreamActivityArraySegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamActivityArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamActivityArraySegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_segment_ != nullptr);
    _impl_.large_array_segment_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamActivityArraySegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeObjectArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamActivityArraySegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamActivityArraySegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeObjectArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array_segment(this),
        _Internal::large_array_segment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamActivityArraySegment)
  return target;
}

size_t ActivityStreamActivityArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamActivityArraySegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeObjectArraySegment large_array_segment = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_array_segment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamActivityArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamActivityArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamActivityArraySegment::GetClassData() const { return &_class_data_; }


void ActivityStreamActivityArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamActivityArraySegment*>(&to_msg);
  auto& from = static_cast<const ActivityStreamActivityArraySegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamActivityArraySegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array_segment()) {
    _this->_internal_mutable_large_array_segment()->::TSP::LargeObjectArraySegment::MergeFrom(
        from._internal_large_array_segment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamActivityArraySegment::CopyFrom(const ActivityStreamActivityArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamActivityArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamActivityArraySegment::IsInitialized() const {
  if (_internal_has_large_array_segment()) {
    if (!_impl_.large_array_segment_->IsInitialized()) return false;
  }
  return true;
}

void ActivityStreamActivityArraySegment::InternalSwap(ActivityStreamActivityArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_array_segment_, other->_impl_.large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamActivityArraySegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[83]);
}

// ===================================================================

class ActivityArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& author_identifier(const ActivityArchive* msg);
  static void set_has_author_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nondirectional_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_send_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Date& timestamp(const ActivityArchive* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::ActivityNavigationInfoArchive& additional_navigation_info(const ActivityArchive* msg);
  static void set_has_additional_navigation_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_did_prepare_serialized_string_on_server(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_oldest_revision_sequence_of_next_activities(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_action_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSP::UUID&
ActivityArchive::_Internal::author_identifier(const ActivityArchive* msg) {
  return *msg->_impl_.author_identifier_;
}
const ::TSP::Date&
ActivityArchive::_Internal::timestamp(const ActivityArchive* msg) {
  return *msg->_impl_.timestamp_;
}
const ::TSK::ActivityNavigationInfoArchive&
ActivityArchive::_Internal::additional_navigation_info(const ActivityArchive* msg) {
  return *msg->_impl_.additional_navigation_info_;
}
void ActivityArchive::clear_cursor_collection_persistence_wrappers() {
  _impl_.cursor_collection_persistence_wrappers_.Clear();
}
void ActivityArchive::clear_author_identifier() {
  if (_impl_.author_identifier_ != nullptr) _impl_.author_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActivityArchive::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ActivityArchive::ActivityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityArchive)
}
ActivityArchive::ActivityArchive(const ActivityArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cursor_collection_persistence_wrappers_){from._impl_.cursor_collection_persistence_wrappers_}
    , decltype(_impl_.min_updatable_version_){from._impl_.min_updatable_version_}
    , /*decltype(_impl_._min_updatable_version_cached_byte_size_)*/{0}
    , decltype(_impl_.author_identifier_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.additional_navigation_info_){nullptr}
    , decltype(_impl_.nondirectional_action_type_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.revision_sequence_){}
    , decltype(_impl_.should_send_notification_){}
    , decltype(_impl_.did_prepare_serialized_string_on_server_){}
    , decltype(_impl_.oldest_revision_sequence_of_next_activities_){}
    , decltype(_impl_.action_sub_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_author_identifier()) {
    _this->_impl_.author_identifier_ = new ::TSP::UUID(*from._impl_.author_identifier_);
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::TSP::Date(*from._impl_.timestamp_);
  }
  if (from._internal_has_additional_navigation_info()) {
    _this->_impl_.additional_navigation_info_ = new ::TSK::ActivityNavigationInfoArchive(*from._impl_.additional_navigation_info_);
  }
  ::memcpy(&_impl_.nondirectional_action_type_, &from._impl_.nondirectional_action_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_sub_type_) -
    reinterpret_cast<char*>(&_impl_.nondirectional_action_type_)) + sizeof(_impl_.action_sub_type_));
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityArchive)
}

inline void ActivityArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cursor_collection_persistence_wrappers_){arena}
    , decltype(_impl_.min_updatable_version_){arena}
    , /*decltype(_impl_._min_updatable_version_cached_byte_size_)*/{0}
    , decltype(_impl_.author_identifier_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.additional_navigation_info_){nullptr}
    , decltype(_impl_.nondirectional_action_type_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.revision_sequence_){0}
    , decltype(_impl_.should_send_notification_){false}
    , decltype(_impl_.did_prepare_serialized_string_on_server_){false}
    , decltype(_impl_.oldest_revision_sequence_of_next_activities_){0}
    , decltype(_impl_.action_sub_type_){0}
  };
}

ActivityArchive::~ActivityArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cursor_collection_persistence_wrappers_.~RepeatedPtrField();
  _impl_.min_updatable_version_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.author_identifier_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.additional_navigation_info_;
}

void ActivityArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cursor_collection_persistence_wrappers_.Clear();
  _impl_.min_updatable_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.author_identifier_ != nullptr);
      _impl_.author_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.additional_navigation_info_ != nullptr);
      _impl_.additional_navigation_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.nondirectional_action_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.did_prepare_serialized_string_on_server_) -
        reinterpret_cast<char*>(&_impl_.nondirectional_action_type_)) + sizeof(_impl_.did_prepare_serialized_string_on_server_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.oldest_revision_sequence_of_next_activities_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.action_sub_type_) -
        reinterpret_cast<char*>(&_impl_.oldest_revision_sequence_of_next_activities_)) + sizeof(_impl_.action_sub_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference cursor_collection_persistence_wrappers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cursor_collection_persistence_wrappers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID author_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_author_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nondirectional_action_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nondirectional_action_type(&has_bits);
          _impl_.nondirectional_action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_direction(&has_bits);
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_send_notification = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_should_send_notification(&has_bits);
          _impl_.should_send_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 revision_sequence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_revision_sequence(&has_bits);
          _impl_.revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.ActivityNavigationInfoArchive additional_navigation_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional_navigation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_prepare_serialized_string_on_server = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_did_prepare_serialized_string_on_server(&has_bits);
          _impl_.did_prepare_serialized_string_on_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 oldest_revision_sequence_of_next_activities = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_oldest_revision_sequence_of_next_activities(&has_bits);
          _impl_.oldest_revision_sequence_of_next_activities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 action_sub_type = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_action_sub_type(&has_bits);
          _impl_.action_sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 min_updatable_version = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_min_updatable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_min_updatable_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference cursor_collection_persistence_wrappers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cursor_collection_persistence_wrappers_size()); i < n; i++) {
    const auto& repfield = this->_internal_cursor_collection_persistence_wrappers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID author_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::author_identifier(this),
        _Internal::author_identifier(this).GetCachedSize(), target, stream);
  }

  // optional int32 nondirectional_action_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_nondirectional_action_type(), target);
  }

  // optional int32 direction = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_direction(), target);
  }

  // optional bool should_send_notification = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_should_send_notification(), target);
  }

  // optional .TSP.Date timestamp = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional int32 revision_sequence = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_revision_sequence(), target);
  }

  // optional .TSK.ActivityNavigationInfoArchive additional_navigation_info = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::additional_navigation_info(this),
        _Internal::additional_navigation_info(this).GetCachedSize(), target, stream);
  }

  // optional bool did_prepare_serialized_string_on_server = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_did_prepare_serialized_string_on_server(), target);
  }

  // optional int32 oldest_revision_sequence_of_next_activities = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_oldest_revision_sequence_of_next_activities(), target);
  }

  // optional int32 action_sub_type = 11 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_action_sub_type(), target);
  }

  // repeated uint32 min_updatable_version = 12 [packed = true];
  {
    int byte_size = _impl_._min_updatable_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_min_updatable_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityArchive)
  return target;
}

size_t ActivityArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference cursor_collection_persistence_wrappers = 1;
  total_size += 1UL * this->_internal_cursor_collection_persistence_wrappers_size();
  for (const auto& msg : this->_impl_.cursor_collection_persistence_wrappers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 min_updatable_version = 12 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.min_updatable_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._min_updatable_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.UUID author_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.author_identifier_);
    }

    // optional .TSP.Date timestamp = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // optional .TSK.ActivityNavigationInfoArchive additional_navigation_info = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.additional_navigation_info_);
    }

    // optional int32 nondirectional_action_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nondirectional_action_type());
    }

    // optional int32 direction = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_direction());
    }

    // optional int32 revision_sequence = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_revision_sequence());
    }

    // optional bool should_send_notification = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool did_prepare_serialized_string_on_server = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 oldest_revision_sequence_of_next_activities = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_oldest_revision_sequence_of_next_activities());
    }

    // optional int32 action_sub_type = 11 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action_sub_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityArchive::GetClassData() const { return &_class_data_; }


void ActivityArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityArchive*>(&to_msg);
  auto& from = static_cast<const ActivityArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cursor_collection_persistence_wrappers_.MergeFrom(from._impl_.cursor_collection_persistence_wrappers_);
  _this->_impl_.min_updatable_version_.MergeFrom(from._impl_.min_updatable_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_author_identifier()->::TSP::UUID::MergeFrom(
          from._internal_author_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::TSP::Date::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_additional_navigation_info()->::TSK::ActivityNavigationInfoArchive::MergeFrom(
          from._internal_additional_navigation_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nondirectional_action_type_ = from._impl_.nondirectional_action_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.revision_sequence_ = from._impl_.revision_sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.should_send_notification_ = from._impl_.should_send_notification_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.did_prepare_serialized_string_on_server_ = from._impl_.did_prepare_serialized_string_on_server_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.oldest_revision_sequence_of_next_activities_ = from._impl_.oldest_revision_sequence_of_next_activities_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.action_sub_type_ = from._impl_.action_sub_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityArchive::CopyFrom(const ActivityArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cursor_collection_persistence_wrappers_))
    return false;
  if (_internal_has_author_identifier()) {
    if (!_impl_.author_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_timestamp()) {
    if (!_impl_.timestamp_->IsInitialized()) return false;
  }
  if (_internal_has_additional_navigation_info()) {
    if (!_impl_.additional_navigation_info_->IsInitialized()) return false;
  }
  return true;
}

void ActivityArchive::InternalSwap(ActivityArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cursor_collection_persistence_wrappers_.InternalSwap(&other->_impl_.cursor_collection_persistence_wrappers_);
  _impl_.min_updatable_version_.InternalSwap(&other->_impl_.min_updatable_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityArchive, _impl_.action_sub_type_)
      + sizeof(ActivityArchive::_impl_.action_sub_type_)
      - PROTOBUF_FIELD_OFFSET(ActivityArchive, _impl_.author_identifier_)>(
          reinterpret_cast<char*>(&_impl_.author_identifier_),
          reinterpret_cast<char*>(&other->_impl_.author_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[84]);
}

// ===================================================================

class ActivityAuthorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityAuthorArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Color& color(const ActivityAuthorArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_public_author(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_share_participant_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Color&
ActivityAuthorArchive::_Internal::color(const ActivityAuthorArchive* msg) {
  return *msg->_impl_.color_;
}
void ActivityAuthorArchive::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ActivityAuthorArchive::ActivityAuthorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityAuthorArchive)
}
ActivityAuthorArchive::ActivityAuthorArchive(const ActivityAuthorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityAuthorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_ids_){from._impl_.public_ids_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.share_participant_id_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.is_public_author_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_share_participant_id()) {
    _this->_impl_.share_participant_id_.Set(from._internal_share_participant_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::TSP::Color(*from._impl_.color_);
  }
  _this->_impl_.is_public_author_ = from._impl_.is_public_author_;
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityAuthorArchive)
}

inline void ActivityAuthorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_ids_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.share_participant_id_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.is_public_author_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivityAuthorArchive::~ActivityAuthorArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityAuthorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityAuthorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_ids_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.share_participant_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_;
}

void ActivityAuthorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityAuthorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityAuthorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.share_participant_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
  }
  _impl_.is_public_author_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityAuthorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.ActivityAuthorArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string public_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSK.ActivityAuthorArchive.public_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_public_author = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_public_author(&has_bits);
          _impl_.is_public_author_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string share_participant_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_share_participant_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.ActivityAuthorArchive.share_participant_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityAuthorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityAuthorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ActivityAuthorArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // repeated string public_ids = 3;
  for (int i = 0, n = this->_internal_public_ids_size(); i < n; i++) {
    const auto& s = this->_internal_public_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ActivityAuthorArchive.public_ids");
    target = stream->WriteString(3, s, target);
  }

  // optional bool is_public_author = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_public_author(), target);
  }

  // optional string share_participant_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_share_participant_id().data(), static_cast<int>(this->_internal_share_participant_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ActivityAuthorArchive.share_participant_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_share_participant_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityAuthorArchive)
  return target;
}

size_t ActivityAuthorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityAuthorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string public_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.public_ids_.size());
  for (int i = 0, n = _impl_.public_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.public_ids_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string share_participant_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_share_participant_id());
    }

    // optional .TSP.Color color = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional bool is_public_author = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityAuthorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityAuthorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityAuthorArchive::GetClassData() const { return &_class_data_; }


void ActivityAuthorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityAuthorArchive*>(&to_msg);
  auto& from = static_cast<const ActivityAuthorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityAuthorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.public_ids_.MergeFrom(from._impl_.public_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_share_participant_id(from._internal_share_participant_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_color()->::TSP::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_public_author_ = from._impl_.is_public_author_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityAuthorArchive::CopyFrom(const ActivityAuthorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityAuthorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAuthorArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  return true;
}

void ActivityAuthorArchive::InternalSwap(ActivityAuthorArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.public_ids_.InternalSwap(&other->_impl_.public_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.share_participant_id_, lhs_arena,
      &other->_impl_.share_participant_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityAuthorArchive, _impl_.is_public_author_)
      + sizeof(ActivityAuthorArchive::_impl_.is_public_author_)
      - PROTOBUF_FIELD_OFFSET(ActivityAuthorArchive, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityAuthorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[85]);
}

// ===================================================================

class CommandActivityBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandActivityBehaviorArchive>()._impl_._has_bits_);
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_send_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::ActivityNavigationInfoArchive& additional_navigation_info(const CommandActivityBehaviorArchive* msg);
  static void set_has_additional_navigation_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSK::ActivityNavigationInfoArchive&
CommandActivityBehaviorArchive::_Internal::additional_navigation_info(const CommandActivityBehaviorArchive* msg) {
  return *msg->_impl_.additional_navigation_info_;
}
void CommandActivityBehaviorArchive::clear_selection_path_storages() {
  _impl_.selection_path_storages_.Clear();
}
CommandActivityBehaviorArchive::CommandActivityBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommandActivityBehaviorArchive)
}
CommandActivityBehaviorArchive::CommandActivityBehaviorArchive(const CommandActivityBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandActivityBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_path_storages_){from._impl_.selection_path_storages_}
    , decltype(_impl_.additional_navigation_info_){nullptr}
    , decltype(_impl_.action_type_){}
    , decltype(_impl_.should_send_notification_){}
    , decltype(_impl_.action_sub_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_additional_navigation_info()) {
    _this->_impl_.additional_navigation_info_ = new ::TSK::ActivityNavigationInfoArchive(*from._impl_.additional_navigation_info_);
  }
  ::memcpy(&_impl_.action_type_, &from._impl_.action_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_sub_type_) -
    reinterpret_cast<char*>(&_impl_.action_type_)) + sizeof(_impl_.action_sub_type_));
  // @@protoc_insertion_point(copy_constructor:TSK.CommandActivityBehaviorArchive)
}

inline void CommandActivityBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_path_storages_){arena}
    , decltype(_impl_.additional_navigation_info_){nullptr}
    , decltype(_impl_.action_type_){0}
    , decltype(_impl_.should_send_notification_){false}
    , decltype(_impl_.action_sub_type_){0}
  };
}

CommandActivityBehaviorArchive::~CommandActivityBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandActivityBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandActivityBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selection_path_storages_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.additional_navigation_info_;
}

void CommandActivityBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandActivityBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandActivityBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_path_storages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.additional_navigation_info_ != nullptr);
    _impl_.additional_navigation_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.action_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.action_sub_type_) -
        reinterpret_cast<char*>(&_impl_.action_type_)) + sizeof(_impl_.action_sub_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandActivityBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference selection_path_storages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection_path_storages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CommandActivityBehaviorArchive.ActionType action_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::CommandActivityBehaviorArchive_ActionType_IsValid(val))) {
            _internal_set_action_type(static_cast<::TSK::CommandActivityBehaviorArchive_ActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool should_send_notification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_should_send_notification(&has_bits);
          _impl_.should_send_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.ActivityNavigationInfoArchive additional_navigation_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional_navigation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CommandActivityBehaviorArchive.ActionSubType action_sub_type = 5 [default = None];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::CommandActivityBehaviorArchive_ActionSubType_IsValid(val))) {
            _internal_set_action_sub_type(static_cast<::TSK::CommandActivityBehaviorArchive_ActionSubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandActivityBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandActivityBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference selection_path_storages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selection_path_storages_size()); i < n; i++) {
    const auto& repfield = this->_internal_selection_path_storages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.CommandActivityBehaviorArchive.ActionType action_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action_type(), target);
  }

  // optional bool should_send_notification = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_should_send_notification(), target);
  }

  // optional .TSK.ActivityNavigationInfoArchive additional_navigation_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::additional_navigation_info(this),
        _Internal::additional_navigation_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CommandActivityBehaviorArchive.ActionSubType action_sub_type = 5 [default = None];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_action_sub_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandActivityBehaviorArchive)
  return target;
}

size_t CommandActivityBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandActivityBehaviorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selection_path_storages = 1;
  total_size += 1UL * this->_internal_selection_path_storages_size();
  for (const auto& msg : this->_impl_.selection_path_storages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSK.ActivityNavigationInfoArchive additional_navigation_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.additional_navigation_info_);
    }

    // optional .TSK.CommandActivityBehaviorArchive.ActionType action_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
    }

    // optional bool should_send_notification = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .TSK.CommandActivityBehaviorArchive.ActionSubType action_sub_type = 5 [default = None];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_sub_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandActivityBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandActivityBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandActivityBehaviorArchive::GetClassData() const { return &_class_data_; }


void CommandActivityBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandActivityBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const CommandActivityBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandActivityBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selection_path_storages_.MergeFrom(from._impl_.selection_path_storages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_additional_navigation_info()->::TSK::ActivityNavigationInfoArchive::MergeFrom(
          from._internal_additional_navigation_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.action_type_ = from._impl_.action_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.should_send_notification_ = from._impl_.should_send_notification_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.action_sub_type_ = from._impl_.action_sub_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandActivityBehaviorArchive::CopyFrom(const CommandActivityBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandActivityBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandActivityBehaviorArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selection_path_storages_))
    return false;
  if (_internal_has_additional_navigation_info()) {
    if (!_impl_.additional_navigation_info_->IsInitialized()) return false;
  }
  return true;
}

void CommandActivityBehaviorArchive::InternalSwap(CommandActivityBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.selection_path_storages_.InternalSwap(&other->_impl_.selection_path_storages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandActivityBehaviorArchive, _impl_.action_sub_type_)
      + sizeof(CommandActivityBehaviorArchive::_impl_.action_sub_type_)
      - PROTOBUF_FIELD_OFFSET(CommandActivityBehaviorArchive, _impl_.additional_navigation_info_)>(
          reinterpret_cast<char*>(&_impl_.additional_navigation_info_),
          reinterpret_cast<char*>(&other->_impl_.additional_navigation_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandActivityBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[86]);
}

// ===================================================================

class ActivityCursorCollectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityCursorCollectionArchive>()._impl_._has_bits_);
  static const ::TSK::CollaboratorCursorArchive& text_cursor(const ActivityCursorCollectionArchive* msg);
  static void set_has_text_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CollaboratorCursorArchive& table_cursor(const ActivityCursorCollectionArchive* msg);
  static void set_has_table_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::CollaboratorCursorArchive& cde_cursor(const ActivityCursorCollectionArchive* msg);
  static void set_has_cde_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::CollaboratorCursorArchive& chart_title_cursor(const ActivityCursorCollectionArchive* msg);
  static void set_has_chart_title_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSK::CollaboratorCursorArchive& gallery_item_cursor(const ActivityCursorCollectionArchive* msg);
  static void set_has_gallery_item_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::CollaboratorCursorArchive&
ActivityCursorCollectionArchive::_Internal::text_cursor(const ActivityCursorCollectionArchive* msg) {
  return *msg->_impl_.text_cursor_;
}
const ::TSK::CollaboratorCursorArchive&
ActivityCursorCollectionArchive::_Internal::table_cursor(const ActivityCursorCollectionArchive* msg) {
  return *msg->_impl_.table_cursor_;
}
const ::TSK::CollaboratorCursorArchive&
ActivityCursorCollectionArchive::_Internal::cde_cursor(const ActivityCursorCollectionArchive* msg) {
  return *msg->_impl_.cde_cursor_;
}
const ::TSK::CollaboratorCursorArchive&
ActivityCursorCollectionArchive::_Internal::chart_title_cursor(const ActivityCursorCollectionArchive* msg) {
  return *msg->_impl_.chart_title_cursor_;
}
const ::TSK::CollaboratorCursorArchive&
ActivityCursorCollectionArchive::_Internal::gallery_item_cursor(const ActivityCursorCollectionArchive* msg) {
  return *msg->_impl_.gallery_item_cursor_;
}
ActivityCursorCollectionArchive::ActivityCursorCollectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityCursorCollectionArchive)
}
ActivityCursorCollectionArchive::ActivityCursorCollectionArchive(const ActivityCursorCollectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityCursorCollectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_cursors_){from._impl_.id_cursors_}
    , decltype(_impl_.text_cursor_){nullptr}
    , decltype(_impl_.table_cursor_){nullptr}
    , decltype(_impl_.cde_cursor_){nullptr}
    , decltype(_impl_.chart_title_cursor_){nullptr}
    , decltype(_impl_.gallery_item_cursor_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text_cursor()) {
    _this->_impl_.text_cursor_ = new ::TSK::CollaboratorCursorArchive(*from._impl_.text_cursor_);
  }
  if (from._internal_has_table_cursor()) {
    _this->_impl_.table_cursor_ = new ::TSK::CollaboratorCursorArchive(*from._impl_.table_cursor_);
  }
  if (from._internal_has_cde_cursor()) {
    _this->_impl_.cde_cursor_ = new ::TSK::CollaboratorCursorArchive(*from._impl_.cde_cursor_);
  }
  if (from._internal_has_chart_title_cursor()) {
    _this->_impl_.chart_title_cursor_ = new ::TSK::CollaboratorCursorArchive(*from._impl_.chart_title_cursor_);
  }
  if (from._internal_has_gallery_item_cursor()) {
    _this->_impl_.gallery_item_cursor_ = new ::TSK::CollaboratorCursorArchive(*from._impl_.gallery_item_cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityCursorCollectionArchive)
}

inline void ActivityCursorCollectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_cursors_){arena}
    , decltype(_impl_.text_cursor_){nullptr}
    , decltype(_impl_.table_cursor_){nullptr}
    , decltype(_impl_.cde_cursor_){nullptr}
    , decltype(_impl_.chart_title_cursor_){nullptr}
    , decltype(_impl_.gallery_item_cursor_){nullptr}
  };
}

ActivityCursorCollectionArchive::~ActivityCursorCollectionArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityCursorCollectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityCursorCollectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_cursors_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.text_cursor_;
  if (this != internal_default_instance()) delete _impl_.table_cursor_;
  if (this != internal_default_instance()) delete _impl_.cde_cursor_;
  if (this != internal_default_instance()) delete _impl_.chart_title_cursor_;
  if (this != internal_default_instance()) delete _impl_.gallery_item_cursor_;
}

void ActivityCursorCollectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityCursorCollectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityCursorCollectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_cursors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.text_cursor_ != nullptr);
      _impl_.text_cursor_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_cursor_ != nullptr);
      _impl_.table_cursor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cde_cursor_ != nullptr);
      _impl_.cde_cursor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.chart_title_cursor_ != nullptr);
      _impl_.chart_title_cursor_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.gallery_item_cursor_ != nullptr);
      _impl_.gallery_item_cursor_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityCursorCollectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.CollaboratorCursorArchive id_cursors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_cursors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CollaboratorCursorArchive text_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_cursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CollaboratorCursorArchive table_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_cursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CollaboratorCursorArchive cde_cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cde_cursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CollaboratorCursorArchive chart_title_cursor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_title_cursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CollaboratorCursorArchive gallery_item_cursor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gallery_item_cursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityCursorCollectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityCursorCollectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.CollaboratorCursorArchive id_cursors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_id_cursors_size()); i < n; i++) {
    const auto& repfield = this->_internal_id_cursors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.CollaboratorCursorArchive text_cursor = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::text_cursor(this),
        _Internal::text_cursor(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CollaboratorCursorArchive table_cursor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_cursor(this),
        _Internal::table_cursor(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CollaboratorCursorArchive cde_cursor = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cde_cursor(this),
        _Internal::cde_cursor(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CollaboratorCursorArchive chart_title_cursor = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::chart_title_cursor(this),
        _Internal::chart_title_cursor(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CollaboratorCursorArchive gallery_item_cursor = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gallery_item_cursor(this),
        _Internal::gallery_item_cursor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityCursorCollectionArchive)
  return target;
}

size_t ActivityCursorCollectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityCursorCollectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.CollaboratorCursorArchive id_cursors = 1;
  total_size += 1UL * this->_internal_id_cursors_size();
  for (const auto& msg : this->_impl_.id_cursors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSK.CollaboratorCursorArchive text_cursor = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_cursor_);
    }

    // optional .TSK.CollaboratorCursorArchive table_cursor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_cursor_);
    }

    // optional .TSK.CollaboratorCursorArchive cde_cursor = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cde_cursor_);
    }

    // optional .TSK.CollaboratorCursorArchive chart_title_cursor = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_title_cursor_);
    }

    // optional .TSK.CollaboratorCursorArchive gallery_item_cursor = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gallery_item_cursor_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityCursorCollectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityCursorCollectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityCursorCollectionArchive::GetClassData() const { return &_class_data_; }


void ActivityCursorCollectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityCursorCollectionArchive*>(&to_msg);
  auto& from = static_cast<const ActivityCursorCollectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityCursorCollectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_cursors_.MergeFrom(from._impl_.id_cursors_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_text_cursor()->::TSK::CollaboratorCursorArchive::MergeFrom(
          from._internal_text_cursor());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_cursor()->::TSK::CollaboratorCursorArchive::MergeFrom(
          from._internal_table_cursor());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cde_cursor()->::TSK::CollaboratorCursorArchive::MergeFrom(
          from._internal_cde_cursor());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_chart_title_cursor()->::TSK::CollaboratorCursorArchive::MergeFrom(
          from._internal_chart_title_cursor());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_gallery_item_cursor()->::TSK::CollaboratorCursorArchive::MergeFrom(
          from._internal_gallery_item_cursor());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityCursorCollectionArchive::CopyFrom(const ActivityCursorCollectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityCursorCollectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCursorCollectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.id_cursors_))
    return false;
  if (_internal_has_text_cursor()) {
    if (!_impl_.text_cursor_->IsInitialized()) return false;
  }
  if (_internal_has_table_cursor()) {
    if (!_impl_.table_cursor_->IsInitialized()) return false;
  }
  if (_internal_has_cde_cursor()) {
    if (!_impl_.cde_cursor_->IsInitialized()) return false;
  }
  if (_internal_has_chart_title_cursor()) {
    if (!_impl_.chart_title_cursor_->IsInitialized()) return false;
  }
  if (_internal_has_gallery_item_cursor()) {
    if (!_impl_.gallery_item_cursor_->IsInitialized()) return false;
  }
  return true;
}

void ActivityCursorCollectionArchive::InternalSwap(ActivityCursorCollectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.id_cursors_.InternalSwap(&other->_impl_.id_cursors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityCursorCollectionArchive, _impl_.gallery_item_cursor_)
      + sizeof(ActivityCursorCollectionArchive::_impl_.gallery_item_cursor_)
      - PROTOBUF_FIELD_OFFSET(ActivityCursorCollectionArchive, _impl_.text_cursor_)>(
          reinterpret_cast<char*>(&_impl_.text_cursor_),
          reinterpret_cast<char*>(&other->_impl_.text_cursor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityCursorCollectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[87]);
}

// ===================================================================

class ActivityCursorCollectionPersistenceWrapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityCursorCollectionPersistenceWrapperArchive>()._impl_._has_bits_);
  static const ::TSK::ActivityCursorCollectionArchive& activity_cursor_collection(const ActivityCursorCollectionPersistenceWrapperArchive* msg);
  static void set_has_activity_cursor_collection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSK::ActivityCursorCollectionArchive&
ActivityCursorCollectionPersistenceWrapperArchive::_Internal::activity_cursor_collection(const ActivityCursorCollectionPersistenceWrapperArchive* msg) {
  return *msg->_impl_.activity_cursor_collection_;
}
ActivityCursorCollectionPersistenceWrapperArchive::ActivityCursorCollectionPersistenceWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
}
ActivityCursorCollectionPersistenceWrapperArchive::ActivityCursorCollectionPersistenceWrapperArchive(const ActivityCursorCollectionPersistenceWrapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityCursorCollectionPersistenceWrapperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_cursor_collection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_activity_cursor_collection()) {
    _this->_impl_.activity_cursor_collection_ = new ::TSK::ActivityCursorCollectionArchive(*from._impl_.activity_cursor_collection_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
}

inline void ActivityCursorCollectionPersistenceWrapperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_cursor_collection_){nullptr}
  };
}

ActivityCursorCollectionPersistenceWrapperArchive::~ActivityCursorCollectionPersistenceWrapperArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityCursorCollectionPersistenceWrapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.activity_cursor_collection_;
}

void ActivityCursorCollectionPersistenceWrapperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityCursorCollectionPersistenceWrapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.activity_cursor_collection_ != nullptr);
    _impl_.activity_cursor_collection_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityCursorCollectionPersistenceWrapperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.ActivityCursorCollectionArchive activity_cursor_collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_cursor_collection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityCursorCollectionPersistenceWrapperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.ActivityCursorCollectionArchive activity_cursor_collection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::activity_cursor_collection(this),
        _Internal::activity_cursor_collection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
  return target;
}

size_t ActivityCursorCollectionPersistenceWrapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSK.ActivityCursorCollectionArchive activity_cursor_collection = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activity_cursor_collection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityCursorCollectionPersistenceWrapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityCursorCollectionPersistenceWrapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityCursorCollectionPersistenceWrapperArchive::GetClassData() const { return &_class_data_; }


void ActivityCursorCollectionPersistenceWrapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityCursorCollectionPersistenceWrapperArchive*>(&to_msg);
  auto& from = static_cast<const ActivityCursorCollectionPersistenceWrapperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activity_cursor_collection()) {
    _this->_internal_mutable_activity_cursor_collection()->::TSK::ActivityCursorCollectionArchive::MergeFrom(
        from._internal_activity_cursor_collection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityCursorCollectionPersistenceWrapperArchive::CopyFrom(const ActivityCursorCollectionPersistenceWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityCursorCollectionPersistenceWrapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCursorCollectionPersistenceWrapperArchive::IsInitialized() const {
  if (_internal_has_activity_cursor_collection()) {
    if (!_impl_.activity_cursor_collection_->IsInitialized()) return false;
  }
  return true;
}

void ActivityCursorCollectionPersistenceWrapperArchive::InternalSwap(ActivityCursorCollectionPersistenceWrapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.activity_cursor_collection_, other->_impl_.activity_cursor_collection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityCursorCollectionPersistenceWrapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[88]);
}

// ===================================================================

class ActivityNavigationInfoArchive::_Internal {
 public:
};

ActivityNavigationInfoArchive::ActivityNavigationInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityNavigationInfoArchive)
}
ActivityNavigationInfoArchive::ActivityNavigationInfoArchive(const ActivityNavigationInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityNavigationInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityNavigationInfoArchive)
}

inline void ActivityNavigationInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivityNavigationInfoArchive::~ActivityNavigationInfoArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityNavigationInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityNavigationInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
}

void ActivityNavigationInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityNavigationInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityNavigationInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityNavigationInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800u <= tag && tag < 8000u)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityNavigationInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityNavigationInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [100, 1000)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 100, 1000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityNavigationInfoArchive)
  return target;
}

size_t ActivityNavigationInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityNavigationInfoArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityNavigationInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityNavigationInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityNavigationInfoArchive::GetClassData() const { return &_class_data_; }


void ActivityNavigationInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityNavigationInfoArchive*>(&to_msg);
  auto& from = static_cast<const ActivityNavigationInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityNavigationInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityNavigationInfoArchive::CopyFrom(const ActivityNavigationInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityNavigationInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityNavigationInfoArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void ActivityNavigationInfoArchive::InternalSwap(ActivityNavigationInfoArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityNavigationInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[89]);
}

// ===================================================================

class CommentActivityNavigationInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentActivityNavigationInfoArchive>()._impl_._has_bits_);
  static void set_has_comment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& parent_uuid(const CommentActivityNavigationInfoArchive* msg);
  static void set_has_parent_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& storage_uuid(const CommentActivityNavigationInfoArchive* msg);
  static void set_has_storage_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
CommentActivityNavigationInfoArchive::_Internal::parent_uuid(const CommentActivityNavigationInfoArchive* msg) {
  return *msg->_impl_.parent_uuid_;
}
const ::TSP::UUID&
CommentActivityNavigationInfoArchive::_Internal::storage_uuid(const CommentActivityNavigationInfoArchive* msg) {
  return *msg->_impl_.storage_uuid_;
}
void CommentActivityNavigationInfoArchive::clear_parent_uuid() {
  if (_impl_.parent_uuid_ != nullptr) _impl_.parent_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommentActivityNavigationInfoArchive::clear_storage_uuid() {
  if (_impl_.storage_uuid_ != nullptr) _impl_.storage_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommentActivityNavigationInfoArchive::CommentActivityNavigationInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.CommentActivityNavigationInfoArchive)
}
CommentActivityNavigationInfoArchive::CommentActivityNavigationInfoArchive(const CommentActivityNavigationInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommentActivityNavigationInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comment_id_){}
    , decltype(_impl_.parent_uuid_){nullptr}
    , decltype(_impl_.storage_uuid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment_id()) {
    _this->_impl_.comment_id_.Set(from._internal_comment_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent_uuid()) {
    _this->_impl_.parent_uuid_ = new ::TSP::UUID(*from._impl_.parent_uuid_);
  }
  if (from._internal_has_storage_uuid()) {
    _this->_impl_.storage_uuid_ = new ::TSP::UUID(*from._impl_.storage_uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CommentActivityNavigationInfoArchive)
}

inline void CommentActivityNavigationInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comment_id_){}
    , decltype(_impl_.parent_uuid_){nullptr}
    , decltype(_impl_.storage_uuid_){nullptr}
  };
  _impl_.comment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommentActivityNavigationInfoArchive::~CommentActivityNavigationInfoArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommentActivityNavigationInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommentActivityNavigationInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_uuid_;
  if (this != internal_default_instance()) delete _impl_.storage_uuid_;
}

void CommentActivityNavigationInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommentActivityNavigationInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommentActivityNavigationInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.comment_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.parent_uuid_ != nullptr);
      _impl_.parent_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.storage_uuid_ != nullptr);
      _impl_.storage_uuid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentActivityNavigationInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string comment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_comment_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.CommentActivityNavigationInfoArchive.comment_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID parent_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID storage_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommentActivityNavigationInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommentActivityNavigationInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string comment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment_id().data(), static_cast<int>(this->_internal_comment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CommentActivityNavigationInfoArchive.comment_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comment_id(), target);
  }

  // required .TSP.UUID parent_uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parent_uuid(this),
        _Internal::parent_uuid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID storage_uuid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::storage_uuid(this),
        _Internal::storage_uuid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommentActivityNavigationInfoArchive)
  return target;
}

size_t CommentActivityNavigationInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.CommentActivityNavigationInfoArchive)
  size_t total_size = 0;

  if (_internal_has_comment_id()) {
    // required string comment_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment_id());
  }

  if (_internal_has_parent_uuid()) {
    // required .TSP.UUID parent_uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_uuid_);
  }

  if (_internal_has_storage_uuid()) {
    // required .TSP.UUID storage_uuid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_uuid_);
  }

  return total_size;
}
size_t CommentActivityNavigationInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommentActivityNavigationInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string comment_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment_id());

    // required .TSP.UUID parent_uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_uuid_);

    // required .TSP.UUID storage_uuid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_uuid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommentActivityNavigationInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommentActivityNavigationInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommentActivityNavigationInfoArchive::GetClassData() const { return &_class_data_; }


void CommentActivityNavigationInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommentActivityNavigationInfoArchive*>(&to_msg);
  auto& from = static_cast<const CommentActivityNavigationInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommentActivityNavigationInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_comment_id(from._internal_comment_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_parent_uuid()->::TSP::UUID::MergeFrom(
          from._internal_parent_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_storage_uuid()->::TSP::UUID::MergeFrom(
          from._internal_storage_uuid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommentActivityNavigationInfoArchive::CopyFrom(const CommentActivityNavigationInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommentActivityNavigationInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentActivityNavigationInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_parent_uuid()) {
    if (!_impl_.parent_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_storage_uuid()) {
    if (!_impl_.storage_uuid_->IsInitialized()) return false;
  }
  return true;
}

void CommentActivityNavigationInfoArchive::InternalSwap(CommentActivityNavigationInfoArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_id_, lhs_arena,
      &other->_impl_.comment_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommentActivityNavigationInfoArchive, _impl_.storage_uuid_)
      + sizeof(CommentActivityNavigationInfoArchive::_impl_.storage_uuid_)
      - PROTOBUF_FIELD_OFFSET(CommentActivityNavigationInfoArchive, _impl_.parent_uuid_)>(
          reinterpret_cast<char*>(&_impl_.parent_uuid_),
          reinterpret_cast<char*>(&other->_impl_.parent_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentActivityNavigationInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[90]);
}

// ===================================================================

class ActivityAuthorCacheArchive_ShareParticipantIDCache::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityAuthorCacheArchive_ShareParticipantIDCache>()._impl_._has_bits_);
  static const ::TSP::UUID& identifier(const ActivityAuthorCacheArchive_ShareParticipantIDCache* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_share_participant_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
ActivityAuthorCacheArchive_ShareParticipantIDCache::_Internal::identifier(const ActivityAuthorCacheArchive_ShareParticipantIDCache* msg) {
  return *msg->_impl_.identifier_;
}
void ActivityAuthorCacheArchive_ShareParticipantIDCache::clear_identifier() {
  if (_impl_.identifier_ != nullptr) _impl_.identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ActivityAuthorCacheArchive_ShareParticipantIDCache::ActivityAuthorCacheArchive_ShareParticipantIDCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
}
ActivityAuthorCacheArchive_ShareParticipantIDCache::ActivityAuthorCacheArchive_ShareParticipantIDCache(const ActivityAuthorCacheArchive_ShareParticipantIDCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityAuthorCacheArchive_ShareParticipantIDCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.share_participant_id_){}
    , decltype(_impl_.identifier_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_share_participant_id()) {
    _this->_impl_.share_participant_id_.Set(from._internal_share_participant_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_ = new ::TSP::UUID(*from._impl_.identifier_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
}

inline void ActivityAuthorCacheArchive_ShareParticipantIDCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.share_participant_id_){}
    , decltype(_impl_.identifier_){nullptr}
  };
  _impl_.share_participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivityAuthorCacheArchive_ShareParticipantIDCache::~ActivityAuthorCacheArchive_ShareParticipantIDCache() {
  // @@protoc_insertion_point(destructor:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityAuthorCacheArchive_ShareParticipantIDCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.share_participant_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.identifier_;
}

void ActivityAuthorCacheArchive_ShareParticipantIDCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityAuthorCacheArchive_ShareParticipantIDCache::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.share_participant_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.identifier_ != nullptr);
      _impl_.identifier_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityAuthorCacheArchive_ShareParticipantIDCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string share_participant_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_share_participant_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache.share_participant_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityAuthorCacheArchive_ShareParticipantIDCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::identifier(this),
        _Internal::identifier(this).GetCachedSize(), target, stream);
  }

  // required string share_participant_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_share_participant_id().data(), static_cast<int>(this->_internal_share_participant_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache.share_participant_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_share_participant_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  return target;
}

size_t ActivityAuthorCacheArchive_ShareParticipantIDCache::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  size_t total_size = 0;

  if (_internal_has_share_participant_id()) {
    // required string share_participant_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_share_participant_id());
  }

  if (_internal_has_identifier()) {
    // required .TSP.UUID identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);
  }

  return total_size;
}
size_t ActivityAuthorCacheArchive_ShareParticipantIDCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string share_participant_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_share_participant_id());

    // required .TSP.UUID identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityAuthorCacheArchive_ShareParticipantIDCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityAuthorCacheArchive_ShareParticipantIDCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityAuthorCacheArchive_ShareParticipantIDCache::GetClassData() const { return &_class_data_; }


void ActivityAuthorCacheArchive_ShareParticipantIDCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityAuthorCacheArchive_ShareParticipantIDCache*>(&to_msg);
  auto& from = static_cast<const ActivityAuthorCacheArchive_ShareParticipantIDCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_share_participant_id(from._internal_share_participant_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_identifier()->::TSP::UUID::MergeFrom(
          from._internal_identifier());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityAuthorCacheArchive_ShareParticipantIDCache::CopyFrom(const ActivityAuthorCacheArchive_ShareParticipantIDCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAuthorCacheArchive_ShareParticipantIDCache::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_identifier()) {
    if (!_impl_.identifier_->IsInitialized()) return false;
  }
  return true;
}

void ActivityAuthorCacheArchive_ShareParticipantIDCache::InternalSwap(ActivityAuthorCacheArchive_ShareParticipantIDCache* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.share_participant_id_, lhs_arena,
      &other->_impl_.share_participant_id_, rhs_arena
  );
  swap(_impl_.identifier_, other->_impl_.identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityAuthorCacheArchive_ShareParticipantIDCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[91]);
}

// ===================================================================

class ActivityAuthorCacheArchive_PublicIDCache::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityAuthorCacheArchive_PublicIDCache>()._impl_._has_bits_);
  static const ::TSP::UUID& identifier(const ActivityAuthorCacheArchive_PublicIDCache* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_public_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
ActivityAuthorCacheArchive_PublicIDCache::_Internal::identifier(const ActivityAuthorCacheArchive_PublicIDCache* msg) {
  return *msg->_impl_.identifier_;
}
void ActivityAuthorCacheArchive_PublicIDCache::clear_identifier() {
  if (_impl_.identifier_ != nullptr) _impl_.identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ActivityAuthorCacheArchive_PublicIDCache::ActivityAuthorCacheArchive_PublicIDCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityAuthorCacheArchive.PublicIDCache)
}
ActivityAuthorCacheArchive_PublicIDCache::ActivityAuthorCacheArchive_PublicIDCache(const ActivityAuthorCacheArchive_PublicIDCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityAuthorCacheArchive_PublicIDCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_identifier_){}
    , decltype(_impl_.identifier_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_identifier()) {
    _this->_impl_.public_identifier_.Set(from._internal_public_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_ = new ::TSP::UUID(*from._impl_.identifier_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityAuthorCacheArchive.PublicIDCache)
}

inline void ActivityAuthorCacheArchive_PublicIDCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_identifier_){}
    , decltype(_impl_.identifier_){nullptr}
  };
  _impl_.public_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivityAuthorCacheArchive_PublicIDCache::~ActivityAuthorCacheArchive_PublicIDCache() {
  // @@protoc_insertion_point(destructor:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityAuthorCacheArchive_PublicIDCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.identifier_;
}

void ActivityAuthorCacheArchive_PublicIDCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityAuthorCacheArchive_PublicIDCache::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.public_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.identifier_ != nullptr);
      _impl_.identifier_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityAuthorCacheArchive_PublicIDCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string public_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_public_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.ActivityAuthorCacheArchive.PublicIDCache.public_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityAuthorCacheArchive_PublicIDCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::identifier(this),
        _Internal::identifier(this).GetCachedSize(), target, stream);
  }

  // required string public_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_identifier().data(), static_cast<int>(this->_internal_public_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ActivityAuthorCacheArchive.PublicIDCache.public_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  return target;
}

size_t ActivityAuthorCacheArchive_PublicIDCache::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  size_t total_size = 0;

  if (_internal_has_public_identifier()) {
    // required string public_identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_identifier());
  }

  if (_internal_has_identifier()) {
    // required .TSP.UUID identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);
  }

  return total_size;
}
size_t ActivityAuthorCacheArchive_PublicIDCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string public_identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_identifier());

    // required .TSP.UUID identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityAuthorCacheArchive_PublicIDCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityAuthorCacheArchive_PublicIDCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityAuthorCacheArchive_PublicIDCache::GetClassData() const { return &_class_data_; }


void ActivityAuthorCacheArchive_PublicIDCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityAuthorCacheArchive_PublicIDCache*>(&to_msg);
  auto& from = static_cast<const ActivityAuthorCacheArchive_PublicIDCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_public_identifier(from._internal_public_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_identifier()->::TSP::UUID::MergeFrom(
          from._internal_identifier());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityAuthorCacheArchive_PublicIDCache::CopyFrom(const ActivityAuthorCacheArchive_PublicIDCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityAuthorCacheArchive.PublicIDCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAuthorCacheArchive_PublicIDCache::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_identifier()) {
    if (!_impl_.identifier_->IsInitialized()) return false;
  }
  return true;
}

void ActivityAuthorCacheArchive_PublicIDCache::InternalSwap(ActivityAuthorCacheArchive_PublicIDCache* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_identifier_, lhs_arena,
      &other->_impl_.public_identifier_, rhs_arena
  );
  swap(_impl_.identifier_, other->_impl_.identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityAuthorCacheArchive_PublicIDCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[92]);
}

// ===================================================================

class ActivityAuthorCacheArchive_IndexCache::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityAuthorCacheArchive_IndexCache>()._impl_._has_bits_);
  static const ::TSP::UUID& identifier(const ActivityAuthorCacheArchive_IndexCache* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_author_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
ActivityAuthorCacheArchive_IndexCache::_Internal::identifier(const ActivityAuthorCacheArchive_IndexCache* msg) {
  return *msg->_impl_.identifier_;
}
void ActivityAuthorCacheArchive_IndexCache::clear_identifier() {
  if (_impl_.identifier_ != nullptr) _impl_.identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActivityAuthorCacheArchive_IndexCache::ActivityAuthorCacheArchive_IndexCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityAuthorCacheArchive.IndexCache)
}
ActivityAuthorCacheArchive_IndexCache::ActivityAuthorCacheArchive_IndexCache(const ActivityAuthorCacheArchive_IndexCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityAuthorCacheArchive_IndexCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.author_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_ = new ::TSP::UUID(*from._impl_.identifier_);
  }
  _this->_impl_.author_index_ = from._impl_.author_index_;
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityAuthorCacheArchive.IndexCache)
}

inline void ActivityAuthorCacheArchive_IndexCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.author_index_){uint64_t{0u}}
  };
}

ActivityAuthorCacheArchive_IndexCache::~ActivityAuthorCacheArchive_IndexCache() {
  // @@protoc_insertion_point(destructor:TSK.ActivityAuthorCacheArchive.IndexCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityAuthorCacheArchive_IndexCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.identifier_;
}

void ActivityAuthorCacheArchive_IndexCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityAuthorCacheArchive_IndexCache::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityAuthorCacheArchive.IndexCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.identifier_ != nullptr);
    _impl_.identifier_->Clear();
  }
  _impl_.author_index_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityAuthorCacheArchive_IndexCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 author_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_author_index(&has_bits);
          _impl_.author_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityAuthorCacheArchive_IndexCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityAuthorCacheArchive.IndexCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::identifier(this),
        _Internal::identifier(this).GetCachedSize(), target, stream);
  }

  // required uint64 author_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_author_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityAuthorCacheArchive.IndexCache)
  return target;
}

size_t ActivityAuthorCacheArchive_IndexCache::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ActivityAuthorCacheArchive.IndexCache)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required .TSP.UUID identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);
  }

  if (_internal_has_author_index()) {
    // required uint64 author_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_author_index());
  }

  return total_size;
}
size_t ActivityAuthorCacheArchive_IndexCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityAuthorCacheArchive.IndexCache)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);

    // required uint64 author_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_author_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityAuthorCacheArchive_IndexCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityAuthorCacheArchive_IndexCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityAuthorCacheArchive_IndexCache::GetClassData() const { return &_class_data_; }


void ActivityAuthorCacheArchive_IndexCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityAuthorCacheArchive_IndexCache*>(&to_msg);
  auto& from = static_cast<const ActivityAuthorCacheArchive_IndexCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityAuthorCacheArchive.IndexCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_identifier()->::TSP::UUID::MergeFrom(
          from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.author_index_ = from._impl_.author_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityAuthorCacheArchive_IndexCache::CopyFrom(const ActivityAuthorCacheArchive_IndexCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityAuthorCacheArchive.IndexCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAuthorCacheArchive_IndexCache::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_identifier()) {
    if (!_impl_.identifier_->IsInitialized()) return false;
  }
  return true;
}

void ActivityAuthorCacheArchive_IndexCache::InternalSwap(ActivityAuthorCacheArchive_IndexCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityAuthorCacheArchive_IndexCache, _impl_.author_index_)
      + sizeof(ActivityAuthorCacheArchive_IndexCache::_impl_.author_index_)
      - PROTOBUF_FIELD_OFFSET(ActivityAuthorCacheArchive_IndexCache, _impl_.identifier_)>(
          reinterpret_cast<char*>(&_impl_.identifier_),
          reinterpret_cast<char*>(&other->_impl_.identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityAuthorCacheArchive_IndexCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[93]);
}

// ===================================================================

class ActivityAuthorCacheArchive_FirstJoinCache::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityAuthorCacheArchive_FirstJoinCache>()._impl_._has_bits_);
  static const ::TSP::UUID& identifier(const ActivityAuthorCacheArchive_FirstJoinCache* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Date& first_join_date(const ActivityAuthorCacheArchive_FirstJoinCache* msg);
  static void set_has_first_join_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
ActivityAuthorCacheArchive_FirstJoinCache::_Internal::identifier(const ActivityAuthorCacheArchive_FirstJoinCache* msg) {
  return *msg->_impl_.identifier_;
}
const ::TSP::Date&
ActivityAuthorCacheArchive_FirstJoinCache::_Internal::first_join_date(const ActivityAuthorCacheArchive_FirstJoinCache* msg) {
  return *msg->_impl_.first_join_date_;
}
void ActivityAuthorCacheArchive_FirstJoinCache::clear_identifier() {
  if (_impl_.identifier_ != nullptr) _impl_.identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActivityAuthorCacheArchive_FirstJoinCache::clear_first_join_date() {
  if (_impl_.first_join_date_ != nullptr) _impl_.first_join_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ActivityAuthorCacheArchive_FirstJoinCache::ActivityAuthorCacheArchive_FirstJoinCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
}
ActivityAuthorCacheArchive_FirstJoinCache::ActivityAuthorCacheArchive_FirstJoinCache(const ActivityAuthorCacheArchive_FirstJoinCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityAuthorCacheArchive_FirstJoinCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.first_join_date_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_ = new ::TSP::UUID(*from._impl_.identifier_);
  }
  if (from._internal_has_first_join_date()) {
    _this->_impl_.first_join_date_ = new ::TSP::Date(*from._impl_.first_join_date_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
}

inline void ActivityAuthorCacheArchive_FirstJoinCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.first_join_date_){nullptr}
  };
}

ActivityAuthorCacheArchive_FirstJoinCache::~ActivityAuthorCacheArchive_FirstJoinCache() {
  // @@protoc_insertion_point(destructor:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityAuthorCacheArchive_FirstJoinCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.identifier_;
  if (this != internal_default_instance()) delete _impl_.first_join_date_;
}

void ActivityAuthorCacheArchive_FirstJoinCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityAuthorCacheArchive_FirstJoinCache::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.identifier_ != nullptr);
      _impl_.identifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.first_join_date_ != nullptr);
      _impl_.first_join_date_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityAuthorCacheArchive_FirstJoinCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date first_join_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_join_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityAuthorCacheArchive_FirstJoinCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::identifier(this),
        _Internal::identifier(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Date first_join_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::first_join_date(this),
        _Internal::first_join_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
  return target;
}

size_t ActivityAuthorCacheArchive_FirstJoinCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
  size_t total_size = 0;

  // required .TSP.UUID identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Date first_join_date = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_join_date_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityAuthorCacheArchive_FirstJoinCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityAuthorCacheArchive_FirstJoinCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityAuthorCacheArchive_FirstJoinCache::GetClassData() const { return &_class_data_; }


void ActivityAuthorCacheArchive_FirstJoinCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityAuthorCacheArchive_FirstJoinCache*>(&to_msg);
  auto& from = static_cast<const ActivityAuthorCacheArchive_FirstJoinCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_identifier()->::TSP::UUID::MergeFrom(
          from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_first_join_date()->::TSP::Date::MergeFrom(
          from._internal_first_join_date());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityAuthorCacheArchive_FirstJoinCache::CopyFrom(const ActivityAuthorCacheArchive_FirstJoinCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityAuthorCacheArchive.FirstJoinCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAuthorCacheArchive_FirstJoinCache::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_identifier()) {
    if (!_impl_.identifier_->IsInitialized()) return false;
  }
  if (_internal_has_first_join_date()) {
    if (!_impl_.first_join_date_->IsInitialized()) return false;
  }
  return true;
}

void ActivityAuthorCacheArchive_FirstJoinCache::InternalSwap(ActivityAuthorCacheArchive_FirstJoinCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityAuthorCacheArchive_FirstJoinCache, _impl_.first_join_date_)
      + sizeof(ActivityAuthorCacheArchive_FirstJoinCache::_impl_.first_join_date_)
      - PROTOBUF_FIELD_OFFSET(ActivityAuthorCacheArchive_FirstJoinCache, _impl_.identifier_)>(
          reinterpret_cast<char*>(&_impl_.identifier_),
          reinterpret_cast<char*>(&other->_impl_.identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityAuthorCacheArchive_FirstJoinCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[94]);
}

// ===================================================================

class ActivityAuthorCacheArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityAuthorCacheArchive>()._impl_._has_bits_);
  static const ::TSP::Date& last_audit_date(const ActivityAuthorCacheArchive* msg);
  static void set_has_last_audit_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Date&
ActivityAuthorCacheArchive::_Internal::last_audit_date(const ActivityAuthorCacheArchive* msg) {
  return *msg->_impl_.last_audit_date_;
}
void ActivityAuthorCacheArchive::clear_authors() {
  _impl_.authors_.Clear();
}
void ActivityAuthorCacheArchive::clear_last_audit_date() {
  if (_impl_.last_audit_date_ != nullptr) _impl_.last_audit_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActivityAuthorCacheArchive::clear_author_identifiers_to_remove() {
  _impl_.author_identifiers_to_remove_.Clear();
}
ActivityAuthorCacheArchive::ActivityAuthorCacheArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityAuthorCacheArchive)
}
ActivityAuthorCacheArchive::ActivityAuthorCacheArchive(const ActivityAuthorCacheArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityAuthorCacheArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.share_participant_id_cache_){from._impl_.share_participant_id_cache_}
    , decltype(_impl_.fallback_public_id_cache_){from._impl_.fallback_public_id_cache_}
    , decltype(_impl_.index_cache_){from._impl_.index_cache_}
    , decltype(_impl_.first_join_cache_){from._impl_.first_join_cache_}
    , decltype(_impl_.authors_){from._impl_.authors_}
    , decltype(_impl_.author_identifiers_to_remove_){from._impl_.author_identifiers_to_remove_}
    , decltype(_impl_.last_audit_date_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_audit_date()) {
    _this->_impl_.last_audit_date_ = new ::TSP::Date(*from._impl_.last_audit_date_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityAuthorCacheArchive)
}

inline void ActivityAuthorCacheArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.share_participant_id_cache_){arena}
    , decltype(_impl_.fallback_public_id_cache_){arena}
    , decltype(_impl_.index_cache_){arena}
    , decltype(_impl_.first_join_cache_){arena}
    , decltype(_impl_.authors_){arena}
    , decltype(_impl_.author_identifiers_to_remove_){arena}
    , decltype(_impl_.last_audit_date_){nullptr}
  };
}

ActivityAuthorCacheArchive::~ActivityAuthorCacheArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityAuthorCacheArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityAuthorCacheArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.share_participant_id_cache_.~RepeatedPtrField();
  _impl_.fallback_public_id_cache_.~RepeatedPtrField();
  _impl_.index_cache_.~RepeatedPtrField();
  _impl_.first_join_cache_.~RepeatedPtrField();
  _impl_.authors_.~RepeatedPtrField();
  _impl_.author_identifiers_to_remove_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.last_audit_date_;
}

void ActivityAuthorCacheArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityAuthorCacheArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityAuthorCacheArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.share_participant_id_cache_.Clear();
  _impl_.fallback_public_id_cache_.Clear();
  _impl_.index_cache_.Clear();
  _impl_.first_join_cache_.Clear();
  _impl_.authors_.Clear();
  _impl_.author_identifiers_to_remove_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.last_audit_date_ != nullptr);
    _impl_.last_audit_date_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityAuthorCacheArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache share_participant_id_cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_share_participant_id_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.ActivityAuthorCacheArchive.PublicIDCache fallback_public_id_cache = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fallback_public_id_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.ActivityAuthorCacheArchive.IndexCache index_cache = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.ActivityAuthorCacheArchive.FirstJoinCache first_join_cache = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_join_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference authors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_authors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date last_audit_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_audit_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID author_identifiers_to_remove = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_author_identifiers_to_remove(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityAuthorCacheArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityAuthorCacheArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache share_participant_id_cache = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_share_participant_id_cache_size()); i < n; i++) {
    const auto& repfield = this->_internal_share_participant_id_cache(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.ActivityAuthorCacheArchive.PublicIDCache fallback_public_id_cache = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fallback_public_id_cache_size()); i < n; i++) {
    const auto& repfield = this->_internal_fallback_public_id_cache(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.ActivityAuthorCacheArchive.IndexCache index_cache = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_cache_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_cache(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.ActivityAuthorCacheArchive.FirstJoinCache first_join_cache = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_first_join_cache_size()); i < n; i++) {
    const auto& repfield = this->_internal_first_join_cache(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference authors = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_authors_size()); i < n; i++) {
    const auto& repfield = this->_internal_authors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Date last_audit_date = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::last_audit_date(this),
        _Internal::last_audit_date(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID author_identifiers_to_remove = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_author_identifiers_to_remove_size()); i < n; i++) {
    const auto& repfield = this->_internal_author_identifiers_to_remove(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityAuthorCacheArchive)
  return target;
}

size_t ActivityAuthorCacheArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityAuthorCacheArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.ActivityAuthorCacheArchive.ShareParticipantIDCache share_participant_id_cache = 1;
  total_size += 1UL * this->_internal_share_participant_id_cache_size();
  for (const auto& msg : this->_impl_.share_participant_id_cache_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.ActivityAuthorCacheArchive.PublicIDCache fallback_public_id_cache = 3;
  total_size += 1UL * this->_internal_fallback_public_id_cache_size();
  for (const auto& msg : this->_impl_.fallback_public_id_cache_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.ActivityAuthorCacheArchive.IndexCache index_cache = 4;
  total_size += 1UL * this->_internal_index_cache_size();
  for (const auto& msg : this->_impl_.index_cache_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.ActivityAuthorCacheArchive.FirstJoinCache first_join_cache = 5;
  total_size += 1UL * this->_internal_first_join_cache_size();
  for (const auto& msg : this->_impl_.first_join_cache_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference authors = 6;
  total_size += 1UL * this->_internal_authors_size();
  for (const auto& msg : this->_impl_.authors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID author_identifiers_to_remove = 8;
  total_size += 1UL * this->_internal_author_identifiers_to_remove_size();
  for (const auto& msg : this->_impl_.author_identifiers_to_remove_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Date last_audit_date = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_audit_date_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityAuthorCacheArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityAuthorCacheArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityAuthorCacheArchive::GetClassData() const { return &_class_data_; }


void ActivityAuthorCacheArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityAuthorCacheArchive*>(&to_msg);
  auto& from = static_cast<const ActivityAuthorCacheArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityAuthorCacheArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.share_participant_id_cache_.MergeFrom(from._impl_.share_participant_id_cache_);
  _this->_impl_.fallback_public_id_cache_.MergeFrom(from._impl_.fallback_public_id_cache_);
  _this->_impl_.index_cache_.MergeFrom(from._impl_.index_cache_);
  _this->_impl_.first_join_cache_.MergeFrom(from._impl_.first_join_cache_);
  _this->_impl_.authors_.MergeFrom(from._impl_.authors_);
  _this->_impl_.author_identifiers_to_remove_.MergeFrom(from._impl_.author_identifiers_to_remove_);
  if (from._internal_has_last_audit_date()) {
    _this->_internal_mutable_last_audit_date()->::TSP::Date::MergeFrom(
        from._internal_last_audit_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityAuthorCacheArchive::CopyFrom(const ActivityAuthorCacheArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityAuthorCacheArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAuthorCacheArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.share_participant_id_cache_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.fallback_public_id_cache_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.index_cache_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.first_join_cache_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.authors_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.author_identifiers_to_remove_))
    return false;
  if (_internal_has_last_audit_date()) {
    if (!_impl_.last_audit_date_->IsInitialized()) return false;
  }
  return true;
}

void ActivityAuthorCacheArchive::InternalSwap(ActivityAuthorCacheArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.share_participant_id_cache_.InternalSwap(&other->_impl_.share_participant_id_cache_);
  _impl_.fallback_public_id_cache_.InternalSwap(&other->_impl_.fallback_public_id_cache_);
  _impl_.index_cache_.InternalSwap(&other->_impl_.index_cache_);
  _impl_.first_join_cache_.InternalSwap(&other->_impl_.first_join_cache_);
  _impl_.authors_.InternalSwap(&other->_impl_.authors_);
  _impl_.author_identifiers_to_remove_.InternalSwap(&other->_impl_.author_identifiers_to_remove_);
  swap(_impl_.last_audit_date_, other->_impl_.last_audit_date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityAuthorCacheArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[95]);
}

// ===================================================================

class ActivityOnlyCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityOnlyCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ActivityOnlyCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ActivityOnlyCommandArchive::_Internal::super(const ActivityOnlyCommandArchive* msg) {
  return *msg->_impl_.super_;
}
ActivityOnlyCommandArchive::ActivityOnlyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityOnlyCommandArchive)
}
ActivityOnlyCommandArchive::ActivityOnlyCommandArchive(const ActivityOnlyCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityOnlyCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityOnlyCommandArchive)
}

inline void ActivityOnlyCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ActivityOnlyCommandArchive::~ActivityOnlyCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityOnlyCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityOnlyCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ActivityOnlyCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityOnlyCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityOnlyCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityOnlyCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityOnlyCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityOnlyCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityOnlyCommandArchive)
  return target;
}

size_t ActivityOnlyCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityOnlyCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityOnlyCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityOnlyCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityOnlyCommandArchive::GetClassData() const { return &_class_data_; }


void ActivityOnlyCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityOnlyCommandArchive*>(&to_msg);
  auto& from = static_cast<const ActivityOnlyCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityOnlyCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityOnlyCommandArchive::CopyFrom(const ActivityOnlyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityOnlyCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOnlyCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ActivityOnlyCommandArchive::InternalSwap(ActivityOnlyCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityOnlyCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[96]);
}

// ===================================================================

class ActivityNotificationItemArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityNotificationItemArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& unique_identifier(const ActivityNotificationItemArchive* msg);
  static void set_has_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Date& first_timestamp(const ActivityNotificationItemArchive* msg);
  static void set_has_first_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::UUID&
ActivityNotificationItemArchive::_Internal::unique_identifier(const ActivityNotificationItemArchive* msg) {
  return *msg->_impl_.unique_identifier_;
}
const ::TSP::Date&
ActivityNotificationItemArchive::_Internal::first_timestamp(const ActivityNotificationItemArchive* msg) {
  return *msg->_impl_.first_timestamp_;
}
void ActivityNotificationItemArchive::clear_unique_identifier() {
  if (_impl_.unique_identifier_ != nullptr) _impl_.unique_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActivityNotificationItemArchive::clear_activities() {
  _impl_.activities_.Clear();
}
void ActivityNotificationItemArchive::clear_first_timestamp() {
  if (_impl_.first_timestamp_ != nullptr) _impl_.first_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ActivityNotificationItemArchive::ActivityNotificationItemArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityNotificationItemArchive)
}
ActivityNotificationItemArchive::ActivityNotificationItemArchive(const ActivityNotificationItemArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityNotificationItemArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activities_){from._impl_.activities_}
    , decltype(_impl_.unique_identifier_){nullptr}
    , decltype(_impl_.first_timestamp_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unique_identifier()) {
    _this->_impl_.unique_identifier_ = new ::TSP::UUID(*from._impl_.unique_identifier_);
  }
  if (from._internal_has_first_timestamp()) {
    _this->_impl_.first_timestamp_ = new ::TSP::Date(*from._impl_.first_timestamp_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityNotificationItemArchive)
}

inline void ActivityNotificationItemArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activities_){arena}
    , decltype(_impl_.unique_identifier_){nullptr}
    , decltype(_impl_.first_timestamp_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

ActivityNotificationItemArchive::~ActivityNotificationItemArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityNotificationItemArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityNotificationItemArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activities_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.unique_identifier_;
  if (this != internal_default_instance()) delete _impl_.first_timestamp_;
}

void ActivityNotificationItemArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityNotificationItemArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityNotificationItemArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.unique_identifier_ != nullptr);
      _impl_.unique_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.first_timestamp_ != nullptr);
      _impl_.first_timestamp_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityNotificationItemArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID unique_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unique_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference activities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date first_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityNotificationItemArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityNotificationItemArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // required .TSP.UUID unique_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::unique_identifier(this),
        _Internal::unique_identifier(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference activities = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activities_size()); i < n; i++) {
    const auto& repfield = this->_internal_activities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Date first_timestamp = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::first_timestamp(this),
        _Internal::first_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityNotificationItemArchive)
  return target;
}

size_t ActivityNotificationItemArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ActivityNotificationItemArchive)
  size_t total_size = 0;

  if (_internal_has_unique_identifier()) {
    // required .TSP.UUID unique_identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unique_identifier_);
  }

  if (_internal_has_type()) {
    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return total_size;
}
size_t ActivityNotificationItemArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityNotificationItemArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSP.UUID unique_identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unique_identifier_);

    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference activities = 3;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->_impl_.activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Date first_timestamp = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityNotificationItemArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityNotificationItemArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityNotificationItemArchive::GetClassData() const { return &_class_data_; }


void ActivityNotificationItemArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityNotificationItemArchive*>(&to_msg);
  auto& from = static_cast<const ActivityNotificationItemArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityNotificationItemArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activities_.MergeFrom(from._impl_.activities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unique_identifier()->::TSP::UUID::MergeFrom(
          from._internal_unique_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_first_timestamp()->::TSP::Date::MergeFrom(
          from._internal_first_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityNotificationItemArchive::CopyFrom(const ActivityNotificationItemArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityNotificationItemArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityNotificationItemArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.activities_))
    return false;
  if (_internal_has_unique_identifier()) {
    if (!_impl_.unique_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_first_timestamp()) {
    if (!_impl_.first_timestamp_->IsInitialized()) return false;
  }
  return true;
}

void ActivityNotificationItemArchive::InternalSwap(ActivityNotificationItemArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.activities_.InternalSwap(&other->_impl_.activities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityNotificationItemArchive, _impl_.type_)
      + sizeof(ActivityNotificationItemArchive::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ActivityNotificationItemArchive, _impl_.unique_identifier_)>(
          reinterpret_cast<char*>(&_impl_.unique_identifier_),
          reinterpret_cast<char*>(&other->_impl_.unique_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityNotificationItemArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[97]);
}

// ===================================================================

class ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts>()._impl_._has_bits_);
  static const ::TSP::UUID& unique_identifier(const ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts* msg);
  static void set_has_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::_Internal::unique_identifier(const ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts* msg) {
  return *msg->_impl_.unique_identifier_;
}
void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::clear_unique_identifier() {
  if (_impl_.unique_identifier_ != nullptr) _impl_.unique_identifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
}
ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts(const ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_identifier_){nullptr}
    , decltype(_impl_.attempts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unique_identifier()) {
    _this->_impl_.unique_identifier_ = new ::TSP::UUID(*from._impl_.unique_identifier_);
  }
  _this->_impl_.attempts_ = from._impl_.attempts_;
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
}

inline void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_identifier_){nullptr}
    , decltype(_impl_.attempts_){0u}
  };
}

ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::~ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts() {
  // @@protoc_insertion_point(destructor:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.unique_identifier_;
}

void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.unique_identifier_ != nullptr);
    _impl_.unique_identifier_->Clear();
  }
  _impl_.attempts_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID unique_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unique_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 attempts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attempts(&has_bits);
          _impl_.attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID unique_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unique_identifier(this),
        _Internal::unique_identifier(this).GetCachedSize(), target, stream);
  }

  // required uint32 attempts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attempts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  return target;
}

size_t ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  size_t total_size = 0;

  if (_internal_has_unique_identifier()) {
    // required .TSP.UUID unique_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unique_identifier_);
  }

  if (_internal_has_attempts()) {
    // required uint32 attempts = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attempts());
  }

  return total_size;
}
size_t ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID unique_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unique_identifier_);

    // required uint32 attempts = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attempts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::GetClassData() const { return &_class_data_; }


void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts*>(&to_msg);
  auto& from = static_cast<const ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unique_identifier()->::TSP::UUID::MergeFrom(
          from._internal_unique_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attempts_ = from._impl_.attempts_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::CopyFrom(const ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_unique_identifier()) {
    if (!_impl_.unique_identifier_->IsInitialized()) return false;
  }
  return true;
}

void ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::InternalSwap(ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts, _impl_.attempts_)
      + sizeof(ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::_impl_.attempts_)
      - PROTOBUF_FIELD_OFFSET(ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts, _impl_.unique_identifier_)>(
          reinterpret_cast<char*>(&_impl_.unique_identifier_),
          reinterpret_cast<char*>(&other->_impl_.unique_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[98]);
}

// ===================================================================

class ActivityNotificationParticipantCacheArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityNotificationParticipantCacheArchive>()._impl_._has_bits_);
  static const ::TSP::Date& last_edit_notification_item_sent_date(const ActivityNotificationParticipantCacheArchive* msg);
  static void set_has_last_edit_notification_item_sent_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_private_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Date& last_comment_notification_item_sent_date(const ActivityNotificationParticipantCacheArchive* msg);
  static void set_has_last_comment_notification_item_sent_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Date&
ActivityNotificationParticipantCacheArchive::_Internal::last_edit_notification_item_sent_date(const ActivityNotificationParticipantCacheArchive* msg) {
  return *msg->_impl_.last_edit_notification_item_sent_date_;
}
const ::TSP::Date&
ActivityNotificationParticipantCacheArchive::_Internal::last_comment_notification_item_sent_date(const ActivityNotificationParticipantCacheArchive* msg) {
  return *msg->_impl_.last_comment_notification_item_sent_date_;
}
void ActivityNotificationParticipantCacheArchive::clear_notification_items() {
  _impl_.notification_items_.Clear();
}
void ActivityNotificationParticipantCacheArchive::clear_last_edit_notification_item_sent_date() {
  if (_impl_.last_edit_notification_item_sent_date_ != nullptr) _impl_.last_edit_notification_item_sent_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ActivityNotificationParticipantCacheArchive::clear_last_comment_notification_item_sent_date() {
  if (_impl_.last_comment_notification_item_sent_date_ != nullptr) _impl_.last_comment_notification_item_sent_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ActivityNotificationParticipantCacheArchive::ActivityNotificationParticipantCacheArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityNotificationParticipantCacheArchive)
}
ActivityNotificationParticipantCacheArchive::ActivityNotificationParticipantCacheArchive(const ActivityNotificationParticipantCacheArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityNotificationParticipantCacheArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notification_items_){from._impl_.notification_items_}
    , decltype(_impl_.sender_failed_to_enqueue_attempts_){from._impl_.sender_failed_to_enqueue_attempts_}
    , decltype(_impl_.private_id_){}
    , decltype(_impl_.last_edit_notification_item_sent_date_){nullptr}
    , decltype(_impl_.last_comment_notification_item_sent_date_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_id()) {
    _this->_impl_.private_id_.Set(from._internal_private_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_edit_notification_item_sent_date()) {
    _this->_impl_.last_edit_notification_item_sent_date_ = new ::TSP::Date(*from._impl_.last_edit_notification_item_sent_date_);
  }
  if (from._internal_has_last_comment_notification_item_sent_date()) {
    _this->_impl_.last_comment_notification_item_sent_date_ = new ::TSP::Date(*from._impl_.last_comment_notification_item_sent_date_);
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityNotificationParticipantCacheArchive)
}

inline void ActivityNotificationParticipantCacheArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notification_items_){arena}
    , decltype(_impl_.sender_failed_to_enqueue_attempts_){arena}
    , decltype(_impl_.private_id_){}
    , decltype(_impl_.last_edit_notification_item_sent_date_){nullptr}
    , decltype(_impl_.last_comment_notification_item_sent_date_){nullptr}
  };
  _impl_.private_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivityNotificationParticipantCacheArchive::~ActivityNotificationParticipantCacheArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityNotificationParticipantCacheArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityNotificationParticipantCacheArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notification_items_.~RepeatedPtrField();
  _impl_.sender_failed_to_enqueue_attempts_.~RepeatedPtrField();
  _impl_.private_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_edit_notification_item_sent_date_;
  if (this != internal_default_instance()) delete _impl_.last_comment_notification_item_sent_date_;
}

void ActivityNotificationParticipantCacheArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityNotificationParticipantCacheArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityNotificationParticipantCacheArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notification_items_.Clear();
  _impl_.sender_failed_to_enqueue_attempts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.private_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.last_edit_notification_item_sent_date_ != nullptr);
      _impl_.last_edit_notification_item_sent_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.last_comment_notification_item_sent_date_ != nullptr);
      _impl_.last_comment_notification_item_sent_date_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityNotificationParticipantCacheArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference notification_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date last_edit_notification_item_sent_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_edit_notification_item_sent_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts sender_failed_to_enqueue_attempts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sender_failed_to_enqueue_attempts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string private_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_private_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSK.ActivityNotificationParticipantCacheArchive.private_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date last_comment_notification_item_sent_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_comment_notification_item_sent_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityNotificationParticipantCacheArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityNotificationParticipantCacheArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference notification_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notification_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_notification_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Date last_edit_notification_item_sent_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::last_edit_notification_item_sent_date(this),
        _Internal::last_edit_notification_item_sent_date(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts sender_failed_to_enqueue_attempts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sender_failed_to_enqueue_attempts_size()); i < n; i++) {
    const auto& repfield = this->_internal_sender_failed_to_enqueue_attempts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required string private_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_id().data(), static_cast<int>(this->_internal_private_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ActivityNotificationParticipantCacheArchive.private_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_private_id(), target);
  }

  // optional .TSP.Date last_comment_notification_item_sent_date = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_comment_notification_item_sent_date(this),
        _Internal::last_comment_notification_item_sent_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityNotificationParticipantCacheArchive)
  return target;
}

size_t ActivityNotificationParticipantCacheArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityNotificationParticipantCacheArchive)
  size_t total_size = 0;

  // required string private_id = 4;
  if (_internal_has_private_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_private_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference notification_items = 1;
  total_size += 1UL * this->_internal_notification_items_size();
  for (const auto& msg : this->_impl_.notification_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.ActivityNotificationParticipantCacheArchive.UniqueIdentifierAndAttempts sender_failed_to_enqueue_attempts = 3;
  total_size += 1UL * this->_internal_sender_failed_to_enqueue_attempts_size();
  for (const auto& msg : this->_impl_.sender_failed_to_enqueue_attempts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Date last_edit_notification_item_sent_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_edit_notification_item_sent_date_);
    }

    // optional .TSP.Date last_comment_notification_item_sent_date = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_comment_notification_item_sent_date_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityNotificationParticipantCacheArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityNotificationParticipantCacheArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityNotificationParticipantCacheArchive::GetClassData() const { return &_class_data_; }


void ActivityNotificationParticipantCacheArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityNotificationParticipantCacheArchive*>(&to_msg);
  auto& from = static_cast<const ActivityNotificationParticipantCacheArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityNotificationParticipantCacheArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.notification_items_.MergeFrom(from._impl_.notification_items_);
  _this->_impl_.sender_failed_to_enqueue_attempts_.MergeFrom(from._impl_.sender_failed_to_enqueue_attempts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_id(from._internal_private_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_edit_notification_item_sent_date()->::TSP::Date::MergeFrom(
          from._internal_last_edit_notification_item_sent_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_comment_notification_item_sent_date()->::TSP::Date::MergeFrom(
          from._internal_last_comment_notification_item_sent_date());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityNotificationParticipantCacheArchive::CopyFrom(const ActivityNotificationParticipantCacheArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityNotificationParticipantCacheArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityNotificationParticipantCacheArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.notification_items_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sender_failed_to_enqueue_attempts_))
    return false;
  if (_internal_has_last_edit_notification_item_sent_date()) {
    if (!_impl_.last_edit_notification_item_sent_date_->IsInitialized()) return false;
  }
  if (_internal_has_last_comment_notification_item_sent_date()) {
    if (!_impl_.last_comment_notification_item_sent_date_->IsInitialized()) return false;
  }
  return true;
}

void ActivityNotificationParticipantCacheArchive::InternalSwap(ActivityNotificationParticipantCacheArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.notification_items_.InternalSwap(&other->_impl_.notification_items_);
  _impl_.sender_failed_to_enqueue_attempts_.InternalSwap(&other->_impl_.sender_failed_to_enqueue_attempts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_id_, lhs_arena,
      &other->_impl_.private_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityNotificationParticipantCacheArchive, _impl_.last_comment_notification_item_sent_date_)
      + sizeof(ActivityNotificationParticipantCacheArchive::_impl_.last_comment_notification_item_sent_date_)
      - PROTOBUF_FIELD_OFFSET(ActivityNotificationParticipantCacheArchive, _impl_.last_edit_notification_item_sent_date_)>(
          reinterpret_cast<char*>(&_impl_.last_edit_notification_item_sent_date_),
          reinterpret_cast<char*>(&other->_impl_.last_edit_notification_item_sent_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityNotificationParticipantCacheArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[99]);
}

// ===================================================================

class ActivityNotificationQueueArchive::_Internal {
 public:
};

void ActivityNotificationQueueArchive::clear_unprocessed_notification_items() {
  _impl_.unprocessed_notification_items_.Clear();
}
void ActivityNotificationQueueArchive::clear_pending_participant_caches() {
  _impl_.pending_participant_caches_.Clear();
}
void ActivityNotificationQueueArchive::clear_sent_participant_caches() {
  _impl_.sent_participant_caches_.Clear();
}
ActivityNotificationQueueArchive::ActivityNotificationQueueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityNotificationQueueArchive)
}
ActivityNotificationQueueArchive::ActivityNotificationQueueArchive(const ActivityNotificationQueueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityNotificationQueueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unprocessed_notification_items_){from._impl_.unprocessed_notification_items_}
    , decltype(_impl_.pending_participant_caches_){from._impl_.pending_participant_caches_}
    , decltype(_impl_.sent_participant_caches_){from._impl_.sent_participant_caches_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityNotificationQueueArchive)
}

inline void ActivityNotificationQueueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unprocessed_notification_items_){arena}
    , decltype(_impl_.pending_participant_caches_){arena}
    , decltype(_impl_.sent_participant_caches_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivityNotificationQueueArchive::~ActivityNotificationQueueArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityNotificationQueueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityNotificationQueueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unprocessed_notification_items_.~RepeatedPtrField();
  _impl_.pending_participant_caches_.~RepeatedPtrField();
  _impl_.sent_participant_caches_.~RepeatedPtrField();
}

void ActivityNotificationQueueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityNotificationQueueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityNotificationQueueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unprocessed_notification_items_.Clear();
  _impl_.pending_participant_caches_.Clear();
  _impl_.sent_participant_caches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityNotificationQueueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference unprocessed_notification_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unprocessed_notification_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference pending_participant_caches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_participant_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference sent_participant_caches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sent_participant_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityNotificationQueueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityNotificationQueueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference unprocessed_notification_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unprocessed_notification_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_unprocessed_notification_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference pending_participant_caches = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pending_participant_caches_size()); i < n; i++) {
    const auto& repfield = this->_internal_pending_participant_caches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference sent_participant_caches = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sent_participant_caches_size()); i < n; i++) {
    const auto& repfield = this->_internal_sent_participant_caches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityNotificationQueueArchive)
  return target;
}

size_t ActivityNotificationQueueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityNotificationQueueArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference unprocessed_notification_items = 1;
  total_size += 1UL * this->_internal_unprocessed_notification_items_size();
  for (const auto& msg : this->_impl_.unprocessed_notification_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference pending_participant_caches = 3;
  total_size += 1UL * this->_internal_pending_participant_caches_size();
  for (const auto& msg : this->_impl_.pending_participant_caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference sent_participant_caches = 5;
  total_size += 1UL * this->_internal_sent_participant_caches_size();
  for (const auto& msg : this->_impl_.sent_participant_caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityNotificationQueueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityNotificationQueueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityNotificationQueueArchive::GetClassData() const { return &_class_data_; }


void ActivityNotificationQueueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityNotificationQueueArchive*>(&to_msg);
  auto& from = static_cast<const ActivityNotificationQueueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityNotificationQueueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unprocessed_notification_items_.MergeFrom(from._impl_.unprocessed_notification_items_);
  _this->_impl_.pending_participant_caches_.MergeFrom(from._impl_.pending_participant_caches_);
  _this->_impl_.sent_participant_caches_.MergeFrom(from._impl_.sent_participant_caches_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityNotificationQueueArchive::CopyFrom(const ActivityNotificationQueueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityNotificationQueueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityNotificationQueueArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.unprocessed_notification_items_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.pending_participant_caches_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sent_participant_caches_))
    return false;
  return true;
}

void ActivityNotificationQueueArchive::InternalSwap(ActivityNotificationQueueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unprocessed_notification_items_.InternalSwap(&other->_impl_.unprocessed_notification_items_);
  _impl_.pending_participant_caches_.InternalSwap(&other->_impl_.pending_participant_caches_);
  _impl_.sent_participant_caches_.InternalSwap(&other->_impl_.sent_participant_caches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityNotificationQueueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[100]);
}

// ===================================================================

class ActivityStreamTransformationStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityStreamTransformationStateArchive>()._impl_._has_bits_);
  static void set_has_next_activity_to_transform_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_oldest_revision_sequence_after_transformed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Date& last_activity_coalesced_date(const ActivityStreamTransformationStateArchive* msg);
  static void set_has_last_activity_coalesced_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transform_to_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_of_last_activity_when_last_activity_coalescing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preserving_revision_sequence_order(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Date&
ActivityStreamTransformationStateArchive::_Internal::last_activity_coalesced_date(const ActivityStreamTransformationStateArchive* msg) {
  return *msg->_impl_.last_activity_coalesced_date_;
}
void ActivityStreamTransformationStateArchive::clear_last_activity_coalesced_date() {
  if (_impl_.last_activity_coalesced_date_ != nullptr) _impl_.last_activity_coalesced_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActivityStreamTransformationStateArchive::ActivityStreamTransformationStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamTransformationStateArchive)
}
ActivityStreamTransformationStateArchive::ActivityStreamTransformationStateArchive(const ActivityStreamTransformationStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamTransformationStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transform_to_document_revision_identifier_){from._impl_.transform_to_document_revision_identifier_}
    , decltype(_impl_.last_activity_coalesced_date_){nullptr}
    , decltype(_impl_.next_activity_to_transform_index_){}
    , decltype(_impl_.oldest_revision_sequence_after_transformed_){}
    , decltype(_impl_.action_type_){}
    , decltype(_impl_.transform_to_document_revision_sequence_){}
    , decltype(_impl_.timestamp_of_last_activity_when_last_activity_coalescing_){}
    , decltype(_impl_.preserving_revision_sequence_order_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_activity_coalesced_date()) {
    _this->_impl_.last_activity_coalesced_date_ = new ::TSP::Date(*from._impl_.last_activity_coalesced_date_);
  }
  ::memcpy(&_impl_.next_activity_to_transform_index_, &from._impl_.next_activity_to_transform_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preserving_revision_sequence_order_) -
    reinterpret_cast<char*>(&_impl_.next_activity_to_transform_index_)) + sizeof(_impl_.preserving_revision_sequence_order_));
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamTransformationStateArchive)
}

inline void ActivityStreamTransformationStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transform_to_document_revision_identifier_){arena}
    , decltype(_impl_.last_activity_coalesced_date_){nullptr}
    , decltype(_impl_.next_activity_to_transform_index_){0}
    , decltype(_impl_.oldest_revision_sequence_after_transformed_){0}
    , decltype(_impl_.action_type_){0}
    , decltype(_impl_.transform_to_document_revision_sequence_){0}
    , decltype(_impl_.timestamp_of_last_activity_when_last_activity_coalescing_){0}
    , decltype(_impl_.preserving_revision_sequence_order_){false}
  };
}

ActivityStreamTransformationStateArchive::~ActivityStreamTransformationStateArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamTransformationStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamTransformationStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transform_to_document_revision_identifier_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.last_activity_coalesced_date_;
}

void ActivityStreamTransformationStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamTransformationStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamTransformationStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transform_to_document_revision_identifier_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.last_activity_coalesced_date_ != nullptr);
    _impl_.last_activity_coalesced_date_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.next_activity_to_transform_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preserving_revision_sequence_order_) -
        reinterpret_cast<char*>(&_impl_.next_activity_to_transform_index_)) + sizeof(_impl_.preserving_revision_sequence_order_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamTransformationStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 next_activity_to_transform_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_next_activity_to_transform_index(&has_bits);
          _impl_.next_activity_to_transform_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 oldest_revision_sequence_after_transformed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_oldest_revision_sequence_after_transformed(&has_bits);
          _impl_.oldest_revision_sequence_after_transformed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date last_activity_coalesced_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_activity_coalesced_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.ActivityStreamTransformationStateArchive.ActionType action_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::ActivityStreamTransformationStateArchive_ActionType_IsValid(val))) {
            _internal_set_action_type(static_cast<::TSK::ActivityStreamTransformationStateArchive_ActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 transform_to_document_revision_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_transform_to_document_revision_sequence(&has_bits);
          _impl_.transform_to_document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 transform_to_document_revision_identifier = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_transform_to_document_revision_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_transform_to_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp_of_last_activity_when_last_activity_coalescing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_timestamp_of_last_activity_when_last_activity_coalescing(&has_bits);
          _impl_.timestamp_of_last_activity_when_last_activity_coalescing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool preserving_revision_sequence_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_preserving_revision_sequence_order(&has_bits);
          _impl_.preserving_revision_sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamTransformationStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamTransformationStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 next_activity_to_transform_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_next_activity_to_transform_index(), target);
  }

  // optional int32 oldest_revision_sequence_after_transformed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_oldest_revision_sequence_after_transformed(), target);
  }

  // optional .TSP.Date last_activity_coalesced_date = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_activity_coalesced_date(this),
        _Internal::last_activity_coalesced_date(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.ActivityStreamTransformationStateArchive.ActionType action_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_action_type(), target);
  }

  // optional int32 transform_to_document_revision_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_transform_to_document_revision_sequence(), target);
  }

  // repeated fixed64 transform_to_document_revision_identifier = 6 [packed = true];
  if (this->_internal_transform_to_document_revision_identifier_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_transform_to_document_revision_identifier(), target);
  }

  // optional double timestamp_of_last_activity_when_last_activity_coalescing = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_timestamp_of_last_activity_when_last_activity_coalescing(), target);
  }

  // optional bool preserving_revision_sequence_order = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_preserving_revision_sequence_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamTransformationStateArchive)
  return target;
}

size_t ActivityStreamTransformationStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamTransformationStateArchive)
  size_t total_size = 0;

  // required int32 next_activity_to_transform_index = 1;
  if (_internal_has_next_activity_to_transform_index()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_activity_to_transform_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 transform_to_document_revision_identifier = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_to_document_revision_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional .TSP.Date last_activity_coalesced_date = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_activity_coalesced_date_);
  }

  if (cached_has_bits & 0x0000007cu) {
    // optional int32 oldest_revision_sequence_after_transformed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_oldest_revision_sequence_after_transformed());
    }

    // optional .TSK.ActivityStreamTransformationStateArchive.ActionType action_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
    }

    // optional int32 transform_to_document_revision_sequence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transform_to_document_revision_sequence());
    }

    // optional double timestamp_of_last_activity_when_last_activity_coalescing = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool preserving_revision_sequence_order = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamTransformationStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamTransformationStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamTransformationStateArchive::GetClassData() const { return &_class_data_; }


void ActivityStreamTransformationStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamTransformationStateArchive*>(&to_msg);
  auto& from = static_cast<const ActivityStreamTransformationStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamTransformationStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transform_to_document_revision_identifier_.MergeFrom(from._impl_.transform_to_document_revision_identifier_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_last_activity_coalesced_date()->::TSP::Date::MergeFrom(
          from._internal_last_activity_coalesced_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.next_activity_to_transform_index_ = from._impl_.next_activity_to_transform_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.oldest_revision_sequence_after_transformed_ = from._impl_.oldest_revision_sequence_after_transformed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.action_type_ = from._impl_.action_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.transform_to_document_revision_sequence_ = from._impl_.transform_to_document_revision_sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timestamp_of_last_activity_when_last_activity_coalescing_ = from._impl_.timestamp_of_last_activity_when_last_activity_coalescing_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.preserving_revision_sequence_order_ = from._impl_.preserving_revision_sequence_order_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamTransformationStateArchive::CopyFrom(const ActivityStreamTransformationStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamTransformationStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamTransformationStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_last_activity_coalesced_date()) {
    if (!_impl_.last_activity_coalesced_date_->IsInitialized()) return false;
  }
  return true;
}

void ActivityStreamTransformationStateArchive::InternalSwap(ActivityStreamTransformationStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.transform_to_document_revision_identifier_.InternalSwap(&other->_impl_.transform_to_document_revision_identifier_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityStreamTransformationStateArchive, _impl_.preserving_revision_sequence_order_)
      + sizeof(ActivityStreamTransformationStateArchive::_impl_.preserving_revision_sequence_order_)
      - PROTOBUF_FIELD_OFFSET(ActivityStreamTransformationStateArchive, _impl_.last_activity_coalesced_date_)>(
          reinterpret_cast<char*>(&_impl_.last_activity_coalesced_date_),
          reinterpret_cast<char*>(&other->_impl_.last_activity_coalesced_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamTransformationStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[101]);
}

// ===================================================================

class ActivityStreamActivityCounterArchive_ActionTypeCounter::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityStreamActivityCounterArchive_ActionTypeCounter>()._impl_._has_bits_);
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityStreamActivityCounterArchive_ActionTypeCounter::ActivityStreamActivityCounterArchive_ActionTypeCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
}
ActivityStreamActivityCounterArchive_ActionTypeCounter::ActivityStreamActivityCounterArchive_ActionTypeCounter(const ActivityStreamActivityCounterArchive_ActionTypeCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamActivityCounterArchive_ActionTypeCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_type_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.action_type_, &from._impl_.action_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.action_type_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
}

inline void ActivityStreamActivityCounterArchive_ActionTypeCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_type_){0}
    , decltype(_impl_.count_){0u}
  };
}

ActivityStreamActivityCounterArchive_ActionTypeCounter::~ActivityStreamActivityCounterArchive_ActionTypeCounter() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamActivityCounterArchive_ActionTypeCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActivityStreamActivityCounterArchive_ActionTypeCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamActivityCounterArchive_ActionTypeCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.action_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.action_type_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamActivityCounterArchive_ActionTypeCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 action_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_action_type(&has_bits);
          _impl_.action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamActivityCounterArchive_ActionTypeCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 action_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
  return target;
}

size_t ActivityStreamActivityCounterArchive_ActionTypeCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 action_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamActivityCounterArchive_ActionTypeCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamActivityCounterArchive_ActionTypeCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamActivityCounterArchive_ActionTypeCounter::GetClassData() const { return &_class_data_; }


void ActivityStreamActivityCounterArchive_ActionTypeCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamActivityCounterArchive_ActionTypeCounter*>(&to_msg);
  auto& from = static_cast<const ActivityStreamActivityCounterArchive_ActionTypeCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.action_type_ = from._impl_.action_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamActivityCounterArchive_ActionTypeCounter::CopyFrom(const ActivityStreamActivityCounterArchive_ActionTypeCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamActivityCounterArchive_ActionTypeCounter::IsInitialized() const {
  return true;
}

void ActivityStreamActivityCounterArchive_ActionTypeCounter::InternalSwap(ActivityStreamActivityCounterArchive_ActionTypeCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityStreamActivityCounterArchive_ActionTypeCounter, _impl_.count_)
      + sizeof(ActivityStreamActivityCounterArchive_ActionTypeCounter::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(ActivityStreamActivityCounterArchive_ActionTypeCounter, _impl_.action_type_)>(
          reinterpret_cast<char*>(&_impl_.action_type_),
          reinterpret_cast<char*>(&other->_impl_.action_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamActivityCounterArchive_ActionTypeCounter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[102]);
}

// ===================================================================

class ActivityStreamActivityCounterArchive_CursorTypeCounter::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityStreamActivityCounterArchive_CursorTypeCounter>()._impl_._has_bits_);
  static void set_has_cursor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityStreamActivityCounterArchive_CursorTypeCounter::ActivityStreamActivityCounterArchive_CursorTypeCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
}
ActivityStreamActivityCounterArchive_CursorTypeCounter::ActivityStreamActivityCounterArchive_CursorTypeCounter(const ActivityStreamActivityCounterArchive_CursorTypeCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamActivityCounterArchive_CursorTypeCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cursor_type_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cursor_type_, &from._impl_.cursor_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.cursor_type_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
}

inline void ActivityStreamActivityCounterArchive_CursorTypeCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cursor_type_){0}
    , decltype(_impl_.count_){0u}
  };
}

ActivityStreamActivityCounterArchive_CursorTypeCounter::~ActivityStreamActivityCounterArchive_CursorTypeCounter() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamActivityCounterArchive_CursorTypeCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActivityStreamActivityCounterArchive_CursorTypeCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamActivityCounterArchive_CursorTypeCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.cursor_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.cursor_type_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamActivityCounterArchive_CursorTypeCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 cursor_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cursor_type(&has_bits);
          _impl_.cursor_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamActivityCounterArchive_CursorTypeCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 cursor_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cursor_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
  return target;
}

size_t ActivityStreamActivityCounterArchive_CursorTypeCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 cursor_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cursor_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamActivityCounterArchive_CursorTypeCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamActivityCounterArchive_CursorTypeCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamActivityCounterArchive_CursorTypeCounter::GetClassData() const { return &_class_data_; }


void ActivityStreamActivityCounterArchive_CursorTypeCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamActivityCounterArchive_CursorTypeCounter*>(&to_msg);
  auto& from = static_cast<const ActivityStreamActivityCounterArchive_CursorTypeCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cursor_type_ = from._impl_.cursor_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamActivityCounterArchive_CursorTypeCounter::CopyFrom(const ActivityStreamActivityCounterArchive_CursorTypeCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamActivityCounterArchive_CursorTypeCounter::IsInitialized() const {
  return true;
}

void ActivityStreamActivityCounterArchive_CursorTypeCounter::InternalSwap(ActivityStreamActivityCounterArchive_CursorTypeCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityStreamActivityCounterArchive_CursorTypeCounter, _impl_.count_)
      + sizeof(ActivityStreamActivityCounterArchive_CursorTypeCounter::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(ActivityStreamActivityCounterArchive_CursorTypeCounter, _impl_.cursor_type_)>(
          reinterpret_cast<char*>(&_impl_.cursor_type_),
          reinterpret_cast<char*>(&other->_impl_.cursor_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamActivityCounterArchive_CursorTypeCounter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[103]);
}

// ===================================================================

class ActivityStreamActivityCounterArchive::_Internal {
 public:
};

ActivityStreamActivityCounterArchive::ActivityStreamActivityCounterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamActivityCounterArchive)
}
ActivityStreamActivityCounterArchive::ActivityStreamActivityCounterArchive(const ActivityStreamActivityCounterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamActivityCounterArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_type_counter_){from._impl_.action_type_counter_}
    , decltype(_impl_.cursor_type_counter_){from._impl_.cursor_type_counter_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamActivityCounterArchive)
}

inline void ActivityStreamActivityCounterArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_type_counter_){arena}
    , decltype(_impl_.cursor_type_counter_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivityStreamActivityCounterArchive::~ActivityStreamActivityCounterArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamActivityCounterArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamActivityCounterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_type_counter_.~RepeatedPtrField();
  _impl_.cursor_type_counter_.~RepeatedPtrField();
}

void ActivityStreamActivityCounterArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamActivityCounterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamActivityCounterArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_type_counter_.Clear();
  _impl_.cursor_type_counter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamActivityCounterArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter action_type_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_type_counter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter cursor_type_counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cursor_type_counter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamActivityCounterArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamActivityCounterArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter action_type_counter = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_type_counter_size()); i < n; i++) {
    const auto& repfield = this->_internal_action_type_counter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter cursor_type_counter = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cursor_type_counter_size()); i < n; i++) {
    const auto& repfield = this->_internal_cursor_type_counter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamActivityCounterArchive)
  return target;
}

size_t ActivityStreamActivityCounterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamActivityCounterArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.ActivityStreamActivityCounterArchive.ActionTypeCounter action_type_counter = 1;
  total_size += 1UL * this->_internal_action_type_counter_size();
  for (const auto& msg : this->_impl_.action_type_counter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.ActivityStreamActivityCounterArchive.CursorTypeCounter cursor_type_counter = 2;
  total_size += 1UL * this->_internal_cursor_type_counter_size();
  for (const auto& msg : this->_impl_.cursor_type_counter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamActivityCounterArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamActivityCounterArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamActivityCounterArchive::GetClassData() const { return &_class_data_; }


void ActivityStreamActivityCounterArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamActivityCounterArchive*>(&to_msg);
  auto& from = static_cast<const ActivityStreamActivityCounterArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamActivityCounterArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.action_type_counter_.MergeFrom(from._impl_.action_type_counter_);
  _this->_impl_.cursor_type_counter_.MergeFrom(from._impl_.cursor_type_counter_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamActivityCounterArchive::CopyFrom(const ActivityStreamActivityCounterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamActivityCounterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamActivityCounterArchive::IsInitialized() const {
  return true;
}

void ActivityStreamActivityCounterArchive::InternalSwap(ActivityStreamActivityCounterArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.action_type_counter_.InternalSwap(&other->_impl_.action_type_counter_);
  _impl_.cursor_type_counter_.InternalSwap(&other->_impl_.cursor_type_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamActivityCounterArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[104]);
}

// ===================================================================

class ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType>()._impl_._has_bits_);
  static const ::TSP::Date& date_to_audit(const ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType* msg);
  static void set_has_date_to_audit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Date&
ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::_Internal::date_to_audit(const ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType* msg) {
  return *msg->_impl_.date_to_audit_;
}
void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::clear_date_to_audit() {
  if (_impl_.date_to_audit_ != nullptr) _impl_.date_to_audit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
}
ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType(const ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_to_audit_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date_to_audit()) {
    _this->_impl_.date_to_audit_ = new ::TSP::Date(*from._impl_.date_to_audit_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
}

inline void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_to_audit_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::~ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.date_to_audit_;
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.date_to_audit_ != nullptr);
    _impl_.date_to_audit_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Date date_to_audit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_to_audit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Date date_to_audit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::date_to_audit(this),
        _Internal::date_to_audit(this).GetCachedSize(), target, stream);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  return target;
}

size_t ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  size_t total_size = 0;

  if (_internal_has_date_to_audit()) {
    // required .TSP.Date date_to_audit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_to_audit_);
  }

  if (_internal_has_type()) {
    // required int32 type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return total_size;
}
size_t ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Date date_to_audit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_to_audit_);

    // required int32 type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::GetClassData() const { return &_class_data_; }


void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType*>(&to_msg);
  auto& from = static_cast<const ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_date_to_audit()->::TSP::Date::MergeFrom(
          from._internal_date_to_audit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::CopyFrom(const ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_date_to_audit()) {
    if (!_impl_.date_to_audit_->IsInitialized()) return false;
  }
  return true;
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::InternalSwap(ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType, _impl_.type_)
      + sizeof(ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType, _impl_.date_to_audit_)>(
          reinterpret_cast<char*>(&_impl_.date_to_audit_),
          reinterpret_cast<char*>(&other->_impl_.date_to_audit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[105]);
}

// ===================================================================

class ActivityStreamRemovedAuthorAuditorPendingStateArchive::_Internal {
 public:
};

void ActivityStreamRemovedAuthorAuditorPendingStateArchive::clear_current_author_identifiers() {
  _impl_.current_author_identifiers_.Clear();
}
ActivityStreamRemovedAuthorAuditorPendingStateArchive::ActivityStreamRemovedAuthorAuditorPendingStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
}
ActivityStreamRemovedAuthorAuditorPendingStateArchive::ActivityStreamRemovedAuthorAuditorPendingStateArchive(const ActivityStreamRemovedAuthorAuditorPendingStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityStreamRemovedAuthorAuditorPendingStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_author_identifiers_){from._impl_.current_author_identifiers_}
    , decltype(_impl_.dates_to_audit_){from._impl_.dates_to_audit_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
}

inline void ActivityStreamRemovedAuthorAuditorPendingStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_author_identifiers_){arena}
    , decltype(_impl_.dates_to_audit_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivityStreamRemovedAuthorAuditorPendingStateArchive::~ActivityStreamRemovedAuthorAuditorPendingStateArchive() {
  // @@protoc_insertion_point(destructor:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityStreamRemovedAuthorAuditorPendingStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_author_identifiers_.~RepeatedPtrField();
  _impl_.dates_to_audit_.~RepeatedPtrField();
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_author_identifiers_.Clear();
  _impl_.dates_to_audit_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityStreamRemovedAuthorAuditorPendingStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID current_author_identifiers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_author_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType dates_to_audit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dates_to_audit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityStreamRemovedAuthorAuditorPendingStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID current_author_identifiers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_current_author_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_current_author_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType dates_to_audit = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dates_to_audit_size()); i < n; i++) {
    const auto& repfield = this->_internal_dates_to_audit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
  return target;
}

size_t ActivityStreamRemovedAuthorAuditorPendingStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID current_author_identifiers = 1;
  total_size += 1UL * this->_internal_current_author_identifiers_size();
  for (const auto& msg : this->_impl_.current_author_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive.DateToAuditAndType dates_to_audit = 3;
  total_size += 1UL * this->_internal_dates_to_audit_size();
  for (const auto& msg : this->_impl_.dates_to_audit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityStreamRemovedAuthorAuditorPendingStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityStreamRemovedAuthorAuditorPendingStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityStreamRemovedAuthorAuditorPendingStateArchive::GetClassData() const { return &_class_data_; }


void ActivityStreamRemovedAuthorAuditorPendingStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityStreamRemovedAuthorAuditorPendingStateArchive*>(&to_msg);
  auto& from = static_cast<const ActivityStreamRemovedAuthorAuditorPendingStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.current_author_identifiers_.MergeFrom(from._impl_.current_author_identifiers_);
  _this->_impl_.dates_to_audit_.MergeFrom(from._impl_.dates_to_audit_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive::CopyFrom(const ActivityStreamRemovedAuthorAuditorPendingStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ActivityStreamRemovedAuthorAuditorPendingStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStreamRemovedAuthorAuditorPendingStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.current_author_identifiers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.dates_to_audit_))
    return false;
  return true;
}

void ActivityStreamRemovedAuthorAuditorPendingStateArchive::InternalSwap(ActivityStreamRemovedAuthorAuditorPendingStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.current_author_identifiers_.InternalSwap(&other->_impl_.current_author_identifiers_);
  _impl_.dates_to_audit_.InternalSwap(&other->_impl_.dates_to_audit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityStreamRemovedAuthorAuditorPendingStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[106]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int CommentActivityNavigationInfoArchive::kCommentActivityNavigationInfoFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::ActivityNavigationInfoArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSK::CommentActivityNavigationInfoArchive >, 11, false>
  CommentActivityNavigationInfoArchive::comment_activity_navigation_info(kCommentActivityNavigationInfoFieldNumber, ::TSK::CommentActivityNavigationInfoArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSK::TreeNode*
Arena::CreateMaybeMessage< ::TSK::TreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::TreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistoryItem*
Arena::CreateMaybeMessage< ::TSK::LocalCommandHistoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistoryArray*
Arena::CreateMaybeMessage< ::TSK::LocalCommandHistoryArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistoryArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistoryArraySegment*
Arena::CreateMaybeMessage< ::TSK::LocalCommandHistoryArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistoryArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistory*
Arena::CreateMaybeMessage< ::TSK::LocalCommandHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryArray*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryArraySegment*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistory_ItemList*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistory_ItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistory_ItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistory*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryItem*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryCoalescingGroup*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryCoalescingGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryCoalescingGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryCoalescingGroupNode*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryCoalescingGroupNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryCoalescingGroupNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver*
Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentArchive*
Arena::CreateMaybeMessage< ::TSK::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FormattingSymbolsArchive_CurrencySymbol*
Arena::CreateMaybeMessage< ::TSK::FormattingSymbolsArchive_CurrencySymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FormattingSymbolsArchive_CurrencySymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FormattingSymbolsArchive*
Arena::CreateMaybeMessage< ::TSK::FormattingSymbolsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FormattingSymbolsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentSupportCollaborationState*
Arena::CreateMaybeMessage< ::TSK::DocumentSupportCollaborationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentSupportCollaborationState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentSupportArchive*
Arena::CreateMaybeMessage< ::TSK::DocumentSupportArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentSupportArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ViewStateArchive*
Arena::CreateMaybeMessage< ::TSK::ViewStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ViewStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandArchive*
Arena::CreateMaybeMessage< ::TSK::CommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandGroupArchive*
Arena::CreateMaybeMessage< ::TSK::CommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::InducedCommandCollectionArchive*
Arena::CreateMaybeMessage< ::TSK::InducedCommandCollectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::InducedCommandCollectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::PropagatedCommandCollectionArchive*
Arena::CreateMaybeMessage< ::TSK::PropagatedCommandCollectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::PropagatedCommandCollectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FinalCommandPairArchive*
Arena::CreateMaybeMessage< ::TSK::FinalCommandPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FinalCommandPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandContainerArchive*
Arena::CreateMaybeMessage< ::TSK::CommandContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ProgressiveCommandGroupArchive*
Arena::CreateMaybeMessage< ::TSK::ProgressiveCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ProgressiveCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FormatStructArchive*
Arena::CreateMaybeMessage< ::TSK::FormatStructArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FormatStructArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CustomFormatArchive_Condition*
Arena::CreateMaybeMessage< ::TSK::CustomFormatArchive_Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CustomFormatArchive_Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CustomFormatArchive*
Arena::CreateMaybeMessage< ::TSK::CustomFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CustomFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CustomFormatListArchive*
Arena::CreateMaybeMessage< ::TSK::CustomFormatListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CustomFormatListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AnnotationAuthorArchive*
Arena::CreateMaybeMessage< ::TSK::AnnotationAuthorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AnnotationAuthorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DeprecatedChangeAuthorArchive*
Arena::CreateMaybeMessage< ::TSK::DeprecatedChangeAuthorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DeprecatedChangeAuthorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AnnotationAuthorStorageArchive*
Arena::CreateMaybeMessage< ::TSK::AnnotationAuthorStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AnnotationAuthorStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::SetAnnotationAuthorColorCommandArchive*
Arena::CreateMaybeMessage< ::TSK::SetAnnotationAuthorColorCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::SetAnnotationAuthorColorCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::SetActivityAuthorShareParticipantIDCommandArchive*
Arena::CreateMaybeMessage< ::TSK::SetActivityAuthorShareParticipantIDCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::SetActivityAuthorShareParticipantIDCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandBehaviorSelectionPathStorageArchive*
Arena::CreateMaybeMessage< ::TSK::CommandBehaviorSelectionPathStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandBehaviorSelectionPathStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandBehaviorArchive*
Arena::CreateMaybeMessage< ::TSK::CommandBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandSelectionBehaviorArchive*
Arena::CreateMaybeMessage< ::TSK::CommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::SelectionPathTransformerArchive*
Arena::CreateMaybeMessage< ::TSK::SelectionPathTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::SelectionPathTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::SelectionPathArchive*
Arena::CreateMaybeMessage< ::TSK::SelectionPathArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::SelectionPathArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentSelectionArchive*
Arena::CreateMaybeMessage< ::TSK::DocumentSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::IdOperationArgs*
Arena::CreateMaybeMessage< ::TSK::IdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::IdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AddIdOperationArgs*
Arena::CreateMaybeMessage< ::TSK::AddIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AddIdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::RemoveIdOperationArgs*
Arena::CreateMaybeMessage< ::TSK::RemoveIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::RemoveIdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::RearrangeIdOperationArgs*
Arena::CreateMaybeMessage< ::TSK::RearrangeIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::RearrangeIdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::IdPlacementOperationArgs*
Arena::CreateMaybeMessage< ::TSK::IdPlacementOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::IdPlacementOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::NullCommandArchive*
Arena::CreateMaybeMessage< ::TSK::NullCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::NullCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::GroupCommitCommandArchive*
Arena::CreateMaybeMessage< ::TSK::GroupCommitCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::GroupCommitCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::UpgradeDocPostProcessingCommandArchive*
Arena::CreateMaybeMessage< ::TSK::UpgradeDocPostProcessingCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::UpgradeDocPostProcessingCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::InducedCommandCollectionCommitCommandArchive*
Arena::CreateMaybeMessage< ::TSK::InducedCommandCollectionCommitCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::InducedCommandCollectionCommitCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityCommitCommandArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityCommitCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityCommitCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive*
Arena::CreateMaybeMessage< ::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ChangeDocumentPackageTypeCommandArchive*
Arena::CreateMaybeMessage< ::TSK::ChangeDocumentPackageTypeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ChangeDocumentPackageTypeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CreateLocalStorageSnapshotCommandArchive*
Arena::CreateMaybeMessage< ::TSK::CreateLocalStorageSnapshotCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CreateLocalStorageSnapshotCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::BlockDiffsAtCurrentRevisionCommand*
Arena::CreateMaybeMessage< ::TSK::BlockDiffsAtCurrentRevisionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::BlockDiffsAtCurrentRevisionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::RangeAddress*
Arena::CreateMaybeMessage< ::TSK::RangeAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::RangeAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::Operation*
Arena::CreateMaybeMessage< ::TSK::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationTransformer*
Arena::CreateMaybeMessage< ::TSK::OperationTransformer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationTransformer >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::TransformerEntry*
Arena::CreateMaybeMessage< ::TSK::TransformerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::TransformerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueueItem*
Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueueItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueueItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry*
Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationAppliedCommandDocumentRevisionMapping*
Arena::CreateMaybeMessage< ::TSK::CollaborationAppliedCommandDocumentRevisionMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationAppliedCommandDocumentRevisionMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry*
Arena::CreateMaybeMessage< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationDocumentSessionState*
Arena::CreateMaybeMessage< ::TSK::CollaborationDocumentSessionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationDocumentSessionState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::NativeContentDescription*
Arena::CreateMaybeMessage< ::TSK::NativeContentDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::NativeContentDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::StructuredTextImportSettings*
Arena::CreateMaybeMessage< ::TSK::StructuredTextImportSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::StructuredTextImportSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageCommandOperationsEntry*
Arena::CreateMaybeMessage< ::TSK::OperationStorageCommandOperationsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageCommandOperationsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageEntry*
Arena::CreateMaybeMessage< ::TSK::OperationStorageEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageEntryArray*
Arena::CreateMaybeMessage< ::TSK::OperationStorageEntryArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageEntryArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageEntryArraySegment*
Arena::CreateMaybeMessage< ::TSK::OperationStorageEntryArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageEntryArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorage*
Arena::CreateMaybeMessage< ::TSK::OperationStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueue*
Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueueSegment*
Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueueSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueueSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair*
Arena::CreateMaybeMessage< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DataReferenceRecord*
Arena::CreateMaybeMessage< ::TSK::DataReferenceRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DataReferenceRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandAssetChunkArchive*
Arena::CreateMaybeMessage< ::TSK::CommandAssetChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandAssetChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo*
Arena::CreateMaybeMessage< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AssetUploadStatusCommandArchive*
Arena::CreateMaybeMessage< ::TSK::AssetUploadStatusCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AssetUploadStatusCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AssetUnmaterializedOnServerCommandArchive*
Arena::CreateMaybeMessage< ::TSK::AssetUnmaterializedOnServerCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AssetUnmaterializedOnServerCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::PencilAnnotationUIState*
Arena::CreateMaybeMessage< ::TSK::PencilAnnotationUIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::PencilAnnotationUIState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaboratorCursorArchive*
Arena::CreateMaybeMessage< ::TSK::CollaboratorCursorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaboratorCursorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamActivityArray*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamActivityArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamActivityArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamActivityArraySegment*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamActivityArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamActivityArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityAuthorArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityAuthorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityAuthorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandActivityBehaviorArchive*
Arena::CreateMaybeMessage< ::TSK::CommandActivityBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandActivityBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityCursorCollectionArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityCursorCollectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityCursorCollectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityCursorCollectionPersistenceWrapperArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityCursorCollectionPersistenceWrapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityCursorCollectionPersistenceWrapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityNavigationInfoArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityNavigationInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityNavigationInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommentActivityNavigationInfoArchive*
Arena::CreateMaybeMessage< ::TSK::CommentActivityNavigationInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommentActivityNavigationInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache*
Arena::CreateMaybeMessage< ::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityAuthorCacheArchive_ShareParticipantIDCache >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityAuthorCacheArchive_PublicIDCache*
Arena::CreateMaybeMessage< ::TSK::ActivityAuthorCacheArchive_PublicIDCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityAuthorCacheArchive_PublicIDCache >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityAuthorCacheArchive_IndexCache*
Arena::CreateMaybeMessage< ::TSK::ActivityAuthorCacheArchive_IndexCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityAuthorCacheArchive_IndexCache >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityAuthorCacheArchive_FirstJoinCache*
Arena::CreateMaybeMessage< ::TSK::ActivityAuthorCacheArchive_FirstJoinCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityAuthorCacheArchive_FirstJoinCache >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityAuthorCacheArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityAuthorCacheArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityAuthorCacheArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityOnlyCommandArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityOnlyCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityOnlyCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityNotificationItemArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityNotificationItemArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityNotificationItemArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts*
Arena::CreateMaybeMessage< ::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityNotificationParticipantCacheArchive_UniqueIdentifierAndAttempts >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityNotificationParticipantCacheArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityNotificationParticipantCacheArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityNotificationParticipantCacheArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityNotificationQueueArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityNotificationQueueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityNotificationQueueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamTransformationStateArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamTransformationStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamTransformationStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamActivityCounterArchive_ActionTypeCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamActivityCounterArchive_CursorTypeCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamActivityCounterArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamActivityCounterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamActivityCounterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive_DateToAuditAndType >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive*
Arena::CreateMaybeMessage< ::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ActivityStreamRemovedAuthorAuditorPendingStateArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
