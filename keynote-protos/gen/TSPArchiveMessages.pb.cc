// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPArchiveMessages.proto

#include "TSPArchiveMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSP {
PROTOBUF_CONSTEXPR ArchiveInfo::ArchiveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_infos_)*/{}
  , /*decltype(_impl_.identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.should_merge_)*/false} {}
struct ArchiveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArchiveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArchiveInfoDefaultTypeInternal() {}
  union {
    ArchiveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArchiveInfoDefaultTypeInternal _ArchiveInfo_default_instance_;
PROTOBUF_CONSTEXPR MessageInfo::MessageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.field_infos_)*/{}
  , /*decltype(_impl_.object_references_)*/{}
  , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_references_)*/{}
  , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.diff_merge_version_)*/{}
  , /*decltype(_impl_._diff_merge_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fields_to_remove_)*/{}
  , /*decltype(_impl_.diff_read_version_)*/{}
  , /*decltype(_impl_._diff_read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.diff_field_path_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.base_message_index_)*/0u} {}
struct MessageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageInfoDefaultTypeInternal() {}
  union {
    MessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
PROTOBUF_CONSTEXPR FieldInfo::FieldInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_references_)*/{}
  , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_references_)*/{}
  , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.known_field_version_)*/{}
  , /*decltype(_impl_._known_field_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.known_field_feature_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.unknown_field_rule_)*/0
  , /*decltype(_impl_.known_field_rule_)*/0} {}
struct FieldInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldInfoDefaultTypeInternal() {}
  union {
    FieldInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
PROTOBUF_CONSTEXPR FieldPath::FieldPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{}
  , /*decltype(_impl_._path_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FieldPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldPathDefaultTypeInternal() {}
  union {
    FieldPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldPathDefaultTypeInternal _FieldPath_default_instance_;
PROTOBUF_CONSTEXPR ComponentInfo::ComponentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_read_version_)*/{}
  , /*decltype(_impl_._document_read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.document_write_version_)*/{}
  , /*decltype(_impl_._document_write_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.external_references_)*/{}
  , /*decltype(_impl_.data_references_)*/{}
  , /*decltype(_impl_.object_uuid_map_entries_)*/{}
  , /*decltype(_impl_.feature_infos_)*/{}
  , /*decltype(_impl_.component_read_version_)*/{}
  , /*decltype(_impl_._component_read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.component_required_version_)*/{}
  , /*decltype(_impl_._component_required_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.versioned_external_references_)*/{}
  , /*decltype(_impl_.ambiguous_object_identifiers_)*/{}
  , /*decltype(_impl_._ambiguous_object_identifiers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.preferred_locator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.save_token_)*/uint64_t{0u}
  , /*decltype(_impl_.is_stored_outside_object_archive_)*/false
  , /*decltype(_impl_.can_be_dropped_)*/false
  , /*decltype(_impl_.is_wasteful_)*/false
  , /*decltype(_impl_.compression_algorithm_)*/0u
  , /*decltype(_impl_.required_package_identifier_)*/0u} {}
struct ComponentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentInfoDefaultTypeInternal() {}
  union {
    ComponentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentInfoDefaultTypeInternal _ComponentInfo_default_instance_;
PROTOBUF_CONSTEXPR ComponentExternalReference::ComponentExternalReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.component_identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.object_identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.is_weak_)*/false} {}
struct ComponentExternalReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentExternalReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentExternalReferenceDefaultTypeInternal() {}
  union {
    ComponentExternalReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentExternalReferenceDefaultTypeInternal _ComponentExternalReference_default_instance_;
PROTOBUF_CONSTEXPR ComponentDataReference_ObjectReference::ComponentDataReference_ObjectReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/0u} {}
struct ComponentDataReference_ObjectReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentDataReference_ObjectReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentDataReference_ObjectReferenceDefaultTypeInternal() {}
  union {
    ComponentDataReference_ObjectReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentDataReference_ObjectReferenceDefaultTypeInternal _ComponentDataReference_ObjectReference_default_instance_;
PROTOBUF_CONSTEXPR ComponentDataReference::ComponentDataReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_reference_list_)*/{}
  , /*decltype(_impl_.data_identifier_)*/uint64_t{0u}} {}
struct ComponentDataReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentDataReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentDataReferenceDefaultTypeInternal() {}
  union {
    ComponentDataReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentDataReferenceDefaultTypeInternal _ComponentDataReference_default_instance_;
PROTOBUF_CONSTEXPR ObjectUUIDMapEntry::ObjectUUIDMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_)*/nullptr
  , /*decltype(_impl_.identifier_)*/uint64_t{0u}} {}
struct ObjectUUIDMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectUUIDMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectUUIDMapEntryDefaultTypeInternal() {}
  union {
    ObjectUUIDMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectUUIDMapEntryDefaultTypeInternal _ObjectUUIDMapEntry_default_instance_;
PROTOBUF_CONSTEXPR FeatureInfo::FeatureInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.read_version_)*/{}
  , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.write_version_)*/{}
  , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FeatureInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureInfoDefaultTypeInternal() {}
  union {
    FeatureInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureInfoDefaultTypeInternal _FeatureInfo_default_instance_;
PROTOBUF_CONSTEXPR PackageMetadata::PackageMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.components_)*/{}
  , /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_.read_version_)*/{}
  , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.write_version_)*/{}
  , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.file_format_version_)*/{}
  , /*decltype(_impl_._file_format_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.versioned_components_)*/{}
  , /*decltype(_impl_.revision_)*/nullptr
  , /*decltype(_impl_.data_metadata_map_)*/nullptr
  , /*decltype(_impl_.last_object_identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.save_token_)*/uint64_t{0u}
  , /*decltype(_impl_.preferred_package_type_)*/0} {}
struct PackageMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageMetadataDefaultTypeInternal() {}
  union {
    PackageMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageMetadataDefaultTypeInternal _PackageMetadata_default_instance_;
PROTOBUF_CONSTEXPR DocumentRevision::DocumentRevision(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_64_)*/uint64_t{0u}
  , /*decltype(_impl_.sequence_32_)*/0} {}
struct DocumentRevisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentRevisionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentRevisionDefaultTypeInternal() {}
  union {
    DocumentRevision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentRevisionDefaultTypeInternal _DocumentRevision_default_instance_;
PROTOBUF_CONSTEXPR PasteboardMetadata::PasteboardMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_.read_version_)*/{}
  , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_document_uuid_)*/nullptr
  , /*decltype(_impl_.data_metadata_map_)*/nullptr} {}
struct PasteboardMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasteboardMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasteboardMetadataDefaultTypeInternal() {}
  union {
    PasteboardMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasteboardMetadataDefaultTypeInternal _PasteboardMetadata_default_instance_;
PROTOBUF_CONSTEXPR DataInfo::DataInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferred_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_resource_locator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_bookmark_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_mismatched_digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pasteboard_external_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.encryption_info_)*/nullptr
  , /*decltype(_impl_.unmaterialized_ranges_)*/nullptr
  , /*decltype(_impl_.identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.can_download_)*/false
  , /*decltype(_impl_.remote_data_has_package_storage_)*/false
  , /*decltype(_impl_.upload_status_)*/0
  , /*decltype(_impl_.remote_data_length_)*/uint64_t{0u}
  , /*decltype(_impl_.remote_data_mtime_)*/0
  , /*decltype(_impl_.materialized_length_)*/uint64_t{0u}
  , /*decltype(_impl_.download_priority_)*/1} {}
struct DataInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataInfoDefaultTypeInternal() {}
  union {
    DataInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataInfoDefaultTypeInternal _DataInfo_default_instance_;
PROTOBUF_CONSTEXPR DataMetadataMap_DataMetadataMapEntry::DataMetadataMap_DataMetadataMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_metadata_)*/nullptr
  , /*decltype(_impl_.data_identifier_)*/uint64_t{0u}} {}
struct DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal() {}
  union {
    DataMetadataMap_DataMetadataMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal _DataMetadataMap_DataMetadataMapEntry_default_instance_;
PROTOBUF_CONSTEXPR DataMetadataMap::DataMetadataMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_metadata_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataMetadataMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataMetadataMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataMetadataMapDefaultTypeInternal() {}
  union {
    DataMetadataMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataMetadataMapDefaultTypeInternal _DataMetadataMap_default_instance_;
PROTOBUF_CONSTEXPR DataMetadata::DataMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fallback_color_)*/nullptr} {}
struct DataMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataMetadataDefaultTypeInternal() {}
  union {
    DataMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataMetadataDefaultTypeInternal _DataMetadata_default_instance_;
PROTOBUF_CONSTEXPR EncryptionInfo::EncryptionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_infos_)*/{}
  , /*decltype(_impl_.decoded_length_)*/uint64_t{0u}
  , /*decltype(_impl_.preferred_block_size_)*/uint64_t{0u}} {}
struct EncryptionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionInfoDefaultTypeInternal() {}
  union {
    EncryptionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
PROTOBUF_CONSTEXPR EncryptionBlockInfo::EncryptionBlockInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encoded_length_)*/uint64_t{0u}
  , /*decltype(_impl_.decoded_length_)*/uint64_t{0u}} {}
struct EncryptionBlockInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionBlockInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionBlockInfoDefaultTypeInternal() {}
  union {
    EncryptionBlockInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionBlockInfoDefaultTypeInternal _EncryptionBlockInfo_default_instance_;
PROTOBUF_CONSTEXPR ViewStateMetadata::ViewStateMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.external_object_uuid_map_entries_)*/{}
  , /*decltype(_impl_.read_version_)*/{}
  , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.component_)*/nullptr
  , /*decltype(_impl_.version_uuid_)*/nullptr} {}
struct ViewStateMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewStateMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewStateMetadataDefaultTypeInternal() {}
  union {
    ViewStateMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewStateMetadataDefaultTypeInternal _ViewStateMetadata_default_instance_;
PROTOBUF_CONSTEXPR ObjectSerializationMetadata::ObjectSerializationMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_.external_object_uuid_map_entries_)*/{}
  , /*decltype(_impl_.read_version_)*/{}
  , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.source_document_uuid_)*/nullptr
  , /*decltype(_impl_.version_uuid_)*/nullptr
  , /*decltype(_impl_.component_)*/nullptr
  , /*decltype(_impl_.data_metadata_map_)*/nullptr} {}
struct ObjectSerializationMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectSerializationMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectSerializationMetadataDefaultTypeInternal() {}
  union {
    ObjectSerializationMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectSerializationMetadataDefaultTypeInternal _ObjectSerializationMetadata_default_instance_;
PROTOBUF_CONSTEXPR ObjectSerializationDirectory_Entry::ObjectSerializationDirectory_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.locator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}} {}
struct ObjectSerializationDirectory_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectSerializationDirectory_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectSerializationDirectory_EntryDefaultTypeInternal() {}
  union {
    ObjectSerializationDirectory_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectSerializationDirectory_EntryDefaultTypeInternal _ObjectSerializationDirectory_Entry_default_instance_;
PROTOBUF_CONSTEXPR ObjectSerializationDirectory::ObjectSerializationDirectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectSerializationDirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectSerializationDirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectSerializationDirectoryDefaultTypeInternal() {}
  union {
    ObjectSerializationDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectSerializationDirectoryDefaultTypeInternal _ObjectSerializationDirectory_default_instance_;
PROTOBUF_CONSTEXPR DataPropertiesEntryV1::DataPropertiesEntryV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creation_version_)*/{}
  , /*decltype(_impl_._creation_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_mismatched_digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creation_time_interval_since_1970_)*/0
  , /*decltype(_impl_.expects_matched_digest_)*/false} {}
struct DataPropertiesEntryV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPropertiesEntryV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPropertiesEntryV1DefaultTypeInternal() {}
  union {
    DataPropertiesEntryV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPropertiesEntryV1DefaultTypeInternal _DataPropertiesEntryV1_default_instance_;
PROTOBUF_CONSTEXPR DataPropertiesV1::DataPropertiesV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataPropertiesV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPropertiesV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPropertiesV1DefaultTypeInternal() {}
  union {
    DataPropertiesV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPropertiesV1DefaultTypeInternal _DataPropertiesV1_default_instance_;
PROTOBUF_CONSTEXPR DocumentMetadata::DocumentMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_properties_v1_)*/nullptr
  , /*decltype(_impl_.is_in_collaboration_mode_)*/false} {}
struct DocumentMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentMetadataDefaultTypeInternal() {}
  union {
    DocumentMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentMetadataDefaultTypeInternal _DocumentMetadata_default_instance_;
PROTOBUF_CONSTEXPR SupportMetadata_DataCollaborationProperties::SupportMetadata_DataCollaborationProperties(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.acknowledged_by_server_)*/false
  , /*decltype(_impl_.materialized_on_server_)*/false
  , /*decltype(_impl_.is_remote_data_ever_)*/false
  , /*decltype(_impl_.upload_status_)*/0
  , /*decltype(_impl_.revision_sequence_for_materialized_on_server_)*/0
  , /*decltype(_impl_.revision_sequence_for_acknowledged_by_server_)*/0} {}
struct SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal() {}
  union {
    SupportMetadata_DataCollaborationProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal _SupportMetadata_DataCollaborationProperties_default_instance_;
PROTOBUF_CONSTEXPR SupportMetadata::SupportMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_collaboration_properties_)*/{}
  , /*decltype(_impl_.is_in_collaboration_mode_)*/false} {}
struct SupportMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportMetadataDefaultTypeInternal() {}
  union {
    SupportMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportMetadataDefaultTypeInternal _SupportMetadata_default_instance_;
}  // namespace TSP
static ::_pb::Metadata file_level_metadata_TSPArchiveMessages_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSPArchiveMessages_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSPArchiveMessages_2eproto = nullptr;

const uint32_t TableStruct_TSPArchiveMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _impl_.message_infos_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _impl_.should_merge_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.field_infos_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.object_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.data_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.base_message_index_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.diff_merge_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.diff_field_path_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.fields_to_remove_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.diff_read_version_),
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.unknown_field_rule_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.object_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.data_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.known_field_rule_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.known_field_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.known_field_feature_identifier_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldPath, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.preferred_locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.document_read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.document_write_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.external_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.data_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.is_stored_outside_object_archive_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.object_uuid_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.save_token_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.feature_infos_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.component_read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.component_required_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.compression_algorithm_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.can_be_dropped_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.versioned_external_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.is_wasteful_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.ambiguous_object_identifiers_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.required_package_identifier_),
  2,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  7,
  5,
  ~0u,
  6,
  ~0u,
  8,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_.component_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_.object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_.is_weak_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, _impl_.object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, _impl_.count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _impl_.data_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _impl_.object_reference_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, _impl_.uuid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, _impl_.read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, _impl_.write_version_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.last_object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.revision_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.components_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.write_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.file_format_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.save_token_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.preferred_package_type_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.data_metadata_map_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.versioned_components_),
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, _impl_.sequence_32_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, _impl_.sequence_64_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.source_document_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.data_metadata_map_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.read_version_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.preferred_file_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.document_resource_locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.source_bookmark_data_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.remote_url_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.can_download_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.download_priority_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.encryption_info_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.last_mismatched_digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.unmaterialized_ranges_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.remote_data_length_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.remote_data_has_package_storage_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.upload_status_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.remote_data_mtime_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.materialized_length_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.pasteboard_external_file_path_),
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  12,
  18,
  8,
  9,
  6,
  10,
  15,
  13,
  14,
  16,
  17,
  7,
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, _impl_.data_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, _impl_.data_metadata_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap, _impl_.data_metadata_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadata, _impl_.fallback_color_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, _impl_.decoded_length_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, _impl_.preferred_block_size_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, _impl_.block_infos_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, _impl_.encoded_length_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, _impl_.decoded_length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.version_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.component_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.external_object_uuid_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.read_version_),
  ~0u,
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.source_document_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.version_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.component_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.external_object_uuid_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.data_metadata_map_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _impl_.read_version_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, _impl_.locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, _impl_.size_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _impl_.expects_matched_digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _impl_.creation_time_interval_since_1970_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _impl_.creation_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _impl_.last_mismatched_digest_),
  0,
  3,
  2,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesV1, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, _impl_.is_in_collaboration_mode_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, _impl_.data_properties_v1_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_.acknowledged_by_server_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_.materialized_on_server_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_.revision_sequence_for_materialized_on_server_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_.upload_status_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_.is_remote_data_ever_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _impl_.revision_sequence_for_acknowledged_by_server_),
  0,
  1,
  2,
  5,
  4,
  3,
  6,
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, _impl_.is_in_collaboration_mode_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, _impl_.data_collaboration_properties_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::TSP::ArchiveInfo)},
  { 12, 29, -1, sizeof(::TSP::MessageInfo)},
  { 40, 54, -1, sizeof(::TSP::FieldInfo)},
  { 62, -1, -1, sizeof(::TSP::FieldPath)},
  { 69, 94, -1, sizeof(::TSP::ComponentInfo)},
  { 113, 122, -1, sizeof(::TSP::ComponentExternalReference)},
  { 125, 133, -1, sizeof(::TSP::ComponentDataReference_ObjectReference)},
  { 135, 143, -1, sizeof(::TSP::ComponentDataReference)},
  { 145, 153, -1, sizeof(::TSP::ObjectUUIDMapEntry)},
  { 155, 164, -1, sizeof(::TSP::FeatureInfo)},
  { 167, 184, -1, sizeof(::TSP::PackageMetadata)},
  { 195, 204, -1, sizeof(::TSP::DocumentRevision)},
  { 207, 219, -1, sizeof(::TSP::PasteboardMetadata)},
  { 225, 250, -1, sizeof(::TSP::DataInfo)},
  { 269, 277, -1, sizeof(::TSP::DataMetadataMap_DataMetadataMapEntry)},
  { 279, -1, -1, sizeof(::TSP::DataMetadataMap)},
  { 286, 293, -1, sizeof(::TSP::DataMetadata)},
  { 294, 303, -1, sizeof(::TSP::EncryptionInfo)},
  { 306, 314, -1, sizeof(::TSP::EncryptionBlockInfo)},
  { 316, 327, -1, sizeof(::TSP::ViewStateMetadata)},
  { 332, 346, -1, sizeof(::TSP::ObjectSerializationMetadata)},
  { 354, 363, -1, sizeof(::TSP::ObjectSerializationDirectory_Entry)},
  { 366, -1, -1, sizeof(::TSP::ObjectSerializationDirectory)},
  { 373, 384, -1, sizeof(::TSP::DataPropertiesEntryV1)},
  { 389, -1, -1, sizeof(::TSP::DataPropertiesV1)},
  { 396, 404, -1, sizeof(::TSP::DocumentMetadata)},
  { 406, 419, -1, sizeof(::TSP::SupportMetadata_DataCollaborationProperties)},
  { 426, 434, -1, sizeof(::TSP::SupportMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSP::_ArchiveInfo_default_instance_._instance,
  &::TSP::_MessageInfo_default_instance_._instance,
  &::TSP::_FieldInfo_default_instance_._instance,
  &::TSP::_FieldPath_default_instance_._instance,
  &::TSP::_ComponentInfo_default_instance_._instance,
  &::TSP::_ComponentExternalReference_default_instance_._instance,
  &::TSP::_ComponentDataReference_ObjectReference_default_instance_._instance,
  &::TSP::_ComponentDataReference_default_instance_._instance,
  &::TSP::_ObjectUUIDMapEntry_default_instance_._instance,
  &::TSP::_FeatureInfo_default_instance_._instance,
  &::TSP::_PackageMetadata_default_instance_._instance,
  &::TSP::_DocumentRevision_default_instance_._instance,
  &::TSP::_PasteboardMetadata_default_instance_._instance,
  &::TSP::_DataInfo_default_instance_._instance,
  &::TSP::_DataMetadataMap_DataMetadataMapEntry_default_instance_._instance,
  &::TSP::_DataMetadataMap_default_instance_._instance,
  &::TSP::_DataMetadata_default_instance_._instance,
  &::TSP::_EncryptionInfo_default_instance_._instance,
  &::TSP::_EncryptionBlockInfo_default_instance_._instance,
  &::TSP::_ViewStateMetadata_default_instance_._instance,
  &::TSP::_ObjectSerializationMetadata_default_instance_._instance,
  &::TSP::_ObjectSerializationDirectory_Entry_default_instance_._instance,
  &::TSP::_ObjectSerializationDirectory_default_instance_._instance,
  &::TSP::_DataPropertiesEntryV1_default_instance_._instance,
  &::TSP::_DataPropertiesV1_default_instance_._instance,
  &::TSP::_DocumentMetadata_default_instance_._instance,
  &::TSP::_SupportMetadata_DataCollaborationProperties_default_instance_._instance,
  &::TSP::_SupportMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_TSPArchiveMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSPArchiveMessages.proto\022\003TSP\032\021TSPMess"
  "ages.proto\"`\n\013ArchiveInfo\022\022\n\nidentifier\030"
  "\001 \001(\004\022\'\n\rmessage_infos\030\002 \003(\0132\020.TSP.Messa"
  "geInfo\022\024\n\014should_merge\030\003 \001(\010\"\317\002\n\013Message"
  "Info\022\014\n\004type\030\001 \002(\r\022\023\n\007version\030\002 \003(\rB\002\020\001\022"
  "\016\n\006length\030\003 \002(\r\022#\n\013field_infos\030\004 \003(\0132\016.T"
  "SP.FieldInfo\022\035\n\021object_references\030\005 \003(\004B"
  "\002\020\001\022\033\n\017data_references\030\006 \003(\004B\002\020\001\022\032\n\022base"
  "_message_index\030\007 \001(\r\022\036\n\022diff_merge_versi"
  "on\030\010 \003(\rB\002\020\001\022\'\n\017diff_field_path\030\t \001(\0132\016."
  "TSP.FieldPath\022(\n\020fields_to_remove\030\n \003(\0132"
  "\016.TSP.FieldPath\022\035\n\021diff_read_version\030\013 \003"
  "(\rB\002\020\001\"\223\005\n\tFieldInfo\022\034\n\004path\030\001 \002(\0132\016.TSP"
  ".FieldPath\022(\n\004type\030\002 \001(\0162\023.TSP.FieldInfo"
  ".Type:\005Value\022[\n\022unknown_field_rule\030\003 \001(\016"
  "2\037.TSP.FieldInfo.UnknownFieldRule:\036Ignor"
  "eAndPreserveUntilModified\022\035\n\021object_refe"
  "rences\030\004 \003(\004B\002\020\001\022\033\n\017data_references\030\005 \003("
  "\004B\002\020\001\022=\n\020known_field_rule\030\006 \001(\0162\035.TSP.Fi"
  "eldInfo.KnownFieldRule:\004None\022\037\n\023known_fi"
  "eld_version\030\007 \003(\rB\002\020\001\022&\n\036known_field_fea"
  "ture_identifier\030\010 \001(\t\"F\n\004Type\022\t\n\005Value\020\000"
  "\022\023\n\017ObjectReference\020\001\022\021\n\rDataReference\020\002"
  "\022\013\n\007Message\020\003\"|\n\020UnknownFieldRule\022\"\n\036Ign"
  "oreAndPreserveUntilModified\020\000\022\025\n\021IgnoreA"
  "ndPreserve\020\001\022\022\n\016MustUnderstand\020\002\022\031\n\014NotS"
  "upported\020\377\377\377\377\377\377\377\377\377\001\"W\n\016KnownFieldRule\022\010\n"
  "\004None\020\000\022#\n\037PreserveNewerValueUntilModifi"
  "ed\020\001\022\026\n\022PreserveNewerValue\020\002\"\035\n\tFieldPat"
  "h\022\020\n\004path\030\001 \003(\rB\002\020\001\"\344\005\n\rComponentInfo\022\022\n"
  "\nidentifier\030\001 \002(\004\022\031\n\021preferred_locator\030\002"
  " \002(\t\022\017\n\007locator\030\003 \001(\t\022!\n\025document_read_v"
  "ersion\030\004 \003(\rB\002\020\001\022\"\n\026document_write_versi"
  "on\030\005 \003(\rB\002\020\001\022<\n\023external_references\030\006 \003("
  "\0132\037.TSP.ComponentExternalReference\0224\n\017da"
  "ta_references\030\007 \003(\0132\033.TSP.ComponentDataR"
  "eference\022/\n is_stored_outside_object_arc"
  "hive\030\n \001(\010:\005false\0228\n\027object_uuid_map_ent"
  "ries\030\013 \003(\0132\027.TSP.ObjectUUIDMapEntry\022\025\n\ns"
  "ave_token\030\014 \001(\004:\0010\022\'\n\rfeature_infos\030\r \003("
  "\0132\020.TSP.FeatureInfo\022\"\n\026component_read_ve"
  "rsion\030\016 \003(\rB\002\020\001\022&\n\032component_required_ve"
  "rsion\030\017 \003(\rB\002\020\001\022\035\n\025compression_algorithm"
  "\030\020 \001(\r\022\026\n\016can_be_dropped\030\021 \001(\010\022F\n\035versio"
  "ned_external_references\030\022 \003(\0132\037.TSP.Comp"
  "onentExternalReference\022\023\n\013is_wasteful\030\023 "
  "\001(\010\022(\n\034ambiguous_object_identifiers\030\024 \003("
  "\004B\002\020\001\022#\n\033required_package_identifier\030\025 \001"
  "(\r\"f\n\032ComponentExternalReference\022\034\n\024comp"
  "onent_identifier\030\001 \002(\004\022\031\n\021object_identif"
  "ier\030\002 \001(\004\022\017\n\007is_weak\030\003 \001(\010\"\272\001\n\026Component"
  "DataReference\022\027\n\017data_identifier\030\001 \002(\004\022J"
  "\n\025object_reference_list\030\002 \003(\0132+.TSP.Comp"
  "onentDataReference.ObjectReference\032;\n\017Ob"
  "jectReference\022\031\n\021object_identifier\030\001 \002(\004"
  "\022\r\n\005count\030\002 \002(\r\"A\n\022ObjectUUIDMapEntry\022\022\n"
  "\nidentifier\030\001 \002(\004\022\027\n\004uuid\030\002 \002(\0132\t.TSP.UU"
  "ID\"V\n\013FeatureInfo\022\022\n\nidentifier\030\001 \002(\t\022\030\n"
  "\014read_version\030\002 \003(\rB\002\020\001\022\031\n\rwrite_version"
  "\030\003 \003(\rB\002\020\001\"\360\003\n\017PackageMetadata\022\036\n\026last_o"
  "bject_identifier\030\001 \002(\004\022\'\n\010revision\030\002 \001(\013"
  "2\025.TSP.DocumentRevision\022&\n\ncomponents\030\003 "
  "\003(\0132\022.TSP.ComponentInfo\022\034\n\005datas\030\004 \003(\0132\r"
  ".TSP.DataInfo\022\030\n\014read_version\030\005 \003(\rB\002\020\001\022"
  "\031\n\rwrite_version\030\006 \003(\rB\002\020\001\022\037\n\023file_forma"
  "t_version\030\007 \003(\rB\002\020\001\022\025\n\nsave_token\030\010 \001(\004:"
  "\0010\022I\n\026preferred_package_type\030\t \001(\0162 .TSP"
  ".PackageMetadata.PackageType:\007Default\022)\n"
  "\021data_metadata_map\030\n \001(\0132\016.TSP.Reference"
  "\0220\n\024versioned_components\030\013 \003(\0132\022.TSP.Com"
  "ponentInfo\"9\n\013PackageType\022\013\n\007Default\020\000\022\r"
  "\n\tDirectory\020\001\022\016\n\nSingleFile\020\002\"V\n\020Documen"
  "tRevision\022\026\n\013sequence_32\030\003 \001(\005:\0010\022\022\n\nide"
  "ntifier\030\002 \001(\t\022\026\n\013sequence_64\030\001 \001(\004:\0010\"\307\001"
  "\n\022PasteboardMetadata\022\023\n\007version\030\001 \003(\rB\002\020"
  "\001\022\020\n\010app_name\030\002 \002(\t\022\034\n\005datas\030\003 \003(\0132\r.TSP"
  ".DataInfo\022\'\n\024source_document_uuid\030\005 \001(\0132"
  "\t.TSP.UUID\022)\n\021data_metadata_map\030\006 \001(\0132\016."
  "TSP.Reference\022\030\n\014read_version\030\007 \003(\rB\002\020\001\""
  "\327\005\n\010DataInfo\022\022\n\nidentifier\030\001 \002(\004\022\016\n\006dige"
  "st\030\002 \002(\014\022\033\n\023preferred_file_name\030\003 \002(\t\022\021\n"
  "\tfile_name\030\004 \001(\t\022!\n\031document_resource_lo"
  "cator\030\005 \001(\t\022\034\n\024source_bookmark_data\030\006 \001("
  "\014\022\022\n\nremote_url\030\007 \001(\t\022\033\n\014can_download\030\010 "
  "\001(\010:\005false\022B\n\021download_priority\030\t \001(\0162\036."
  "TSP.DataInfo.DownloadPriority:\007Default\022\'"
  "\n\nattributes\030\n \001(\0132\023.TSP.DataAttributes\022"
  ",\n\017encryption_info\030\013 \001(\0132\023.TSP.Encryptio"
  "nInfo\022\036\n\026last_mismatched_digest\030\014 \001(\014\022,\n"
  "\025unmaterialized_ranges\030\r \001(\0132\r.TSP.Index"
  "Set\022\032\n\022remote_data_length\030\016 \001(\004\022.\n\037remot"
  "e_data_has_package_storage\030\017 \001(\010:\005false\022"
  "F\n\rupload_status\030\020 \001(\0162\025.TSP.DataUploadS"
  "tatus:\030DataUploadStatus_Pending\022\031\n\021remot"
  "e_data_mtime\030\021 \001(\001\022\033\n\023materialized_lengt"
  "h\030\022 \001(\004\022%\n\035pasteboard_external_file_path"
  "\030c \001(\t\")\n\020DownloadPriority\022\010\n\004High\020\000\022\013\n\007"
  "Default\020\001\"\263\001\n\017DataMetadataMap\022H\n\025data_me"
  "tadata_entries\030\001 \003(\0132).TSP.DataMetadataM"
  "ap.DataMetadataMapEntry\032V\n\024DataMetadataM"
  "apEntry\022\027\n\017data_identifier\030\001 \002(\004\022%\n\rdata"
  "_metadata\030\002 \002(\0132\016.TSP.Reference\"2\n\014DataM"
  "etadata\022\"\n\016fallback_color\030\001 \001(\0132\n.TSP.Co"
  "lor\"u\n\016EncryptionInfo\022\026\n\016decoded_length\030"
  "\001 \001(\004\022\034\n\024preferred_block_size\030\002 \001(\004\022-\n\013b"
  "lock_infos\030\003 \003(\0132\030.TSP.EncryptionBlockIn"
  "fo\"E\n\023EncryptionBlockInfo\022\026\n\016encoded_len"
  "gth\030\001 \002(\004\022\026\n\016decoded_length\030\002 \001(\004\"\315\001\n\021Vi"
  "ewStateMetadata\022\023\n\007version\030\001 \003(\rB\002\020\001\022\037\n\014"
  "version_uuid\030\004 \001(\0132\t.TSP.UUID\022%\n\tcompone"
  "nt\030\003 \002(\0132\022.TSP.ComponentInfo\022A\n external"
  "_object_uuid_map_entries\030\005 \003(\0132\027.TSP.Obj"
  "ectUUIDMapEntry\022\030\n\014read_version\030\006 \003(\rB\002\020"
  "\001\"\311\002\n\033ObjectSerializationMetadata\022\023\n\007ver"
  "sion\030\001 \003(\rB\002\020\001\022\'\n\024source_document_uuid\030\002"
  " \001(\0132\t.TSP.UUID\022\037\n\014version_uuid\030\003 \001(\0132\t."
  "TSP.UUID\022%\n\tcomponent\030\004 \002(\0132\022.TSP.Compon"
  "entInfo\022\034\n\005datas\030\005 \003(\0132\r.TSP.DataInfo\022A\n"
  " external_object_uuid_map_entries\030\006 \003(\0132"
  "\027.TSP.ObjectUUIDMapEntry\022)\n\021data_metadat"
  "a_map\030\007 \001(\0132\016.TSP.Reference\022\030\n\014read_vers"
  "ion\030\010 \003(\rB\002\020\001\"\220\001\n\034ObjectSerializationDir"
  "ectory\0228\n\007entries\030\001 \003(\0132\'.TSP.ObjectSeri"
  "alizationDirectory.Entry\0326\n\005Entry\022\017\n\007loc"
  "ator\030\001 \002(\t\022\016\n\006offset\030\002 \002(\004\022\014\n\004size\030\003 \002(\004"
  "\"\260\001\n\025DataPropertiesEntryV1\022\016\n\006digest\030\001 \002"
  "(\014\022\036\n\026expects_matched_digest\030\002 \001(\010\022)\n!cr"
  "eation_time_interval_since_1970\030\003 \001(\001\022\034\n"
  "\020creation_version\030\004 \003(\rB\002\020\001\022\036\n\026last_mism"
  "atched_digest\030\005 \001(\014\"B\n\020DataPropertiesV1\022"
  ".\n\nproperties\030\001 \003(\0132\032.TSP.DataProperties"
  "EntryV1\"g\n\020DocumentMetadata\022 \n\030is_in_col"
  "laboration_mode\030\001 \001(\010\0221\n\022data_properties"
  "_v1\030\003 \001(\0132\025.TSP.DataPropertiesV1\"\350\003\n\017Sup"
  "portMetadata\022 \n\030is_in_collaboration_mode"
  "\030\001 \001(\010\022W\n\035data_collaboration_properties\030"
  "\002 \003(\01320.TSP.SupportMetadata.DataCollabor"
  "ationProperties\032\331\002\n\033DataCollaborationPro"
  "perties\022\016\n\006digest\030\001 \002(\014\022%\n\026acknowledged_"
  "by_server\030\002 \001(\010:\005false\022%\n\026materialized_o"
  "n_server\030\003 \001(\010:\005false\0227\n,revision_sequen"
  "ce_for_materialized_on_server\030\005 \001(\005:\0010\022F"
  "\n\rupload_status\030\004 \001(\0162\025.TSP.DataUploadSt"
  "atus:\030DataUploadStatus_Pending\022\"\n\023is_rem"
  "ote_data_ever\030\006 \001(\010:\005false\0227\n,revision_s"
  "equence_for_acknowledged_by_server\030\007 \001(\005"
  ":\0010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSPArchiveMessages_2eproto_deps[1] = {
  &::descriptor_table_TSPMessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSPArchiveMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSPArchiveMessages_2eproto = {
    false, false, 5843, descriptor_table_protodef_TSPArchiveMessages_2eproto,
    "TSPArchiveMessages.proto",
    &descriptor_table_TSPArchiveMessages_2eproto_once, descriptor_table_TSPArchiveMessages_2eproto_deps, 1, 28,
    schemas, file_default_instances, TableStruct_TSPArchiveMessages_2eproto::offsets,
    file_level_metadata_TSPArchiveMessages_2eproto, file_level_enum_descriptors_TSPArchiveMessages_2eproto,
    file_level_service_descriptors_TSPArchiveMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSPArchiveMessages_2eproto_getter() {
  return &descriptor_table_TSPArchiveMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSPArchiveMessages_2eproto(&descriptor_table_TSPArchiveMessages_2eproto);
namespace TSP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[0];
}
bool FieldInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FieldInfo_Type FieldInfo::Value;
constexpr FieldInfo_Type FieldInfo::ObjectReference;
constexpr FieldInfo_Type FieldInfo::DataReference;
constexpr FieldInfo_Type FieldInfo::Message;
constexpr FieldInfo_Type FieldInfo::Type_MIN;
constexpr FieldInfo_Type FieldInfo::Type_MAX;
constexpr int FieldInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_UnknownFieldRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[1];
}
bool FieldInfo_UnknownFieldRule_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FieldInfo_UnknownFieldRule FieldInfo::IgnoreAndPreserveUntilModified;
constexpr FieldInfo_UnknownFieldRule FieldInfo::IgnoreAndPreserve;
constexpr FieldInfo_UnknownFieldRule FieldInfo::MustUnderstand;
constexpr FieldInfo_UnknownFieldRule FieldInfo::NotSupported;
constexpr FieldInfo_UnknownFieldRule FieldInfo::UnknownFieldRule_MIN;
constexpr FieldInfo_UnknownFieldRule FieldInfo::UnknownFieldRule_MAX;
constexpr int FieldInfo::UnknownFieldRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_KnownFieldRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[2];
}
bool FieldInfo_KnownFieldRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FieldInfo_KnownFieldRule FieldInfo::None;
constexpr FieldInfo_KnownFieldRule FieldInfo::PreserveNewerValueUntilModified;
constexpr FieldInfo_KnownFieldRule FieldInfo::PreserveNewerValue;
constexpr FieldInfo_KnownFieldRule FieldInfo::KnownFieldRule_MIN;
constexpr FieldInfo_KnownFieldRule FieldInfo::KnownFieldRule_MAX;
constexpr int FieldInfo::KnownFieldRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackageMetadata_PackageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[3];
}
bool PackageMetadata_PackageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PackageMetadata_PackageType PackageMetadata::Default;
constexpr PackageMetadata_PackageType PackageMetadata::Directory;
constexpr PackageMetadata_PackageType PackageMetadata::SingleFile;
constexpr PackageMetadata_PackageType PackageMetadata::PackageType_MIN;
constexpr PackageMetadata_PackageType PackageMetadata::PackageType_MAX;
constexpr int PackageMetadata::PackageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataInfo_DownloadPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[4];
}
bool DataInfo_DownloadPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataInfo_DownloadPriority DataInfo::High;
constexpr DataInfo_DownloadPriority DataInfo::Default;
constexpr DataInfo_DownloadPriority DataInfo::DownloadPriority_MIN;
constexpr DataInfo_DownloadPriority DataInfo::DownloadPriority_MAX;
constexpr int DataInfo::DownloadPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ArchiveInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ArchiveInfo>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_should_merge(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArchiveInfo::ArchiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ArchiveInfo)
}
ArchiveInfo::ArchiveInfo(const ArchiveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArchiveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_infos_){from._impl_.message_infos_}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.should_merge_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.identifier_, &from._impl_.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.should_merge_) -
    reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.should_merge_));
  // @@protoc_insertion_point(copy_constructor:TSP.ArchiveInfo)
}

inline void ArchiveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_infos_){arena}
    , decltype(_impl_.identifier_){uint64_t{0u}}
    , decltype(_impl_.should_merge_){false}
  };
}

ArchiveInfo::~ArchiveInfo() {
  // @@protoc_insertion_point(destructor:TSP.ArchiveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArchiveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_infos_.~RepeatedPtrField();
}

void ArchiveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArchiveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ArchiveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.should_merge_) -
        reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.should_merge_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArchiveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.MessageInfo message_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool should_merge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_should_merge(&has_bits);
          _impl_.should_merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArchiveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ArchiveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // repeated .TSP.MessageInfo message_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool should_merge = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_should_merge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ArchiveInfo)
  return target;
}

size_t ArchiveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ArchiveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.MessageInfo message_infos = 2;
  total_size += 1UL * this->_internal_message_infos_size();
  for (const auto& msg : this->_impl_.message_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
    }

    // optional bool should_merge = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArchiveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArchiveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArchiveInfo::GetClassData() const { return &_class_data_; }


void ArchiveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArchiveInfo*>(&to_msg);
  auto& from = static_cast<const ArchiveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ArchiveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.message_infos_.MergeFrom(from._impl_.message_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.identifier_ = from._impl_.identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.should_merge_ = from._impl_.should_merge_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArchiveInfo::CopyFrom(const ArchiveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ArchiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.message_infos_))
    return false;
  return true;
}

void ArchiveInfo::InternalSwap(ArchiveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.message_infos_.InternalSwap(&other->_impl_.message_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArchiveInfo, _impl_.should_merge_)
      + sizeof(ArchiveInfo::_impl_.should_merge_)
      - PROTOBUF_FIELD_OFFSET(ArchiveInfo, _impl_.identifier_)>(
          reinterpret_cast<char*>(&_impl_.identifier_),
          reinterpret_cast<char*>(&other->_impl_.identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchiveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[0]);
}

// ===================================================================

class MessageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageInfo>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base_message_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::FieldPath& diff_field_path(const MessageInfo* msg);
  static void set_has_diff_field_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSP::FieldPath&
MessageInfo::_Internal::diff_field_path(const MessageInfo* msg) {
  return *msg->_impl_.diff_field_path_;
}
MessageInfo::MessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.MessageInfo)
}
MessageInfo::MessageInfo(const MessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.field_infos_){from._impl_.field_infos_}
    , decltype(_impl_.object_references_){from._impl_.object_references_}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){from._impl_.data_references_}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.diff_merge_version_){from._impl_.diff_merge_version_}
    , /*decltype(_impl_._diff_merge_version_cached_byte_size_)*/{0}
    , decltype(_impl_.fields_to_remove_){from._impl_.fields_to_remove_}
    , decltype(_impl_.diff_read_version_){from._impl_.diff_read_version_}
    , /*decltype(_impl_._diff_read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.diff_field_path_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.base_message_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_diff_field_path()) {
    _this->_impl_.diff_field_path_ = new ::TSP::FieldPath(*from._impl_.diff_field_path_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_message_index_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.base_message_index_));
  // @@protoc_insertion_point(copy_constructor:TSP.MessageInfo)
}

inline void MessageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){arena}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.field_infos_){arena}
    , decltype(_impl_.object_references_){arena}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){arena}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.diff_merge_version_){arena}
    , /*decltype(_impl_._diff_merge_version_cached_byte_size_)*/{0}
    , decltype(_impl_.fields_to_remove_){arena}
    , decltype(_impl_.diff_read_version_){arena}
    , /*decltype(_impl_._diff_read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.diff_field_path_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.base_message_index_){0u}
  };
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:TSP.MessageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.field_infos_.~RepeatedPtrField();
  _impl_.object_references_.~RepeatedField();
  _impl_.data_references_.~RepeatedField();
  _impl_.diff_merge_version_.~RepeatedField();
  _impl_.fields_to_remove_.~RepeatedPtrField();
  _impl_.diff_read_version_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.diff_field_path_;
}

void MessageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.MessageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  _impl_.field_infos_.Clear();
  _impl_.object_references_.Clear();
  _impl_.data_references_.Clear();
  _impl_.diff_merge_version_.Clear();
  _impl_.fields_to_remove_.Clear();
  _impl_.diff_read_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.diff_field_path_ != nullptr);
    _impl_.diff_field_path_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_message_index_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.base_message_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 version = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.FieldInfo field_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 object_references = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_object_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 data_references = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_data_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_message_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_base_message_index(&has_bits);
          _impl_.base_message_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 diff_merge_version = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_diff_merge_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_diff_merge_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.FieldPath diff_field_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff_field_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.FieldPath fields_to_remove = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_to_remove(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 diff_read_version = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_diff_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_diff_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.MessageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated uint32 version = 2 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_version(), byte_size, target);
    }
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated .TSP.FieldInfo field_infos = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 object_references = 5 [packed = true];
  {
    int byte_size = _impl_._object_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_object_references(), byte_size, target);
    }
  }

  // repeated uint64 data_references = 6 [packed = true];
  {
    int byte_size = _impl_._data_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_data_references(), byte_size, target);
    }
  }

  // optional uint32 base_message_index = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_base_message_index(), target);
  }

  // repeated uint32 diff_merge_version = 8 [packed = true];
  {
    int byte_size = _impl_._diff_merge_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_diff_merge_version(), byte_size, target);
    }
  }

  // optional .TSP.FieldPath diff_field_path = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::diff_field_path(this),
        _Internal::diff_field_path(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.FieldPath fields_to_remove = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_to_remove_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields_to_remove(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 diff_read_version = 11 [packed = true];
  {
    int byte_size = _impl_._diff_read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_diff_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.MessageInfo)
  return target;
}

size_t MessageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.MessageInfo)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_length()) {
    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return total_size;
}
size_t MessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.MessageInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());

    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.FieldInfo field_infos = 4;
  total_size += 1UL * this->_internal_field_infos_size();
  for (const auto& msg : this->_impl_.field_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 object_references = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 data_references = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.data_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 diff_merge_version = 8 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.diff_merge_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._diff_merge_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.FieldPath fields_to_remove = 10;
  total_size += 1UL * this->_internal_fields_to_remove_size();
  for (const auto& msg : this->_impl_.fields_to_remove_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 diff_read_version = 11 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.diff_read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._diff_read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .TSP.FieldPath diff_field_path = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.diff_field_path_);
  }

  // optional uint32 base_message_index = 7;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_message_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageInfo::GetClassData() const { return &_class_data_; }


void MessageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageInfo*>(&to_msg);
  auto& from = static_cast<const MessageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.MessageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_impl_.field_infos_.MergeFrom(from._impl_.field_infos_);
  _this->_impl_.object_references_.MergeFrom(from._impl_.object_references_);
  _this->_impl_.data_references_.MergeFrom(from._impl_.data_references_);
  _this->_impl_.diff_merge_version_.MergeFrom(from._impl_.diff_merge_version_);
  _this->_impl_.fields_to_remove_.MergeFrom(from._impl_.fields_to_remove_);
  _this->_impl_.diff_read_version_.MergeFrom(from._impl_.diff_read_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_diff_field_path()->::TSP::FieldPath::MergeFrom(
          from._internal_diff_field_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.base_message_index_ = from._impl_.base_message_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.field_infos_))
    return false;
  return true;
}

void MessageInfo::InternalSwap(MessageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  _impl_.field_infos_.InternalSwap(&other->_impl_.field_infos_);
  _impl_.object_references_.InternalSwap(&other->_impl_.object_references_);
  _impl_.data_references_.InternalSwap(&other->_impl_.data_references_);
  _impl_.diff_merge_version_.InternalSwap(&other->_impl_.diff_merge_version_);
  _impl_.fields_to_remove_.InternalSwap(&other->_impl_.fields_to_remove_);
  _impl_.diff_read_version_.InternalSwap(&other->_impl_.diff_read_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageInfo, _impl_.base_message_index_)
      + sizeof(MessageInfo::_impl_.base_message_index_)
      - PROTOBUF_FIELD_OFFSET(MessageInfo, _impl_.diff_field_path_)>(
          reinterpret_cast<char*>(&_impl_.diff_field_path_),
          reinterpret_cast<char*>(&other->_impl_.diff_field_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[1]);
}

// ===================================================================

class FieldInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldInfo>()._impl_._has_bits_);
  static const ::TSP::FieldPath& path(const FieldInfo* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown_field_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_known_field_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_known_field_feature_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::FieldPath&
FieldInfo::_Internal::path(const FieldInfo* msg) {
  return *msg->_impl_.path_;
}
FieldInfo::FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.FieldInfo)
}
FieldInfo::FieldInfo(const FieldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_references_){from._impl_.object_references_}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){from._impl_.data_references_}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.known_field_version_){from._impl_.known_field_version_}
    , /*decltype(_impl_._known_field_version_cached_byte_size_)*/{0}
    , decltype(_impl_.known_field_feature_identifier_){}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.unknown_field_rule_){}
    , decltype(_impl_.known_field_rule_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.known_field_feature_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.known_field_feature_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_known_field_feature_identifier()) {
    _this->_impl_.known_field_feature_identifier_.Set(from._internal_known_field_feature_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_path()) {
    _this->_impl_.path_ = new ::TSP::FieldPath(*from._impl_.path_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.known_field_rule_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.known_field_rule_));
  // @@protoc_insertion_point(copy_constructor:TSP.FieldInfo)
}

inline void FieldInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_references_){arena}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){arena}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.known_field_version_){arena}
    , /*decltype(_impl_._known_field_version_cached_byte_size_)*/{0}
    , decltype(_impl_.known_field_feature_identifier_){}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.unknown_field_rule_){0}
    , decltype(_impl_.known_field_rule_){0}
  };
  _impl_.known_field_feature_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.known_field_feature_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FieldInfo::~FieldInfo() {
  // @@protoc_insertion_point(destructor:TSP.FieldInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_references_.~RepeatedField();
  _impl_.data_references_.~RepeatedField();
  _impl_.known_field_version_.~RepeatedField();
  _impl_.known_field_feature_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.path_;
}

void FieldInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FieldInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_references_.Clear();
  _impl_.data_references_.Clear();
  _impl_.known_field_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.known_field_feature_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.path_ != nullptr);
      _impl_.path_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.known_field_rule_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.known_field_rule_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.FieldPath path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.Type type = 2 [default = Value];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_Type_IsValid(val))) {
            _internal_set_type(static_cast<::TSP::FieldInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.UnknownFieldRule unknown_field_rule = 3 [default = IgnoreAndPreserveUntilModified];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_UnknownFieldRule_IsValid(val))) {
            _internal_set_unknown_field_rule(static_cast<::TSP::FieldInfo_UnknownFieldRule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 object_references = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_object_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 data_references = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_data_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.KnownFieldRule known_field_rule = 6 [default = None];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_KnownFieldRule_IsValid(val))) {
            _internal_set_known_field_rule(static_cast<::TSP::FieldInfo_KnownFieldRule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 known_field_version = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_known_field_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_known_field_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string known_field_feature_identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_known_field_feature_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.FieldInfo.known_field_feature_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FieldInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.FieldPath path = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.FieldInfo.Type type = 2 [default = Value];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .TSP.FieldInfo.UnknownFieldRule unknown_field_rule = 3 [default = IgnoreAndPreserveUntilModified];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_unknown_field_rule(), target);
  }

  // repeated uint64 object_references = 4 [packed = true];
  {
    int byte_size = _impl_._object_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_object_references(), byte_size, target);
    }
  }

  // repeated uint64 data_references = 5 [packed = true];
  {
    int byte_size = _impl_._data_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_data_references(), byte_size, target);
    }
  }

  // optional .TSP.FieldInfo.KnownFieldRule known_field_rule = 6 [default = None];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_known_field_rule(), target);
  }

  // repeated uint32 known_field_version = 7 [packed = true];
  {
    int byte_size = _impl_._known_field_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_known_field_version(), byte_size, target);
    }
  }

  // optional string known_field_feature_identifier = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_known_field_feature_identifier().data(), static_cast<int>(this->_internal_known_field_feature_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.FieldInfo.known_field_feature_identifier");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_known_field_feature_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FieldInfo)
  return target;
}

size_t FieldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FieldInfo)
  size_t total_size = 0;

  // required .TSP.FieldPath path = 1;
  if (_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.path_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_references = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 data_references = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.data_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 known_field_version = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.known_field_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._known_field_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string known_field_feature_identifier = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_known_field_feature_identifier());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.FieldInfo.Type type = 2 [default = Value];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .TSP.FieldInfo.UnknownFieldRule unknown_field_rule = 3 [default = IgnoreAndPreserveUntilModified];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_unknown_field_rule());
    }

    // optional .TSP.FieldInfo.KnownFieldRule known_field_rule = 6 [default = None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_known_field_rule());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldInfo::GetClassData() const { return &_class_data_; }


void FieldInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldInfo*>(&to_msg);
  auto& from = static_cast<const FieldInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.FieldInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_references_.MergeFrom(from._impl_.object_references_);
  _this->_impl_.data_references_.MergeFrom(from._impl_.data_references_);
  _this->_impl_.known_field_version_.MergeFrom(from._impl_.known_field_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_known_field_feature_identifier(from._internal_known_field_feature_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_path()->::TSP::FieldPath::MergeFrom(
          from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unknown_field_rule_ = from._impl_.unknown_field_rule_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.known_field_rule_ = from._impl_.known_field_rule_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldInfo::CopyFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FieldInfo::InternalSwap(FieldInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.object_references_.InternalSwap(&other->_impl_.object_references_);
  _impl_.data_references_.InternalSwap(&other->_impl_.data_references_);
  _impl_.known_field_version_.InternalSwap(&other->_impl_.known_field_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.known_field_feature_identifier_, lhs_arena,
      &other->_impl_.known_field_feature_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldInfo, _impl_.known_field_rule_)
      + sizeof(FieldInfo::_impl_.known_field_rule_)
      - PROTOBUF_FIELD_OFFSET(FieldInfo, _impl_.path_)>(
          reinterpret_cast<char*>(&_impl_.path_),
          reinterpret_cast<char*>(&other->_impl_.path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[2]);
}

// ===================================================================

class FieldPath::_Internal {
 public:
};

FieldPath::FieldPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.FieldPath)
}
FieldPath::FieldPath(const FieldPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){from._impl_.path_}
    , /*decltype(_impl_._path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.FieldPath)
}

inline void FieldPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){arena}
    , /*decltype(_impl_._path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FieldPath::~FieldPath() {
  // @@protoc_insertion_point(destructor:TSP.FieldPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.~RepeatedField();
}

void FieldPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldPath::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FieldPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 path = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FieldPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 path = 1 [packed = true];
  {
    int byte_size = _impl_._path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_path(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FieldPath)
  return target;
}

size_t FieldPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FieldPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 path = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.path_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldPath::GetClassData() const { return &_class_data_; }


void FieldPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldPath*>(&to_msg);
  auto& from = static_cast<const FieldPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.FieldPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.path_.MergeFrom(from._impl_.path_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldPath::CopyFrom(const FieldPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FieldPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldPath::IsInitialized() const {
  return true;
}

void FieldPath::InternalSwap(FieldPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[3]);
}

// ===================================================================

class ComponentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentInfo>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preferred_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_stored_outside_object_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_save_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_compression_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_be_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_wasteful(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_required_package_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ComponentInfo::ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentInfo)
}
ComponentInfo::ComponentInfo(const ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_read_version_){from._impl_.document_read_version_}
    , /*decltype(_impl_._document_read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.document_write_version_){from._impl_.document_write_version_}
    , /*decltype(_impl_._document_write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.external_references_){from._impl_.external_references_}
    , decltype(_impl_.data_references_){from._impl_.data_references_}
    , decltype(_impl_.object_uuid_map_entries_){from._impl_.object_uuid_map_entries_}
    , decltype(_impl_.feature_infos_){from._impl_.feature_infos_}
    , decltype(_impl_.component_read_version_){from._impl_.component_read_version_}
    , /*decltype(_impl_._component_read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.component_required_version_){from._impl_.component_required_version_}
    , /*decltype(_impl_._component_required_version_cached_byte_size_)*/{0}
    , decltype(_impl_.versioned_external_references_){from._impl_.versioned_external_references_}
    , decltype(_impl_.ambiguous_object_identifiers_){from._impl_.ambiguous_object_identifiers_}
    , /*decltype(_impl_._ambiguous_object_identifiers_cached_byte_size_)*/{0}
    , decltype(_impl_.preferred_locator_){}
    , decltype(_impl_.locator_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.save_token_){}
    , decltype(_impl_.is_stored_outside_object_archive_){}
    , decltype(_impl_.can_be_dropped_){}
    , decltype(_impl_.is_wasteful_){}
    , decltype(_impl_.compression_algorithm_){}
    , decltype(_impl_.required_package_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preferred_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_locator()) {
    _this->_impl_.preferred_locator_.Set(from._internal_preferred_locator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locator()) {
    _this->_impl_.locator_.Set(from._internal_locator(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.identifier_, &from._impl_.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.required_package_identifier_) -
    reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.required_package_identifier_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentInfo)
}

inline void ComponentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_read_version_){arena}
    , /*decltype(_impl_._document_read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.document_write_version_){arena}
    , /*decltype(_impl_._document_write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.external_references_){arena}
    , decltype(_impl_.data_references_){arena}
    , decltype(_impl_.object_uuid_map_entries_){arena}
    , decltype(_impl_.feature_infos_){arena}
    , decltype(_impl_.component_read_version_){arena}
    , /*decltype(_impl_._component_read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.component_required_version_){arena}
    , /*decltype(_impl_._component_required_version_cached_byte_size_)*/{0}
    , decltype(_impl_.versioned_external_references_){arena}
    , decltype(_impl_.ambiguous_object_identifiers_){arena}
    , /*decltype(_impl_._ambiguous_object_identifiers_cached_byte_size_)*/{0}
    , decltype(_impl_.preferred_locator_){}
    , decltype(_impl_.locator_){}
    , decltype(_impl_.identifier_){uint64_t{0u}}
    , decltype(_impl_.save_token_){uint64_t{0u}}
    , decltype(_impl_.is_stored_outside_object_archive_){false}
    , decltype(_impl_.can_be_dropped_){false}
    , decltype(_impl_.is_wasteful_){false}
    , decltype(_impl_.compression_algorithm_){0u}
    , decltype(_impl_.required_package_identifier_){0u}
  };
  _impl_.preferred_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentInfo::~ComponentInfo() {
  // @@protoc_insertion_point(destructor:TSP.ComponentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_read_version_.~RepeatedField();
  _impl_.document_write_version_.~RepeatedField();
  _impl_.external_references_.~RepeatedPtrField();
  _impl_.data_references_.~RepeatedPtrField();
  _impl_.object_uuid_map_entries_.~RepeatedPtrField();
  _impl_.feature_infos_.~RepeatedPtrField();
  _impl_.component_read_version_.~RepeatedField();
  _impl_.component_required_version_.~RepeatedField();
  _impl_.versioned_external_references_.~RepeatedPtrField();
  _impl_.ambiguous_object_identifiers_.~RepeatedField();
  _impl_.preferred_locator_.Destroy();
  _impl_.locator_.Destroy();
}

void ComponentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_read_version_.Clear();
  _impl_.document_write_version_.Clear();
  _impl_.external_references_.Clear();
  _impl_.data_references_.Clear();
  _impl_.object_uuid_map_entries_.Clear();
  _impl_.feature_infos_.Clear();
  _impl_.component_read_version_.Clear();
  _impl_.component_required_version_.Clear();
  _impl_.versioned_external_references_.Clear();
  _impl_.ambiguous_object_identifiers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.preferred_locator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.locator_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.compression_algorithm_) -
        reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.compression_algorithm_));
  }
  _impl_.required_package_identifier_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string preferred_locator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_preferred_locator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.ComponentInfo.preferred_locator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string locator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_locator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.ComponentInfo.locator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 document_read_version = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_document_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_document_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 document_write_version = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_document_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_document_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentExternalReference external_references = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentDataReference data_references = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_stored_outside_object_archive = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_stored_outside_object_archive(&has_bits);
          _impl_.is_stored_outside_object_archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ObjectUUIDMapEntry object_uuid_map_entries = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_uuid_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 save_token = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_save_token(&has_bits);
          _impl_.save_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.FeatureInfo feature_infos = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 component_read_version = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_component_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_component_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 component_required_version = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_component_required_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_component_required_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 compression_algorithm = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_compression_algorithm(&has_bits);
          _impl_.compression_algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_be_dropped = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_can_be_dropped(&has_bits);
          _impl_.can_be_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentExternalReference versioned_external_references = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_versioned_external_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wasteful = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_is_wasteful(&has_bits);
          _impl_.is_wasteful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 ambiguous_object_identifiers = 20 [packed = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ambiguous_object_identifiers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_ambiguous_object_identifiers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_package_identifier = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_required_package_identifier(&has_bits);
          _impl_.required_package_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required string preferred_locator = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_locator().data(), static_cast<int>(this->_internal_preferred_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ComponentInfo.preferred_locator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_preferred_locator(), target);
  }

  // optional string locator = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locator().data(), static_cast<int>(this->_internal_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ComponentInfo.locator");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locator(), target);
  }

  // repeated uint32 document_read_version = 4 [packed = true];
  {
    int byte_size = _impl_._document_read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_document_read_version(), byte_size, target);
    }
  }

  // repeated uint32 document_write_version = 5 [packed = true];
  {
    int byte_size = _impl_._document_write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_document_write_version(), byte_size, target);
    }
  }

  // repeated .TSP.ComponentExternalReference external_references = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_external_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_external_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.ComponentDataReference data_references = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_stored_outside_object_archive = 10 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_stored_outside_object_archive(), target);
  }

  // repeated .TSP.ObjectUUIDMapEntry object_uuid_map_entries = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_object_uuid_map_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_object_uuid_map_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 save_token = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_save_token(), target);
  }

  // repeated .TSP.FeatureInfo feature_infos = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 component_read_version = 14 [packed = true];
  {
    int byte_size = _impl_._component_read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_component_read_version(), byte_size, target);
    }
  }

  // repeated uint32 component_required_version = 15 [packed = true];
  {
    int byte_size = _impl_._component_required_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_component_required_version(), byte_size, target);
    }
  }

  // optional uint32 compression_algorithm = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_compression_algorithm(), target);
  }

  // optional bool can_be_dropped = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_can_be_dropped(), target);
  }

  // repeated .TSP.ComponentExternalReference versioned_external_references = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_versioned_external_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_versioned_external_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_wasteful = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_is_wasteful(), target);
  }

  // repeated uint64 ambiguous_object_identifiers = 20 [packed = true];
  {
    int byte_size = _impl_._ambiguous_object_identifiers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          20, _internal_ambiguous_object_identifiers(), byte_size, target);
    }
  }

  // optional uint32 required_package_identifier = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_required_package_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentInfo)
  return target;
}

size_t ComponentInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ComponentInfo)
  size_t total_size = 0;

  if (_internal_has_preferred_locator()) {
    // required string preferred_locator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_locator());
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  return total_size;
}
size_t ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string preferred_locator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_locator());

    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 document_read_version = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.document_read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._document_read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 document_write_version = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.document_write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._document_write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ComponentExternalReference external_references = 6;
  total_size += 1UL * this->_internal_external_references_size();
  for (const auto& msg : this->_impl_.external_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.ComponentDataReference data_references = 7;
  total_size += 1UL * this->_internal_data_references_size();
  for (const auto& msg : this->_impl_.data_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.ObjectUUIDMapEntry object_uuid_map_entries = 11;
  total_size += 1UL * this->_internal_object_uuid_map_entries_size();
  for (const auto& msg : this->_impl_.object_uuid_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.FeatureInfo feature_infos = 13;
  total_size += 1UL * this->_internal_feature_infos_size();
  for (const auto& msg : this->_impl_.feature_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 component_read_version = 14 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.component_read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._component_read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 component_required_version = 15 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.component_required_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._component_required_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ComponentExternalReference versioned_external_references = 18;
  total_size += 2UL * this->_internal_versioned_external_references_size();
  for (const auto& msg : this->_impl_.versioned_external_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 ambiguous_object_identifiers = 20 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.ambiguous_object_identifiers_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ambiguous_object_identifiers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string locator = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint64 save_token = 12 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_save_token());
    }

    // optional bool is_stored_outside_object_archive = 10 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool can_be_dropped = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool is_wasteful = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional uint32 compression_algorithm = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_compression_algorithm());
    }

  }
  // optional uint32 required_package_identifier = 21;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_required_package_identifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentInfo::GetClassData() const { return &_class_data_; }


void ComponentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentInfo*>(&to_msg);
  auto& from = static_cast<const ComponentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.document_read_version_.MergeFrom(from._impl_.document_read_version_);
  _this->_impl_.document_write_version_.MergeFrom(from._impl_.document_write_version_);
  _this->_impl_.external_references_.MergeFrom(from._impl_.external_references_);
  _this->_impl_.data_references_.MergeFrom(from._impl_.data_references_);
  _this->_impl_.object_uuid_map_entries_.MergeFrom(from._impl_.object_uuid_map_entries_);
  _this->_impl_.feature_infos_.MergeFrom(from._impl_.feature_infos_);
  _this->_impl_.component_read_version_.MergeFrom(from._impl_.component_read_version_);
  _this->_impl_.component_required_version_.MergeFrom(from._impl_.component_required_version_);
  _this->_impl_.versioned_external_references_.MergeFrom(from._impl_.versioned_external_references_);
  _this->_impl_.ambiguous_object_identifiers_.MergeFrom(from._impl_.ambiguous_object_identifiers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_preferred_locator(from._internal_preferred_locator());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_locator(from._internal_locator());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.identifier_ = from._impl_.identifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.save_token_ = from._impl_.save_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_stored_outside_object_archive_ = from._impl_.is_stored_outside_object_archive_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.can_be_dropped_ = from._impl_.can_be_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_wasteful_ = from._impl_.is_wasteful_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.compression_algorithm_ = from._impl_.compression_algorithm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_required_package_identifier(from._internal_required_package_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentInfo::CopyFrom(const ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.external_references_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.data_references_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.object_uuid_map_entries_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.feature_infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.versioned_external_references_))
    return false;
  return true;
}

void ComponentInfo::InternalSwap(ComponentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.document_read_version_.InternalSwap(&other->_impl_.document_read_version_);
  _impl_.document_write_version_.InternalSwap(&other->_impl_.document_write_version_);
  _impl_.external_references_.InternalSwap(&other->_impl_.external_references_);
  _impl_.data_references_.InternalSwap(&other->_impl_.data_references_);
  _impl_.object_uuid_map_entries_.InternalSwap(&other->_impl_.object_uuid_map_entries_);
  _impl_.feature_infos_.InternalSwap(&other->_impl_.feature_infos_);
  _impl_.component_read_version_.InternalSwap(&other->_impl_.component_read_version_);
  _impl_.component_required_version_.InternalSwap(&other->_impl_.component_required_version_);
  _impl_.versioned_external_references_.InternalSwap(&other->_impl_.versioned_external_references_);
  _impl_.ambiguous_object_identifiers_.InternalSwap(&other->_impl_.ambiguous_object_identifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_locator_, lhs_arena,
      &other->_impl_.preferred_locator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locator_, lhs_arena,
      &other->_impl_.locator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentInfo, _impl_.required_package_identifier_)
      + sizeof(ComponentInfo::_impl_.required_package_identifier_)
      - PROTOBUF_FIELD_OFFSET(ComponentInfo, _impl_.identifier_)>(
          reinterpret_cast<char*>(&_impl_.identifier_),
          reinterpret_cast<char*>(&other->_impl_.identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[4]);
}

// ===================================================================

class ComponentExternalReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentExternalReference>()._impl_._has_bits_);
  static void set_has_component_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_weak(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ComponentExternalReference::ComponentExternalReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentExternalReference)
}
ComponentExternalReference::ComponentExternalReference(const ComponentExternalReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentExternalReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_identifier_){}
    , decltype(_impl_.object_identifier_){}
    , decltype(_impl_.is_weak_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.component_identifier_, &from._impl_.component_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_weak_) -
    reinterpret_cast<char*>(&_impl_.component_identifier_)) + sizeof(_impl_.is_weak_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentExternalReference)
}

inline void ComponentExternalReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_identifier_){uint64_t{0u}}
    , decltype(_impl_.object_identifier_){uint64_t{0u}}
    , decltype(_impl_.is_weak_){false}
  };
}

ComponentExternalReference::~ComponentExternalReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentExternalReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentExternalReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComponentExternalReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentExternalReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentExternalReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.component_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_weak_) -
        reinterpret_cast<char*>(&_impl_.component_identifier_)) + sizeof(_impl_.is_weak_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentExternalReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 component_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_component_identifier(&has_bits);
          _impl_.component_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 object_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_object_identifier(&has_bits);
          _impl_.object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_weak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_weak(&has_bits);
          _impl_.is_weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentExternalReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentExternalReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 component_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_component_identifier(), target);
  }

  // optional uint64 object_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_identifier(), target);
  }

  // optional bool is_weak = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_weak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentExternalReference)
  return target;
}

size_t ComponentExternalReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentExternalReference)
  size_t total_size = 0;

  // required uint64 component_identifier = 1;
  if (_internal_has_component_identifier()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_component_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 object_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_identifier());
    }

    // optional bool is_weak = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentExternalReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentExternalReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentExternalReference::GetClassData() const { return &_class_data_; }


void ComponentExternalReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentExternalReference*>(&to_msg);
  auto& from = static_cast<const ComponentExternalReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentExternalReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.component_identifier_ = from._impl_.component_identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.object_identifier_ = from._impl_.object_identifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_weak_ = from._impl_.is_weak_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentExternalReference::CopyFrom(const ComponentExternalReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentExternalReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentExternalReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ComponentExternalReference::InternalSwap(ComponentExternalReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentExternalReference, _impl_.is_weak_)
      + sizeof(ComponentExternalReference::_impl_.is_weak_)
      - PROTOBUF_FIELD_OFFSET(ComponentExternalReference, _impl_.component_identifier_)>(
          reinterpret_cast<char*>(&_impl_.component_identifier_),
          reinterpret_cast<char*>(&other->_impl_.component_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentExternalReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[5]);
}

// ===================================================================

class ComponentDataReference_ObjectReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentDataReference_ObjectReference>()._impl_._has_bits_);
  static void set_has_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ComponentDataReference_ObjectReference::ComponentDataReference_ObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentDataReference.ObjectReference)
}
ComponentDataReference_ObjectReference::ComponentDataReference_ObjectReference(const ComponentDataReference_ObjectReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentDataReference_ObjectReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_identifier_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_identifier_, &from._impl_.object_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.object_identifier_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentDataReference.ObjectReference)
}

inline void ComponentDataReference_ObjectReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_identifier_){uint64_t{0u}}
    , decltype(_impl_.count_){0u}
  };
}

ComponentDataReference_ObjectReference::~ComponentDataReference_ObjectReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentDataReference.ObjectReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentDataReference_ObjectReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComponentDataReference_ObjectReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentDataReference_ObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentDataReference.ObjectReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.object_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.object_identifier_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentDataReference_ObjectReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 object_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_object_identifier(&has_bits);
          _impl_.object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentDataReference_ObjectReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentDataReference.ObjectReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 object_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_identifier(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentDataReference.ObjectReference)
  return target;
}

size_t ComponentDataReference_ObjectReference::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ComponentDataReference.ObjectReference)
  size_t total_size = 0;

  if (_internal_has_object_identifier()) {
    // required uint64 object_identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_identifier());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t ComponentDataReference_ObjectReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentDataReference.ObjectReference)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 object_identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_identifier());

    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentDataReference_ObjectReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentDataReference_ObjectReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentDataReference_ObjectReference::GetClassData() const { return &_class_data_; }


void ComponentDataReference_ObjectReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentDataReference_ObjectReference*>(&to_msg);
  auto& from = static_cast<const ComponentDataReference_ObjectReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentDataReference.ObjectReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.object_identifier_ = from._impl_.object_identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentDataReference_ObjectReference::CopyFrom(const ComponentDataReference_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentDataReference.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDataReference_ObjectReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ComponentDataReference_ObjectReference::InternalSwap(ComponentDataReference_ObjectReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentDataReference_ObjectReference, _impl_.count_)
      + sizeof(ComponentDataReference_ObjectReference::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(ComponentDataReference_ObjectReference, _impl_.object_identifier_)>(
          reinterpret_cast<char*>(&_impl_.object_identifier_),
          reinterpret_cast<char*>(&other->_impl_.object_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentDataReference_ObjectReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[6]);
}

// ===================================================================

class ComponentDataReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentDataReference>()._impl_._has_bits_);
  static void set_has_data_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ComponentDataReference::ComponentDataReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentDataReference)
}
ComponentDataReference::ComponentDataReference(const ComponentDataReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentDataReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_reference_list_){from._impl_.object_reference_list_}
    , decltype(_impl_.data_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_identifier_ = from._impl_.data_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentDataReference)
}

inline void ComponentDataReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_reference_list_){arena}
    , decltype(_impl_.data_identifier_){uint64_t{0u}}
  };
}

ComponentDataReference::~ComponentDataReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentDataReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentDataReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_reference_list_.~RepeatedPtrField();
}

void ComponentDataReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentDataReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentDataReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_reference_list_.Clear();
  _impl_.data_identifier_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentDataReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 data_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_identifier(&has_bits);
          _impl_.data_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentDataReference.ObjectReference object_reference_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_reference_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentDataReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentDataReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 data_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_identifier(), target);
  }

  // repeated .TSP.ComponentDataReference.ObjectReference object_reference_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_object_reference_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_object_reference_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentDataReference)
  return target;
}

size_t ComponentDataReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentDataReference)
  size_t total_size = 0;

  // required uint64 data_identifier = 1;
  if (_internal_has_data_identifier()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ComponentDataReference.ObjectReference object_reference_list = 2;
  total_size += 1UL * this->_internal_object_reference_list_size();
  for (const auto& msg : this->_impl_.object_reference_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentDataReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentDataReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentDataReference::GetClassData() const { return &_class_data_; }


void ComponentDataReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentDataReference*>(&to_msg);
  auto& from = static_cast<const ComponentDataReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentDataReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_reference_list_.MergeFrom(from._impl_.object_reference_list_);
  if (from._internal_has_data_identifier()) {
    _this->_internal_set_data_identifier(from._internal_data_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentDataReference::CopyFrom(const ComponentDataReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentDataReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDataReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.object_reference_list_))
    return false;
  return true;
}

void ComponentDataReference::InternalSwap(ComponentDataReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.object_reference_list_.InternalSwap(&other->_impl_.object_reference_list_);
  swap(_impl_.data_identifier_, other->_impl_.data_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentDataReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[7]);
}

// ===================================================================

class ObjectUUIDMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectUUIDMapEntry>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& uuid(const ObjectUUIDMapEntry* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
ObjectUUIDMapEntry::_Internal::uuid(const ObjectUUIDMapEntry* msg) {
  return *msg->_impl_.uuid_;
}
void ObjectUUIDMapEntry::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ObjectUUIDMapEntry::ObjectUUIDMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectUUIDMapEntry)
}
ObjectUUIDMapEntry::ObjectUUIDMapEntry(const ObjectUUIDMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectUUIDMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSP::UUID(*from._impl_.uuid_);
  }
  _this->_impl_.identifier_ = from._impl_.identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectUUIDMapEntry)
}

inline void ObjectUUIDMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.identifier_){uint64_t{0u}}
  };
}

ObjectUUIDMapEntry::~ObjectUUIDMapEntry() {
  // @@protoc_insertion_point(destructor:TSP.ObjectUUIDMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectUUIDMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uuid_;
}

void ObjectUUIDMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectUUIDMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectUUIDMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
    _impl_.uuid_->Clear();
  }
  _impl_.identifier_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectUUIDMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectUUIDMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectUUIDMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required .TSP.UUID uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectUUIDMapEntry)
  return target;
}

size_t ObjectUUIDMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ObjectUUIDMapEntry)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  return total_size;
}
size_t ObjectUUIDMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectUUIDMapEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);

    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectUUIDMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectUUIDMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectUUIDMapEntry::GetClassData() const { return &_class_data_; }


void ObjectUUIDMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectUUIDMapEntry*>(&to_msg);
  auto& from = static_cast<const ObjectUUIDMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectUUIDMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uuid()->::TSP::UUID::MergeFrom(
          from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.identifier_ = from._impl_.identifier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectUUIDMapEntry::CopyFrom(const ObjectUUIDMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectUUIDMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectUUIDMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!_impl_.uuid_->IsInitialized()) return false;
  }
  return true;
}

void ObjectUUIDMapEntry::InternalSwap(ObjectUUIDMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectUUIDMapEntry, _impl_.identifier_)
      + sizeof(ObjectUUIDMapEntry::_impl_.identifier_)
      - PROTOBUF_FIELD_OFFSET(ObjectUUIDMapEntry, _impl_.uuid_)>(
          reinterpret_cast<char*>(&_impl_.uuid_),
          reinterpret_cast<char*>(&other->_impl_.uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectUUIDMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[8]);
}

// ===================================================================

class FeatureInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureInfo>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FeatureInfo::FeatureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.FeatureInfo)
}
FeatureInfo::FeatureInfo(const FeatureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeatureInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.read_version_){from._impl_.read_version_}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){from._impl_.write_version_}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSP.FeatureInfo)
}

inline void FeatureInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.read_version_){arena}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){arena}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.identifier_){}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeatureInfo::~FeatureInfo() {
  // @@protoc_insertion_point(destructor:TSP.FeatureInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.read_version_.~RepeatedField();
  _impl_.write_version_.~RepeatedField();
  _impl_.identifier_.Destroy();
}

void FeatureInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeatureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FeatureInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.read_version_.Clear();
  _impl_.write_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.FeatureInfo.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_version = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 write_version = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FeatureInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.FeatureInfo.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // repeated uint32 read_version = 2 [packed = true];
  {
    int byte_size = _impl_._read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_read_version(), byte_size, target);
    }
  }

  // repeated uint32 write_version = 3 [packed = true];
  {
    int byte_size = _impl_._write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_write_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FeatureInfo)
  return target;
}

size_t FeatureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FeatureInfo)
  size_t total_size = 0;

  // required string identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 read_version = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_version = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeatureInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureInfo::GetClassData() const { return &_class_data_; }


void FeatureInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeatureInfo*>(&to_msg);
  auto& from = static_cast<const FeatureInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.FeatureInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.read_version_.MergeFrom(from._impl_.read_version_);
  _this->_impl_.write_version_.MergeFrom(from._impl_.write_version_);
  if (from._internal_has_identifier()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureInfo::CopyFrom(const FeatureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FeatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FeatureInfo::InternalSwap(FeatureInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.read_version_.InternalSwap(&other->_impl_.read_version_);
  _impl_.write_version_.InternalSwap(&other->_impl_.write_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[9]);
}

// ===================================================================

class PackageMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PackageMetadata>()._impl_._has_bits_);
  static void set_has_last_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DocumentRevision& revision(const PackageMetadata* msg);
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_save_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preferred_package_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& data_metadata_map(const PackageMetadata* msg);
  static void set_has_data_metadata_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSP::DocumentRevision&
PackageMetadata::_Internal::revision(const PackageMetadata* msg) {
  return *msg->_impl_.revision_;
}
const ::TSP::Reference&
PackageMetadata::_Internal::data_metadata_map(const PackageMetadata* msg) {
  return *msg->_impl_.data_metadata_map_;
}
void PackageMetadata::clear_data_metadata_map() {
  if (_impl_.data_metadata_map_ != nullptr) _impl_.data_metadata_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PackageMetadata::PackageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.PackageMetadata)
}
PackageMetadata::PackageMetadata(const PackageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PackageMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){from._impl_.components_}
    , decltype(_impl_.datas_){from._impl_.datas_}
    , decltype(_impl_.read_version_){from._impl_.read_version_}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){from._impl_.write_version_}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.file_format_version_){from._impl_.file_format_version_}
    , /*decltype(_impl_._file_format_version_cached_byte_size_)*/{0}
    , decltype(_impl_.versioned_components_){from._impl_.versioned_components_}
    , decltype(_impl_.revision_){nullptr}
    , decltype(_impl_.data_metadata_map_){nullptr}
    , decltype(_impl_.last_object_identifier_){}
    , decltype(_impl_.save_token_){}
    , decltype(_impl_.preferred_package_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_revision()) {
    _this->_impl_.revision_ = new ::TSP::DocumentRevision(*from._impl_.revision_);
  }
  if (from._internal_has_data_metadata_map()) {
    _this->_impl_.data_metadata_map_ = new ::TSP::Reference(*from._impl_.data_metadata_map_);
  }
  ::memcpy(&_impl_.last_object_identifier_, &from._impl_.last_object_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preferred_package_type_) -
    reinterpret_cast<char*>(&_impl_.last_object_identifier_)) + sizeof(_impl_.preferred_package_type_));
  // @@protoc_insertion_point(copy_constructor:TSP.PackageMetadata)
}

inline void PackageMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){arena}
    , decltype(_impl_.datas_){arena}
    , decltype(_impl_.read_version_){arena}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){arena}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.file_format_version_){arena}
    , /*decltype(_impl_._file_format_version_cached_byte_size_)*/{0}
    , decltype(_impl_.versioned_components_){arena}
    , decltype(_impl_.revision_){nullptr}
    , decltype(_impl_.data_metadata_map_){nullptr}
    , decltype(_impl_.last_object_identifier_){uint64_t{0u}}
    , decltype(_impl_.save_token_){uint64_t{0u}}
    , decltype(_impl_.preferred_package_type_){0}
  };
}

PackageMetadata::~PackageMetadata() {
  // @@protoc_insertion_point(destructor:TSP.PackageMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackageMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.components_.~RepeatedPtrField();
  _impl_.datas_.~RepeatedPtrField();
  _impl_.read_version_.~RepeatedField();
  _impl_.write_version_.~RepeatedField();
  _impl_.file_format_version_.~RepeatedField();
  _impl_.versioned_components_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.revision_;
  if (this != internal_default_instance()) delete _impl_.data_metadata_map_;
}

void PackageMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PackageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.PackageMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.components_.Clear();
  _impl_.datas_.Clear();
  _impl_.read_version_.Clear();
  _impl_.write_version_.Clear();
  _impl_.file_format_version_.Clear();
  _impl_.versioned_components_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.revision_ != nullptr);
      _impl_.revision_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_metadata_map_ != nullptr);
      _impl_.data_metadata_map_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.last_object_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preferred_package_type_) -
        reinterpret_cast<char*>(&_impl_.last_object_identifier_)) + sizeof(_impl_.preferred_package_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 last_object_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_object_identifier(&has_bits);
          _impl_.last_object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DocumentRevision revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentInfo components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_version = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 write_version = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 file_format_version = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_file_format_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_file_format_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 save_token = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_save_token(&has_bits);
          _impl_.save_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.PackageMetadata.PackageType preferred_package_type = 9 [default = Default];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::PackageMetadata_PackageType_IsValid(val))) {
            _internal_set_preferred_package_type(static_cast<::TSP::PackageMetadata_PackageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference data_metadata_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentInfo versioned_components = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versioned_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackageMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.PackageMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 last_object_identifier = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_last_object_identifier(), target);
  }

  // optional .TSP.DocumentRevision revision = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::revision(this),
        _Internal::revision(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.ComponentInfo components = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.DataInfo datas = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 read_version = 5 [packed = true];
  {
    int byte_size = _impl_._read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_read_version(), byte_size, target);
    }
  }

  // repeated uint32 write_version = 6 [packed = true];
  {
    int byte_size = _impl_._write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_write_version(), byte_size, target);
    }
  }

  // repeated uint32 file_format_version = 7 [packed = true];
  {
    int byte_size = _impl_._file_format_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_file_format_version(), byte_size, target);
    }
  }

  // optional uint64 save_token = 8 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_save_token(), target);
  }

  // optional .TSP.PackageMetadata.PackageType preferred_package_type = 9 [default = Default];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_preferred_package_type(), target);
  }

  // optional .TSP.Reference data_metadata_map = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::data_metadata_map(this),
        _Internal::data_metadata_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.ComponentInfo versioned_components = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_versioned_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_versioned_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.PackageMetadata)
  return target;
}

size_t PackageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.PackageMetadata)
  size_t total_size = 0;

  // required uint64 last_object_identifier = 1;
  if (_internal_has_last_object_identifier()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_object_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ComponentInfo components = 3;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->_impl_.components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataInfo datas = 4;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_version = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 file_format_version = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.file_format_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._file_format_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ComponentInfo versioned_components = 11;
  total_size += 1UL * this->_internal_versioned_components_size();
  for (const auto& msg : this->_impl_.versioned_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.DocumentRevision revision = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.revision_);
    }

    // optional .TSP.Reference data_metadata_map = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_metadata_map_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint64 save_token = 8 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_save_token());
    }

    // optional .TSP.PackageMetadata.PackageType preferred_package_type = 9 [default = Default];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_preferred_package_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackageMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PackageMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackageMetadata::GetClassData() const { return &_class_data_; }


void PackageMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PackageMetadata*>(&to_msg);
  auto& from = static_cast<const PackageMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.PackageMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_impl_.read_version_.MergeFrom(from._impl_.read_version_);
  _this->_impl_.write_version_.MergeFrom(from._impl_.write_version_);
  _this->_impl_.file_format_version_.MergeFrom(from._impl_.file_format_version_);
  _this->_impl_.versioned_components_.MergeFrom(from._impl_.versioned_components_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_revision()->::TSP::DocumentRevision::MergeFrom(
          from._internal_revision());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data_metadata_map()->::TSP::Reference::MergeFrom(
          from._internal_data_metadata_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_object_identifier_ = from._impl_.last_object_identifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.save_token_ = from._impl_.save_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.preferred_package_type_ = from._impl_.preferred_package_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackageMetadata::CopyFrom(const PackageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.PackageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.components_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.datas_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.versioned_components_))
    return false;
  if (_internal_has_data_metadata_map()) {
    if (!_impl_.data_metadata_map_->IsInitialized()) return false;
  }
  return true;
}

void PackageMetadata::InternalSwap(PackageMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.components_.InternalSwap(&other->_impl_.components_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
  _impl_.read_version_.InternalSwap(&other->_impl_.read_version_);
  _impl_.write_version_.InternalSwap(&other->_impl_.write_version_);
  _impl_.file_format_version_.InternalSwap(&other->_impl_.file_format_version_);
  _impl_.versioned_components_.InternalSwap(&other->_impl_.versioned_components_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PackageMetadata, _impl_.preferred_package_type_)
      + sizeof(PackageMetadata::_impl_.preferred_package_type_)
      - PROTOBUF_FIELD_OFFSET(PackageMetadata, _impl_.revision_)>(
          reinterpret_cast<char*>(&_impl_.revision_),
          reinterpret_cast<char*>(&other->_impl_.revision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[10]);
}

// ===================================================================

class DocumentRevision::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentRevision>()._impl_._has_bits_);
  static void set_has_sequence_32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_64(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DocumentRevision::DocumentRevision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DocumentRevision)
}
DocumentRevision::DocumentRevision(const DocumentRevision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentRevision* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.sequence_64_){}
    , decltype(_impl_.sequence_32_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sequence_64_, &from._impl_.sequence_64_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sequence_32_) -
    reinterpret_cast<char*>(&_impl_.sequence_64_)) + sizeof(_impl_.sequence_32_));
  // @@protoc_insertion_point(copy_constructor:TSP.DocumentRevision)
}

inline void DocumentRevision::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.sequence_64_){uint64_t{0u}}
    , decltype(_impl_.sequence_32_){0}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentRevision::~DocumentRevision() {
  // @@protoc_insertion_point(destructor:TSP.DocumentRevision)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentRevision::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void DocumentRevision::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentRevision::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DocumentRevision)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.sequence_64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sequence_32_) -
        reinterpret_cast<char*>(&_impl_.sequence_64_)) + sizeof(_impl_.sequence_32_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentRevision::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sequence_64 = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequence_64(&has_bits);
          _impl_.sequence_64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DocumentRevision.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_32 = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sequence_32(&has_bits);
          _impl_.sequence_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentRevision::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DocumentRevision)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 sequence_64 = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequence_64(), target);
  }

  // optional string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DocumentRevision.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // optional int32 sequence_32 = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DocumentRevision)
  return target;
}

size_t DocumentRevision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DocumentRevision)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional uint64 sequence_64 = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence_64());
    }

    // optional int32 sequence_32 = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_32());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentRevision::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentRevision::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentRevision::GetClassData() const { return &_class_data_; }


void DocumentRevision::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentRevision*>(&to_msg);
  auto& from = static_cast<const DocumentRevision&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DocumentRevision)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequence_64_ = from._impl_.sequence_64_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sequence_32_ = from._impl_.sequence_32_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentRevision::CopyFrom(const DocumentRevision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DocumentRevision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentRevision::IsInitialized() const {
  return true;
}

void DocumentRevision::InternalSwap(DocumentRevision* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentRevision, _impl_.sequence_32_)
      + sizeof(DocumentRevision::_impl_.sequence_32_)
      - PROTOBUF_FIELD_OFFSET(DocumentRevision, _impl_.sequence_64_)>(
          reinterpret_cast<char*>(&_impl_.sequence_64_),
          reinterpret_cast<char*>(&other->_impl_.sequence_64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentRevision::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[11]);
}

// ===================================================================

class PasteboardMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardMetadata>()._impl_._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& source_document_uuid(const PasteboardMetadata* msg);
  static void set_has_source_document_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& data_metadata_map(const PasteboardMetadata* msg);
  static void set_has_data_metadata_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
PasteboardMetadata::_Internal::source_document_uuid(const PasteboardMetadata* msg) {
  return *msg->_impl_.source_document_uuid_;
}
const ::TSP::Reference&
PasteboardMetadata::_Internal::data_metadata_map(const PasteboardMetadata* msg) {
  return *msg->_impl_.data_metadata_map_;
}
void PasteboardMetadata::clear_source_document_uuid() {
  if (_impl_.source_document_uuid_ != nullptr) _impl_.source_document_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PasteboardMetadata::clear_data_metadata_map() {
  if (_impl_.data_metadata_map_ != nullptr) _impl_.data_metadata_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PasteboardMetadata::PasteboardMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.PasteboardMetadata)
}
PasteboardMetadata::PasteboardMetadata(const PasteboardMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PasteboardMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.datas_){from._impl_.datas_}
    , decltype(_impl_.read_version_){from._impl_.read_version_}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.source_document_uuid_){nullptr}
    , decltype(_impl_.data_metadata_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source_document_uuid()) {
    _this->_impl_.source_document_uuid_ = new ::TSP::UUID(*from._impl_.source_document_uuid_);
  }
  if (from._internal_has_data_metadata_map()) {
    _this->_impl_.data_metadata_map_ = new ::TSP::Reference(*from._impl_.data_metadata_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TSP.PasteboardMetadata)
}

inline void PasteboardMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){arena}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.datas_){arena}
    , decltype(_impl_.read_version_){arena}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.source_document_uuid_){nullptr}
    , decltype(_impl_.data_metadata_map_){nullptr}
  };
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PasteboardMetadata::~PasteboardMetadata() {
  // @@protoc_insertion_point(destructor:TSP.PasteboardMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasteboardMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.datas_.~RepeatedPtrField();
  _impl_.read_version_.~RepeatedField();
  _impl_.app_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_document_uuid_;
  if (this != internal_default_instance()) delete _impl_.data_metadata_map_;
}

void PasteboardMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PasteboardMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.PasteboardMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  _impl_.datas_.Clear();
  _impl_.read_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.source_document_uuid_ != nullptr);
      _impl_.source_document_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.data_metadata_map_ != nullptr);
      _impl_.data_metadata_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.PasteboardMetadata.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID source_document_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_document_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference data_metadata_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_version = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasteboardMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.PasteboardMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string app_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.PasteboardMetadata.app_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_name(), target);
  }

  // repeated .TSP.DataInfo datas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID source_document_uuid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::source_document_uuid(this),
        _Internal::source_document_uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference data_metadata_map = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::data_metadata_map(this),
        _Internal::data_metadata_map(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 read_version = 7 [packed = true];
  {
    int byte_size = _impl_._read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.PasteboardMetadata)
  return target;
}

size_t PasteboardMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.PasteboardMetadata)
  size_t total_size = 0;

  // required string app_name = 2;
  if (_internal_has_app_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.DataInfo datas = 3;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.UUID source_document_uuid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_document_uuid_);
    }

    // optional .TSP.Reference data_metadata_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_metadata_map_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasteboardMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PasteboardMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasteboardMetadata::GetClassData() const { return &_class_data_; }


void PasteboardMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PasteboardMetadata*>(&to_msg);
  auto& from = static_cast<const PasteboardMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.PasteboardMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_impl_.read_version_.MergeFrom(from._impl_.read_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_source_document_uuid()->::TSP::UUID::MergeFrom(
          from._internal_source_document_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_data_metadata_map()->::TSP::Reference::MergeFrom(
          from._internal_data_metadata_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasteboardMetadata::CopyFrom(const PasteboardMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.PasteboardMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.datas_))
    return false;
  if (_internal_has_source_document_uuid()) {
    if (!_impl_.source_document_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_data_metadata_map()) {
    if (!_impl_.data_metadata_map_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardMetadata::InternalSwap(PasteboardMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
  _impl_.read_version_.InternalSwap(&other->_impl_.read_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteboardMetadata, _impl_.data_metadata_map_)
      + sizeof(PasteboardMetadata::_impl_.data_metadata_map_)
      - PROTOBUF_FIELD_OFFSET(PasteboardMetadata, _impl_.source_document_uuid_)>(
          reinterpret_cast<char*>(&_impl_.source_document_uuid_),
          reinterpret_cast<char*>(&other->_impl_.source_document_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[12]);
}

// ===================================================================

class DataInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DataInfo>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_document_resource_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_bookmark_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remote_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_download(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_download_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::DataAttributes& attributes(const DataInfo* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::EncryptionInfo& encryption_info(const DataInfo* msg);
  static void set_has_encryption_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_last_mismatched_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::IndexSet& unmaterialized_ranges(const DataInfo* msg);
  static void set_has_unmaterialized_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_remote_data_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_remote_data_has_package_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_upload_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_remote_data_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_materialized_length(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_pasteboard_external_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000803) ^ 0x00000803) != 0;
  }
};

const ::TSP::DataAttributes&
DataInfo::_Internal::attributes(const DataInfo* msg) {
  return *msg->_impl_.attributes_;
}
const ::TSP::EncryptionInfo&
DataInfo::_Internal::encryption_info(const DataInfo* msg) {
  return *msg->_impl_.encryption_info_;
}
const ::TSP::IndexSet&
DataInfo::_Internal::unmaterialized_ranges(const DataInfo* msg) {
  return *msg->_impl_.unmaterialized_ranges_;
}
void DataInfo::clear_attributes() {
  if (_impl_.attributes_ != nullptr) _impl_.attributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void DataInfo::clear_unmaterialized_ranges() {
  if (_impl_.unmaterialized_ranges_ != nullptr) _impl_.unmaterialized_ranges_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
DataInfo::DataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DataInfo)
}
DataInfo::DataInfo(const DataInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.preferred_file_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.document_resource_locator_){}
    , decltype(_impl_.source_bookmark_data_){}
    , decltype(_impl_.remote_url_){}
    , decltype(_impl_.last_mismatched_digest_){}
    , decltype(_impl_.pasteboard_external_file_path_){}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.encryption_info_){nullptr}
    , decltype(_impl_.unmaterialized_ranges_){nullptr}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.can_download_){}
    , decltype(_impl_.remote_data_has_package_storage_){}
    , decltype(_impl_.upload_status_){}
    , decltype(_impl_.remote_data_length_){}
    , decltype(_impl_.remote_data_mtime_){}
    , decltype(_impl_.materialized_length_){}
    , decltype(_impl_.download_priority_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preferred_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_file_name()) {
    _this->_impl_.preferred_file_name_.Set(from._internal_preferred_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_resource_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_resource_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_document_resource_locator()) {
    _this->_impl_.document_resource_locator_.Set(from._internal_document_resource_locator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_bookmark_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_bookmark_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_bookmark_data()) {
    _this->_impl_.source_bookmark_data_.Set(from._internal_source_bookmark_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_url()) {
    _this->_impl_.remote_url_.Set(from._internal_remote_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_mismatched_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_mismatched_digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_mismatched_digest()) {
    _this->_impl_.last_mismatched_digest_.Set(from._internal_last_mismatched_digest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pasteboard_external_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pasteboard_external_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pasteboard_external_file_path()) {
    _this->_impl_.pasteboard_external_file_path_.Set(from._internal_pasteboard_external_file_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::TSP::DataAttributes(*from._impl_.attributes_);
  }
  if (from._internal_has_encryption_info()) {
    _this->_impl_.encryption_info_ = new ::TSP::EncryptionInfo(*from._impl_.encryption_info_);
  }
  if (from._internal_has_unmaterialized_ranges()) {
    _this->_impl_.unmaterialized_ranges_ = new ::TSP::IndexSet(*from._impl_.unmaterialized_ranges_);
  }
  ::memcpy(&_impl_.identifier_, &from._impl_.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.download_priority_) -
    reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.download_priority_));
  // @@protoc_insertion_point(copy_constructor:TSP.DataInfo)
}

inline void DataInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.preferred_file_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.document_resource_locator_){}
    , decltype(_impl_.source_bookmark_data_){}
    , decltype(_impl_.remote_url_){}
    , decltype(_impl_.last_mismatched_digest_){}
    , decltype(_impl_.pasteboard_external_file_path_){}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.encryption_info_){nullptr}
    , decltype(_impl_.unmaterialized_ranges_){nullptr}
    , decltype(_impl_.identifier_){uint64_t{0u}}
    , decltype(_impl_.can_download_){false}
    , decltype(_impl_.remote_data_has_package_storage_){false}
    , decltype(_impl_.upload_status_){0}
    , decltype(_impl_.remote_data_length_){uint64_t{0u}}
    , decltype(_impl_.remote_data_mtime_){0}
    , decltype(_impl_.materialized_length_){uint64_t{0u}}
    , decltype(_impl_.download_priority_){1}
  };
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_resource_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_resource_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_bookmark_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_bookmark_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_mismatched_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_mismatched_digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pasteboard_external_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pasteboard_external_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataInfo::~DataInfo() {
  // @@protoc_insertion_point(destructor:TSP.DataInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digest_.Destroy();
  _impl_.preferred_file_name_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.document_resource_locator_.Destroy();
  _impl_.source_bookmark_data_.Destroy();
  _impl_.remote_url_.Destroy();
  _impl_.last_mismatched_digest_.Destroy();
  _impl_.pasteboard_external_file_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attributes_;
  if (this != internal_default_instance()) delete _impl_.encryption_info_;
  if (this != internal_default_instance()) delete _impl_.unmaterialized_ranges_;
}

void DataInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.preferred_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.document_resource_locator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.source_bookmark_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.remote_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.last_mismatched_digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pasteboard_external_file_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.attributes_ != nullptr);
      _impl_.attributes_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.encryption_info_ != nullptr);
      _impl_.encryption_info_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.unmaterialized_ranges_ != nullptr);
      _impl_.unmaterialized_ranges_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remote_data_length_) -
        reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.remote_data_length_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.remote_data_mtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.materialized_length_) -
        reinterpret_cast<char*>(&_impl_.remote_data_mtime_)) + sizeof(_impl_.materialized_length_));
    _impl_.download_priority_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string preferred_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_preferred_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.preferred_file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string document_resource_locator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_document_resource_locator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.document_resource_locator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes source_bookmark_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_source_bookmark_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string remote_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_remote_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.remote_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool can_download = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_can_download(&has_bits);
          _impl_.can_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataInfo.DownloadPriority download_priority = 9 [default = Default];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataInfo_DownloadPriority_IsValid(val))) {
            _internal_set_download_priority(static_cast<::TSP::DataInfo_DownloadPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataAttributes attributes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.EncryptionInfo encryption_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryption_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes last_mismatched_digest = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_mismatched_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.IndexSet unmaterialized_ranges = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_unmaterialized_ranges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 remote_data_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_remote_data_length(&has_bits);
          _impl_.remote_data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remote_data_has_package_storage = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_remote_data_has_package_storage(&has_bits);
          _impl_.remote_data_has_package_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataUploadStatus upload_status = 16 [default = DataUploadStatus_Pending];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataUploadStatus_IsValid(val))) {
            _internal_set_upload_status(static_cast<::TSP::DataUploadStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double remote_data_mtime = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_remote_data_mtime(&has_bits);
          _impl_.remote_data_mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 materialized_length = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_materialized_length(&has_bits);
          _impl_.materialized_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pasteboard_external_file_path = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pasteboard_external_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.pasteboard_external_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required bytes digest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // required string preferred_file_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_file_name().data(), static_cast<int>(this->_internal_preferred_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.preferred_file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_preferred_file_name(), target);
  }

  // optional string file_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // optional string document_resource_locator = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_resource_locator().data(), static_cast<int>(this->_internal_document_resource_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.document_resource_locator");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_document_resource_locator(), target);
  }

  // optional bytes source_bookmark_data = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_source_bookmark_data(), target);
  }

  // optional string remote_url = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_url().data(), static_cast<int>(this->_internal_remote_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.remote_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_remote_url(), target);
  }

  // optional bool can_download = 8 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_can_download(), target);
  }

  // optional .TSP.DataInfo.DownloadPriority download_priority = 9 [default = Default];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_download_priority(), target);
  }

  // optional .TSP.DataAttributes attributes = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.EncryptionInfo encryption_info = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::encryption_info(this),
        _Internal::encryption_info(this).GetCachedSize(), target, stream);
  }

  // optional bytes last_mismatched_digest = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_last_mismatched_digest(), target);
  }

  // optional .TSP.IndexSet unmaterialized_ranges = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::unmaterialized_ranges(this),
        _Internal::unmaterialized_ranges(this).GetCachedSize(), target, stream);
  }

  // optional uint64 remote_data_length = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_remote_data_length(), target);
  }

  // optional bool remote_data_has_package_storage = 15 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_remote_data_has_package_storage(), target);
  }

  // optional .TSP.DataUploadStatus upload_status = 16 [default = DataUploadStatus_Pending];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_upload_status(), target);
  }

  // optional double remote_data_mtime = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_remote_data_mtime(), target);
  }

  // optional uint64 materialized_length = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_materialized_length(), target);
  }

  // optional string pasteboard_external_file_path = 99;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pasteboard_external_file_path().data(), static_cast<int>(this->_internal_pasteboard_external_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.pasteboard_external_file_path");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_pasteboard_external_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataInfo)
  return target;
}

size_t DataInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.DataInfo)
  size_t total_size = 0;

  if (_internal_has_digest()) {
    // required bytes digest = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  if (_internal_has_preferred_file_name()) {
    // required string preferred_file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_file_name());
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  return total_size;
}
size_t DataInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000803) ^ 0x00000803) == 0) {  // All required fields are present.
    // required bytes digest = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());

    // required string preferred_file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_file_name());

    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional string file_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional string document_resource_locator = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_document_resource_locator());
    }

    // optional bytes source_bookmark_data = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_bookmark_data());
    }

    // optional string remote_url = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_url());
    }

    // optional bytes last_mismatched_digest = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_mismatched_digest());
    }

    // optional string pasteboard_external_file_path = 99;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pasteboard_external_file_path());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.DataAttributes attributes = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.attributes_);
    }

    // optional .TSP.EncryptionInfo encryption_info = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.encryption_info_);
    }

    // optional .TSP.IndexSet unmaterialized_ranges = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unmaterialized_ranges_);
    }

  }
  if (cached_has_bits & 0x0000f000u) {
    // optional bool can_download = 8 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool remote_data_has_package_storage = 15 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional .TSP.DataUploadStatus upload_status = 16 [default = DataUploadStatus_Pending];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_upload_status());
    }

    // optional uint64 remote_data_length = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_remote_data_length());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional double remote_data_mtime = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional uint64 materialized_length = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_materialized_length());
    }

    // optional .TSP.DataInfo.DownloadPriority download_priority = 9 [default = Default];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_download_priority());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataInfo::GetClassData() const { return &_class_data_; }


void DataInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataInfo*>(&to_msg);
  auto& from = static_cast<const DataInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_preferred_file_name(from._internal_preferred_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_document_resource_locator(from._internal_document_resource_locator());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_source_bookmark_data(from._internal_source_bookmark_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_remote_url(from._internal_remote_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_last_mismatched_digest(from._internal_last_mismatched_digest());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_pasteboard_external_file_path(from._internal_pasteboard_external_file_path());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_attributes()->::TSP::DataAttributes::MergeFrom(
          from._internal_attributes());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_encryption_info()->::TSP::EncryptionInfo::MergeFrom(
          from._internal_encryption_info());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_unmaterialized_ranges()->::TSP::IndexSet::MergeFrom(
          from._internal_unmaterialized_ranges());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.identifier_ = from._impl_.identifier_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.can_download_ = from._impl_.can_download_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.remote_data_has_package_storage_ = from._impl_.remote_data_has_package_storage_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.upload_status_ = from._impl_.upload_status_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.remote_data_length_ = from._impl_.remote_data_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.remote_data_mtime_ = from._impl_.remote_data_mtime_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.materialized_length_ = from._impl_.materialized_length_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.download_priority_ = from._impl_.download_priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataInfo::CopyFrom(const DataInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_attributes()) {
    if (!_impl_.attributes_->IsInitialized()) return false;
  }
  if (_internal_has_encryption_info()) {
    if (!_impl_.encryption_info_->IsInitialized()) return false;
  }
  if (_internal_has_unmaterialized_ranges()) {
    if (!_impl_.unmaterialized_ranges_->IsInitialized()) return false;
  }
  return true;
}

void DataInfo::InternalSwap(DataInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_file_name_, lhs_arena,
      &other->_impl_.preferred_file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_resource_locator_, lhs_arena,
      &other->_impl_.document_resource_locator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_bookmark_data_, lhs_arena,
      &other->_impl_.source_bookmark_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_url_, lhs_arena,
      &other->_impl_.remote_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_mismatched_digest_, lhs_arena,
      &other->_impl_.last_mismatched_digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pasteboard_external_file_path_, lhs_arena,
      &other->_impl_.pasteboard_external_file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataInfo, _impl_.materialized_length_)
      + sizeof(DataInfo::_impl_.materialized_length_)
      - PROTOBUF_FIELD_OFFSET(DataInfo, _impl_.attributes_)>(
          reinterpret_cast<char*>(&_impl_.attributes_),
          reinterpret_cast<char*>(&other->_impl_.attributes_));
  swap(_impl_.download_priority_, other->_impl_.download_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[13]);
}

// ===================================================================

class DataMetadataMap_DataMetadataMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<DataMetadataMap_DataMetadataMapEntry>()._impl_._has_bits_);
  static void set_has_data_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& data_metadata(const DataMetadataMap_DataMetadataMapEntry* msg);
  static void set_has_data_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
DataMetadataMap_DataMetadataMapEntry::_Internal::data_metadata(const DataMetadataMap_DataMetadataMapEntry* msg) {
  return *msg->_impl_.data_metadata_;
}
void DataMetadataMap_DataMetadataMapEntry::clear_data_metadata() {
  if (_impl_.data_metadata_ != nullptr) _impl_.data_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DataMetadataMap_DataMetadataMapEntry::DataMetadataMap_DataMetadataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DataMetadataMap.DataMetadataMapEntry)
}
DataMetadataMap_DataMetadataMapEntry::DataMetadataMap_DataMetadataMapEntry(const DataMetadataMap_DataMetadataMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataMetadataMap_DataMetadataMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_metadata_){nullptr}
    , decltype(_impl_.data_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_metadata()) {
    _this->_impl_.data_metadata_ = new ::TSP::Reference(*from._impl_.data_metadata_);
  }
  _this->_impl_.data_identifier_ = from._impl_.data_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.DataMetadataMap.DataMetadataMapEntry)
}

inline void DataMetadataMap_DataMetadataMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_metadata_){nullptr}
    , decltype(_impl_.data_identifier_){uint64_t{0u}}
  };
}

DataMetadataMap_DataMetadataMapEntry::~DataMetadataMap_DataMetadataMapEntry() {
  // @@protoc_insertion_point(destructor:TSP.DataMetadataMap.DataMetadataMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataMetadataMap_DataMetadataMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_metadata_;
}

void DataMetadataMap_DataMetadataMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataMetadataMap_DataMetadataMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_metadata_ != nullptr);
    _impl_.data_metadata_->Clear();
  }
  _impl_.data_identifier_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMetadataMap_DataMetadataMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 data_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_identifier(&has_bits);
          _impl_.data_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference data_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMetadataMap_DataMetadataMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 data_identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_identifier(), target);
  }

  // required .TSP.Reference data_metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data_metadata(this),
        _Internal::data_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataMetadataMap.DataMetadataMapEntry)
  return target;
}

size_t DataMetadataMap_DataMetadataMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  size_t total_size = 0;

  if (_internal_has_data_metadata()) {
    // required .TSP.Reference data_metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_metadata_);
  }

  if (_internal_has_data_identifier()) {
    // required uint64 data_identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_identifier());
  }

  return total_size;
}
size_t DataMetadataMap_DataMetadataMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference data_metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_metadata_);

    // required uint64 data_identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMetadataMap_DataMetadataMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataMetadataMap_DataMetadataMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMetadataMap_DataMetadataMapEntry::GetClassData() const { return &_class_data_; }


void DataMetadataMap_DataMetadataMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataMetadataMap_DataMetadataMapEntry*>(&to_msg);
  auto& from = static_cast<const DataMetadataMap_DataMetadataMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data_metadata()->::TSP::Reference::MergeFrom(
          from._internal_data_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_identifier_ = from._impl_.data_identifier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMetadataMap_DataMetadataMapEntry::CopyFrom(const DataMetadataMap_DataMetadataMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMetadataMap_DataMetadataMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_data_metadata()) {
    if (!_impl_.data_metadata_->IsInitialized()) return false;
  }
  return true;
}

void DataMetadataMap_DataMetadataMapEntry::InternalSwap(DataMetadataMap_DataMetadataMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataMetadataMap_DataMetadataMapEntry, _impl_.data_identifier_)
      + sizeof(DataMetadataMap_DataMetadataMapEntry::_impl_.data_identifier_)
      - PROTOBUF_FIELD_OFFSET(DataMetadataMap_DataMetadataMapEntry, _impl_.data_metadata_)>(
          reinterpret_cast<char*>(&_impl_.data_metadata_),
          reinterpret_cast<char*>(&other->_impl_.data_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMetadataMap_DataMetadataMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[14]);
}

// ===================================================================

class DataMetadataMap::_Internal {
 public:
};

DataMetadataMap::DataMetadataMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DataMetadataMap)
}
DataMetadataMap::DataMetadataMap(const DataMetadataMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataMetadataMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_metadata_entries_){from._impl_.data_metadata_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.DataMetadataMap)
}

inline void DataMetadataMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_metadata_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataMetadataMap::~DataMetadataMap() {
  // @@protoc_insertion_point(destructor:TSP.DataMetadataMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataMetadataMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_metadata_entries_.~RepeatedPtrField();
}

void DataMetadataMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataMetadataMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataMetadataMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_metadata_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMetadataMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.DataMetadataMap.DataMetadataMapEntry data_metadata_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_metadata_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMetadataMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataMetadataMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.DataMetadataMap.DataMetadataMapEntry data_metadata_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_metadata_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_metadata_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataMetadataMap)
  return target;
}

size_t DataMetadataMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataMetadataMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataMetadataMap.DataMetadataMapEntry data_metadata_entries = 1;
  total_size += 1UL * this->_internal_data_metadata_entries_size();
  for (const auto& msg : this->_impl_.data_metadata_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMetadataMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataMetadataMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMetadataMap::GetClassData() const { return &_class_data_; }


void DataMetadataMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataMetadataMap*>(&to_msg);
  auto& from = static_cast<const DataMetadataMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataMetadataMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_metadata_entries_.MergeFrom(from._impl_.data_metadata_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMetadataMap::CopyFrom(const DataMetadataMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataMetadataMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMetadataMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.data_metadata_entries_))
    return false;
  return true;
}

void DataMetadataMap::InternalSwap(DataMetadataMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_metadata_entries_.InternalSwap(&other->_impl_.data_metadata_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMetadataMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[15]);
}

// ===================================================================

class DataMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DataMetadata>()._impl_._has_bits_);
  static const ::TSP::Color& fallback_color(const DataMetadata* msg);
  static void set_has_fallback_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Color&
DataMetadata::_Internal::fallback_color(const DataMetadata* msg) {
  return *msg->_impl_.fallback_color_;
}
void DataMetadata::clear_fallback_color() {
  if (_impl_.fallback_color_ != nullptr) _impl_.fallback_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DataMetadata::DataMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DataMetadata)
}
DataMetadata::DataMetadata(const DataMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fallback_color_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fallback_color()) {
    _this->_impl_.fallback_color_ = new ::TSP::Color(*from._impl_.fallback_color_);
  }
  // @@protoc_insertion_point(copy_constructor:TSP.DataMetadata)
}

inline void DataMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fallback_color_){nullptr}
  };
}

DataMetadata::~DataMetadata() {
  // @@protoc_insertion_point(destructor:TSP.DataMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fallback_color_;
}

void DataMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fallback_color_ != nullptr);
    _impl_.fallback_color_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color fallback_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Color fallback_color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fallback_color(this),
        _Internal::fallback_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataMetadata)
  return target;
}

size_t DataMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Color fallback_color = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fallback_color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMetadata::GetClassData() const { return &_class_data_; }


void DataMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataMetadata*>(&to_msg);
  auto& from = static_cast<const DataMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fallback_color()) {
    _this->_internal_mutable_fallback_color()->::TSP::Color::MergeFrom(
        from._internal_fallback_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMetadata::CopyFrom(const DataMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMetadata::IsInitialized() const {
  if (_internal_has_fallback_color()) {
    if (!_impl_.fallback_color_->IsInitialized()) return false;
  }
  return true;
}

void DataMetadata::InternalSwap(DataMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.fallback_color_, other->_impl_.fallback_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[16]);
}

// ===================================================================

class EncryptionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptionInfo>()._impl_._has_bits_);
  static void set_has_decoded_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_block_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EncryptionInfo::EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.EncryptionInfo)
}
EncryptionInfo::EncryptionInfo(const EncryptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncryptionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_infos_){from._impl_.block_infos_}
    , decltype(_impl_.decoded_length_){}
    , decltype(_impl_.preferred_block_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.decoded_length_, &from._impl_.decoded_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preferred_block_size_) -
    reinterpret_cast<char*>(&_impl_.decoded_length_)) + sizeof(_impl_.preferred_block_size_));
  // @@protoc_insertion_point(copy_constructor:TSP.EncryptionInfo)
}

inline void EncryptionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_infos_){arena}
    , decltype(_impl_.decoded_length_){uint64_t{0u}}
    , decltype(_impl_.preferred_block_size_){uint64_t{0u}}
  };
}

EncryptionInfo::~EncryptionInfo() {
  // @@protoc_insertion_point(destructor:TSP.EncryptionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_infos_.~RepeatedPtrField();
}

void EncryptionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.EncryptionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.decoded_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preferred_block_size_) -
        reinterpret_cast<char*>(&_impl_.decoded_length_)) + sizeof(_impl_.preferred_block_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 decoded_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_decoded_length(&has_bits);
          _impl_.decoded_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 preferred_block_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_preferred_block_size(&has_bits);
          _impl_.preferred_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.EncryptionBlockInfo block_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.EncryptionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 decoded_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_decoded_length(), target);
  }

  // optional uint64 preferred_block_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_preferred_block_size(), target);
  }

  // repeated .TSP.EncryptionBlockInfo block_infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_block_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_block_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.EncryptionInfo)
  return target;
}

size_t EncryptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.EncryptionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.EncryptionBlockInfo block_infos = 3;
  total_size += 1UL * this->_internal_block_infos_size();
  for (const auto& msg : this->_impl_.block_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 decoded_length = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decoded_length());
    }

    // optional uint64 preferred_block_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_preferred_block_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncryptionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptionInfo::GetClassData() const { return &_class_data_; }


void EncryptionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncryptionInfo*>(&to_msg);
  auto& from = static_cast<const EncryptionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.EncryptionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.block_infos_.MergeFrom(from._impl_.block_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.decoded_length_ = from._impl_.decoded_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.preferred_block_size_ = from._impl_.preferred_block_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptionInfo::CopyFrom(const EncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.EncryptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.block_infos_))
    return false;
  return true;
}

void EncryptionInfo::InternalSwap(EncryptionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.block_infos_.InternalSwap(&other->_impl_.block_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptionInfo, _impl_.preferred_block_size_)
      + sizeof(EncryptionInfo::_impl_.preferred_block_size_)
      - PROTOBUF_FIELD_OFFSET(EncryptionInfo, _impl_.decoded_length_)>(
          reinterpret_cast<char*>(&_impl_.decoded_length_),
          reinterpret_cast<char*>(&other->_impl_.decoded_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[17]);
}

// ===================================================================

class EncryptionBlockInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptionBlockInfo>()._impl_._has_bits_);
  static void set_has_encoded_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decoded_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EncryptionBlockInfo::EncryptionBlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.EncryptionBlockInfo)
}
EncryptionBlockInfo::EncryptionBlockInfo(const EncryptionBlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncryptionBlockInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoded_length_){}
    , decltype(_impl_.decoded_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.encoded_length_, &from._impl_.encoded_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.decoded_length_) -
    reinterpret_cast<char*>(&_impl_.encoded_length_)) + sizeof(_impl_.decoded_length_));
  // @@protoc_insertion_point(copy_constructor:TSP.EncryptionBlockInfo)
}

inline void EncryptionBlockInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoded_length_){uint64_t{0u}}
    , decltype(_impl_.decoded_length_){uint64_t{0u}}
  };
}

EncryptionBlockInfo::~EncryptionBlockInfo() {
  // @@protoc_insertion_point(destructor:TSP.EncryptionBlockInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptionBlockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EncryptionBlockInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptionBlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.EncryptionBlockInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.encoded_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.decoded_length_) -
        reinterpret_cast<char*>(&_impl_.encoded_length_)) + sizeof(_impl_.decoded_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptionBlockInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 encoded_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_encoded_length(&has_bits);
          _impl_.encoded_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decoded_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_decoded_length(&has_bits);
          _impl_.decoded_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptionBlockInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.EncryptionBlockInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 encoded_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_encoded_length(), target);
  }

  // optional uint64 decoded_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_decoded_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.EncryptionBlockInfo)
  return target;
}

size_t EncryptionBlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.EncryptionBlockInfo)
  size_t total_size = 0;

  // required uint64 encoded_length = 1;
  if (_internal_has_encoded_length()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_encoded_length());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 decoded_length = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decoded_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptionBlockInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncryptionBlockInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptionBlockInfo::GetClassData() const { return &_class_data_; }


void EncryptionBlockInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncryptionBlockInfo*>(&to_msg);
  auto& from = static_cast<const EncryptionBlockInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.EncryptionBlockInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.encoded_length_ = from._impl_.encoded_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.decoded_length_ = from._impl_.decoded_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptionBlockInfo::CopyFrom(const EncryptionBlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.EncryptionBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionBlockInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EncryptionBlockInfo::InternalSwap(EncryptionBlockInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptionBlockInfo, _impl_.decoded_length_)
      + sizeof(EncryptionBlockInfo::_impl_.decoded_length_)
      - PROTOBUF_FIELD_OFFSET(EncryptionBlockInfo, _impl_.encoded_length_)>(
          reinterpret_cast<char*>(&_impl_.encoded_length_),
          reinterpret_cast<char*>(&other->_impl_.encoded_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptionBlockInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[18]);
}

// ===================================================================

class ViewStateMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewStateMetadata>()._impl_._has_bits_);
  static const ::TSP::UUID& version_uuid(const ViewStateMetadata* msg);
  static void set_has_version_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::ComponentInfo& component(const ViewStateMetadata* msg);
  static void set_has_component(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
ViewStateMetadata::_Internal::version_uuid(const ViewStateMetadata* msg) {
  return *msg->_impl_.version_uuid_;
}
const ::TSP::ComponentInfo&
ViewStateMetadata::_Internal::component(const ViewStateMetadata* msg) {
  return *msg->_impl_.component_;
}
void ViewStateMetadata::clear_version_uuid() {
  if (_impl_.version_uuid_ != nullptr) _impl_.version_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ViewStateMetadata::ViewStateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ViewStateMetadata)
}
ViewStateMetadata::ViewStateMetadata(const ViewStateMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewStateMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.external_object_uuid_map_entries_){from._impl_.external_object_uuid_map_entries_}
    , decltype(_impl_.read_version_){from._impl_.read_version_}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.component_){nullptr}
    , decltype(_impl_.version_uuid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_component()) {
    _this->_impl_.component_ = new ::TSP::ComponentInfo(*from._impl_.component_);
  }
  if (from._internal_has_version_uuid()) {
    _this->_impl_.version_uuid_ = new ::TSP::UUID(*from._impl_.version_uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSP.ViewStateMetadata)
}

inline void ViewStateMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){arena}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.external_object_uuid_map_entries_){arena}
    , decltype(_impl_.read_version_){arena}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.component_){nullptr}
    , decltype(_impl_.version_uuid_){nullptr}
  };
}

ViewStateMetadata::~ViewStateMetadata() {
  // @@protoc_insertion_point(destructor:TSP.ViewStateMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewStateMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.external_object_uuid_map_entries_.~RepeatedPtrField();
  _impl_.read_version_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.component_;
  if (this != internal_default_instance()) delete _impl_.version_uuid_;
}

void ViewStateMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewStateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ViewStateMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  _impl_.external_object_uuid_map_entries_.Clear();
  _impl_.read_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.component_ != nullptr);
      _impl_.component_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.version_uuid_ != nullptr);
      _impl_.version_uuid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewStateMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.ComponentInfo component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID version_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_object_uuid_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_version = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewStateMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ViewStateMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.ComponentInfo component = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::component(this),
        _Internal::component(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID version_uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::version_uuid(this),
        _Internal::version_uuid(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_external_object_uuid_map_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_external_object_uuid_map_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 read_version = 6 [packed = true];
  {
    int byte_size = _impl_._read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ViewStateMetadata)
  return target;
}

size_t ViewStateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ViewStateMetadata)
  size_t total_size = 0;

  // required .TSP.ComponentInfo component = 3;
  if (_internal_has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.component_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 5;
  total_size += 1UL * this->_internal_external_object_uuid_map_entries_size();
  for (const auto& msg : this->_impl_.external_object_uuid_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .TSP.UUID version_uuid = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_uuid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewStateMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewStateMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewStateMetadata::GetClassData() const { return &_class_data_; }


void ViewStateMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewStateMetadata*>(&to_msg);
  auto& from = static_cast<const ViewStateMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ViewStateMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_impl_.external_object_uuid_map_entries_.MergeFrom(from._impl_.external_object_uuid_map_entries_);
  _this->_impl_.read_version_.MergeFrom(from._impl_.read_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_component()->::TSP::ComponentInfo::MergeFrom(
          from._internal_component());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_version_uuid()->::TSP::UUID::MergeFrom(
          from._internal_version_uuid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewStateMetadata::CopyFrom(const ViewStateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ViewStateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.external_object_uuid_map_entries_))
    return false;
  if (_internal_has_component()) {
    if (!_impl_.component_->IsInitialized()) return false;
  }
  if (_internal_has_version_uuid()) {
    if (!_impl_.version_uuid_->IsInitialized()) return false;
  }
  return true;
}

void ViewStateMetadata::InternalSwap(ViewStateMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  _impl_.external_object_uuid_map_entries_.InternalSwap(&other->_impl_.external_object_uuid_map_entries_);
  _impl_.read_version_.InternalSwap(&other->_impl_.read_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewStateMetadata, _impl_.version_uuid_)
      + sizeof(ViewStateMetadata::_impl_.version_uuid_)
      - PROTOBUF_FIELD_OFFSET(ViewStateMetadata, _impl_.component_)>(
          reinterpret_cast<char*>(&_impl_.component_),
          reinterpret_cast<char*>(&other->_impl_.component_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewStateMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[19]);
}

// ===================================================================

class ObjectSerializationMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectSerializationMetadata>()._impl_._has_bits_);
  static const ::TSP::UUID& source_document_uuid(const ObjectSerializationMetadata* msg);
  static void set_has_source_document_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& version_uuid(const ObjectSerializationMetadata* msg);
  static void set_has_version_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::ComponentInfo& component(const ObjectSerializationMetadata* msg);
  static void set_has_component(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& data_metadata_map(const ObjectSerializationMetadata* msg);
  static void set_has_data_metadata_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSP::UUID&
ObjectSerializationMetadata::_Internal::source_document_uuid(const ObjectSerializationMetadata* msg) {
  return *msg->_impl_.source_document_uuid_;
}
const ::TSP::UUID&
ObjectSerializationMetadata::_Internal::version_uuid(const ObjectSerializationMetadata* msg) {
  return *msg->_impl_.version_uuid_;
}
const ::TSP::ComponentInfo&
ObjectSerializationMetadata::_Internal::component(const ObjectSerializationMetadata* msg) {
  return *msg->_impl_.component_;
}
const ::TSP::Reference&
ObjectSerializationMetadata::_Internal::data_metadata_map(const ObjectSerializationMetadata* msg) {
  return *msg->_impl_.data_metadata_map_;
}
void ObjectSerializationMetadata::clear_source_document_uuid() {
  if (_impl_.source_document_uuid_ != nullptr) _impl_.source_document_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ObjectSerializationMetadata::clear_version_uuid() {
  if (_impl_.version_uuid_ != nullptr) _impl_.version_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ObjectSerializationMetadata::clear_data_metadata_map() {
  if (_impl_.data_metadata_map_ != nullptr) _impl_.data_metadata_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ObjectSerializationMetadata::ObjectSerializationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectSerializationMetadata)
}
ObjectSerializationMetadata::ObjectSerializationMetadata(const ObjectSerializationMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectSerializationMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.datas_){from._impl_.datas_}
    , decltype(_impl_.external_object_uuid_map_entries_){from._impl_.external_object_uuid_map_entries_}
    , decltype(_impl_.read_version_){from._impl_.read_version_}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.source_document_uuid_){nullptr}
    , decltype(_impl_.version_uuid_){nullptr}
    , decltype(_impl_.component_){nullptr}
    , decltype(_impl_.data_metadata_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_document_uuid()) {
    _this->_impl_.source_document_uuid_ = new ::TSP::UUID(*from._impl_.source_document_uuid_);
  }
  if (from._internal_has_version_uuid()) {
    _this->_impl_.version_uuid_ = new ::TSP::UUID(*from._impl_.version_uuid_);
  }
  if (from._internal_has_component()) {
    _this->_impl_.component_ = new ::TSP::ComponentInfo(*from._impl_.component_);
  }
  if (from._internal_has_data_metadata_map()) {
    _this->_impl_.data_metadata_map_ = new ::TSP::Reference(*from._impl_.data_metadata_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectSerializationMetadata)
}

inline void ObjectSerializationMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){arena}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.datas_){arena}
    , decltype(_impl_.external_object_uuid_map_entries_){arena}
    , decltype(_impl_.read_version_){arena}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.source_document_uuid_){nullptr}
    , decltype(_impl_.version_uuid_){nullptr}
    , decltype(_impl_.component_){nullptr}
    , decltype(_impl_.data_metadata_map_){nullptr}
  };
}

ObjectSerializationMetadata::~ObjectSerializationMetadata() {
  // @@protoc_insertion_point(destructor:TSP.ObjectSerializationMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectSerializationMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.datas_.~RepeatedPtrField();
  _impl_.external_object_uuid_map_entries_.~RepeatedPtrField();
  _impl_.read_version_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.source_document_uuid_;
  if (this != internal_default_instance()) delete _impl_.version_uuid_;
  if (this != internal_default_instance()) delete _impl_.component_;
  if (this != internal_default_instance()) delete _impl_.data_metadata_map_;
}

void ObjectSerializationMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectSerializationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectSerializationMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  _impl_.datas_.Clear();
  _impl_.external_object_uuid_map_entries_.Clear();
  _impl_.read_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.source_document_uuid_ != nullptr);
      _impl_.source_document_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.version_uuid_ != nullptr);
      _impl_.version_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.component_ != nullptr);
      _impl_.component_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.data_metadata_map_ != nullptr);
      _impl_.data_metadata_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSerializationMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID source_document_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_document_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID version_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_version_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.ComponentInfo component = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_object_uuid_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference data_metadata_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_version = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectSerializationMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectSerializationMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID source_document_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_document_uuid(this),
        _Internal::source_document_uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID version_uuid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::version_uuid(this),
        _Internal::version_uuid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.ComponentInfo component = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::component(this),
        _Internal::component(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.DataInfo datas = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_external_object_uuid_map_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_external_object_uuid_map_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference data_metadata_map = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::data_metadata_map(this),
        _Internal::data_metadata_map(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 read_version = 8 [packed = true];
  {
    int byte_size = _impl_._read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectSerializationMetadata)
  return target;
}

size_t ObjectSerializationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectSerializationMetadata)
  size_t total_size = 0;

  // required .TSP.ComponentInfo component = 4;
  if (_internal_has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.component_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.DataInfo datas = 5;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 6;
  total_size += 1UL * this->_internal_external_object_uuid_map_entries_size();
  for (const auto& msg : this->_impl_.external_object_uuid_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 8 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUID source_document_uuid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_document_uuid_);
    }

    // optional .TSP.UUID version_uuid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_uuid_);
    }

  }
  // optional .TSP.Reference data_metadata_map = 7;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_metadata_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectSerializationMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectSerializationMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectSerializationMetadata::GetClassData() const { return &_class_data_; }


void ObjectSerializationMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectSerializationMetadata*>(&to_msg);
  auto& from = static_cast<const ObjectSerializationMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectSerializationMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_impl_.external_object_uuid_map_entries_.MergeFrom(from._impl_.external_object_uuid_map_entries_);
  _this->_impl_.read_version_.MergeFrom(from._impl_.read_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_source_document_uuid()->::TSP::UUID::MergeFrom(
          from._internal_source_document_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_version_uuid()->::TSP::UUID::MergeFrom(
          from._internal_version_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_component()->::TSP::ComponentInfo::MergeFrom(
          from._internal_component());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_data_metadata_map()->::TSP::Reference::MergeFrom(
          from._internal_data_metadata_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectSerializationMetadata::CopyFrom(const ObjectSerializationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectSerializationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSerializationMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.datas_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.external_object_uuid_map_entries_))
    return false;
  if (_internal_has_source_document_uuid()) {
    if (!_impl_.source_document_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_version_uuid()) {
    if (!_impl_.version_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_component()) {
    if (!_impl_.component_->IsInitialized()) return false;
  }
  if (_internal_has_data_metadata_map()) {
    if (!_impl_.data_metadata_map_->IsInitialized()) return false;
  }
  return true;
}

void ObjectSerializationMetadata::InternalSwap(ObjectSerializationMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
  _impl_.external_object_uuid_map_entries_.InternalSwap(&other->_impl_.external_object_uuid_map_entries_);
  _impl_.read_version_.InternalSwap(&other->_impl_.read_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectSerializationMetadata, _impl_.data_metadata_map_)
      + sizeof(ObjectSerializationMetadata::_impl_.data_metadata_map_)
      - PROTOBUF_FIELD_OFFSET(ObjectSerializationMetadata, _impl_.source_document_uuid_)>(
          reinterpret_cast<char*>(&_impl_.source_document_uuid_),
          reinterpret_cast<char*>(&other->_impl_.source_document_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSerializationMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[20]);
}

// ===================================================================

class ObjectSerializationDirectory_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectSerializationDirectory_Entry>()._impl_._has_bits_);
  static void set_has_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ObjectSerializationDirectory_Entry::ObjectSerializationDirectory_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectSerializationDirectory.Entry)
}
ObjectSerializationDirectory_Entry::ObjectSerializationDirectory_Entry(const ObjectSerializationDirectory_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectSerializationDirectory_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locator_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locator()) {
    _this->_impl_.locator_.Set(from._internal_locator(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectSerializationDirectory.Entry)
}

inline void ObjectSerializationDirectory_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locator_){}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
  };
  _impl_.locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectSerializationDirectory_Entry::~ObjectSerializationDirectory_Entry() {
  // @@protoc_insertion_point(destructor:TSP.ObjectSerializationDirectory.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectSerializationDirectory_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locator_.Destroy();
}

void ObjectSerializationDirectory_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectSerializationDirectory_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectSerializationDirectory.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.locator_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSerializationDirectory_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string locator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_locator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.ObjectSerializationDirectory.Entry.locator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectSerializationDirectory_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectSerializationDirectory.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string locator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locator().data(), static_cast<int>(this->_internal_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ObjectSerializationDirectory.Entry.locator");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_locator(), target);
  }

  // required uint64 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectSerializationDirectory.Entry)
  return target;
}

size_t ObjectSerializationDirectory_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ObjectSerializationDirectory.Entry)
  size_t total_size = 0;

  if (_internal_has_locator()) {
    // required string locator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator());
  }

  if (_internal_has_offset()) {
    // required uint64 offset = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  if (_internal_has_size()) {
    // required uint64 size = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return total_size;
}
size_t ObjectSerializationDirectory_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectSerializationDirectory.Entry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string locator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator());

    // required uint64 offset = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());

    // required uint64 size = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectSerializationDirectory_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectSerializationDirectory_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectSerializationDirectory_Entry::GetClassData() const { return &_class_data_; }


void ObjectSerializationDirectory_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectSerializationDirectory_Entry*>(&to_msg);
  auto& from = static_cast<const ObjectSerializationDirectory_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectSerializationDirectory.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_locator(from._internal_locator());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectSerializationDirectory_Entry::CopyFrom(const ObjectSerializationDirectory_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectSerializationDirectory.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSerializationDirectory_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ObjectSerializationDirectory_Entry::InternalSwap(ObjectSerializationDirectory_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locator_, lhs_arena,
      &other->_impl_.locator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectSerializationDirectory_Entry, _impl_.size_)
      + sizeof(ObjectSerializationDirectory_Entry::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(ObjectSerializationDirectory_Entry, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSerializationDirectory_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[21]);
}

// ===================================================================

class ObjectSerializationDirectory::_Internal {
 public:
};

ObjectSerializationDirectory::ObjectSerializationDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectSerializationDirectory)
}
ObjectSerializationDirectory::ObjectSerializationDirectory(const ObjectSerializationDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectSerializationDirectory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectSerializationDirectory)
}

inline void ObjectSerializationDirectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectSerializationDirectory::~ObjectSerializationDirectory() {
  // @@protoc_insertion_point(destructor:TSP.ObjectSerializationDirectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectSerializationDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void ObjectSerializationDirectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectSerializationDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectSerializationDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSerializationDirectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.ObjectSerializationDirectory.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectSerializationDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectSerializationDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.ObjectSerializationDirectory.Entry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectSerializationDirectory)
  return target;
}

size_t ObjectSerializationDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectSerializationDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ObjectSerializationDirectory.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectSerializationDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectSerializationDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectSerializationDirectory::GetClassData() const { return &_class_data_; }


void ObjectSerializationDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectSerializationDirectory*>(&to_msg);
  auto& from = static_cast<const ObjectSerializationDirectory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectSerializationDirectory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectSerializationDirectory::CopyFrom(const ObjectSerializationDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectSerializationDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSerializationDirectory::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void ObjectSerializationDirectory::InternalSwap(ObjectSerializationDirectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSerializationDirectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[22]);
}

// ===================================================================

class DataPropertiesEntryV1::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPropertiesEntryV1>()._impl_._has_bits_);
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expects_matched_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creation_time_interval_since_1970(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_mismatched_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DataPropertiesEntryV1::DataPropertiesEntryV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DataPropertiesEntryV1)
}
DataPropertiesEntryV1::DataPropertiesEntryV1(const DataPropertiesEntryV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataPropertiesEntryV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creation_version_){from._impl_.creation_version_}
    , /*decltype(_impl_._creation_version_cached_byte_size_)*/{0}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.last_mismatched_digest_){}
    , decltype(_impl_.creation_time_interval_since_1970_){}
    , decltype(_impl_.expects_matched_digest_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_mismatched_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_mismatched_digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_mismatched_digest()) {
    _this->_impl_.last_mismatched_digest_.Set(from._internal_last_mismatched_digest(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.creation_time_interval_since_1970_, &from._impl_.creation_time_interval_since_1970_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expects_matched_digest_) -
    reinterpret_cast<char*>(&_impl_.creation_time_interval_since_1970_)) + sizeof(_impl_.expects_matched_digest_));
  // @@protoc_insertion_point(copy_constructor:TSP.DataPropertiesEntryV1)
}

inline void DataPropertiesEntryV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creation_version_){arena}
    , /*decltype(_impl_._creation_version_cached_byte_size_)*/{0}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.last_mismatched_digest_){}
    , decltype(_impl_.creation_time_interval_since_1970_){0}
    , decltype(_impl_.expects_matched_digest_){false}
  };
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_mismatched_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_mismatched_digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataPropertiesEntryV1::~DataPropertiesEntryV1() {
  // @@protoc_insertion_point(destructor:TSP.DataPropertiesEntryV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataPropertiesEntryV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creation_version_.~RepeatedField();
  _impl_.digest_.Destroy();
  _impl_.last_mismatched_digest_.Destroy();
}

void DataPropertiesEntryV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataPropertiesEntryV1::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataPropertiesEntryV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creation_version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.last_mismatched_digest_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.creation_time_interval_since_1970_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expects_matched_digest_) -
        reinterpret_cast<char*>(&_impl_.creation_time_interval_since_1970_)) + sizeof(_impl_.expects_matched_digest_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPropertiesEntryV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool expects_matched_digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_expects_matched_digest(&has_bits);
          _impl_.expects_matched_digest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double creation_time_interval_since_1970 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_creation_time_interval_since_1970(&has_bits);
          _impl_.creation_time_interval_since_1970_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 creation_version = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_creation_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_creation_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes last_mismatched_digest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_last_mismatched_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPropertiesEntryV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataPropertiesEntryV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes digest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // optional bool expects_matched_digest = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_expects_matched_digest(), target);
  }

  // optional double creation_time_interval_since_1970 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_creation_time_interval_since_1970(), target);
  }

  // repeated uint32 creation_version = 4 [packed = true];
  {
    int byte_size = _impl_._creation_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_creation_version(), byte_size, target);
    }
  }

  // optional bytes last_mismatched_digest = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_last_mismatched_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataPropertiesEntryV1)
  return target;
}

size_t DataPropertiesEntryV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataPropertiesEntryV1)
  size_t total_size = 0;

  // required bytes digest = 1;
  if (_internal_has_digest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 creation_version = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.creation_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._creation_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bytes last_mismatched_digest = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_mismatched_digest());
    }

    // optional double creation_time_interval_since_1970 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool expects_matched_digest = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPropertiesEntryV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataPropertiesEntryV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPropertiesEntryV1::GetClassData() const { return &_class_data_; }


void DataPropertiesEntryV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataPropertiesEntryV1*>(&to_msg);
  auto& from = static_cast<const DataPropertiesEntryV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataPropertiesEntryV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.creation_version_.MergeFrom(from._impl_.creation_version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_last_mismatched_digest(from._internal_last_mismatched_digest());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.creation_time_interval_since_1970_ = from._impl_.creation_time_interval_since_1970_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.expects_matched_digest_ = from._impl_.expects_matched_digest_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPropertiesEntryV1::CopyFrom(const DataPropertiesEntryV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataPropertiesEntryV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPropertiesEntryV1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataPropertiesEntryV1::InternalSwap(DataPropertiesEntryV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.creation_version_.InternalSwap(&other->_impl_.creation_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_mismatched_digest_, lhs_arena,
      &other->_impl_.last_mismatched_digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPropertiesEntryV1, _impl_.expects_matched_digest_)
      + sizeof(DataPropertiesEntryV1::_impl_.expects_matched_digest_)
      - PROTOBUF_FIELD_OFFSET(DataPropertiesEntryV1, _impl_.creation_time_interval_since_1970_)>(
          reinterpret_cast<char*>(&_impl_.creation_time_interval_since_1970_),
          reinterpret_cast<char*>(&other->_impl_.creation_time_interval_since_1970_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPropertiesEntryV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[23]);
}

// ===================================================================

class DataPropertiesV1::_Internal {
 public:
};

DataPropertiesV1::DataPropertiesV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DataPropertiesV1)
}
DataPropertiesV1::DataPropertiesV1(const DataPropertiesV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataPropertiesV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){from._impl_.properties_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.DataPropertiesV1)
}

inline void DataPropertiesV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataPropertiesV1::~DataPropertiesV1() {
  // @@protoc_insertion_point(destructor:TSP.DataPropertiesV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataPropertiesV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.~RepeatedPtrField();
}

void DataPropertiesV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataPropertiesV1::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataPropertiesV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPropertiesV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.DataPropertiesEntryV1 properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPropertiesV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataPropertiesV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.DataPropertiesEntryV1 properties = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataPropertiesV1)
  return target;
}

size_t DataPropertiesV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataPropertiesV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataPropertiesEntryV1 properties = 1;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPropertiesV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataPropertiesV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPropertiesV1::GetClassData() const { return &_class_data_; }


void DataPropertiesV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataPropertiesV1*>(&to_msg);
  auto& from = static_cast<const DataPropertiesV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataPropertiesV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPropertiesV1::CopyFrom(const DataPropertiesV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataPropertiesV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPropertiesV1::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.properties_))
    return false;
  return true;
}

void DataPropertiesV1::InternalSwap(DataPropertiesV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPropertiesV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[24]);
}

// ===================================================================

class DocumentMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentMetadata>()._impl_._has_bits_);
  static void set_has_is_in_collaboration_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataPropertiesV1& data_properties_v1(const DocumentMetadata* msg);
  static void set_has_data_properties_v1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataPropertiesV1&
DocumentMetadata::_Internal::data_properties_v1(const DocumentMetadata* msg) {
  return *msg->_impl_.data_properties_v1_;
}
DocumentMetadata::DocumentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DocumentMetadata)
}
DocumentMetadata::DocumentMetadata(const DocumentMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_properties_v1_){nullptr}
    , decltype(_impl_.is_in_collaboration_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_properties_v1()) {
    _this->_impl_.data_properties_v1_ = new ::TSP::DataPropertiesV1(*from._impl_.data_properties_v1_);
  }
  _this->_impl_.is_in_collaboration_mode_ = from._impl_.is_in_collaboration_mode_;
  // @@protoc_insertion_point(copy_constructor:TSP.DocumentMetadata)
}

inline void DocumentMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_properties_v1_){nullptr}
    , decltype(_impl_.is_in_collaboration_mode_){false}
  };
}

DocumentMetadata::~DocumentMetadata() {
  // @@protoc_insertion_point(destructor:TSP.DocumentMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_properties_v1_;
}

void DocumentMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DocumentMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_properties_v1_ != nullptr);
    _impl_.data_properties_v1_->Clear();
  }
  _impl_.is_in_collaboration_mode_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_in_collaboration_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_in_collaboration_mode(&has_bits);
          _impl_.is_in_collaboration_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataPropertiesV1 data_properties_v1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_properties_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DocumentMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_in_collaboration_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in_collaboration_mode(), target);
  }

  // optional .TSP.DataPropertiesV1 data_properties_v1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data_properties_v1(this),
        _Internal::data_properties_v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DocumentMetadata)
  return target;
}

size_t DocumentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DocumentMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.DataPropertiesV1 data_properties_v1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_properties_v1_);
    }

    // optional bool is_in_collaboration_mode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentMetadata::GetClassData() const { return &_class_data_; }


void DocumentMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentMetadata*>(&to_msg);
  auto& from = static_cast<const DocumentMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DocumentMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data_properties_v1()->::TSP::DataPropertiesV1::MergeFrom(
          from._internal_data_properties_v1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_in_collaboration_mode_ = from._impl_.is_in_collaboration_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentMetadata::CopyFrom(const DocumentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DocumentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetadata::IsInitialized() const {
  if (_internal_has_data_properties_v1()) {
    if (!_impl_.data_properties_v1_->IsInitialized()) return false;
  }
  return true;
}

void DocumentMetadata::InternalSwap(DocumentMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentMetadata, _impl_.is_in_collaboration_mode_)
      + sizeof(DocumentMetadata::_impl_.is_in_collaboration_mode_)
      - PROTOBUF_FIELD_OFFSET(DocumentMetadata, _impl_.data_properties_v1_)>(
          reinterpret_cast<char*>(&_impl_.data_properties_v1_),
          reinterpret_cast<char*>(&other->_impl_.data_properties_v1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[25]);
}

// ===================================================================

class SupportMetadata_DataCollaborationProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<SupportMetadata_DataCollaborationProperties>()._impl_._has_bits_);
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acknowledged_by_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_materialized_on_server(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revision_sequence_for_materialized_on_server(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_upload_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_remote_data_ever(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_revision_sequence_for_acknowledged_by_server(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SupportMetadata_DataCollaborationProperties::SupportMetadata_DataCollaborationProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.SupportMetadata.DataCollaborationProperties)
}
SupportMetadata_DataCollaborationProperties::SupportMetadata_DataCollaborationProperties(const SupportMetadata_DataCollaborationProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SupportMetadata_DataCollaborationProperties* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.acknowledged_by_server_){}
    , decltype(_impl_.materialized_on_server_){}
    , decltype(_impl_.is_remote_data_ever_){}
    , decltype(_impl_.upload_status_){}
    , decltype(_impl_.revision_sequence_for_materialized_on_server_){}
    , decltype(_impl_.revision_sequence_for_acknowledged_by_server_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.acknowledged_by_server_, &from._impl_.acknowledged_by_server_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.revision_sequence_for_acknowledged_by_server_) -
    reinterpret_cast<char*>(&_impl_.acknowledged_by_server_)) + sizeof(_impl_.revision_sequence_for_acknowledged_by_server_));
  // @@protoc_insertion_point(copy_constructor:TSP.SupportMetadata.DataCollaborationProperties)
}

inline void SupportMetadata_DataCollaborationProperties::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.acknowledged_by_server_){false}
    , decltype(_impl_.materialized_on_server_){false}
    , decltype(_impl_.is_remote_data_ever_){false}
    , decltype(_impl_.upload_status_){0}
    , decltype(_impl_.revision_sequence_for_materialized_on_server_){0}
    , decltype(_impl_.revision_sequence_for_acknowledged_by_server_){0}
  };
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SupportMetadata_DataCollaborationProperties::~SupportMetadata_DataCollaborationProperties() {
  // @@protoc_insertion_point(destructor:TSP.SupportMetadata.DataCollaborationProperties)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SupportMetadata_DataCollaborationProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digest_.Destroy();
}

void SupportMetadata_DataCollaborationProperties::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SupportMetadata_DataCollaborationProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SupportMetadata.DataCollaborationProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.digest_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.acknowledged_by_server_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.revision_sequence_for_acknowledged_by_server_) -
        reinterpret_cast<char*>(&_impl_.acknowledged_by_server_)) + sizeof(_impl_.revision_sequence_for_acknowledged_by_server_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportMetadata_DataCollaborationProperties::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acknowledged_by_server = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_acknowledged_by_server(&has_bits);
          _impl_.acknowledged_by_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool materialized_on_server = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_materialized_on_server(&has_bits);
          _impl_.materialized_on_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataUploadStatus upload_status = 4 [default = DataUploadStatus_Pending];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataUploadStatus_IsValid(val))) {
            _internal_set_upload_status(static_cast<::TSP::DataUploadStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 revision_sequence_for_materialized_on_server = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_revision_sequence_for_materialized_on_server(&has_bits);
          _impl_.revision_sequence_for_materialized_on_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_remote_data_ever = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_remote_data_ever(&has_bits);
          _impl_.is_remote_data_ever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 revision_sequence_for_acknowledged_by_server = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_revision_sequence_for_acknowledged_by_server(&has_bits);
          _impl_.revision_sequence_for_acknowledged_by_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupportMetadata_DataCollaborationProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SupportMetadata.DataCollaborationProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes digest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // optional bool acknowledged_by_server = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_acknowledged_by_server(), target);
  }

  // optional bool materialized_on_server = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_materialized_on_server(), target);
  }

  // optional .TSP.DataUploadStatus upload_status = 4 [default = DataUploadStatus_Pending];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_upload_status(), target);
  }

  // optional int32 revision_sequence_for_materialized_on_server = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_revision_sequence_for_materialized_on_server(), target);
  }

  // optional bool is_remote_data_ever = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_remote_data_ever(), target);
  }

  // optional int32 revision_sequence_for_acknowledged_by_server = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_revision_sequence_for_acknowledged_by_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SupportMetadata.DataCollaborationProperties)
  return target;
}

size_t SupportMetadata_DataCollaborationProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SupportMetadata.DataCollaborationProperties)
  size_t total_size = 0;

  // required bytes digest = 1;
  if (_internal_has_digest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional bool acknowledged_by_server = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool materialized_on_server = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_remote_data_ever = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .TSP.DataUploadStatus upload_status = 4 [default = DataUploadStatus_Pending];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_upload_status());
    }

    // optional int32 revision_sequence_for_materialized_on_server = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_revision_sequence_for_materialized_on_server());
    }

    // optional int32 revision_sequence_for_acknowledged_by_server = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_revision_sequence_for_acknowledged_by_server());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SupportMetadata_DataCollaborationProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SupportMetadata_DataCollaborationProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SupportMetadata_DataCollaborationProperties::GetClassData() const { return &_class_data_; }


void SupportMetadata_DataCollaborationProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SupportMetadata_DataCollaborationProperties*>(&to_msg);
  auto& from = static_cast<const SupportMetadata_DataCollaborationProperties&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.SupportMetadata.DataCollaborationProperties)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.acknowledged_by_server_ = from._impl_.acknowledged_by_server_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.materialized_on_server_ = from._impl_.materialized_on_server_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_remote_data_ever_ = from._impl_.is_remote_data_ever_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.upload_status_ = from._impl_.upload_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.revision_sequence_for_materialized_on_server_ = from._impl_.revision_sequence_for_materialized_on_server_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.revision_sequence_for_acknowledged_by_server_ = from._impl_.revision_sequence_for_acknowledged_by_server_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SupportMetadata_DataCollaborationProperties::CopyFrom(const SupportMetadata_DataCollaborationProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SupportMetadata.DataCollaborationProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportMetadata_DataCollaborationProperties::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SupportMetadata_DataCollaborationProperties::InternalSwap(SupportMetadata_DataCollaborationProperties* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupportMetadata_DataCollaborationProperties, _impl_.revision_sequence_for_acknowledged_by_server_)
      + sizeof(SupportMetadata_DataCollaborationProperties::_impl_.revision_sequence_for_acknowledged_by_server_)
      - PROTOBUF_FIELD_OFFSET(SupportMetadata_DataCollaborationProperties, _impl_.acknowledged_by_server_)>(
          reinterpret_cast<char*>(&_impl_.acknowledged_by_server_),
          reinterpret_cast<char*>(&other->_impl_.acknowledged_by_server_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportMetadata_DataCollaborationProperties::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[26]);
}

// ===================================================================

class SupportMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<SupportMetadata>()._impl_._has_bits_);
  static void set_has_is_in_collaboration_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SupportMetadata::SupportMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.SupportMetadata)
}
SupportMetadata::SupportMetadata(const SupportMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SupportMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_collaboration_properties_){from._impl_.data_collaboration_properties_}
    , decltype(_impl_.is_in_collaboration_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_in_collaboration_mode_ = from._impl_.is_in_collaboration_mode_;
  // @@protoc_insertion_point(copy_constructor:TSP.SupportMetadata)
}

inline void SupportMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_collaboration_properties_){arena}
    , decltype(_impl_.is_in_collaboration_mode_){false}
  };
}

SupportMetadata::~SupportMetadata() {
  // @@protoc_insertion_point(destructor:TSP.SupportMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SupportMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_collaboration_properties_.~RepeatedPtrField();
}

void SupportMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SupportMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SupportMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_collaboration_properties_.Clear();
  _impl_.is_in_collaboration_mode_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_in_collaboration_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_in_collaboration_mode(&has_bits);
          _impl_.is_in_collaboration_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.SupportMetadata.DataCollaborationProperties data_collaboration_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_collaboration_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupportMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SupportMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_in_collaboration_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in_collaboration_mode(), target);
  }

  // repeated .TSP.SupportMetadata.DataCollaborationProperties data_collaboration_properties = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_collaboration_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_collaboration_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SupportMetadata)
  return target;
}

size_t SupportMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SupportMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.SupportMetadata.DataCollaborationProperties data_collaboration_properties = 2;
  total_size += 1UL * this->_internal_data_collaboration_properties_size();
  for (const auto& msg : this->_impl_.data_collaboration_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_in_collaboration_mode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SupportMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SupportMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SupportMetadata::GetClassData() const { return &_class_data_; }


void SupportMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SupportMetadata*>(&to_msg);
  auto& from = static_cast<const SupportMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.SupportMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_collaboration_properties_.MergeFrom(from._impl_.data_collaboration_properties_);
  if (from._internal_has_is_in_collaboration_mode()) {
    _this->_internal_set_is_in_collaboration_mode(from._internal_is_in_collaboration_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SupportMetadata::CopyFrom(const SupportMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SupportMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportMetadata::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.data_collaboration_properties_))
    return false;
  return true;
}

void SupportMetadata::InternalSwap(SupportMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_collaboration_properties_.InternalSwap(&other->_impl_.data_collaboration_properties_);
  swap(_impl_.is_in_collaboration_mode_, other->_impl_.is_in_collaboration_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSP::ArchiveInfo*
Arena::CreateMaybeMessage< ::TSP::ArchiveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ArchiveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::MessageInfo*
Arena::CreateMaybeMessage< ::TSP::MessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::MessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FieldInfo*
Arena::CreateMaybeMessage< ::TSP::FieldInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FieldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FieldPath*
Arena::CreateMaybeMessage< ::TSP::FieldPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FieldPath >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentInfo*
Arena::CreateMaybeMessage< ::TSP::ComponentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentExternalReference*
Arena::CreateMaybeMessage< ::TSP::ComponentExternalReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentExternalReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentDataReference_ObjectReference*
Arena::CreateMaybeMessage< ::TSP::ComponentDataReference_ObjectReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentDataReference_ObjectReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentDataReference*
Arena::CreateMaybeMessage< ::TSP::ComponentDataReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentDataReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectUUIDMapEntry*
Arena::CreateMaybeMessage< ::TSP::ObjectUUIDMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectUUIDMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FeatureInfo*
Arena::CreateMaybeMessage< ::TSP::FeatureInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FeatureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::PackageMetadata*
Arena::CreateMaybeMessage< ::TSP::PackageMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::PackageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DocumentRevision*
Arena::CreateMaybeMessage< ::TSP::DocumentRevision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DocumentRevision >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::PasteboardMetadata*
Arena::CreateMaybeMessage< ::TSP::PasteboardMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::PasteboardMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataInfo*
Arena::CreateMaybeMessage< ::TSP::DataInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataMetadataMap_DataMetadataMapEntry*
Arena::CreateMaybeMessage< ::TSP::DataMetadataMap_DataMetadataMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataMetadataMap_DataMetadataMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataMetadataMap*
Arena::CreateMaybeMessage< ::TSP::DataMetadataMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataMetadataMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataMetadata*
Arena::CreateMaybeMessage< ::TSP::DataMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::EncryptionInfo*
Arena::CreateMaybeMessage< ::TSP::EncryptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::EncryptionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::EncryptionBlockInfo*
Arena::CreateMaybeMessage< ::TSP::EncryptionBlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::EncryptionBlockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ViewStateMetadata*
Arena::CreateMaybeMessage< ::TSP::ViewStateMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ViewStateMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectSerializationMetadata*
Arena::CreateMaybeMessage< ::TSP::ObjectSerializationMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectSerializationMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectSerializationDirectory_Entry*
Arena::CreateMaybeMessage< ::TSP::ObjectSerializationDirectory_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectSerializationDirectory_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectSerializationDirectory*
Arena::CreateMaybeMessage< ::TSP::ObjectSerializationDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectSerializationDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataPropertiesEntryV1*
Arena::CreateMaybeMessage< ::TSP::DataPropertiesEntryV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataPropertiesEntryV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataPropertiesV1*
Arena::CreateMaybeMessage< ::TSP::DataPropertiesV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataPropertiesV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DocumentMetadata*
Arena::CreateMaybeMessage< ::TSP::DocumentMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DocumentMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SupportMetadata_DataCollaborationProperties*
Arena::CreateMaybeMessage< ::TSP::SupportMetadata_DataCollaborationProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SupportMetadata_DataCollaborationProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SupportMetadata*
Arena::CreateMaybeMessage< ::TSP::SupportMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SupportMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
