// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNCommandArchives.proto

#include "KNCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace KN {
PROTOBUF_CONSTEXPR UIStateCommandGroupArchive::UIStateCommandGroupArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slidenodestoedit_)*/{}
  , /*decltype(_impl_.template_slide_nodes_to_apply_)*/{}
  , /*decltype(_impl_.thumbnailsizes_)*/{}
  , /*decltype(_impl_.selectedslidenodes_)*/{}
  , /*decltype(_impl_.restoreselectedslidenodes_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.uistate_)*/nullptr} {}
struct UIStateCommandGroupArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIStateCommandGroupArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIStateCommandGroupArchiveDefaultTypeInternal() {}
  union {
    UIStateCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIStateCommandGroupArchiveDefaultTypeInternal _UIStateCommandGroupArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.ids_of_drawables_using_object_placeholder_geometry_)*/{}
  , /*decltype(_impl_.sage_placeholder_tags_list_)*/{}
  , /*decltype(_impl_.insert_build_descriptions_)*/{}
  , /*decltype(_impl_.remove_build_descriptions_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.working_drawables_)*/{}
  , /*decltype(_impl_.working_insert_build_descriptions_)*/{}
  , /*decltype(_impl_.instructional_text_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr
  , /*decltype(_impl_.args_list_)*/nullptr
  , /*decltype(_impl_.undo_archive_)*/nullptr
  , /*decltype(_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_)*/nullptr
  , /*decltype(_impl_.update_geometry_to_match_object_placeholder_)*/false
  , /*decltype(_impl_.is_pasting_)*/false
  , /*decltype(_impl_.remove_slide_specific_hyperlinks_)*/false
  , /*decltype(_impl_.saved_next_untitled_resolver_index_)*/0u} {}
struct CommandSlideInsertDrawablesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideInsertDrawablesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideInsertDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideInsertDrawablesArchiveDefaultTypeInternal _CommandSlideInsertDrawablesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.old_tags_)*/{}
  , /*decltype(_impl_.old_infos_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr} {}
struct CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetPlaceholdersForTagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal _CommandSlideSetPlaceholdersForTagsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandTemplateSlideSetPlaceholderForTagArchive::CommandTemplateSlideSetPlaceholderForTagArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.placeholder_id_)*/nullptr} {}
struct CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal() {}
  union {
    CommandTemplateSlideSetPlaceholderForTagArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal _CommandTemplateSlideSetPlaceholderForTagArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlidePropagateSetPlaceholderForTagArchive::CommandSlidePropagateSetPlaceholderForTagArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.placeholder_id_)*/nullptr
  , /*decltype(_impl_.original_id_)*/nullptr} {}
struct CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal() {}
  union {
    CommandSlidePropagateSetPlaceholderForTagArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal _CommandSlidePropagateSetPlaceholderForTagArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sorteddrawables_)*/{}
  , /*decltype(_impl_.placeholdertags_)*/{}
  , /*decltype(_impl_.insert_build_descriptions_)*/{}
  , /*decltype(_impl_.remove_build_descriptions_)*/{}
  , /*decltype(_impl_.drawables_using_object_placeholder_geometry_)*/{}
  , /*decltype(_impl_.inverse_insert_hyperlink_commands_)*/{}
  , /*decltype(_impl_.drawable_indexes_for_undo_)*/{}
  , /*decltype(_impl_.instructional_text_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr
  , /*decltype(_impl_.args_list_)*/nullptr} {}
struct CommandSlideRemoveDrawableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideRemoveDrawableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideRemoveDrawableArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveDrawableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideRemoveDrawableArchiveDefaultTypeInternal _CommandSlideRemoveDrawableArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_ordered_infos_)*/{}
  , /*decltype(_impl_.args_list_)*/{}
  , /*decltype(_impl_.old_ordered_infos_on_slide_for_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr} {}
struct CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveDrawableZOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSlideMoveDrawableZOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_node_id_path_)*/nullptr
  , /*decltype(_impl_.old_value_)*/false
  , /*decltype(_impl_.value_)*/false} {}
struct CommandSlideNodeSetPropertyArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideNodeSetPropertyArchiveDefaultTypeInternal() {}
  union {
    CommandSlideNodeSetPropertyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideNodeSetPropertyArchiveDefaultTypeInternal _CommandSlideNodeSetPropertyArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideNodeSetViewStatePropertyArchive::CommandSlideNodeSetViewStatePropertyArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_node_id_path_)*/nullptr
  , /*decltype(_impl_.old_value_)*/false
  , /*decltype(_impl_.value_)*/false} {}
struct CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal() {}
  union {
    CommandSlideNodeSetViewStatePropertyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal _CommandSlideNodeSetViewStatePropertyArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideSetBackgroundFillArchive::CommandSlideSetBackgroundFillArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_path_)*/nullptr
  , /*decltype(_impl_.old_fill_)*/nullptr
  , /*decltype(_impl_.new_fill_)*/nullptr} {}
struct CommandSlideSetBackgroundFillArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideSetBackgroundFillArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideSetBackgroundFillArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetBackgroundFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideSetBackgroundFillArchiveDefaultTypeInternal _CommandSlideSetBackgroundFillArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_path_)*/nullptr
  , /*decltype(_impl_.slide_style_)*/nullptr
  , /*decltype(_impl_.old_slide_style_)*/nullptr} {}
struct CommandSlideSetStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideSetStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideSetStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideSetStyleArchiveDefaultTypeInternal _CommandSlideSetStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.old_recording_)*/nullptr
  , /*decltype(_impl_.old_modification_date_)*/nullptr
  , /*decltype(_impl_.new_modification_date_)*/nullptr
  , /*decltype(_impl_.old_is_recording_out_of_sync_)*/false
  , /*decltype(_impl_.new_is_recording_out_of_sync_)*/false} {}
struct CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowMarkOutOfSyncRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowMarkOutOfSyncRecordingIfNeededArchive::CommandShowMarkOutOfSyncRecordingIfNeededArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.out_of_sync_token_)*/nullptr} {}
struct CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal() {}
  union {
    CommandShowMarkOutOfSyncRecordingIfNeededArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingIfNeededArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.old_recording_)*/nullptr} {}
struct CommandShowRemoveRecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowRemoveRecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowRemoveRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowRemoveRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowRemoveRecordingArchiveDefaultTypeInternal _CommandShowRemoveRecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.replacement_recording_)*/nullptr
  , /*decltype(_impl_.old_recording_)*/nullptr} {}
struct CommandShowReplaceRecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowReplaceRecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowReplaceRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowReplaceRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowReplaceRecordingArchiveDefaultTypeInternal _CommandShowReplaceRecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.size_value_)*/nullptr
  , /*decltype(_impl_.double_value_)*/0
  , /*decltype(_impl_.bool_value_)*/false
  , /*decltype(_impl_.show_mode_value_)*/0} {}
struct CommandShowSetValueArchive_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetValueArchive_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetValueArchive_PropertyValueDefaultTypeInternal() {}
  union {
    CommandShowSetValueArchive_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetValueArchive_PropertyValueDefaultTypeInternal _CommandShowSetValueArchive_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetValueArchive::CommandShowSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.old_value_)*/nullptr
  , /*decltype(_impl_.new_value_)*/nullptr} {}
struct CommandShowSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandShowSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetValueArchiveDefaultTypeInternal _CommandShowSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_nodes_being_inserted_)*/{}
  , /*decltype(_impl_.inserted_args_list_)*/{}
  , /*decltype(_impl_.ids_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.depths_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.template_slide_nodes_being_inserted_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.collapsed_state_of_slide_nodes_being_inserted_)*/{}
  , /*decltype(_impl_.working_slide_nodes_being_inserted_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.undo_archive_)*/nullptr
  , /*decltype(_impl_.kind_)*/0} {}
struct CommandShowInsertSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowInsertSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowInsertSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowInsertSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowInsertSlideArchiveDefaultTypeInternal _CommandShowInsertSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_nodes_being_moved_linearly_)*/{}
  , /*decltype(_impl_.rearranged_args_list_)*/{}
  , /*decltype(_impl_.ids_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.depths_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandShowMoveSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowMoveSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowMoveSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowMoveSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowMoveSlideArchiveDefaultTypeInternal _CommandShowMoveSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_nodes_being_removed_)*/{}
  , /*decltype(_impl_.removed_args_list_)*/{}
  , /*decltype(_impl_.ids_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.depths_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_)*/{}
  , /*decltype(_impl_.slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_)*/{}
  , /*decltype(_impl_.collapsed_state_of_slide_nodes_being_removed_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandShowRemoveSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowRemoveSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowRemoveSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowRemoveSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowRemoveSlideArchiveDefaultTypeInternal _CommandShowRemoveSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowChangeThemeArchive_IdentifierToStyleMap::CommandShowChangeThemeArchive_IdentifierToStyleMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.styles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal() {}
  union {
    CommandShowChangeThemeArchive_IdentifierToStyleMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal _CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_;
PROTOBUF_CONSTEXPR CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.template_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_template_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.old_theme_)*/nullptr
  , /*decltype(_impl_.identifier_to_style_map_)*/nullptr
  , /*decltype(_impl_.old_identifier_to_style_map_)*/nullptr} {}
struct CommandShowChangeThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowChangeThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowChangeThemeArchiveDefaultTypeInternal() {}
  union {
    CommandShowChangeThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowChangeThemeArchiveDefaultTypeInternal _CommandShowChangeThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowChangeSlideSizeArchive::CommandShowChangeSlideSizeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr} {}
struct CommandShowChangeSlideSizeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowChangeSlideSizeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowChangeSlideSizeArchiveDefaultTypeInternal() {}
  union {
    CommandShowChangeSlideSizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowChangeSlideSizeArchiveDefaultTypeInternal _CommandShowChangeSlideSizeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetThemeCustomEffectTimingCurveArchive::CommandSetThemeCustomEffectTimingCurveArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.path_source_)*/nullptr
  , /*decltype(_impl_.old_path_source_)*/nullptr} {}
struct CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal() {}
  union {
    CommandSetThemeCustomEffectTimingCurveArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal _CommandSetThemeCustomEffectTimingCurveArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMoveTemplatesArchive::CommandMoveTemplatesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.template_slides_)*/{}
  , /*decltype(_impl_.previous_indexes_keys_)*/{}
  , /*decltype(_impl_.previous_indexes_values_)*/{}
  , /*decltype(_impl_.final_template_arrangement_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandMoveTemplatesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMoveTemplatesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMoveTemplatesArchiveDefaultTypeInternal() {}
  union {
    CommandMoveTemplatesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMoveTemplatesArchiveDefaultTypeInternal _CommandMoveTemplatesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandInsertTemplateArchive::CommandInsertTemplateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undo_template_change_commands_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.undo_replacement_template_slide_node_)*/nullptr
  , /*decltype(_impl_.set_inserted_slide_as_default_template_slide_)*/false} {}
struct CommandInsertTemplateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandInsertTemplateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandInsertTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandInsertTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandInsertTemplateArchiveDefaultTypeInternal _CommandInsertTemplateArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPrimitiveInsertTemplateArchive::CommandPrimitiveInsertTemplateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.previous_classic_theme_records_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.was_inserted_with_drop_)*/false} {}
struct CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandPrimitiveInsertTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal _CommandPrimitiveInsertTemplateArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRemoveTemplateArchive::CommandRemoveTemplateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.template_change_commands_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.replacement_template_slide_node_)*/nullptr
  , /*decltype(_impl_.default_template_slide_node_was_replaced_)*/false} {}
struct CommandRemoveTemplateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRemoveTemplateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRemoveTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandRemoveTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRemoveTemplateArchiveDefaultTypeInternal _CommandRemoveTemplateArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPrimitiveRemoveTemplateArchive::CommandPrimitiveRemoveTemplateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.previous_classic_theme_records_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandPrimitiveRemoveTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal _CommandPrimitiveRemoveTemplateArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.insert_build_description_)*/nullptr
  , /*decltype(_impl_.identifier_for_chunk_to_insert_after_)*/nullptr
  , /*decltype(_impl_.should_create_chunks_)*/false
  , /*decltype(_impl_.was_initialized_over_the_wire_)*/false
  , /*decltype(_impl_.has_been_committed_)*/false} {}
struct CommandSlideInsertBuildArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideInsertBuildArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideInsertBuildArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertBuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideInsertBuildArchiveDefaultTypeInternal _CommandSlideInsertBuildArchive_default_instance_;
PROTOBUF_CONSTEXPR InsertBuildDescriptionArchive::InsertBuildDescriptionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chunks_to_insert_)*/{}
  , /*decltype(_impl_.identifers_for_chunks_to_insert_after_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.fallback_chunk_identifiers_)*/{}
  , /*decltype(_impl_.slide_id_)*/nullptr
  , /*decltype(_impl_.build_to_insert_)*/nullptr
  , /*decltype(_impl_.should_assign_chunk_identifiers_)*/false
  , /*decltype(_impl_.is_for_paste_)*/false} {}
struct InsertBuildDescriptionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBuildDescriptionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBuildDescriptionArchiveDefaultTypeInternal() {}
  union {
    InsertBuildDescriptionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBuildDescriptionArchiveDefaultTypeInternal _InsertBuildDescriptionArchive_default_instance_;
PROTOBUF_CONSTEXPR UndoObjectArchive::UndoObjectArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct UndoObjectArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoObjectArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoObjectArchiveDefaultTypeInternal() {}
  union {
    UndoObjectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoObjectArchiveDefaultTypeInternal _UndoObjectArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chunks_to_insert_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_insert_after_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.fallback_chunk_identifiers_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.remove_build_description_)*/nullptr
  , /*decltype(_impl_.build_)*/nullptr} {}
struct CommandSlideRemoveBuildArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideRemoveBuildArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideRemoveBuildArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveBuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideRemoveBuildArchiveDefaultTypeInternal _CommandSlideRemoveBuildArchive_default_instance_;
PROTOBUF_CONSTEXPR RemoveBuildDescriptionArchive::RemoveBuildDescriptionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.slide_id_)*/nullptr
  , /*decltype(_impl_.build_id_)*/nullptr
  , /*decltype(_impl_.should_remove_chunks_)*/false
  , /*decltype(_impl_.should_remove_chunk_identifiers_)*/false} {}
struct RemoveBuildDescriptionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveBuildDescriptionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveBuildDescriptionArchiveDefaultTypeInternal() {}
  union {
    RemoveBuildDescriptionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveBuildDescriptionArchiveDefaultTypeInternal _RemoveBuildDescriptionArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr
  , /*decltype(_impl_.chunk_to_insert_)*/nullptr
  , /*decltype(_impl_.identifier_for_chunk_to_insert_after_)*/nullptr
  , /*decltype(_impl_.needs_selection_update_)*/false
  , /*decltype(_impl_.should_assign_chunk_identifier_)*/false} {}
struct CommandSlideInsertBuildChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideInsertBuildChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideInsertBuildChunkArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertBuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideInsertBuildChunkArchiveDefaultTypeInternal _CommandSlideInsertBuildChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr
  , /*decltype(_impl_.removed_chunk_)*/nullptr
  , /*decltype(_impl_.identifier_for_chunk_to_remove_)*/nullptr
  , /*decltype(_impl_.identifier_for_chunk_to_insert_after_)*/nullptr
  , /*decltype(_impl_.needs_selection_update_)*/false} {}
struct CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveBuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal _CommandSlideRemoveBuildChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_move_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_move_after_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_move_after_for_undo_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandSlideMoveBuildChunksArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunksArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideMoveBuildChunksArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveBuildChunksArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideMoveBuildChunksArchiveDefaultTypeInternal _CommandSlideMoveBuildChunksArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBuildSetValueArchive::CommandBuildSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chunks_to_add_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_insert_after_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_remove_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_for_sub_commands_)*/{}
  , /*decltype(_impl_.identifiers_for_added_chunks_)*/{}
  , /*decltype(_impl_.generated_identifiers_)*/{}
  , /*decltype(_impl_.removed_chunks_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_prior_to_removed_chunks_)*/{}
  , /*decltype(_impl_.old_chunk_identifiers_)*/{}
  , /*decltype(_impl_.chunks_removed_during_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tuple_)*/nullptr
  , /*decltype(_impl_.old_tuple_for_main_property_)*/nullptr
  , /*decltype(_impl_.old_chunk_id_seed_)*/0u} {}
struct CommandBuildSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBuildSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBuildSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandBuildSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBuildSetValueArchiveDefaultTypeInternal _CommandBuildSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBuildUpdateChunkReferentsArchive::CommandBuildUpdateChunkReferentsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.build_id_)*/nullptr} {}
struct CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal() {}
  union {
    CommandBuildUpdateChunkReferentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal _CommandBuildUpdateChunkReferentsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBuildUpdateChunkCountArchive::CommandBuildUpdateChunkCountArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_ids_)*/{}
  , /*decltype(_impl_.expected_delivery_style_tuples_)*/{}
  , /*decltype(_impl_.chunks_to_add_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_insert_after_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_to_remove_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.identifiers_for_added_chunks_)*/{}
  , /*decltype(_impl_.generated_identifiers_)*/{}
  , /*decltype(_impl_.removed_chunks_)*/{}
  , /*decltype(_impl_.identifiers_for_chunks_prior_to_removed_chunks_)*/{}
  , /*decltype(_impl_.old_delivery_style_tuples_)*/{}
  , /*decltype(_impl_.old_chunk_id_seeds_)*/{}
  , /*decltype(_impl_.old_chunk_identifiers_)*/{}
  , /*decltype(_impl_.working_builds_)*/{}
  , /*decltype(_impl_.chunks_removed_during_undo_)*/{}
  , /*decltype(_impl_.chunks_added_during_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr
  , /*decltype(_impl_.needs_async_process_changes_selection_update_)*/false} {}
struct CommandBuildUpdateChunkCountArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBuildUpdateChunkCountArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBuildUpdateChunkCountArchiveDefaultTypeInternal() {}
  union {
    CommandBuildUpdateChunkCountArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBuildUpdateChunkCountArchiveDefaultTypeInternal _CommandBuildUpdateChunkCountArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tuples_to_update_)*/{}
  , /*decltype(_impl_.old_tuples_to_update_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandBuildChunkSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBuildChunkSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBuildChunkSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandBuildChunkSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBuildChunkSetValueArchiveDefaultTypeInternal _CommandBuildChunkSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_node_id_path_)*/nullptr
  , /*decltype(_impl_.old_attributes_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr} {}
struct CommandTransitionSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandTransitionSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandTransitionSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandTransitionSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandTransitionSetValueArchiveDefaultTypeInternal _CommandTransitionSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ids_of_slide_nodes_to_skip_)*/{}
  , /*decltype(_impl_.ids_of_slide_nodes_already_correct_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_numbers_visible_)*/false
  , /*decltype(_impl_.is_undo_)*/false} {}
struct CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal() {}
  union {
    CommandShowSetSlideNumberVisibilityArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal _CommandShowSetSlideNumberVisibilityArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandTemplateSetThumbnailTextArchive::CommandTemplateSetThumbnailTextArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.template_id_)*/nullptr
  , /*decltype(_impl_.is_body_)*/false} {}
struct CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal() {}
  union {
    CommandTemplateSetThumbnailTextArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal _CommandTemplateSetThumbnailTextArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandTemplateSetBodyStylesArchive::CommandTemplateSetBodyStylesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_paragraph_styles_)*/{}
  , /*decltype(_impl_.new_list_styles_)*/{}
  , /*decltype(_impl_.old_paragraph_styles_)*/{}
  , /*decltype(_impl_.old_list_styles_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.template_id_)*/nullptr} {}
struct CommandTemplateSetBodyStylesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandTemplateSetBodyStylesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandTemplateSetBodyStylesArchiveDefaultTypeInternal() {}
  union {
    CommandTemplateSetBodyStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandTemplateSetBodyStylesArchiveDefaultTypeInternal _CommandTemplateSetBodyStylesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandChangeTemplateSlideArchive::CommandChangeTemplateSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_path_)*/nullptr
  , /*decltype(_impl_.template_slide_node_)*/nullptr
  , /*decltype(_impl_.old_template_slide_node_)*/nullptr
  , /*decltype(_impl_.target_prototype_)*/nullptr
  , /*decltype(_impl_.is_undo_redo_)*/false} {}
struct CommandChangeTemplateSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChangeTemplateSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChangeTemplateSlideArchiveDefaultTypeInternal() {}
  union {
    CommandChangeTemplateSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChangeTemplateSlideArchiveDefaultTypeInternal _CommandChangeTemplateSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlidePrimitiveSetTemplateArchive::CommandSlidePrimitiveSetTemplateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_path_)*/nullptr
  , /*decltype(_impl_.template_id_)*/nullptr
  , /*decltype(_impl_.old_template_slide_node_)*/nullptr} {}
struct CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandSlidePrimitiveSetTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal _CommandSlidePrimitiveSetTemplateArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideResetTemplateBackgroundObjectsArchive::CommandSlideResetTemplateBackgroundObjectsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_path_)*/nullptr} {}
struct CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal() {}
  union {
    CommandSlideResetTemplateBackgroundObjectsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal _CommandSlideResetTemplateBackgroundObjectsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetSoundtrack::CommandShowSetSoundtrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.soundtrack_)*/nullptr
  , /*decltype(_impl_.old_soundtrack_)*/nullptr} {}
struct CommandShowSetSoundtrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetSoundtrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetSoundtrackDefaultTypeInternal() {}
  union {
    CommandShowSetSoundtrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetSoundtrackDefaultTypeInternal _CommandShowSetSoundtrack_default_instance_;
PROTOBUF_CONSTEXPR CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_reference_values_)*/{}
  , /*decltype(_impl_.double_value_)*/0
  , /*decltype(_impl_.mode_value_)*/0} {}
struct CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal() {}
  union {
    CommandSoundtrackSetValue_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal _CommandSoundtrackSetValue_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandSoundtrackSetValue::CommandSoundtrackSetValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.soundtrack_id_)*/nullptr
  , /*decltype(_impl_.old_value_)*/nullptr
  , /*decltype(_impl_.new_value_)*/nullptr} {}
struct CommandSoundtrackSetValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSoundtrackSetValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSoundtrackSetValueDefaultTypeInternal() {}
  union {
    CommandSoundtrackSetValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSoundtrackSetValueDefaultTypeInternal _CommandSoundtrackSetValue_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideUpdateTemplateDrawables::CommandSlideUpdateTemplateDrawables(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_placement_operation_args_)*/{}
  , /*decltype(_impl_.old_child_infos_for_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_id_)*/nullptr} {}
struct CommandSlideUpdateTemplateDrawablesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideUpdateTemplateDrawablesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideUpdateTemplateDrawablesDefaultTypeInternal() {}
  union {
    CommandSlideUpdateTemplateDrawables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideUpdateTemplateDrawablesDefaultTypeInternal _CommandSlideUpdateTemplateDrawables_default_instance_;
PROTOBUF_CONSTEXPR ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.previous_legend_offset_)*/nullptr
  , /*decltype(_impl_.previous_legend_size_)*/nullptr
  , /*decltype(_impl_.adjusted_legend_offset_)*/nullptr
  , /*decltype(_impl_.adjusted_legend_size_)*/nullptr} {}
struct ChartInfoGeometryCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartInfoGeometryCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ChartInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartInfoGeometryCommandArchiveDefaultTypeInternal _ChartInfoGeometryCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.build_chunk_ids_)*/{}
  , /*decltype(_impl_.action_build_ids_)*/{}
  , /*decltype(_impl_.originally_selected_drawable_uuids_)*/{}
  , /*decltype(_impl_.transformer_helper_)*/nullptr} {}
struct CanvasSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanvasSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR ActionGhostSelectionTransformerArchive::ActionGhostSelectionTransformerArchive(
    ::_pbi::ConstantInitialized) {}
struct ActionGhostSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionGhostSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionGhostSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ActionGhostSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionGhostSelectionTransformerArchiveDefaultTypeInternal _ActionGhostSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_selection_)*/nullptr} {}
struct DocumentSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    DocumentSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentSelectionTransformerArchiveDefaultTypeInternal _DocumentSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR NoteCanvasSelectionTransformerArchive::NoteCanvasSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transformer_helper_)*/nullptr} {}
struct NoteCanvasSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteCanvasSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteCanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    NoteCanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteCanvasSelectionTransformerArchiveDefaultTypeInternal _NoteCanvasSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR OutlineCanvasSelectionTransformerArchive::OutlineCanvasSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.canvas_selection_transformer_)*/nullptr
  , /*decltype(_impl_.storage_uuid_path_)*/nullptr} {}
struct OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    OutlineCanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal _OutlineCanvasSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideCollectionSelectionTransformerHelperArchive::SlideCollectionSelectionTransformerHelperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_nodes_)*/{}
  , /*decltype(_impl_.slide_node_to_edit_)*/nullptr
  , /*decltype(_impl_.slide_collection_is_theme_)*/false
  , /*decltype(_impl_.previous_primary_selected_index_)*/0u} {}
struct SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionTransformerHelperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal _SlideCollectionSelectionTransformerHelperArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideCollectionSelectionTransformerArchive::SlideCollectionSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transformer_helper_)*/nullptr} {}
struct SlideCollectionSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideCollectionSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideCollectionSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideCollectionSelectionTransformerArchiveDefaultTypeInternal _SlideCollectionSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR OutlineSelectionTransformerArchive::OutlineSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_range_addresses_)*/{}
  , /*decltype(_impl_.transformer_helper_)*/nullptr
  , /*decltype(_impl_.can_have_range_in_selected_paragraph_)*/false} {}
struct OutlineSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutlineSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutlineSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    OutlineSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutlineSelectionTransformerArchiveDefaultTypeInternal _OutlineSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandLiveVideoInfoApplyPreset::CommandLiveVideoInfoApplyPreset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandLiveVideoInfoApplyPresetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandLiveVideoInfoApplyPresetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandLiveVideoInfoApplyPresetDefaultTypeInternal() {}
  union {
    CommandLiveVideoInfoApplyPreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandLiveVideoInfoApplyPresetDefaultTypeInternal _CommandLiveVideoInfoApplyPreset_default_instance_;
PROTOBUF_CONSTEXPR CommandLiveVideoInfoSetSource::CommandLiveVideoInfoSetSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.live_video_info_id_path_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.local_collaboration_command_usage_token_)*/nullptr
  , /*decltype(_impl_.working_source_old_collaboration_command_usage_state_)*/nullptr
  , /*decltype(_impl_.old_source_)*/nullptr
  , /*decltype(_impl_.old_source_id_)*/nullptr} {}
struct CommandLiveVideoInfoSetSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandLiveVideoInfoSetSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandLiveVideoInfoSetSourceDefaultTypeInternal() {}
  union {
    CommandLiveVideoInfoSetSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandLiveVideoInfoSetSourceDefaultTypeInternal _CommandLiveVideoInfoSetSource_default_instance_;
PROTOBUF_CONSTEXPR CommandLiveVideoInfoSetValue_PropertyValue::CommandLiveVideoInfoSetValue_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.normalized_offset_)*/nullptr
  , /*decltype(_impl_.background_fill_)*/nullptr
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.mask_corner_radius_)*/0
  , /*decltype(_impl_.mask_kind_)*/0
  , /*decltype(_impl_.is_placeholder_)*/false
  , /*decltype(_impl_.background_kind_)*/0} {}
struct CommandLiveVideoInfoSetValue_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandLiveVideoInfoSetValue_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandLiveVideoInfoSetValue_PropertyValueDefaultTypeInternal() {}
  union {
    CommandLiveVideoInfoSetValue_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandLiveVideoInfoSetValue_PropertyValueDefaultTypeInternal _CommandLiveVideoInfoSetValue_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandLiveVideoInfoSetValue::CommandLiveVideoInfoSetValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.live_video_info_id_path_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.old_value_)*/nullptr
  , /*decltype(_impl_.property_)*/0} {}
struct CommandLiveVideoInfoSetValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandLiveVideoInfoSetValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandLiveVideoInfoSetValueDefaultTypeInternal() {}
  union {
    CommandLiveVideoInfoSetValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandLiveVideoInfoSetValueDefaultTypeInternal _CommandLiveVideoInfoSetValue_default_instance_;
PROTOBUF_CONSTEXPR CommandLiveVideoSourceSetValue_PropertyValue::CommandLiveVideoSourceSetValue_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_abbreviation_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capture_device_description_)*/nullptr
  , /*decltype(_impl_.poster_image_data_)*/nullptr
  , /*decltype(_impl_.symbol_image_identifier_)*/0
  , /*decltype(_impl_.symbol_tint_color_identifier_)*/0} {}
struct CommandLiveVideoSourceSetValue_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandLiveVideoSourceSetValue_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandLiveVideoSourceSetValue_PropertyValueDefaultTypeInternal() {}
  union {
    CommandLiveVideoSourceSetValue_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandLiveVideoSourceSetValue_PropertyValueDefaultTypeInternal _CommandLiveVideoSourceSetValue_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandLiveVideoSourceSetValue::CommandLiveVideoSourceSetValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.live_video_source_id_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.old_value_)*/nullptr
  , /*decltype(_impl_.property_)*/0} {}
struct CommandLiveVideoSourceSetValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandLiveVideoSourceSetValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandLiveVideoSourceSetValueDefaultTypeInternal() {}
  union {
    CommandLiveVideoSourceSetValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandLiveVideoSourceSetValueDefaultTypeInternal _CommandLiveVideoSourceSetValue_default_instance_;
PROTOBUF_CONSTEXPR CommandLiveVideoStyleSetValue::CommandLiveVideoStyleSetValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.change_)*/nullptr} {}
struct CommandLiveVideoStyleSetValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandLiveVideoStyleSetValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandLiveVideoStyleSetValueDefaultTypeInternal() {}
  union {
    CommandLiveVideoStyleSetValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandLiveVideoStyleSetValueDefaultTypeInternal _CommandLiveVideoStyleSetValue_default_instance_;
PROTOBUF_CONSTEXPR CommandThemeAddLiveVideoSource::CommandThemeAddLiveVideoSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.live_video_source_)*/nullptr
  , /*decltype(_impl_.is_implicit_)*/false} {}
struct CommandThemeAddLiveVideoSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandThemeAddLiveVideoSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandThemeAddLiveVideoSourceDefaultTypeInternal() {}
  union {
    CommandThemeAddLiveVideoSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandThemeAddLiveVideoSourceDefaultTypeInternal _CommandThemeAddLiveVideoSource_default_instance_;
PROTOBUF_CONSTEXPR CommandThemeRemoveLiveVideoSource::CommandThemeRemoveLiveVideoSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.live_video_source_id_)*/nullptr
  , /*decltype(_impl_.removed_live_video_source_)*/nullptr
  , /*decltype(_impl_.is_implicit_)*/false} {}
struct CommandThemeRemoveLiveVideoSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandThemeRemoveLiveVideoSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandThemeRemoveLiveVideoSourceDefaultTypeInternal() {}
  union {
    CommandThemeRemoveLiveVideoSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandThemeRemoveLiveVideoSourceDefaultTypeInternal _CommandThemeRemoveLiveVideoSource_default_instance_;
PROTOBUF_CONSTEXPR CommandMotionBackgroundStyleSetValueArchive::CommandMotionBackgroundStyleSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_style_)*/nullptr
  , /*decltype(_impl_.change_)*/nullptr
  , /*decltype(_impl_.slide_id_path_)*/nullptr
  , /*decltype(_impl_.old_slide_style_)*/nullptr
  , /*decltype(_impl_.undo_property_change_)*/nullptr} {}
struct CommandMotionBackgroundStyleSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMotionBackgroundStyleSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMotionBackgroundStyleSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandMotionBackgroundStyleSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMotionBackgroundStyleSetValueArchiveDefaultTypeInternal _CommandMotionBackgroundStyleSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.motion_background_style_)*/nullptr
  , /*decltype(_impl_.poster_image_data_)*/nullptr
  , /*decltype(_impl_.old_poster_image_data_)*/nullptr} {}
struct CommandMotionBackgroundStyleUpdatePosterFrameDataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMotionBackgroundStyleUpdatePosterFrameDataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMotionBackgroundStyleUpdatePosterFrameDataArchiveDefaultTypeInternal() {}
  union {
    CommandMotionBackgroundStyleUpdatePosterFrameDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMotionBackgroundStyleUpdatePosterFrameDataArchiveDefaultTypeInternal _CommandMotionBackgroundStyleUpdatePosterFrameDataArchive_default_instance_;
}  // namespace KN
static ::_pb::Metadata file_level_metadata_KNCommandArchives_2eproto[72];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_KNCommandArchives_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KNCommandArchives_2eproto = nullptr;

const uint32_t TableStruct_KNCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.uistate_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.slidenodestoedit_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.template_slide_nodes_to_apply_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.thumbnailsizes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.selectedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.restoreselectedslidenodes_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.working_drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.update_geometry_to_match_object_placeholder_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.ids_of_drawables_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.sage_placeholder_tags_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.instructional_text_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.undo_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.is_pasting_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.insert_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.working_insert_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.remove_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.remove_slide_specific_hyperlinks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.saved_next_untitled_resolver_index_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  5,
  ~0u,
  ~0u,
  ~0u,
  3,
  6,
  ~0u,
  ~0u,
  ~0u,
  7,
  ~0u,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.old_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.old_tags_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, _impl_.placeholder_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, _impl_.tag_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, _impl_.placeholder_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, _impl_.original_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.sorteddrawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.drawable_indexes_for_undo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.placeholdertags_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.instructional_text_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.insert_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.remove_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.drawables_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.inverse_insert_hyperlink_commands_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.old_ordered_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.old_ordered_infos_on_slide_for_undo_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.slide_node_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _impl_.slide_node_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _impl_.old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _impl_.value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _impl_.slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _impl_.old_fill_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _impl_.new_fill_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.slide_style_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.old_slide_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.old_recording_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.old_is_recording_out_of_sync_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.new_is_recording_out_of_sync_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.old_modification_date_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.new_modification_date_),
  0,
  1,
  2,
  5,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, _impl_.out_of_sync_token_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_.old_recording_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.replacement_recording_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.old_recording_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.bool_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.show_mode_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.size_value_),
  2,
  1,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.new_value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.working_slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.inserted_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.ids_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.old_depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.old_depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.template_slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.collapsed_state_of_slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.undo_archive_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.slide_nodes_being_moved_linearly_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.rearranged_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.ids_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.old_depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.old_depths_of_slide_nodes_for_depth_fix_up_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.slide_nodes_being_removed_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.removed_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.ids_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.old_depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.old_depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.collapsed_state_of_slide_nodes_being_removed_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap, _impl_.styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.old_theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.template_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.old_template_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.identifier_to_style_map_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.old_identifier_to_style_map_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, _impl_.size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _impl_.path_source_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _impl_.old_path_source_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _impl_.template_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _impl_.previous_indexes_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _impl_.previous_indexes_values_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _impl_.final_template_arrangement_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _impl_.undo_template_change_commands_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _impl_.set_inserted_slide_as_default_template_slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _impl_.undo_replacement_template_slide_node_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _impl_.was_inserted_with_drop_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _impl_.custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _impl_.previous_classic_theme_records_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _impl_.replacement_template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _impl_.template_change_commands_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _impl_.default_template_slide_node_was_replaced_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, _impl_.previous_classic_theme_records_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.insert_build_description_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.identifier_for_chunk_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.should_create_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.was_initialized_over_the_wire_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.has_been_committed_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.build_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.chunks_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.should_assign_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.identifers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.fallback_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _impl_.is_for_paste_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::UndoObjectArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UndoObjectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::UndoObjectArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.remove_build_description_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.chunks_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.identifiers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.fallback_chunk_identifiers_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _impl_.build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _impl_.should_remove_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _impl_.should_remove_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _impl_.tuples_to_update_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.chunk_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.identifier_for_chunk_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.needs_selection_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.should_assign_chunk_identifier_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.removed_chunk_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.identifier_for_chunk_to_remove_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.identifier_for_chunk_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.needs_selection_update_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.identifiers_for_chunks_to_move_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.identifiers_for_chunks_to_move_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.identifiers_for_chunks_to_move_after_for_undo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.tuple_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.chunks_to_add_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.identifiers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.identifiers_for_chunks_to_remove_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.old_tuple_for_main_property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.old_tuples_to_update_for_sub_commands_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.identifiers_for_added_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.generated_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.identifiers_for_chunks_prior_to_removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.old_chunk_id_seed_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.old_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.chunks_removed_during_undo_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _impl_.build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _impl_.old_tuples_to_update_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.drawable_ids_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.expected_delivery_style_tuples_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.chunks_to_add_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.identifiers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.identifiers_for_chunks_to_remove_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.needs_async_process_changes_selection_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.identifiers_for_added_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.generated_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.identifiers_for_chunks_prior_to_removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.old_delivery_style_tuples_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.old_chunk_id_seeds_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.old_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.working_builds_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.chunks_removed_during_undo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _impl_.chunks_added_during_undo_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.old_tuples_to_update_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.slide_node_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.old_attributes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.property_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.slide_numbers_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.ids_of_slide_nodes_to_skip_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.ids_of_slide_nodes_already_correct_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.is_undo_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _impl_.template_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _impl_.is_body_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _impl_.new_text_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _impl_.old_text_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _impl_.template_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _impl_.new_paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _impl_.new_list_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _impl_.old_paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _impl_.old_list_styles_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _impl_.slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _impl_.template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _impl_.old_template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _impl_.is_undo_redo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _impl_.target_prototype_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _impl_.slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _impl_.template_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _impl_.old_template_slide_node_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, _impl_.slide_id_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.soundtrack_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.old_soundtrack_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_.mode_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_.media_reference_values_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.soundtrack_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.new_value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _impl_.slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _impl_.id_placement_operation_args_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _impl_.old_child_infos_for_undo_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_.previous_legend_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_.previous_legend_size_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_.adjusted_legend_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_.adjusted_legend_size_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _impl_.transformer_helper_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _impl_.build_chunk_ids_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _impl_.action_build_ids_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _impl_.originally_selected_drawable_uuids_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::ActionGhostSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::DocumentSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::DocumentSelectionTransformerArchive, _impl_.document_selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::NoteCanvasSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::NoteCanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::NoteCanvasSelectionTransformerArchive, _impl_.transformer_helper_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, _impl_.canvas_selection_transformer_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, _impl_.storage_uuid_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _impl_.slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _impl_.slide_node_to_edit_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _impl_.slide_collection_is_theme_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _impl_.previous_primary_selected_index_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerArchive, _impl_.transformer_helper_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, _impl_.transformer_helper_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, _impl_.can_have_range_in_selected_paragraph_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, _impl_.selection_range_addresses_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoApplyPreset, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoApplyPreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoApplyPreset, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_.live_video_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_.local_collaboration_command_usage_token_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_.working_source_old_collaboration_command_usage_state_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_.old_source_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetSource, _impl_.old_source_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_.normalized_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_.mask_kind_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_.mask_corner_radius_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_.is_placeholder_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_.background_kind_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue_PropertyValue, _impl_.background_fill_),
  2,
  0,
  4,
  3,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue, _impl_.live_video_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoInfoSetValue, _impl_.old_value_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _impl_.capture_device_description_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _impl_.poster_image_data_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _impl_.symbol_abbreviation_text_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _impl_.symbol_image_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue_PropertyValue, _impl_.symbol_tint_color_identifier_),
  0,
  2,
  3,
  1,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue, _impl_.live_video_source_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoSourceSetValue, _impl_.old_value_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoStyleSetValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoStyleSetValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoStyleSetValue, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandLiveVideoStyleSetValue, _impl_.change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeAddLiveVideoSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeAddLiveVideoSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeAddLiveVideoSource, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeAddLiveVideoSource, _impl_.live_video_source_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeAddLiveVideoSource, _impl_.is_implicit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeRemoveLiveVideoSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeRemoveLiveVideoSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeRemoveLiveVideoSource, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeRemoveLiveVideoSource, _impl_.live_video_source_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeRemoveLiveVideoSource, _impl_.is_implicit_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandThemeRemoveLiveVideoSource, _impl_.removed_live_video_source_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _impl_.slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _impl_.old_style_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _impl_.old_slide_style_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _impl_.change_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleSetValueArchive, _impl_.undo_property_change_),
  0,
  3,
  1,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _impl_.motion_background_style_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _impl_.poster_image_data_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _impl_.old_poster_image_data_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::KN::UIStateCommandGroupArchive)},
  { 22, 46, -1, sizeof(::KN::CommandSlideInsertDrawablesArchive)},
  { 64, 76, -1, sizeof(::KN::CommandSlideSetPlaceholdersForTagsArchive)},
  { 82, 91, -1, sizeof(::KN::CommandTemplateSlideSetPlaceholderForTagArchive)},
  { 94, 103, -1, sizeof(::KN::CommandSlidePropagateSetPlaceholderForTagArchive)},
  { 106, 123, -1, sizeof(::KN::CommandSlideRemoveDrawableArchive)},
  { 134, 145, -1, sizeof(::KN::CommandSlideMoveDrawableZOrderArchive)},
  { 150, 161, -1, sizeof(::KN::CommandSlideNodeSetPropertyArchive)},
  { 166, 177, -1, sizeof(::KN::CommandSlideNodeSetViewStatePropertyArchive)},
  { 182, 192, -1, sizeof(::KN::CommandSlideSetBackgroundFillArchive)},
  { 196, 206, -1, sizeof(::KN::CommandSlideSetStyleArchive)},
  { 210, 223, -1, sizeof(::KN::CommandShowMarkOutOfSyncRecordingArchive)},
  { 230, 238, -1, sizeof(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive)},
  { 240, 249, -1, sizeof(::KN::CommandShowRemoveRecordingArchive)},
  { 252, 262, -1, sizeof(::KN::CommandShowReplaceRecordingArchive)},
  { 266, 276, -1, sizeof(::KN::CommandShowSetValueArchive_PropertyValue)},
  { 280, 291, -1, sizeof(::KN::CommandShowSetValueArchive)},
  { 296, 317, -1, sizeof(::KN::CommandShowInsertSlideArchive)},
  { 332, 347, -1, sizeof(::KN::CommandShowMoveSlideArchive)},
  { 356, 372, -1, sizeof(::KN::CommandShowRemoveSlideArchive)},
  { 382, -1, -1, sizeof(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap)},
  { 389, 403, -1, sizeof(::KN::CommandShowChangeThemeArchive)},
  { 411, 419, -1, sizeof(::KN::CommandShowChangeSlideSizeArchive)},
  { 421, 431, -1, sizeof(::KN::CommandSetThemeCustomEffectTimingCurveArchive)},
  { 435, 446, -1, sizeof(::KN::CommandMoveTemplatesArchive)},
  { 451, 461, -1, sizeof(::KN::CommandInsertTemplateArchive)},
  { 465, 475, -1, sizeof(::KN::CommandPrimitiveInsertTemplateArchive)},
  { 479, 489, -1, sizeof(::KN::CommandRemoveTemplateArchive)},
  { 493, 501, -1, sizeof(::KN::CommandPrimitiveRemoveTemplateArchive)},
  { 503, 516, -1, sizeof(::KN::CommandSlideInsertBuildArchive)},
  { 523, 537, -1, sizeof(::KN::InsertBuildDescriptionArchive)},
  { 545, 552, -1, sizeof(::KN::UndoObjectArchive)},
  { 553, 566, -1, sizeof(::KN::CommandSlideRemoveBuildArchive)},
  { 573, 584, -1, sizeof(::KN::RemoveBuildDescriptionArchive)},
  { 589, 603, -1, sizeof(::KN::CommandSlideInsertBuildChunkArchive)},
  { 611, 625, -1, sizeof(::KN::CommandSlideRemoveBuildChunkArchive)},
  { 633, 646, -1, sizeof(::KN::CommandSlideMoveBuildChunksArchive)},
  { 653, 674, -1, sizeof(::KN::CommandBuildSetValueArchive)},
  { 689, 699, -1, sizeof(::KN::CommandBuildUpdateChunkReferentsArchive)},
  { 703, 729, -1, sizeof(::KN::CommandBuildUpdateChunkCountArchive)},
  { 749, 758, -1, sizeof(::KN::CommandBuildChunkSetValueArchive)},
  { 761, 772, -1, sizeof(::KN::CommandTransitionSetValueArchive)},
  { 777, 788, -1, sizeof(::KN::CommandShowSetSlideNumberVisibilityArchive)},
  { 793, 804, -1, sizeof(::KN::CommandTemplateSetThumbnailTextArchive)},
  { 809, 821, -1, sizeof(::KN::CommandTemplateSetBodyStylesArchive)},
  { 827, 839, -1, sizeof(::KN::CommandChangeTemplateSlideArchive)},
  { 845, 855, -1, sizeof(::KN::CommandSlidePrimitiveSetTemplateArchive)},
  { 859, 867, -1, sizeof(::KN::CommandSlideResetTemplateBackgroundObjectsArchive)},
  { 869, 879, -1, sizeof(::KN::CommandShowSetSoundtrack)},
  { 883, 892, -1, sizeof(::KN::CommandSoundtrackSetValue_PropertyValue)},
  { 895, 906, -1, sizeof(::KN::CommandSoundtrackSetValue)},
  { 911, 921, -1, sizeof(::KN::CommandSlideUpdateTemplateDrawables)},
  { 925, 936, -1, sizeof(::KN::ChartInfoGeometryCommandArchive)},
  { 941, 951, -1, sizeof(::KN::CanvasSelectionTransformerArchive)},
  { 955, -1, -1, sizeof(::KN::ActionGhostSelectionTransformerArchive)},
  { 961, 968, -1, sizeof(::KN::DocumentSelectionTransformerArchive)},
  { 969, 976, -1, sizeof(::KN::NoteCanvasSelectionTransformerArchive)},
  { 977, 985, -1, sizeof(::KN::OutlineCanvasSelectionTransformerArchive)},
  { 987, 997, -1, sizeof(::KN::SlideCollectionSelectionTransformerHelperArchive)},
  { 1001, 1008, -1, sizeof(::KN::SlideCollectionSelectionTransformerArchive)},
  { 1009, 1018, -1, sizeof(::KN::OutlineSelectionTransformerArchive)},
  { 1021, 1028, -1, sizeof(::KN::CommandLiveVideoInfoApplyPreset)},
  { 1029, 1042, -1, sizeof(::KN::CommandLiveVideoInfoSetSource)},
  { 1049, 1062, -1, sizeof(::KN::CommandLiveVideoInfoSetValue_PropertyValue)},
  { 1069, 1080, -1, sizeof(::KN::CommandLiveVideoInfoSetValue)},
  { 1085, 1097, -1, sizeof(::KN::CommandLiveVideoSourceSetValue_PropertyValue)},
  { 1103, 1114, -1, sizeof(::KN::CommandLiveVideoSourceSetValue)},
  { 1119, 1127, -1, sizeof(::KN::CommandLiveVideoStyleSetValue)},
  { 1129, 1138, -1, sizeof(::KN::CommandThemeAddLiveVideoSource)},
  { 1141, 1151, -1, sizeof(::KN::CommandThemeRemoveLiveVideoSource)},
  { 1155, 1167, -1, sizeof(::KN::CommandMotionBackgroundStyleSetValueArchive)},
  { 1173, 1183, -1, sizeof(::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::KN::_UIStateCommandGroupArchive_default_instance_._instance,
  &::KN::_CommandSlideInsertDrawablesArchive_default_instance_._instance,
  &::KN::_CommandSlideSetPlaceholdersForTagsArchive_default_instance_._instance,
  &::KN::_CommandTemplateSlideSetPlaceholderForTagArchive_default_instance_._instance,
  &::KN::_CommandSlidePropagateSetPlaceholderForTagArchive_default_instance_._instance,
  &::KN::_CommandSlideRemoveDrawableArchive_default_instance_._instance,
  &::KN::_CommandSlideMoveDrawableZOrderArchive_default_instance_._instance,
  &::KN::_CommandSlideNodeSetPropertyArchive_default_instance_._instance,
  &::KN::_CommandSlideNodeSetViewStatePropertyArchive_default_instance_._instance,
  &::KN::_CommandSlideSetBackgroundFillArchive_default_instance_._instance,
  &::KN::_CommandSlideSetStyleArchive_default_instance_._instance,
  &::KN::_CommandShowMarkOutOfSyncRecordingArchive_default_instance_._instance,
  &::KN::_CommandShowMarkOutOfSyncRecordingIfNeededArchive_default_instance_._instance,
  &::KN::_CommandShowRemoveRecordingArchive_default_instance_._instance,
  &::KN::_CommandShowReplaceRecordingArchive_default_instance_._instance,
  &::KN::_CommandShowSetValueArchive_PropertyValue_default_instance_._instance,
  &::KN::_CommandShowSetValueArchive_default_instance_._instance,
  &::KN::_CommandShowInsertSlideArchive_default_instance_._instance,
  &::KN::_CommandShowMoveSlideArchive_default_instance_._instance,
  &::KN::_CommandShowRemoveSlideArchive_default_instance_._instance,
  &::KN::_CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_._instance,
  &::KN::_CommandShowChangeThemeArchive_default_instance_._instance,
  &::KN::_CommandShowChangeSlideSizeArchive_default_instance_._instance,
  &::KN::_CommandSetThemeCustomEffectTimingCurveArchive_default_instance_._instance,
  &::KN::_CommandMoveTemplatesArchive_default_instance_._instance,
  &::KN::_CommandInsertTemplateArchive_default_instance_._instance,
  &::KN::_CommandPrimitiveInsertTemplateArchive_default_instance_._instance,
  &::KN::_CommandRemoveTemplateArchive_default_instance_._instance,
  &::KN::_CommandPrimitiveRemoveTemplateArchive_default_instance_._instance,
  &::KN::_CommandSlideInsertBuildArchive_default_instance_._instance,
  &::KN::_InsertBuildDescriptionArchive_default_instance_._instance,
  &::KN::_UndoObjectArchive_default_instance_._instance,
  &::KN::_CommandSlideRemoveBuildArchive_default_instance_._instance,
  &::KN::_RemoveBuildDescriptionArchive_default_instance_._instance,
  &::KN::_CommandSlideInsertBuildChunkArchive_default_instance_._instance,
  &::KN::_CommandSlideRemoveBuildChunkArchive_default_instance_._instance,
  &::KN::_CommandSlideMoveBuildChunksArchive_default_instance_._instance,
  &::KN::_CommandBuildSetValueArchive_default_instance_._instance,
  &::KN::_CommandBuildUpdateChunkReferentsArchive_default_instance_._instance,
  &::KN::_CommandBuildUpdateChunkCountArchive_default_instance_._instance,
  &::KN::_CommandBuildChunkSetValueArchive_default_instance_._instance,
  &::KN::_CommandTransitionSetValueArchive_default_instance_._instance,
  &::KN::_CommandShowSetSlideNumberVisibilityArchive_default_instance_._instance,
  &::KN::_CommandTemplateSetThumbnailTextArchive_default_instance_._instance,
  &::KN::_CommandTemplateSetBodyStylesArchive_default_instance_._instance,
  &::KN::_CommandChangeTemplateSlideArchive_default_instance_._instance,
  &::KN::_CommandSlidePrimitiveSetTemplateArchive_default_instance_._instance,
  &::KN::_CommandSlideResetTemplateBackgroundObjectsArchive_default_instance_._instance,
  &::KN::_CommandShowSetSoundtrack_default_instance_._instance,
  &::KN::_CommandSoundtrackSetValue_PropertyValue_default_instance_._instance,
  &::KN::_CommandSoundtrackSetValue_default_instance_._instance,
  &::KN::_CommandSlideUpdateTemplateDrawables_default_instance_._instance,
  &::KN::_ChartInfoGeometryCommandArchive_default_instance_._instance,
  &::KN::_CanvasSelectionTransformerArchive_default_instance_._instance,
  &::KN::_ActionGhostSelectionTransformerArchive_default_instance_._instance,
  &::KN::_DocumentSelectionTransformerArchive_default_instance_._instance,
  &::KN::_NoteCanvasSelectionTransformerArchive_default_instance_._instance,
  &::KN::_OutlineCanvasSelectionTransformerArchive_default_instance_._instance,
  &::KN::_SlideCollectionSelectionTransformerHelperArchive_default_instance_._instance,
  &::KN::_SlideCollectionSelectionTransformerArchive_default_instance_._instance,
  &::KN::_OutlineSelectionTransformerArchive_default_instance_._instance,
  &::KN::_CommandLiveVideoInfoApplyPreset_default_instance_._instance,
  &::KN::_CommandLiveVideoInfoSetSource_default_instance_._instance,
  &::KN::_CommandLiveVideoInfoSetValue_PropertyValue_default_instance_._instance,
  &::KN::_CommandLiveVideoInfoSetValue_default_instance_._instance,
  &::KN::_CommandLiveVideoSourceSetValue_PropertyValue_default_instance_._instance,
  &::KN::_CommandLiveVideoSourceSetValue_default_instance_._instance,
  &::KN::_CommandLiveVideoStyleSetValue_default_instance_._instance,
  &::KN::_CommandThemeAddLiveVideoSource_default_instance_._instance,
  &::KN::_CommandThemeRemoveLiveVideoSource_default_instance_._instance,
  &::KN::_CommandMotionBackgroundStyleSetValueArchive_default_instance_._instance,
  &::KN::_CommandMotionBackgroundStyleUpdatePosterFrameDataArchive_default_instance_._instance,
};

const char descriptor_table_protodef_KNCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027KNCommandArchives.proto\022\002KN\032\021TSPMessag"
  "es.proto\032\021TSKArchives.proto\032\021TSSArchives"
  ".proto\032\021TSDArchives.proto\032\025TSDArchives.s"
  "os.proto\032\030TSDCommandArchives.proto\032\022TSWP"
  "Archives.proto\032\021TSAArchives.proto\032\021TSTAr"
  "chives.proto\032\020KNArchives.proto\032\024KNArchiv"
  "es.sos.proto\"\333\002\n\032UIStateCommandGroupArch"
  "ive\022\'\n\005super\030\001 \002(\0132\030.TSK.CommandGroupArc"
  "hive\022\037\n\007uiState\030\002 \002(\0132\016.TSP.Reference\022\020\n"
  "\010property\030\003 \002(\t\022(\n\020slideNodesToEdit\030\004 \003("
  "\0132\016.TSP.Reference\0225\n\035template_slide_node"
  "s_to_apply\030\005 \003(\0132\016.TSP.Reference\022!\n\016thum"
  "bnailSizes\030\006 \003(\0132\t.TSP.Size\022*\n\022selectedS"
  "lideNodes\030\007 \003(\0132\016.TSP.Reference\0221\n\031resto"
  "reSelectedSlideNodes\030\010 \003(\0132\016.TSP.Referen"
  "ce\"\326\006\n\"CommandSlideInsertDrawablesArchiv"
  "e\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\033\n"
  "\010slide_id\030\002 \002(\0132\t.TSP.UUID\022!\n\tdrawables\030"
  "\003 \003(\0132\016.TSP.Reference\022)\n\021working_drawabl"
  "es\030\022 \003(\0132\016.TSP.Reference\022+\n\targs_list\030\004 "
  "\001(\0132\030.KN.MixedIdOperationArgs\0223\n+update_"
  "geometry_to_match_object_placeholder\030\005 \002"
  "(\010\022E\n2ids_of_drawables_using_object_plac"
  "eholder_geometry\030\006 \003(\0132\t.TSP.UUID\022\"\n\032sag"
  "e_placeholder_tags_list\030\007 \003(\t\022\037\n\027instruc"
  "tional_text_list\030\024 \003(\t\022$\n\014undo_archive\030\010"
  " \001(\0132\016.TSP.Reference\022\022\n\nis_pasting\030\t \001(\010"
  "\0221\n\031insert_build_descriptions\030\n \003(\0132\016.TS"
  "P.Reference\0229\n!working_insert_build_desc"
  "riptions\030\023 \003(\0132\016.TSP.Reference\0221\n\031remove"
  "_build_descriptions\030\013 \003(\0132\016.TSP.Referenc"
  "e\022(\n remove_slide_specific_hyperlinks\030\014 "
  "\001(\010\022%\n\022custom_format_keys\030\r \003(\0132\t.TSP.UU"
  "ID\022*\n\"saved_next_untitled_resolver_index"
  "\030\020 \001(\r\022[\n=geometry_of_object_placeholder"
  "_for_comparison_to_restore_link\030\021 \001(\0132\024."
  "TSD.GeometryArchive\"\316\001\n)CommandSlideSetP"
  "laceholdersForTagsArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022\033\n\010slide_id\030\002 \002(\0132"
  "\t.TSP.UUID\022\035\n\005infos\030\003 \003(\0132\016.TSP.Referenc"
  "e\022\014\n\004tags\030\004 \003(\t\022!\n\told_infos\030\006 \003(\0132\016.TSP"
  ".Reference\022\020\n\010old_tags\030\005 \003(\t\"\237\001\n/Command"
  "TemplateSlideSetPlaceholderForTagArchive"
  "\022<\n\005super\030\001 \002(\0132-.KN.CommandSlideSetPlac"
  "eholdersForTagsArchive\022!\n\016placeholder_id"
  "\030\002 \002(\0132\t.TSP.UUID\022\013\n\003tag\030\003 \001(\t\"\263\001\n0Comma"
  "ndSlidePropagateSetPlaceholderForTagArch"
  "ive\022<\n\005super\030\001 \002(\0132-.KN.CommandSlideSetP"
  "laceholdersForTagsArchive\022!\n\016placeholder"
  "_id\030\002 \002(\0132\t.TSP.UUID\022\036\n\013original_id\030\003 \002("
  "\0132\t.TSP.UUID\"\375\003\n!CommandSlideRemoveDrawa"
  "bleArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandA"
  "rchive\022\033\n\010slide_id\030\002 \002(\0132\t.TSP.UUID\022\'\n\017s"
  "ortedDrawables\030\003 \003(\0132\016.TSP.Reference\022+\n\t"
  "args_list\030\004 \002(\0132\030.KN.MixedIdOperationArg"
  "s\022!\n\031drawable_indexes_for_undo\030\n \003(\r\022\027\n\017"
  "placeholderTags\030\005 \003(\t\022\037\n\027instructional_t"
  "ext_list\030\013 \003(\t\0221\n\031insert_build_descripti"
  "ons\030\006 \003(\0132\016.TSP.Reference\0221\n\031remove_buil"
  "d_descriptions\030\007 \003(\0132\016.TSP.Reference\022C\n+"
  "drawables_using_object_placeholder_geome"
  "try\030\010 \003(\0132\016.TSP.Reference\0229\n!inverse_ins"
  "ert_hyperlink_commands\030\t \003(\0132\016.TSP.Refer"
  "ence\"\202\002\n%CommandSlideMoveDrawableZOrderA"
  "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\022)\n\021old_ordered_infos\030\004 \003(\0132\016.TSP.Refe"
  "rence\0220\n\targs_list\030\006 \003(\0132\035.TSK.Rearrange"
  "IdOperationArgs\022\033\n\010slide_id\030\007 \002(\0132\t.TSP."
  "UUID\022;\n#old_ordered_infos_on_slide_for_u"
  "ndo\030\010 \003(\0132\016.TSP.Reference\"\247\001\n\"CommandSli"
  "deNodeSetPropertyArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022)\n\022slide_node_id_pa"
  "th\030\002 \002(\0132\r.TSP.UUIDPath\022\020\n\010property\030\003 \002("
  "\t\022\021\n\told_value\030\004 \002(\010\022\r\n\005value\030\005 \002(\010\"\260\001\n+"
  "CommandSlideNodeSetViewStatePropertyArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  ")\n\022slide_node_id_path\030\002 \002(\0132\r.TSP.UUIDPa"
  "th\022\020\n\010property\030\003 \002(\t\022\021\n\told_value\030\004 \002(\010\022"
  "\r\n\005value\030\005 \002(\010\"\270\001\n$CommandSlideSetBackgr"
  "oundFillArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
  "mandArchive\022$\n\rslide_id_path\030\002 \002(\0132\r.TSP"
  ".UUIDPath\022\"\n\010old_fill\030\003 \001(\0132\020.TSD.FillAr"
  "chive\022\"\n\010new_fill\030\004 \002(\0132\020.TSD.FillArchiv"
  "e\"\265\001\n\033CommandSlideSetStyleArchive\022\"\n\005sup"
  "er\030\001 \002(\0132\023.TSK.CommandArchive\022$\n\rslide_i"
  "d_path\030\002 \002(\0132\r.TSP.UUIDPath\022#\n\013slide_sty"
  "le\030\003 \002(\0132\016.TSP.Reference\022\'\n\017old_slide_st"
  "yle\030\004 \001(\0132\016.TSP.Reference\"\301\002\n(CommandSho"
  "wMarkOutOfSyncRecordingArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004show\030\002 \002(\013"
  "2\016.TSP.Reference\022%\n\rold_recording\030\003 \001(\0132"
  "\016.TSP.Reference\022+\n\034old_is_recording_out_"
  "of_sync\030\004 \001(\010:\005false\022+\n\034new_is_recording"
  "_out_of_sync\030\005 \001(\010:\005false\022(\n\025old_modific"
  "ation_date\030\006 \001(\0132\t.TSP.Date\022(\n\025new_modif"
  "ication_date\030\007 \001(\0132\t.TSP.Date\"|\n0Command"
  "ShowMarkOutOfSyncRecordingIfNeededArchiv"
  "e\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022$\n"
  "\021out_of_sync_token\030\002 \001(\0132\t.TSP.UUID\"\214\001\n!"
  "CommandShowRemoveRecordingArchive\022\"\n\005sup"
  "er\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004show\030\002 "
  "\002(\0132\016.TSP.Reference\022%\n\rold_recording\030\003 \001"
  "(\0132\016.TSP.Reference\"\274\001\n\"CommandShowReplac"
  "eRecordingArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
  "ommandArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Refere"
  "nce\022-\n\025replacement_recording\030\003 \002(\0132\016.TSP"
  ".Reference\022%\n\rold_recording\030\005 \001(\0132\016.TSP."
  "Reference\"\202\003\n\032CommandShowSetValueArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004"
  "show\030\002 \002(\0132\016.TSP.Reference\022\020\n\010property\030\003"
  " \002(\t\022\?\n\told_value\030\004 \002(\0132,.KN.CommandShow"
  "SetValueArchive.PropertyValue\022\?\n\tnew_val"
  "ue\030\005 \002(\0132,.KN.CommandShowSetValueArchive"
  ".PropertyValue\032\215\001\n\rPropertyValue\022\022\n\nbool"
  "_value\030\001 \001(\010\022\024\n\014double_value\030\002 \001(\001\0223\n\017sh"
  "ow_mode_value\030\003 \001(\0162\032.KN.ShowArchive.KNS"
  "howMode\022\035\n\nsize_value\030\004 \001(\0132\t.TSP.Size\"\213"
  "\007\n\035CommandShowInsertSlideArchive\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\0222\n\032slide_no"
  "des_being_inserted\030\002 \003(\0132\016.TSP.Reference"
  "\022:\n\"working_slide_nodes_being_inserted\030\016"
  " \003(\0132\016.TSP.Reference\0223\n\022inserted_args_li"
  "st\030\003 \003(\0132\027.TSK.AddIdOperationArgs\0228\n%ids"
  "_of_slide_nodes_with_depth_changes\030\004 \003(\013"
  "2\t.TSP.UUID\0220\n(depths_of_slide_nodes_wit"
  "h_depth_changes\030\005 \003(\r\0224\n,old_depths_of_s"
  "lide_nodes_with_depth_changes\030\006 \003(\r\0224\n\034s"
  "lide_nodes_for_depth_fix_up\030\007 \003(\0132\016.TSP."
  "Reference\022.\n&depths_of_slide_nodes_for_d"
  "epth_fix_up\030\010 \003(\r\0222\n*old_depths_of_slide"
  "_nodes_for_depth_fix_up\030\t \003(\r\022F\n\004kind\030\n "
  "\001(\0162&.KN.CommandShowInsertSlideArchive.K"
  "ind:\020kKindInsertSlide\022;\n#template_slide_"
  "nodes_being_inserted\030\013 \003(\0132\016.TSP.Referen"
  "ce\022%\n\022custom_format_keys\030\014 \003(\0132\t.TSP.UUI"
  "D\0225\n-collapsed_state_of_slide_nodes_bein"
  "g_inserted\030\r \003(\010\022$\n\014undo_archive\030\017 \001(\0132\016"
  ".TSP.Reference\"\\\n\004Kind\022\024\n\020kKindInsertSli"
  "de\020\000\022\034\n\030kKindInsertSlideForPaste\020\001\022 \n\034kK"
  "indInsertSlideForDuplicate\020\002\"\364\003\n\033Command"
  "ShowMoveSlideArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
  "K.CommandArchive\0228\n slide_nodes_being_mo"
  "ved_linearly\030\002 \003(\0132\016.TSP.Reference\022;\n\024re"
  "arranged_args_list\030\003 \003(\0132\035.TSK.Rearrange"
  "IdOperationArgs\0228\n%ids_of_slide_nodes_wi"
  "th_depth_changes\030\004 \003(\0132\t.TSP.UUID\0220\n(dep"
  "ths_of_slide_nodes_with_depth_changes\030\005 "
  "\003(\r\0224\n,old_depths_of_slide_nodes_with_de"
  "pth_changes\030\006 \003(\r\0224\n\034slide_nodes_for_dep"
  "th_fix_up\030\007 \003(\0132\016.TSP.Reference\022.\n&depth"
  "s_of_slide_nodes_for_depth_fix_up\030\010 \003(\r\022"
  "2\n*old_depths_of_slide_nodes_for_depth_f"
  "ix_up\030\t \003(\r\"\237\004\n\035CommandShowRemoveSlideAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\0221\n\031slide_nodes_being_removed\030\002 \003(\0132\016.T"
  "SP.Reference\0225\n\021removed_args_list\030\003 \003(\0132"
  "\032.TSK.RemoveIdOperationArgs\0228\n%ids_of_sl"
  "ide_nodes_with_depth_changes\030\004 \003(\0132\t.TSP"
  ".UUID\0220\n(depths_of_slide_nodes_with_dept"
  "h_changes\030\005 \003(\r\0224\n,old_depths_of_slide_n"
  "odes_with_depth_changes\030\006 \003(\r\0224\n\034slide_n"
  "odes_for_depth_fix_up\030\007 \003(\0132\016.TSP.Refere"
  "nce\022.\n&depths_of_slide_nodes_for_depth_f"
  "ix_up\030\010 \003(\r\0222\n*old_depths_of_slide_nodes"
  "_for_depth_fix_up\030\t \003(\r\0224\n,collapsed_sta"
  "te_of_slide_nodes_being_removed\030\013 \003(\010\"\354\003"
  "\n\035CommandShowChangeThemeArchive\022\"\n\005super"
  "\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004show\030\002 \002("
  "\0132\016.TSP.Reference\022\035\n\005theme\030\003 \002(\0132\016.TSP.R"
  "eference\022!\n\told_theme\030\004 \001(\0132\016.TSP.Refere"
  "nce\022\033\n\023template_identifier\030\005 \001(\t\022\037\n\027old_"
  "template_identifier\030\006 \001(\t\022W\n\027identifier_"
  "to_style_map\030\007 \001(\01326.KN.CommandShowChang"
  "eThemeArchive.IdentifierToStyleMap\022[\n\033ol"
  "d_identifier_to_style_map\030\010 \001(\01326.KN.Com"
  "mandShowChangeThemeArchive.IdentifierToS"
  "tyleMap\032S\n\024IdentifierToStyleMap\022;\n\006style"
  "s\030\001 \003(\0132+.TSS.StylesheetArchive.Identifi"
  "edStyleEntry\"`\n!CommandShowChangeSlideSi"
  "zeArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
  "chive\022\027\n\004size\030\002 \002(\0132\t.TSP.Size\"\277\001\n-Comma"
  "ndSetThemeCustomEffectTimingCurveArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\014\n\004"
  "name\030\002 \001(\t\022+\n\013path_source\030\003 \001(\0132\026.TSD.Pa"
  "thSourceArchive\022/\n\017old_path_source\030\004 \001(\013"
  "2\026.TSD.PathSourceArchive\"\206\002\n\033CommandMove"
  "TemplatesArchive\022:\n\005super\030\001 \002(\0132+.TSD.Co"
  "ntainerReorderChildrenCommandArchive\022\'\n\017"
  "template_slides\030\003 \003(\0132\016.TSP.Reference\022-\n"
  "\025previous_indexes_keys\030\004 \003(\0132\016.TSP.Refer"
  "ence\022\037\n\027previous_indexes_values\030\005 \003(\r\0222\n"
  "\032final_template_arrangement\030\006 \003(\0132\016.TSP."
  "Reference\"\355\001\n\034CommandInsertTemplateArchi"
  "ve\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\0225"
  "\n\035undo_template_change_commands\030\007 \003(\0132\016."
  "TSP.Reference\0224\n,set_inserted_slide_as_d"
  "efault_template_slide\030\010 \002(\010\022<\n$undo_repl"
  "acement_template_slide_node\030\t \001(\0132\016.TSP."
  "Reference\"\341\001\n%CommandPrimitiveInsertTemp"
  "lateArchive\0229\n\005super\030\001 \002(\0132*.TSD.Contain"
  "erInsertChildrenCommandArchive\022\036\n\026was_in"
  "serted_with_drop\030\002 \002(\010\022%\n\022custom_format_"
  "keys\030\003 \003(\0132\t.TSP.UUID\0226\n\036previous_classi"
  "c_theme_records\030\004 \003(\0132\016.TSP.Reference\"\337\001"
  "\n\034CommandRemoveTemplateArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive\0227\n\037replacemen"
  "t_template_slide_node\030\005 \001(\0132\016.TSP.Refere"
  "nce\0220\n\030template_change_commands\030\006 \003(\0132\016."
  "TSP.Reference\0220\n(default_template_slide_"
  "node_was_replaced\030\007 \001(\010\"\232\001\n%CommandPrimi"
  "tiveRemoveTemplateArchive\0229\n\005super\030\001 \002(\013"
  "2*.TSD.ContainerRemoveChildrenCommandArc"
  "hive\0226\n\036previous_classic_theme_records\030\003"
  " \003(\0132\016.TSP.Reference\"\324\002\n\036CommandSlideIns"
  "ertBuildArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
  "mandArchive\0220\n\030insert_build_description\030"
  "\002 \002(\0132\016.TSP.Reference\022M\n$identifier_for_"
  "chunk_to_insert_after\030\003 \001(\0132\037.KN.BuildCh"
  "unkIdentifierArchive\022\034\n\024should_create_ch"
  "unks\030\004 \001(\010\022,\n\024old_tuples_to_update\030\005 \003(\013"
  "2\016.TSP.Reference\022%\n\035was_initialized_over"
  "_the_wire\030\006 \001(\010\022\032\n\022has_been_committed\030\007 "
  "\001(\010\"\215\003\n\035InsertBuildDescriptionArchive\022\033\n"
  "\010slide_id\030\001 \002(\0132\t.TSP.UUID\022\'\n\017build_to_i"
  "nsert\030\002 \002(\0132\016.TSP.Reference\022(\n\020chunks_to"
  "_insert\030\003 \003(\0132\016.TSP.Reference\022\'\n\037should_"
  "assign_chunk_identifiers\030\004 \002(\010\022N\n%identi"
  "fers_for_chunks_to_insert_after\030\005 \003(\0132\037."
  "KN.BuildChunkIdentifierArchive\022(\n\020tuples"
  "_to_update\030\006 \003(\0132\016.TSP.Reference\022C\n\032fall"
  "back_chunk_identifiers\030\007 \003(\0132\037.KN.BuildC"
  "hunkIdentifierArchive\022\024\n\014is_for_paste\030\010 "
  "\002(\010\":\n\021UndoObjectArchive\022%\n\005super\030\001 \002(\0132"
  "\026.TSD.UndoObjectArchive\"\203\003\n\036CommandSlide"
  "RemoveBuildArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\0220\n\030remove_build_descripti"
  "on\030\002 \002(\0132\016.TSP.Reference\022\035\n\005build\030\003 \001(\0132"
  "\016.TSP.Reference\022(\n\020chunks_to_insert\030\004 \003("
  "\0132\016.TSP.Reference\022O\n&identifiers_for_chu"
  "nks_to_insert_after\030\005 \003(\0132\037.KN.BuildChun"
  "kIdentifierArchive\022,\n\024old_tuples_to_upda"
  "te\030\006 \003(\0132\016.TSP.Reference\022C\n\032fallback_chu"
  "nk_identifiers\030\007 \003(\0132\037.KN.BuildChunkIden"
  "tifierArchive\"\312\001\n\035RemoveBuildDescription"
  "Archive\022\033\n\010slide_id\030\001 \001(\0132\t.TSP.UUID\022\033\n\010"
  "build_id\030\002 \001(\0132\t.TSP.UUID\022\034\n\024should_remo"
  "ve_chunks\030\003 \001(\010\022\'\n\037should_remove_chunk_i"
  "dentifiers\030\004 \001(\010\022(\n\020tuples_to_update\030\005 \003"
  "(\0132\016.TSP.Reference\"\376\002\n#CommandSlideInser"
  "tBuildChunkArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\022\033\n\010slide_id\030\002 \002(\0132\t.TSP.U"
  "UID\022\'\n\017chunk_to_insert\030\003 \002(\0132\016.TSP.Refer"
  "ence\022M\n$identifier_for_chunk_to_insert_a"
  "fter\030\004 \001(\0132\037.KN.BuildChunkIdentifierArch"
  "ive\022(\n\020tuples_to_update\030\005 \003(\0132\016.TSP.Refe"
  "rence\022,\n\024old_tuples_to_update\030\006 \003(\0132\016.TS"
  "P.Reference\022\036\n\026needs_selection_update\030\007 "
  "\001(\010\022&\n\036should_assign_chunk_identifier\030\010 "
  "\001(\010\"\235\003\n#CommandSlideRemoveBuildChunkArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "\033\n\010slide_id\030\002 \002(\0132\t.TSP.UUID\022%\n\rremoved_"
  "chunk\030\003 \001(\0132\016.TSP.Reference\022G\n\036identifie"
  "r_for_chunk_to_remove\030\004 \001(\0132\037.KN.BuildCh"
  "unkIdentifierArchive\022M\n$identifier_for_c"
  "hunk_to_insert_after\030\005 \001(\0132\037.KN.BuildChu"
  "nkIdentifierArchive\022(\n\020tuples_to_update\030"
  "\006 \003(\0132\016.TSP.Reference\022,\n\024old_tuples_to_u"
  "pdate\030\007 \003(\0132\016.TSP.Reference\022\036\n\026needs_sel"
  "ection_update\030\010 \001(\010\"\375\003\n\"CommandSlideMove"
  "BuildChunksArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\022G\n\036identifiers_for_chunks"
  "_to_move\030\002 \003(\0132\037.KN.BuildChunkIdentifier"
  "Archive\022M\n$identifiers_for_chunks_to_mov"
  "e_after\030\003 \003(\0132\037.KN.BuildChunkIdentifierA"
  "rchive\022V\n-identifiers_for_chunks_to_move"
  "_after_for_undo\030\004 \003(\0132\037.KN.BuildChunkIde"
  "ntifierArchive\022(\n\020tuples_to_update\030\005 \003(\013"
  "2\016.TSP.Reference\022,\n\024old_tuples_to_update"
  "\030\006 \003(\0132\016.TSP.Reference\022k\nBidentifiers_fo"
  "r_chunks_to_move_including_clustered_ina"
  "ctive_chunks\030\007 \003(\0132\037.KN.BuildChunkIdenti"
  "fierArchive\"\330\006\n\033CommandBuildSetValueArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "\035\n\005tuple\030\002 \001(\0132\016.TSP.Reference\022%\n\rchunks"
  "_to_add\030\003 \003(\0132\016.TSP.Reference\022O\n&identif"
  "iers_for_chunks_to_insert_after\030\004 \003(\0132\037."
  "KN.BuildChunkIdentifierArchive\022I\n identi"
  "fiers_for_chunks_to_remove\030\005 \003(\0132\037.KN.Bu"
  "ildChunkIdentifierArchive\022(\n\020tuples_to_u"
  "pdate\030\006 \003(\0132\016.TSP.Reference\0223\n\033old_tuple"
  "_for_main_property\030\007 \001(\0132\016.TSP.Reference"
  "\022=\n%old_tuples_to_update_for_sub_command"
  "s\030\010 \003(\0132\016.TSP.Reference\022E\n\034identifiers_f"
  "or_added_chunks\030\t \003(\0132\037.KN.BuildChunkIde"
  "ntifierArchive\022>\n\025generated_identifiers\030"
  "\n \003(\0132\037.KN.BuildChunkIdentifierArchive\022&"
  "\n\016removed_chunks\030\013 \003(\0132\016.TSP.Reference\022W"
  "\n.identifiers_for_chunks_prior_to_remove"
  "d_chunks\030\014 \003(\0132\037.KN.BuildChunkIdentifier"
  "Archive\022\031\n\021old_chunk_ID_seed\030\r \001(\r\022>\n\025ol"
  "d_chunk_identifiers\030\016 \003(\0132\037.KN.BuildChun"
  "kIdentifierArchive\0222\n\032chunks_removed_dur"
  "ing_undo\030\017 \003(\0132\016.TSP.Reference\"\302\001\n\'Comma"
  "ndBuildUpdateChunkReferentsArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\022\033\n\010build_"
  "id\030\002 \002(\0132\t.TSP.UUID\022(\n\020tuples_to_update\030"
  "\003 \003(\0132\016.TSP.Reference\022,\n\024old_tuples_to_u"
  "pdate\030\004 \003(\0132\016.TSP.Reference\"\265\010\n#CommandB"
  "uildUpdateChunkCountArchive\022\"\n\005super\030\001 \002"
  "(\0132\023.TSK.CommandArchive\022\033\n\010slide_id\030\002 \002("
  "\0132\t.TSP.UUID\022\037\n\014drawable_ids\030\003 \003(\0132\t.TSP"
  ".UUID\0226\n\036expected_delivery_style_tuples\030"
  "\004 \003(\0132\016.TSP.Reference\022%\n\rchunks_to_add\030\005"
  " \003(\0132\016.TSP.Reference\022O\n&identifiers_for_"
  "chunks_to_insert_after\030\006 \003(\0132\037.KN.BuildC"
  "hunkIdentifierArchive\022I\n identifiers_for"
  "_chunks_to_remove\030\007 \003(\0132\037.KN.BuildChunkI"
  "dentifierArchive\022(\n\020tuples_to_update\030\010 \003"
  "(\0132\016.TSP.Reference\0224\n,needs_async_proces"
  "s_changes_selection_update\030\t \001(\010\022,\n\024old_"
  "tuples_to_update\030\n \003(\0132\016.TSP.Reference\022E"
  "\n\034identifiers_for_added_chunks\030\013 \003(\0132\037.K"
  "N.BuildChunkIdentifierArchive\022>\n\025generat"
  "ed_identifiers\030\014 \003(\0132\037.KN.BuildChunkIden"
  "tifierArchive\022&\n\016removed_chunks\030\r \003(\0132\016."
  "TSP.Reference\022W\n.identifiers_for_chunks_"
  "prior_to_removed_chunks\030\016 \003(\0132\037.KN.Build"
  "ChunkIdentifierArchive\0221\n\031old_delivery_s"
  "tyle_tuples\030\017 \003(\0132\016.TSP.Reference\022\032\n\022old"
  "_chunk_ID_seeds\030\020 \003(\r\022>\n\025old_chunk_ident"
  "ifiers\030\021 \003(\0132\037.KN.BuildChunkIdentifierAr"
  "chive\022&\n\016working_builds\030\022 \003(\0132\016.TSP.Refe"
  "rence\0222\n\032chunks_removed_during_undo\030\023 \003("
  "\0132\016.TSP.Reference\0220\n\030chunks_added_during"
  "_undo\030\024 \003(\0132\016.TSP.Reference\"\236\001\n CommandB"
  "uildChunkSetValueArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022(\n\020tuples_to_update"
  "\030\002 \003(\0132\016.TSP.Reference\022,\n\024old_tuples_to_"
  "update\030\003 \003(\0132\016.TSP.Reference\"\361\001\n Command"
  "TransitionSetValueArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022)\n\022slide_node_id_p"
  "ath\030\002 \002(\0132\r.TSP.UUIDPath\0227\n\016old_attribut"
  "es\030\003 \001(\0132\037.KN.TransitionAttributesArchiv"
  "e\0223\n\nattributes\030\004 \001(\0132\037.KN.TransitionAtt"
  "ributesArchive\022\020\n\010property\030\005 \001(\t\"\346\001\n*Com"
  "mandShowSetSlideNumberVisibilityArchive\022"
  "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\025s"
  "lide_numbers_visible\030\003 \002(\010\022-\n\032ids_of_sli"
  "de_nodes_to_skip\030\004 \003(\0132\t.TSP.UUID\0225\n\"ids"
  "_of_slide_nodes_already_correct\030\005 \003(\0132\t."
  "TSP.UUID\022\017\n\007is_undo\030\006 \002(\010\"\241\001\n&CommandTem"
  "plateSetThumbnailTextArchive\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022\036\n\013template_id\030"
  "\002 \002(\0132\t.TSP.UUID\022\017\n\007is_body\030\003 \002(\010\022\020\n\010new"
  "_text\030\004 \001(\t\022\020\n\010old_text\030\005 \001(\t\"\227\002\n#Comman"
  "dTemplateSetBodyStylesArchive\022\"\n\005super\030\001"
  " \002(\0132\023.TSK.CommandArchive\022\036\n\013template_id"
  "\030\002 \002(\0132\t.TSP.UUID\022,\n\024new_paragraph_style"
  "s\030\003 \003(\0132\016.TSP.Reference\022\'\n\017new_list_styl"
  "es\030\004 \003(\0132\016.TSP.Reference\022,\n\024old_paragrap"
  "h_styles\030\005 \003(\0132\016.TSP.Reference\022\'\n\017old_li"
  "st_styles\030\006 \003(\0132\016.TSP.Reference\"\213\002\n!Comm"
  "andChangeTemplateSlideArchive\022\"\n\005super\030\001"
  " \002(\0132\023.TSK.CommandArchive\022$\n\rslide_id_pa"
  "th\030\002 \002(\0132\r.TSP.UUIDPath\022+\n\023template_slid"
  "e_node\030\003 \002(\0132\016.TSP.Reference\022/\n\027old_temp"
  "late_slide_node\030\004 \001(\0132\016.TSP.Reference\022\024\n"
  "\014is_undo_redo\030\005 \002(\010\022(\n\020target_prototype\030"
  "\006 \001(\0132\016.TSP.Reference\"\304\001\n\'CommandSlidePr"
  "imitiveSetTemplateArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022$\n\rslide_id_path\030\002"
  " \002(\0132\r.TSP.UUIDPath\022\036\n\013template_id\030\003 \002(\013"
  "2\t.TSP.UUID\022/\n\027old_template_slide_node\030\004"
  " \001(\0132\016.TSP.Reference\"}\n1CommandSlideRese"
  "tTemplateBackgroundObjectsArchive\022\"\n\005sup"
  "er\030\001 \002(\0132\023.TSK.CommandArchive\022$\n\rslide_i"
  "d_path\030\002 \001(\0132\r.TSP.UUIDPath\"\250\001\n\030CommandS"
  "howSetSoundtrack\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
  "mmandArchive\022\034\n\004show\030\002 \001(\0132\016.TSP.Referen"
  "ce\022\"\n\nsoundtrack\030\003 \001(\0132\016.TSP.Reference\022&"
  "\n\016old_soundtrack\030\004 \001(\0132\016.TSP.Reference\"\202"
  "\003\n\031CommandSoundtrackSetValue\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022 \n\rsoundtrack_i"
  "d\030\002 \001(\0132\t.TSP.UUID\022\020\n\010property\030\003 \001(\t\022>\n\t"
  "old_value\030\004 \001(\0132+.KN.CommandSoundtrackSe"
  "tValue.PropertyValue\022>\n\tnew_value\030\005 \001(\0132"
  "+.KN.CommandSoundtrackSetValue.PropertyV"
  "alue\032\214\001\n\rPropertyValue\022\024\n\014double_value\030\001"
  " \001(\001\0221\n\nmode_value\030\002 \001(\0162\035.KN.Soundtrack"
  ".SoundtrackMode\0222\n\026media_reference_value"
  "s\030\003 \003(\0132\022.TSP.DataReference\"\334\001\n#CommandS"
  "lideUpdateTemplateDrawables\022\"\n\005super\030\001 \002"
  "(\0132\023.TSK.CommandArchive\022\033\n\010slide_id\030\002 \002("
  "\0132\t.TSP.UUID\022B\n\033id_placement_operation_a"
  "rgs\030\003 \003(\0132\035.TSK.IdPlacementOperationArgs"
  "\0220\n\030old_child_infos_for_undo\030\004 \003(\0132\016.TSP"
  ".Reference\"\373\001\n\037ChartInfoGeometryCommandA"
  "rchive\022.\n\005super\030\001 \002(\0132\037.TSD.InfoGeometry"
  "CommandArchive\022*\n\026previous_legend_offset"
  "\030\002 \002(\0132\n.TSP.Point\022\'\n\024previous_legend_si"
  "ze\030\003 \002(\0132\t.TSP.Size\022*\n\026adjusted_legend_o"
  "ffset\030\004 \002(\0132\n.TSP.Point\022\'\n\024adjusted_lege"
  "nd_size\030\005 \002(\0132\t.TSP.Size\"\213\002\n!CanvasSelec"
  "tionTransformerArchive\022P\n\022transformer_he"
  "lper\030\001 \002(\01324.TSD.InfoCollectionSelection"
  "TransformerHelperArchive\0228\n\017build_chunk_"
  "ids\030\002 \003(\0132\037.KN.BuildChunkIdentifierArchi"
  "ve\022#\n\020action_build_ids\030\003 \003(\0132\t.TSP.UUID\022"
  "5\n\"originally_selected_drawable_uuids\030\004 "
  "\003(\0132\t.TSP.UUID\"(\n&ActionGhostSelectionTr"
  "ansformerArchive\"Q\n#DocumentSelectionTra"
  "nsformerArchive\022*\n\022document_selection\030\001 "
  "\002(\0132\016.TSP.Reference\"y\n%NoteCanvasSelecti"
  "onTransformerArchive\022P\n\022transformer_help"
  "er\030\001 \002(\01324.TSD.InfoCollectionSelectionTr"
  "ansformerHelperArchive\"\212\001\n(OutlineCanvas"
  "SelectionTransformerArchive\0224\n\034canvas_se"
  "lection_transformer\030\001 \002(\0132\016.TSP.Referenc"
  "e\022(\n\021storage_uuid_path\030\002 \001(\0132\r.TSP.UUIDP"
  "ath\"\324\001\n0SlideCollectionSelectionTransfor"
  "merHelperArchive\022\"\n\013slide_nodes\030\001 \003(\0132\r."
  "TSP.UUIDPath\022)\n\022slide_node_to_edit\030\002 \001(\013"
  "2\r.TSP.UUIDPath\022(\n\031slide_collection_is_t"
  "heme\030\003 \001(\010:\005false\022\'\n\037previous_primary_se"
  "lected_index\030\004 \001(\r\"~\n*SlideCollectionSel"
  "ectionTransformerArchive\022P\n\022transformer_"
  "helper\030\001 \002(\01324.KN.SlideCollectionSelecti"
  "onTransformerHelperArchive\"\341\001\n\"OutlineSe"
  "lectionTransformerArchive\022P\n\022transformer"
  "_helper\030\001 \002(\01324.KN.SlideCollectionSelect"
  "ionTransformerHelperArchive\0223\n$can_have_"
  "range_in_selected_paragraph\030\002 \001(\010:\005false"
  "\0224\n\031selection_range_addresses\030\003 \003(\0132\021.TS"
  "K.RangeAddress\"T\n\037CommandLiveVideoInfoAp"
  "plyPreset\0221\n\005super\030\001 \002(\0132\".TSD.BaseApply"
  "PresetCommandArchive\"\204\003\n\035CommandLiveVide"
  "oInfoSetSource\022\"\n\005super\030\001 \002(\0132\023.TSK.Comm"
  "andArchive\022.\n\027live_video_info_id_path\030\002 "
  "\002(\0132\r.TSP.UUIDPath\022\034\n\tsource_id\030\003 \001(\0132\t."
  "TSP.UUID\022:\n\'local_collaboration_command_"
  "usage_token\030\004 \001(\0132\t.TSP.UUID\022o\n4working_"
  "source_old_collaboration_command_usage_s"
  "tate\030\005 \001(\01321.KN.LiveVideoSourceCollabora"
  "tionCommandUsageState\022\"\n\nold_source\030\006 \001("
  "\0132\016.TSP.Reference\022 \n\rold_source_id\030\007 \001(\013"
  "2\t.TSP.UUID\"\221\005\n\034CommandLiveVideoInfoSetV"
  "alue\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022.\n\027live_video_info_id_path\030\002 \002(\0132\r.TSP."
  "UUIDPath\022;\n\010property\030\003 \002(\0162).KN.CommandL"
  "iveVideoInfoSetValue.Property\022=\n\005value\030\004"
  " \001(\0132..KN.CommandLiveVideoInfoSetValue.P"
  "ropertyValue\022A\n\told_value\030\005 \001(\0132..KN.Com"
  "mandLiveVideoInfoSetValue.PropertyValue\032"
  "\320\001\n\rPropertyValue\022\r\n\005scale\030\001 \001(\001\022%\n\021norm"
  "alized_offset\030\002 \001(\0132\n.TSP.Point\022\021\n\tmask_"
  "kind\030\003 \001(\005\022\032\n\022mask_corner_radius\030\004 \001(\001\022\026"
  "\n\016is_placeholder\030\005 \001(\010\022\027\n\017background_kin"
  "d\030\006 \001(\005\022)\n\017background_fill\030\007 \001(\0132\020.TSD.F"
  "illArchive\"\212\001\n\010Property\022\t\n\005Scale\020\000\022\024\n\020No"
  "rmalizedOffset\020\001\022\014\n\010MaskKind\020\002\022\024\n\020MaskCo"
  "rnerRadius\020\003\022\021\n\rIsPlaceholder\020\004\022\022\n\016Backg"
  "roundKind\020\005\022\022\n\016BackgroundFill\020\006\"\333\005\n\036Comm"
  "andLiveVideoSourceSetValue\022\"\n\005super\030\001 \002("
  "\0132\023.TSK.CommandArchive\022\'\n\024live_video_sou"
  "rce_id\030\002 \002(\0132\t.TSP.UUID\022=\n\010property\030\003 \002("
  "\0162+.KN.CommandLiveVideoSourceSetValue.Pr"
  "operty\022\?\n\005value\030\004 \001(\01320.KN.CommandLiveVi"
  "deoSourceSetValue.PropertyValue\022C\n\told_v"
  "alue\030\005 \001(\01320.KN.CommandLiveVideoSourceSe"
  "tValue.PropertyValue\032\200\002\n\rPropertyValue\022\014"
  "\n\004name\030\001 \001(\t\022I\n\032capture_device_descripti"
  "on\030\002 \001(\0132%.KN.LiveVideoCaptureDeviceDesc"
  "ription\022-\n\021poster_image_data\030\003 \001(\0132\022.TSP"
  ".DataReference\022 \n\030symbol_abbreviation_te"
  "xt\030\004 \001(\t\022\037\n\027symbol_image_identifier\030\005 \001("
  "\005\022$\n\034symbol_tint_color_identifier\030\006 \001(\005\""
  "\243\001\n\010Property\022\016\n\nSourceName\020\000\022\034\n\030CaptureD"
  "eviceDescription\020\001\022\023\n\017PosterImageData\020\002\022"
  "\032\n\026SymbolAbbreviationText\020\003\022\031\n\025SymbolIma"
  "geIdentifier\020\004\022\035\n\031SymbolTintColorIdentif"
  "ier\020\005\"\220\001\n\035CommandLiveVideoStyleSetValue\022"
  "3\n\005super\030\001 \002(\0132$.TSD.BaseStyleSetValueCo"
  "mmandArchive\022:\n\006change\030\002 \001(\0132*.TSDSOS.Me"
  "diaStylePropertyChangeSetArchive\"\204\001\n\036Com"
  "mandThemeAddLiveVideoSource\022\"\n\005super\030\001 \002"
  "(\0132\023.TSK.CommandArchive\022)\n\021live_video_so"
  "urce\030\002 \001(\0132\016.TSP.Reference\022\023\n\013is_implici"
  "t\030\003 \001(\010\"\270\001\n!CommandThemeRemoveLiveVideoS"
  "ource\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022\'\n\024live_video_source_id\030\002 \002(\0132\t.TSP.UU"
  "ID\022\023\n\013is_implicit\030\003 \001(\010\0221\n\031removed_live_"
  "video_source\030\004 \001(\0132\016.TSP.Reference\"\335\002\n+C"
  "ommandMotionBackgroundStyleSetValueArchi"
  "ve\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022$"
  "\n\rslide_id_path\030\004 \002(\0132\r.TSP.UUIDPath\022!\n\t"
  "old_style\030\002 \001(\0132\016.TSP.Reference\022\'\n\017old_s"
  "lide_style\030\005 \001(\0132\016.TSP.Reference\022D\n\006chan"
  "ge\030\003 \001(\01324.KNSOS.MotionBackgroundStylePr"
  "opertyChangeSetArchive\022R\n\024undo_property_"
  "change\030\006 \001(\01324.KNSOS.MotionBackgroundSty"
  "lePropertyChangeSetArchive\"\361\001\n8CommandMo"
  "tionBackgroundStyleUpdatePosterFrameData"
  "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
  "ive\022/\n\027motion_background_style\030\002 \001(\0132\016.T"
  "SP.Reference\022-\n\021poster_image_data\030\003 \001(\0132"
  "\022.TSP.DataReference\0221\n\025old_poster_image_"
  "data\030\004 \001(\0132\022.TSP.DataReference*=\n\021Animat"
  "ionReferent\022\024\n\020kRelativeToStart\020\001\022\022\n\016kRe"
  "lativeToEnd\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_KNCommandArchives_2eproto_deps[11] = {
  &::descriptor_table_KNArchives_2eproto,
  &::descriptor_table_KNArchives_2esos_2eproto,
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDArchives_2esos_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_KNCommandArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KNCommandArchives_2eproto = {
    false, false, 20333, descriptor_table_protodef_KNCommandArchives_2eproto,
    "KNCommandArchives.proto",
    &descriptor_table_KNCommandArchives_2eproto_once, descriptor_table_KNCommandArchives_2eproto_deps, 11, 72,
    schemas, file_default_instances, TableStruct_KNCommandArchives_2eproto::offsets,
    file_level_metadata_KNCommandArchives_2eproto, file_level_enum_descriptors_KNCommandArchives_2eproto,
    file_level_service_descriptors_KNCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KNCommandArchives_2eproto_getter() {
  return &descriptor_table_KNCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KNCommandArchives_2eproto(&descriptor_table_KNCommandArchives_2eproto);
namespace KN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandShowInsertSlideArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[0];
}
bool CommandShowInsertSlideArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlide;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForPaste;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForDuplicate;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MIN;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MAX;
constexpr int CommandShowInsertSlideArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandLiveVideoInfoSetValue_Property_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[1];
}
bool CommandLiveVideoInfoSetValue_Property_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::Scale;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::NormalizedOffset;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::MaskKind;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::MaskCornerRadius;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::IsPlaceholder;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::BackgroundKind;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::BackgroundFill;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::Property_MIN;
constexpr CommandLiveVideoInfoSetValue_Property CommandLiveVideoInfoSetValue::Property_MAX;
constexpr int CommandLiveVideoInfoSetValue::Property_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandLiveVideoSourceSetValue_Property_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[2];
}
bool CommandLiveVideoSourceSetValue_Property_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::SourceName;
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::CaptureDeviceDescription;
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::PosterImageData;
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::SymbolAbbreviationText;
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::SymbolImageIdentifier;
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::SymbolTintColorIdentifier;
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::Property_MIN;
constexpr CommandLiveVideoSourceSetValue_Property CommandLiveVideoSourceSetValue::Property_MAX;
constexpr int CommandLiveVideoSourceSetValue::Property_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimationReferent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[3];
}
bool AnimationReferent_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UIStateCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateCommandGroupArchive>()._impl_._has_bits_);
  static const ::TSK::CommandGroupArchive& super(const UIStateCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& uistate(const UIStateCommandGroupArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandGroupArchive&
UIStateCommandGroupArchive::_Internal::super(const UIStateCommandGroupArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
UIStateCommandGroupArchive::_Internal::uistate(const UIStateCommandGroupArchive* msg) {
  return *msg->_impl_.uistate_;
}
void UIStateCommandGroupArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void UIStateCommandGroupArchive::clear_uistate() {
  if (_impl_.uistate_ != nullptr) _impl_.uistate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void UIStateCommandGroupArchive::clear_slidenodestoedit() {
  _impl_.slidenodestoedit_.Clear();
}
void UIStateCommandGroupArchive::clear_template_slide_nodes_to_apply() {
  _impl_.template_slide_nodes_to_apply_.Clear();
}
void UIStateCommandGroupArchive::clear_thumbnailsizes() {
  _impl_.thumbnailsizes_.Clear();
}
void UIStateCommandGroupArchive::clear_selectedslidenodes() {
  _impl_.selectedslidenodes_.Clear();
}
void UIStateCommandGroupArchive::clear_restoreselectedslidenodes() {
  _impl_.restoreselectedslidenodes_.Clear();
}
UIStateCommandGroupArchive::UIStateCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.UIStateCommandGroupArchive)
}
UIStateCommandGroupArchive::UIStateCommandGroupArchive(const UIStateCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UIStateCommandGroupArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slidenodestoedit_){from._impl_.slidenodestoedit_}
    , decltype(_impl_.template_slide_nodes_to_apply_){from._impl_.template_slide_nodes_to_apply_}
    , decltype(_impl_.thumbnailsizes_){from._impl_.thumbnailsizes_}
    , decltype(_impl_.selectedslidenodes_){from._impl_.selectedslidenodes_}
    , decltype(_impl_.restoreselectedslidenodes_){from._impl_.restoreselectedslidenodes_}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.uistate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandGroupArchive(*from._impl_.super_);
  }
  if (from._internal_has_uistate()) {
    _this->_impl_.uistate_ = new ::TSP::Reference(*from._impl_.uistate_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.UIStateCommandGroupArchive)
}

inline void UIStateCommandGroupArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slidenodestoedit_){arena}
    , decltype(_impl_.template_slide_nodes_to_apply_){arena}
    , decltype(_impl_.thumbnailsizes_){arena}
    , decltype(_impl_.selectedslidenodes_){arena}
    , decltype(_impl_.restoreselectedslidenodes_){arena}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.uistate_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UIStateCommandGroupArchive::~UIStateCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:KN.UIStateCommandGroupArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UIStateCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slidenodestoedit_.~RepeatedPtrField();
  _impl_.template_slide_nodes_to_apply_.~RepeatedPtrField();
  _impl_.thumbnailsizes_.~RepeatedPtrField();
  _impl_.selectedslidenodes_.~RepeatedPtrField();
  _impl_.restoreselectedslidenodes_.~RepeatedPtrField();
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.uistate_;
}

void UIStateCommandGroupArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UIStateCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UIStateCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slidenodestoedit_.Clear();
  _impl_.template_slide_nodes_to_apply_.Clear();
  _impl_.thumbnailsizes_.Clear();
  _impl_.selectedslidenodes_.Clear();
  _impl_.restoreselectedslidenodes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.uistate_ != nullptr);
      _impl_.uistate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateCommandGroupArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference uiState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.UIStateCommandGroupArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slideNodesToEdit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slidenodestoedit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slide_nodes_to_apply = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slide_nodes_to_apply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Size thumbnailSizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnailsizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference selectedSlideNodes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restoreselectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIStateCommandGroupArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UIStateCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference uiState = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uistate(this),
        _Internal::uistate(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.UIStateCommandGroupArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // repeated .TSP.Reference slideNodesToEdit = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slidenodestoedit_size()); i < n; i++) {
    const auto& repfield = this->_internal_slidenodestoedit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference template_slide_nodes_to_apply = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_template_slide_nodes_to_apply_size()); i < n; i++) {
    const auto& repfield = this->_internal_template_slide_nodes_to_apply(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thumbnailsizes_size()); i < n; i++) {
    const auto& repfield = this->_internal_thumbnailsizes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selectedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_selectedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_restoreselectedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_restoreselectedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UIStateCommandGroupArchive)
  return target;
}

size_t UIStateCommandGroupArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.UIStateCommandGroupArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_uistate()) {
    // required .TSP.Reference uiState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uistate_);
  }

  return total_size;
}
size_t UIStateCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UIStateCommandGroupArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference uiState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uistate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slideNodesToEdit = 4;
  total_size += 1UL * this->_internal_slidenodestoedit_size();
  for (const auto& msg : this->_impl_.slidenodestoedit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference template_slide_nodes_to_apply = 5;
  total_size += 1UL * this->_internal_template_slide_nodes_to_apply_size();
  for (const auto& msg : this->_impl_.template_slide_nodes_to_apply_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  total_size += 1UL * this->_internal_thumbnailsizes_size();
  for (const auto& msg : this->_impl_.thumbnailsizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  total_size += 1UL * this->_internal_selectedslidenodes_size();
  for (const auto& msg : this->_impl_.selectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  total_size += 1UL * this->_internal_restoreselectedslidenodes_size();
  for (const auto& msg : this->_impl_.restoreselectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UIStateCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateCommandGroupArchive::GetClassData() const { return &_class_data_; }


void UIStateCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UIStateCommandGroupArchive*>(&to_msg);
  auto& from = static_cast<const UIStateCommandGroupArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.UIStateCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slidenodestoedit_.MergeFrom(from._impl_.slidenodestoedit_);
  _this->_impl_.template_slide_nodes_to_apply_.MergeFrom(from._impl_.template_slide_nodes_to_apply_);
  _this->_impl_.thumbnailsizes_.MergeFrom(from._impl_.thumbnailsizes_);
  _this->_impl_.selectedslidenodes_.MergeFrom(from._impl_.selectedslidenodes_);
  _this->_impl_.restoreselectedslidenodes_.MergeFrom(from._impl_.restoreselectedslidenodes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandGroupArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_uistate()->::TSP::Reference::MergeFrom(
          from._internal_uistate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateCommandGroupArchive::CopyFrom(const UIStateCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UIStateCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slidenodestoedit_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.template_slide_nodes_to_apply_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.thumbnailsizes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selectedslidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.restoreselectedslidenodes_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_uistate()) {
    if (!_impl_.uistate_->IsInitialized()) return false;
  }
  return true;
}

void UIStateCommandGroupArchive::InternalSwap(UIStateCommandGroupArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slidenodestoedit_.InternalSwap(&other->_impl_.slidenodestoedit_);
  _impl_.template_slide_nodes_to_apply_.InternalSwap(&other->_impl_.template_slide_nodes_to_apply_);
  _impl_.thumbnailsizes_.InternalSwap(&other->_impl_.thumbnailsizes_);
  _impl_.selectedslidenodes_.InternalSwap(&other->_impl_.selectedslidenodes_);
  _impl_.restoreselectedslidenodes_.InternalSwap(&other->_impl_.restoreselectedslidenodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateCommandGroupArchive, _impl_.uistate_)
      + sizeof(UIStateCommandGroupArchive::_impl_.uistate_)
      - PROTOBUF_FIELD_OFFSET(UIStateCommandGroupArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateCommandGroupArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandSlideInsertDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertDrawablesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::MixedIdOperationArgs& args_list(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_args_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_update_geometry_to_match_object_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& undo_archive(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_undo_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_pasting(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_remove_slide_specific_hyperlinks(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saved_next_untitled_resolver_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::GeometryArchive& geometry_of_object_placeholder_for_comparison_to_restore_link(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_geometry_of_object_placeholder_for_comparison_to_restore_link(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertDrawablesArchive::_Internal::super(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlideInsertDrawablesArchive::_Internal::slide_id(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->_impl_.slide_id_;
}
const ::KN::MixedIdOperationArgs&
CommandSlideInsertDrawablesArchive::_Internal::args_list(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->_impl_.args_list_;
}
const ::TSP::Reference&
CommandSlideInsertDrawablesArchive::_Internal::undo_archive(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->_impl_.undo_archive_;
}
const ::TSD::GeometryArchive&
CommandSlideInsertDrawablesArchive::_Internal::geometry_of_object_placeholder_for_comparison_to_restore_link(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_;
}
void CommandSlideInsertDrawablesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertDrawablesArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertDrawablesArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_working_drawables() {
  _impl_.working_drawables_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_args_list() {
  if (_impl_.args_list_ != nullptr) _impl_.args_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideInsertDrawablesArchive::clear_ids_of_drawables_using_object_placeholder_geometry() {
  _impl_.ids_of_drawables_using_object_placeholder_geometry_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_undo_archive() {
  if (_impl_.undo_archive_ != nullptr) _impl_.undo_archive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandSlideInsertDrawablesArchive::clear_insert_build_descriptions() {
  _impl_.insert_build_descriptions_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_working_insert_build_descriptions() {
  _impl_.working_insert_build_descriptions_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_remove_build_descriptions() {
  _impl_.remove_build_descriptions_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_geometry_of_object_placeholder_for_comparison_to_restore_link() {
  if (_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_ != nullptr) _impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertDrawablesArchive)
}
CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(const CommandSlideInsertDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideInsertDrawablesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.ids_of_drawables_using_object_placeholder_geometry_){from._impl_.ids_of_drawables_using_object_placeholder_geometry_}
    , decltype(_impl_.sage_placeholder_tags_list_){from._impl_.sage_placeholder_tags_list_}
    , decltype(_impl_.insert_build_descriptions_){from._impl_.insert_build_descriptions_}
    , decltype(_impl_.remove_build_descriptions_){from._impl_.remove_build_descriptions_}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.working_drawables_){from._impl_.working_drawables_}
    , decltype(_impl_.working_insert_build_descriptions_){from._impl_.working_insert_build_descriptions_}
    , decltype(_impl_.instructional_text_list_){from._impl_.instructional_text_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.args_list_){nullptr}
    , decltype(_impl_.undo_archive_){nullptr}
    , decltype(_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_){nullptr}
    , decltype(_impl_.update_geometry_to_match_object_placeholder_){}
    , decltype(_impl_.is_pasting_){}
    , decltype(_impl_.remove_slide_specific_hyperlinks_){}
    , decltype(_impl_.saved_next_untitled_resolver_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  if (from._internal_has_args_list()) {
    _this->_impl_.args_list_ = new ::KN::MixedIdOperationArgs(*from._impl_.args_list_);
  }
  if (from._internal_has_undo_archive()) {
    _this->_impl_.undo_archive_ = new ::TSP::Reference(*from._impl_.undo_archive_);
  }
  if (from._internal_has_geometry_of_object_placeholder_for_comparison_to_restore_link()) {
    _this->_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_ = new ::TSD::GeometryArchive(*from._impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_);
  }
  ::memcpy(&_impl_.update_geometry_to_match_object_placeholder_, &from._impl_.update_geometry_to_match_object_placeholder_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.saved_next_untitled_resolver_index_) -
    reinterpret_cast<char*>(&_impl_.update_geometry_to_match_object_placeholder_)) + sizeof(_impl_.saved_next_untitled_resolver_index_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertDrawablesArchive)
}

inline void CommandSlideInsertDrawablesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.ids_of_drawables_using_object_placeholder_geometry_){arena}
    , decltype(_impl_.sage_placeholder_tags_list_){arena}
    , decltype(_impl_.insert_build_descriptions_){arena}
    , decltype(_impl_.remove_build_descriptions_){arena}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.working_drawables_){arena}
    , decltype(_impl_.working_insert_build_descriptions_){arena}
    , decltype(_impl_.instructional_text_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.args_list_){nullptr}
    , decltype(_impl_.undo_archive_){nullptr}
    , decltype(_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_){nullptr}
    , decltype(_impl_.update_geometry_to_match_object_placeholder_){false}
    , decltype(_impl_.is_pasting_){false}
    , decltype(_impl_.remove_slide_specific_hyperlinks_){false}
    , decltype(_impl_.saved_next_untitled_resolver_index_){0u}
  };
}

CommandSlideInsertDrawablesArchive::~CommandSlideInsertDrawablesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertDrawablesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideInsertDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  _impl_.ids_of_drawables_using_object_placeholder_geometry_.~RepeatedPtrField();
  _impl_.sage_placeholder_tags_list_.~RepeatedPtrField();
  _impl_.insert_build_descriptions_.~RepeatedPtrField();
  _impl_.remove_build_descriptions_.~RepeatedPtrField();
  _impl_.custom_format_keys_.~RepeatedPtrField();
  _impl_.working_drawables_.~RepeatedPtrField();
  _impl_.working_insert_build_descriptions_.~RepeatedPtrField();
  _impl_.instructional_text_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
  if (this != internal_default_instance()) delete _impl_.args_list_;
  if (this != internal_default_instance()) delete _impl_.undo_archive_;
  if (this != internal_default_instance()) delete _impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_;
}

void CommandSlideInsertDrawablesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideInsertDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertDrawablesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  _impl_.ids_of_drawables_using_object_placeholder_geometry_.Clear();
  _impl_.sage_placeholder_tags_list_.Clear();
  _impl_.insert_build_descriptions_.Clear();
  _impl_.remove_build_descriptions_.Clear();
  _impl_.custom_format_keys_.Clear();
  _impl_.working_drawables_.Clear();
  _impl_.working_insert_build_descriptions_.Clear();
  _impl_.instructional_text_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.args_list_ != nullptr);
      _impl_.args_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_archive_ != nullptr);
      _impl_.undo_archive_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_ != nullptr);
      _impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.update_geometry_to_match_object_placeholder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remove_slide_specific_hyperlinks_) -
        reinterpret_cast<char*>(&_impl_.update_geometry_to_match_object_placeholder_)) + sizeof(_impl_.remove_slide_specific_hyperlinks_));
  }
  _impl_.saved_next_untitled_resolver_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertDrawablesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .KN.MixedIdOperationArgs args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_args_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool update_geometry_to_match_object_placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_update_geometry_to_match_object_placeholder(&has_bits);
          _impl_.update_geometry_to_match_object_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_drawables_using_object_placeholder_geometry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string sage_placeholder_tags_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sage_placeholder_tags_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_archive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_pasting = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_pasting(&has_bits);
          _impl_.is_pasting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference insert_build_descriptions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insert_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference remove_build_descriptions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remove_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool remove_slide_specific_hyperlinks = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_remove_slide_specific_hyperlinks(&has_bits);
          _impl_.remove_slide_specific_hyperlinks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 saved_next_untitled_resolver_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_saved_next_untitled_resolver_index(&has_bits);
          _impl_.saved_next_untitled_resolver_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry_of_object_placeholder_for_comparison_to_restore_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_drawables = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_working_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_insert_build_descriptions = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_working_insert_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string instructional_text_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_instructional_text_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideInsertDrawablesArchive.instructional_text_list");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideInsertDrawablesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertDrawablesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .KN.MixedIdOperationArgs args_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::args_list(this),
        _Internal::args_list(this).GetCachedSize(), target, stream);
  }

  // required bool update_geometry_to_match_object_placeholder = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_update_geometry_to_match_object_placeholder(), target);
  }

  // repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_of_drawables_using_object_placeholder_geometry_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids_of_drawables_using_object_placeholder_geometry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string sage_placeholder_tags_list = 7;
  for (int i = 0, n = this->_internal_sage_placeholder_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_sage_placeholder_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list");
    target = stream->WriteString(7, s, target);
  }

  // optional .TSP.Reference undo_archive = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::undo_archive(this),
        _Internal::undo_archive(this).GetCachedSize(), target, stream);
  }

  // optional bool is_pasting = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_pasting(), target);
  }

  // repeated .TSP.Reference insert_build_descriptions = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_insert_build_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_insert_build_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference remove_build_descriptions = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remove_build_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_remove_build_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool remove_slide_specific_hyperlinks = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_remove_slide_specific_hyperlinks(), target);
  }

  // repeated .TSP.UUID custom_format_keys = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 saved_next_untitled_resolver_index = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_saved_next_untitled_resolver_index(), target);
  }

  // optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::geometry_of_object_placeholder_for_comparison_to_restore_link(this),
        _Internal::geometry_of_object_placeholder_for_comparison_to_restore_link(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference working_drawables = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_working_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_working_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference working_insert_build_descriptions = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_working_insert_build_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_working_insert_build_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string instructional_text_list = 20;
  for (int i = 0, n = this->_internal_instructional_text_list_size(); i < n; i++) {
    const auto& s = this->_internal_instructional_text_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideInsertDrawablesArchive.instructional_text_list");
    target = stream->WriteString(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertDrawablesArchive)
  return target;
}

size_t CommandSlideInsertDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  if (_internal_has_update_geometry_to_match_object_placeholder()) {
    // required bool update_geometry_to_match_object_placeholder = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSlideInsertDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertDrawablesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

    // required bool update_geometry_to_match_object_placeholder = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 3;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
  total_size += 1UL * this->_internal_ids_of_drawables_using_object_placeholder_geometry_size();
  for (const auto& msg : this->_impl_.ids_of_drawables_using_object_placeholder_geometry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string sage_placeholder_tags_list = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sage_placeholder_tags_list_.size());
  for (int i = 0, n = _impl_.sage_placeholder_tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sage_placeholder_tags_list_.Get(i));
  }

  // repeated .TSP.Reference insert_build_descriptions = 10;
  total_size += 1UL * this->_internal_insert_build_descriptions_size();
  for (const auto& msg : this->_impl_.insert_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference remove_build_descriptions = 11;
  total_size += 1UL * this->_internal_remove_build_descriptions_size();
  for (const auto& msg : this->_impl_.remove_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 13;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference working_drawables = 18;
  total_size += 2UL * this->_internal_working_drawables_size();
  for (const auto& msg : this->_impl_.working_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference working_insert_build_descriptions = 19;
  total_size += 2UL * this->_internal_working_insert_build_descriptions_size();
  for (const auto& msg : this->_impl_.working_insert_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string instructional_text_list = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.instructional_text_list_.size());
  for (int i = 0, n = _impl_.instructional_text_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.instructional_text_list_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .KN.MixedIdOperationArgs args_list = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.args_list_);
    }

    // optional .TSP.Reference undo_archive = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_archive_);
    }

    // optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_);
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool is_pasting = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool remove_slide_specific_hyperlinks = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 saved_next_untitled_resolver_index = 16;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_saved_next_untitled_resolver_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideInsertDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertDrawablesArchive::GetClassData() const { return &_class_data_; }


void CommandSlideInsertDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideInsertDrawablesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideInsertDrawablesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  _this->_impl_.ids_of_drawables_using_object_placeholder_geometry_.MergeFrom(from._impl_.ids_of_drawables_using_object_placeholder_geometry_);
  _this->_impl_.sage_placeholder_tags_list_.MergeFrom(from._impl_.sage_placeholder_tags_list_);
  _this->_impl_.insert_build_descriptions_.MergeFrom(from._impl_.insert_build_descriptions_);
  _this->_impl_.remove_build_descriptions_.MergeFrom(from._impl_.remove_build_descriptions_);
  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  _this->_impl_.working_drawables_.MergeFrom(from._impl_.working_drawables_);
  _this->_impl_.working_insert_build_descriptions_.MergeFrom(from._impl_.working_insert_build_descriptions_);
  _this->_impl_.instructional_text_list_.MergeFrom(from._impl_.instructional_text_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_args_list()->::KN::MixedIdOperationArgs::MergeFrom(
          from._internal_args_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_archive()->::TSP::Reference::MergeFrom(
          from._internal_undo_archive());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_geometry_of_object_placeholder_for_comparison_to_restore_link()->::TSD::GeometryArchive::MergeFrom(
          from._internal_geometry_of_object_placeholder_for_comparison_to_restore_link());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.update_geometry_to_match_object_placeholder_ = from._impl_.update_geometry_to_match_object_placeholder_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_pasting_ = from._impl_.is_pasting_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.remove_slide_specific_hyperlinks_ = from._impl_.remove_slide_specific_hyperlinks_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_saved_next_untitled_resolver_index(from._internal_saved_next_untitled_resolver_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertDrawablesArchive::CopyFrom(const CommandSlideInsertDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ids_of_drawables_using_object_placeholder_geometry_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.insert_build_descriptions_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.remove_build_descriptions_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.working_drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.working_insert_build_descriptions_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_args_list()) {
    if (!_impl_.args_list_->IsInitialized()) return false;
  }
  if (_internal_has_undo_archive()) {
    if (!_impl_.undo_archive_->IsInitialized()) return false;
  }
  if (_internal_has_geometry_of_object_placeholder_for_comparison_to_restore_link()) {
    if (!_impl_.geometry_of_object_placeholder_for_comparison_to_restore_link_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertDrawablesArchive::InternalSwap(CommandSlideInsertDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  _impl_.ids_of_drawables_using_object_placeholder_geometry_.InternalSwap(&other->_impl_.ids_of_drawables_using_object_placeholder_geometry_);
  _impl_.sage_placeholder_tags_list_.InternalSwap(&other->_impl_.sage_placeholder_tags_list_);
  _impl_.insert_build_descriptions_.InternalSwap(&other->_impl_.insert_build_descriptions_);
  _impl_.remove_build_descriptions_.InternalSwap(&other->_impl_.remove_build_descriptions_);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  _impl_.working_drawables_.InternalSwap(&other->_impl_.working_drawables_);
  _impl_.working_insert_build_descriptions_.InternalSwap(&other->_impl_.working_insert_build_descriptions_);
  _impl_.instructional_text_list_.InternalSwap(&other->_impl_.instructional_text_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, _impl_.saved_next_untitled_resolver_index_)
      + sizeof(CommandSlideInsertDrawablesArchive::_impl_.saved_next_untitled_resolver_index_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertDrawablesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[1]);
}

// ===================================================================

class CommandSlideSetPlaceholdersForTagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetPlaceholdersForTagsArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetPlaceholdersForTagsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideSetPlaceholdersForTagsArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetPlaceholdersForTagsArchive::_Internal::super(const CommandSlideSetPlaceholdersForTagsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlideSetPlaceholdersForTagsArchive::_Internal::slide_id(const CommandSlideSetPlaceholdersForTagsArchive* msg) {
  return *msg->_impl_.slide_id_;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_infos() {
  _impl_.infos_.Clear();
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_old_infos() {
  _impl_.old_infos_.Clear();
}
CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
}
CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(const CommandSlideSetPlaceholdersForTagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideSetPlaceholdersForTagsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.old_tags_){from._impl_.old_tags_}
    , decltype(_impl_.old_infos_){from._impl_.old_infos_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
}

inline void CommandSlideSetPlaceholdersForTagsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.old_tags_){arena}
    , decltype(_impl_.old_infos_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
  };
}

CommandSlideSetPlaceholdersForTagsArchive::~CommandSlideSetPlaceholdersForTagsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideSetPlaceholdersForTagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.old_tags_.~RepeatedPtrField();
  _impl_.old_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
}

void CommandSlideSetPlaceholdersForTagsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideSetPlaceholdersForTagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _impl_.tags_.Clear();
  _impl_.old_tags_.Clear();
  _impl_.old_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetPlaceholdersForTagsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideSetPlaceholdersForTagsArchive.tags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string old_tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_old_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideSetPlaceholdersForTagsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideSetPlaceholdersForTagsArchive.tags");
    target = stream->WriteString(4, s, target);
  }

  // repeated string old_tags = 5;
  for (int i = 0, n = this->_internal_old_tags_size(); i < n; i++) {
    const auto& s = this->_internal_old_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags");
    target = stream->WriteString(5, s, target);
  }

  // repeated .TSP.Reference old_infos = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetPlaceholdersForTagsArchive)
  return target;
}

size_t CommandSlideSetPlaceholdersForTagsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  return total_size;
}
size_t CommandSlideSetPlaceholdersForTagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 3;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // repeated string old_tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.old_tags_.size());
  for (int i = 0, n = _impl_.old_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.old_tags_.Get(i));
  }

  // repeated .TSP.Reference old_infos = 6;
  total_size += 1UL * this->_internal_old_infos_size();
  for (const auto& msg : this->_impl_.old_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetPlaceholdersForTagsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideSetPlaceholdersForTagsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetPlaceholdersForTagsArchive::GetClassData() const { return &_class_data_; }


void CommandSlideSetPlaceholdersForTagsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideSetPlaceholdersForTagsArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideSetPlaceholdersForTagsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.old_tags_.MergeFrom(from._impl_.old_tags_);
  _this->_impl_.old_infos_.MergeFrom(from._impl_.old_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetPlaceholdersForTagsArchive::CopyFrom(const CommandSlideSetPlaceholdersForTagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetPlaceholdersForTagsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_infos_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetPlaceholdersForTagsArchive::InternalSwap(CommandSlideSetPlaceholdersForTagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.old_tags_.InternalSwap(&other->_impl_.old_tags_);
  _impl_.old_infos_.InternalSwap(&other->_impl_.old_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, _impl_.slide_id_)
      + sizeof(CommandSlideSetPlaceholdersForTagsArchive::_impl_.slide_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetPlaceholdersForTagsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandTemplateSlideSetPlaceholderForTagArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTemplateSlideSetPlaceholderForTagArchive>()._impl_._has_bits_);
  static const ::KN::CommandSlideSetPlaceholdersForTagsArchive& super(const CommandTemplateSlideSetPlaceholderForTagArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& placeholder_id(const CommandTemplateSlideSetPlaceholderForTagArchive* msg);
  static void set_has_placeholder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::KN::CommandSlideSetPlaceholdersForTagsArchive&
CommandTemplateSlideSetPlaceholderForTagArchive::_Internal::super(const CommandTemplateSlideSetPlaceholderForTagArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandTemplateSlideSetPlaceholderForTagArchive::_Internal::placeholder_id(const CommandTemplateSlideSetPlaceholderForTagArchive* msg) {
  return *msg->_impl_.placeholder_id_;
}
void CommandTemplateSlideSetPlaceholderForTagArchive::clear_placeholder_id() {
  if (_impl_.placeholder_id_ != nullptr) _impl_.placeholder_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandTemplateSlideSetPlaceholderForTagArchive::CommandTemplateSlideSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
}
CommandTemplateSlideSetPlaceholderForTagArchive::CommandTemplateSlideSetPlaceholderForTagArchive(const CommandTemplateSlideSetPlaceholderForTagArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandTemplateSlideSetPlaceholderForTagArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.placeholder_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::KN::CommandSlideSetPlaceholdersForTagsArchive(*from._impl_.super_);
  }
  if (from._internal_has_placeholder_id()) {
    _this->_impl_.placeholder_id_ = new ::TSP::UUID(*from._impl_.placeholder_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
}

inline void CommandTemplateSlideSetPlaceholderForTagArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.placeholder_id_){nullptr}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandTemplateSlideSetPlaceholderForTagArchive::~CommandTemplateSlideSetPlaceholderForTagArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandTemplateSlideSetPlaceholderForTagArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.placeholder_id_;
}

void CommandTemplateSlideSetPlaceholderForTagArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandTemplateSlideSetPlaceholderForTagArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.placeholder_id_ != nullptr);
      _impl_.placeholder_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTemplateSlideSetPlaceholderForTagArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID placeholder_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholder_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandTemplateSlideSetPlaceholderForTagArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID placeholder_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::placeholder_id(this),
        _Internal::placeholder_id(this).GetCachedSize(), target, stream);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  return target;
}

size_t CommandTemplateSlideSetPlaceholderForTagArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_placeholder_id()) {
    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placeholder_id_);
  }

  return total_size;
}
size_t CommandTemplateSlideSetPlaceholderForTagArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placeholder_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTemplateSlideSetPlaceholderForTagArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandTemplateSlideSetPlaceholderForTagArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTemplateSlideSetPlaceholderForTagArchive::GetClassData() const { return &_class_data_; }


void CommandTemplateSlideSetPlaceholderForTagArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandTemplateSlideSetPlaceholderForTagArchive*>(&to_msg);
  auto& from = static_cast<const CommandTemplateSlideSetPlaceholderForTagArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::KN::CommandSlideSetPlaceholdersForTagsArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_placeholder_id()->::TSP::UUID::MergeFrom(
          from._internal_placeholder_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTemplateSlideSetPlaceholderForTagArchive::CopyFrom(const CommandTemplateSlideSetPlaceholderForTagArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTemplateSlideSetPlaceholderForTagArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_placeholder_id()) {
    if (!_impl_.placeholder_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandTemplateSlideSetPlaceholderForTagArchive::InternalSwap(CommandTemplateSlideSetPlaceholderForTagArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTemplateSlideSetPlaceholderForTagArchive, _impl_.placeholder_id_)
      + sizeof(CommandTemplateSlideSetPlaceholderForTagArchive::_impl_.placeholder_id_)
      - PROTOBUF_FIELD_OFFSET(CommandTemplateSlideSetPlaceholderForTagArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTemplateSlideSetPlaceholderForTagArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandSlidePropagateSetPlaceholderForTagArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlidePropagateSetPlaceholderForTagArchive>()._impl_._has_bits_);
  static const ::KN::CommandSlideSetPlaceholdersForTagsArchive& super(const CommandSlidePropagateSetPlaceholderForTagArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& placeholder_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg);
  static void set_has_placeholder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& original_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg);
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::KN::CommandSlideSetPlaceholdersForTagsArchive&
CommandSlidePropagateSetPlaceholderForTagArchive::_Internal::super(const CommandSlidePropagateSetPlaceholderForTagArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlidePropagateSetPlaceholderForTagArchive::_Internal::placeholder_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg) {
  return *msg->_impl_.placeholder_id_;
}
const ::TSP::UUID&
CommandSlidePropagateSetPlaceholderForTagArchive::_Internal::original_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg) {
  return *msg->_impl_.original_id_;
}
void CommandSlidePropagateSetPlaceholderForTagArchive::clear_placeholder_id() {
  if (_impl_.placeholder_id_ != nullptr) _impl_.placeholder_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlidePropagateSetPlaceholderForTagArchive::clear_original_id() {
  if (_impl_.original_id_ != nullptr) _impl_.original_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlidePropagateSetPlaceholderForTagArchive::CommandSlidePropagateSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
}
CommandSlidePropagateSetPlaceholderForTagArchive::CommandSlidePropagateSetPlaceholderForTagArchive(const CommandSlidePropagateSetPlaceholderForTagArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlidePropagateSetPlaceholderForTagArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.placeholder_id_){nullptr}
    , decltype(_impl_.original_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::KN::CommandSlideSetPlaceholdersForTagsArchive(*from._impl_.super_);
  }
  if (from._internal_has_placeholder_id()) {
    _this->_impl_.placeholder_id_ = new ::TSP::UUID(*from._impl_.placeholder_id_);
  }
  if (from._internal_has_original_id()) {
    _this->_impl_.original_id_ = new ::TSP::UUID(*from._impl_.original_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
}

inline void CommandSlidePropagateSetPlaceholderForTagArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.placeholder_id_){nullptr}
    , decltype(_impl_.original_id_){nullptr}
  };
}

CommandSlidePropagateSetPlaceholderForTagArchive::~CommandSlidePropagateSetPlaceholderForTagArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlidePropagateSetPlaceholderForTagArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.placeholder_id_;
  if (this != internal_default_instance()) delete _impl_.original_id_;
}

void CommandSlidePropagateSetPlaceholderForTagArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlidePropagateSetPlaceholderForTagArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.placeholder_id_ != nullptr);
      _impl_.placeholder_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.original_id_ != nullptr);
      _impl_.original_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlidePropagateSetPlaceholderForTagArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID placeholder_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholder_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID original_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlidePropagateSetPlaceholderForTagArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID placeholder_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::placeholder_id(this),
        _Internal::placeholder_id(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID original_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::original_id(this),
        _Internal::original_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  return target;
}

size_t CommandSlidePropagateSetPlaceholderForTagArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_placeholder_id()) {
    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placeholder_id_);
  }

  if (_internal_has_original_id()) {
    // required .TSP.UUID original_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_id_);
  }

  return total_size;
}
size_t CommandSlidePropagateSetPlaceholderForTagArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placeholder_id_);

    // required .TSP.UUID original_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlidePropagateSetPlaceholderForTagArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlidePropagateSetPlaceholderForTagArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlidePropagateSetPlaceholderForTagArchive::GetClassData() const { return &_class_data_; }


void CommandSlidePropagateSetPlaceholderForTagArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlidePropagateSetPlaceholderForTagArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlidePropagateSetPlaceholderForTagArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::KN::CommandSlideSetPlaceholdersForTagsArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_placeholder_id()->::TSP::UUID::MergeFrom(
          from._internal_placeholder_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_original_id()->::TSP::UUID::MergeFrom(
          from._internal_original_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlidePropagateSetPlaceholderForTagArchive::CopyFrom(const CommandSlidePropagateSetPlaceholderForTagArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePropagateSetPlaceholderForTagArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_placeholder_id()) {
    if (!_impl_.placeholder_id_->IsInitialized()) return false;
  }
  if (_internal_has_original_id()) {
    if (!_impl_.original_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePropagateSetPlaceholderForTagArchive::InternalSwap(CommandSlidePropagateSetPlaceholderForTagArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlidePropagateSetPlaceholderForTagArchive, _impl_.original_id_)
      + sizeof(CommandSlidePropagateSetPlaceholderForTagArchive::_impl_.original_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlidePropagateSetPlaceholderForTagArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlidePropagateSetPlaceholderForTagArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandSlideRemoveDrawableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveDrawableArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::MixedIdOperationArgs& args_list(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_args_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveDrawableArchive::_Internal::super(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlideRemoveDrawableArchive::_Internal::slide_id(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->_impl_.slide_id_;
}
const ::KN::MixedIdOperationArgs&
CommandSlideRemoveDrawableArchive::_Internal::args_list(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->_impl_.args_list_;
}
void CommandSlideRemoveDrawableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveDrawableArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveDrawableArchive::clear_sorteddrawables() {
  _impl_.sorteddrawables_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_args_list() {
  if (_impl_.args_list_ != nullptr) _impl_.args_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideRemoveDrawableArchive::clear_insert_build_descriptions() {
  _impl_.insert_build_descriptions_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_remove_build_descriptions() {
  _impl_.remove_build_descriptions_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_drawables_using_object_placeholder_geometry() {
  _impl_.drawables_using_object_placeholder_geometry_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_inverse_insert_hyperlink_commands() {
  _impl_.inverse_insert_hyperlink_commands_.Clear();
}
CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveDrawableArchive)
}
CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(const CommandSlideRemoveDrawableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideRemoveDrawableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sorteddrawables_){from._impl_.sorteddrawables_}
    , decltype(_impl_.placeholdertags_){from._impl_.placeholdertags_}
    , decltype(_impl_.insert_build_descriptions_){from._impl_.insert_build_descriptions_}
    , decltype(_impl_.remove_build_descriptions_){from._impl_.remove_build_descriptions_}
    , decltype(_impl_.drawables_using_object_placeholder_geometry_){from._impl_.drawables_using_object_placeholder_geometry_}
    , decltype(_impl_.inverse_insert_hyperlink_commands_){from._impl_.inverse_insert_hyperlink_commands_}
    , decltype(_impl_.drawable_indexes_for_undo_){from._impl_.drawable_indexes_for_undo_}
    , decltype(_impl_.instructional_text_list_){from._impl_.instructional_text_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.args_list_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  if (from._internal_has_args_list()) {
    _this->_impl_.args_list_ = new ::KN::MixedIdOperationArgs(*from._impl_.args_list_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveDrawableArchive)
}

inline void CommandSlideRemoveDrawableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sorteddrawables_){arena}
    , decltype(_impl_.placeholdertags_){arena}
    , decltype(_impl_.insert_build_descriptions_){arena}
    , decltype(_impl_.remove_build_descriptions_){arena}
    , decltype(_impl_.drawables_using_object_placeholder_geometry_){arena}
    , decltype(_impl_.inverse_insert_hyperlink_commands_){arena}
    , decltype(_impl_.drawable_indexes_for_undo_){arena}
    , decltype(_impl_.instructional_text_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.args_list_){nullptr}
  };
}

CommandSlideRemoveDrawableArchive::~CommandSlideRemoveDrawableArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveDrawableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideRemoveDrawableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sorteddrawables_.~RepeatedPtrField();
  _impl_.placeholdertags_.~RepeatedPtrField();
  _impl_.insert_build_descriptions_.~RepeatedPtrField();
  _impl_.remove_build_descriptions_.~RepeatedPtrField();
  _impl_.drawables_using_object_placeholder_geometry_.~RepeatedPtrField();
  _impl_.inverse_insert_hyperlink_commands_.~RepeatedPtrField();
  _impl_.drawable_indexes_for_undo_.~RepeatedField();
  _impl_.instructional_text_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
  if (this != internal_default_instance()) delete _impl_.args_list_;
}

void CommandSlideRemoveDrawableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideRemoveDrawableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveDrawableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sorteddrawables_.Clear();
  _impl_.placeholdertags_.Clear();
  _impl_.insert_build_descriptions_.Clear();
  _impl_.remove_build_descriptions_.Clear();
  _impl_.drawables_using_object_placeholder_geometry_.Clear();
  _impl_.inverse_insert_hyperlink_commands_.Clear();
  _impl_.drawable_indexes_for_undo_.Clear();
  _impl_.instructional_text_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.args_list_ != nullptr);
      _impl_.args_list_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveDrawableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference sortedDrawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorteddrawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .KN.MixedIdOperationArgs args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_args_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string placeholderTags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_placeholdertags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideRemoveDrawableArchive.placeholderTags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference insert_build_descriptions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insert_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference remove_build_descriptions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remove_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables_using_object_placeholder_geometry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverse_insert_hyperlink_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 drawable_indexes_for_undo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_drawable_indexes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_drawable_indexes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string instructional_text_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_instructional_text_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideRemoveDrawableArchive.instructional_text_list");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideRemoveDrawableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveDrawableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorteddrawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorteddrawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .KN.MixedIdOperationArgs args_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::args_list(this),
        _Internal::args_list(this).GetCachedSize(), target, stream);
  }

  // repeated string placeholderTags = 5;
  for (int i = 0, n = this->_internal_placeholdertags_size(); i < n; i++) {
    const auto& s = this->_internal_placeholdertags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideRemoveDrawableArchive.placeholderTags");
    target = stream->WriteString(5, s, target);
  }

  // repeated .TSP.Reference insert_build_descriptions = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_insert_build_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_insert_build_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference remove_build_descriptions = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remove_build_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_remove_build_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_using_object_placeholder_geometry_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables_using_object_placeholder_geometry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inverse_insert_hyperlink_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_inverse_insert_hyperlink_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 drawable_indexes_for_undo = 10;
  for (int i = 0, n = this->_internal_drawable_indexes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_drawable_indexes_for_undo(i), target);
  }

  // repeated string instructional_text_list = 11;
  for (int i = 0, n = this->_internal_instructional_text_list_size(); i < n; i++) {
    const auto& s = this->_internal_instructional_text_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideRemoveDrawableArchive.instructional_text_list");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveDrawableArchive)
  return target;
}

size_t CommandSlideRemoveDrawableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveDrawableArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  if (_internal_has_args_list()) {
    // required .KN.MixedIdOperationArgs args_list = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.args_list_);
  }

  return total_size;
}
size_t CommandSlideRemoveDrawableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveDrawableArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

    // required .KN.MixedIdOperationArgs args_list = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.args_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sortedDrawables = 3;
  total_size += 1UL * this->_internal_sorteddrawables_size();
  for (const auto& msg : this->_impl_.sorteddrawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string placeholderTags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.placeholdertags_.size());
  for (int i = 0, n = _impl_.placeholdertags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.placeholdertags_.Get(i));
  }

  // repeated .TSP.Reference insert_build_descriptions = 6;
  total_size += 1UL * this->_internal_insert_build_descriptions_size();
  for (const auto& msg : this->_impl_.insert_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference remove_build_descriptions = 7;
  total_size += 1UL * this->_internal_remove_build_descriptions_size();
  for (const auto& msg : this->_impl_.remove_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
  total_size += 1UL * this->_internal_drawables_using_object_placeholder_geometry_size();
  for (const auto& msg : this->_impl_.drawables_using_object_placeholder_geometry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
  total_size += 1UL * this->_internal_inverse_insert_hyperlink_commands_size();
  for (const auto& msg : this->_impl_.inverse_insert_hyperlink_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 drawable_indexes_for_undo = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.drawable_indexes_for_undo_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_drawable_indexes_for_undo_size());
    total_size += data_size;
  }

  // repeated string instructional_text_list = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.instructional_text_list_.size());
  for (int i = 0, n = _impl_.instructional_text_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.instructional_text_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveDrawableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideRemoveDrawableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveDrawableArchive::GetClassData() const { return &_class_data_; }


void CommandSlideRemoveDrawableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideRemoveDrawableArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideRemoveDrawableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveDrawableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sorteddrawables_.MergeFrom(from._impl_.sorteddrawables_);
  _this->_impl_.placeholdertags_.MergeFrom(from._impl_.placeholdertags_);
  _this->_impl_.insert_build_descriptions_.MergeFrom(from._impl_.insert_build_descriptions_);
  _this->_impl_.remove_build_descriptions_.MergeFrom(from._impl_.remove_build_descriptions_);
  _this->_impl_.drawables_using_object_placeholder_geometry_.MergeFrom(from._impl_.drawables_using_object_placeholder_geometry_);
  _this->_impl_.inverse_insert_hyperlink_commands_.MergeFrom(from._impl_.inverse_insert_hyperlink_commands_);
  _this->_impl_.drawable_indexes_for_undo_.MergeFrom(from._impl_.drawable_indexes_for_undo_);
  _this->_impl_.instructional_text_list_.MergeFrom(from._impl_.instructional_text_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_args_list()->::KN::MixedIdOperationArgs::MergeFrom(
          from._internal_args_list());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveDrawableArchive::CopyFrom(const CommandSlideRemoveDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveDrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveDrawableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sorteddrawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.insert_build_descriptions_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.remove_build_descriptions_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_using_object_placeholder_geometry_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.inverse_insert_hyperlink_commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_args_list()) {
    if (!_impl_.args_list_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveDrawableArchive::InternalSwap(CommandSlideRemoveDrawableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sorteddrawables_.InternalSwap(&other->_impl_.sorteddrawables_);
  _impl_.placeholdertags_.InternalSwap(&other->_impl_.placeholdertags_);
  _impl_.insert_build_descriptions_.InternalSwap(&other->_impl_.insert_build_descriptions_);
  _impl_.remove_build_descriptions_.InternalSwap(&other->_impl_.remove_build_descriptions_);
  _impl_.drawables_using_object_placeholder_geometry_.InternalSwap(&other->_impl_.drawables_using_object_placeholder_geometry_);
  _impl_.inverse_insert_hyperlink_commands_.InternalSwap(&other->_impl_.inverse_insert_hyperlink_commands_);
  _impl_.drawable_indexes_for_undo_.InternalSwap(&other->_impl_.drawable_indexes_for_undo_);
  _impl_.instructional_text_list_.InternalSwap(&other->_impl_.instructional_text_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, _impl_.args_list_)
      + sizeof(CommandSlideRemoveDrawableArchive::_impl_.args_list_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveDrawableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandSlideMoveDrawableZOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveDrawableZOrderArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveDrawableZOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideMoveDrawableZOrderArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveDrawableZOrderArchive::_Internal::super(const CommandSlideMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlideMoveDrawableZOrderArchive::_Internal::slide_id(const CommandSlideMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.slide_id_;
}
void CommandSlideMoveDrawableZOrderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveDrawableZOrderArchive::clear_old_ordered_infos() {
  _impl_.old_ordered_infos_.Clear();
}
void CommandSlideMoveDrawableZOrderArchive::clear_args_list() {
  _impl_.args_list_.Clear();
}
void CommandSlideMoveDrawableZOrderArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideMoveDrawableZOrderArchive::clear_old_ordered_infos_on_slide_for_undo() {
  _impl_.old_ordered_infos_on_slide_for_undo_.Clear();
}
CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveDrawableZOrderArchive)
}
CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(const CommandSlideMoveDrawableZOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideMoveDrawableZOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_ordered_infos_){from._impl_.old_ordered_infos_}
    , decltype(_impl_.args_list_){from._impl_.args_list_}
    , decltype(_impl_.old_ordered_infos_on_slide_for_undo_){from._impl_.old_ordered_infos_on_slide_for_undo_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveDrawableZOrderArchive)
}

inline void CommandSlideMoveDrawableZOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_ordered_infos_){arena}
    , decltype(_impl_.args_list_){arena}
    , decltype(_impl_.old_ordered_infos_on_slide_for_undo_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
  };
}

CommandSlideMoveDrawableZOrderArchive::~CommandSlideMoveDrawableZOrderArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveDrawableZOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideMoveDrawableZOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_ordered_infos_.~RepeatedPtrField();
  _impl_.args_list_.~RepeatedPtrField();
  _impl_.old_ordered_infos_on_slide_for_undo_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
}

void CommandSlideMoveDrawableZOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideMoveDrawableZOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveDrawableZOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_ordered_infos_.Clear();
  _impl_.args_list_.Clear();
  _impl_.old_ordered_infos_on_slide_for_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveDrawableZOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_ordered_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_ordered_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs args_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_ordered_infos_on_slide_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideMoveDrawableZOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveDrawableZOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_ordered_infos = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_ordered_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_ordered_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_ordered_infos_on_slide_for_undo_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_ordered_infos_on_slide_for_undo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveDrawableZOrderArchive)
  return target;
}

size_t CommandSlideMoveDrawableZOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  return total_size;
}
size_t CommandSlideMoveDrawableZOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference old_ordered_infos = 4;
  total_size += 1UL * this->_internal_old_ordered_infos_size();
  for (const auto& msg : this->_impl_.old_ordered_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 6;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->_impl_.args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
  total_size += 1UL * this->_internal_old_ordered_infos_on_slide_for_undo_size();
  for (const auto& msg : this->_impl_.old_ordered_infos_on_slide_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveDrawableZOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideMoveDrawableZOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveDrawableZOrderArchive::GetClassData() const { return &_class_data_; }


void CommandSlideMoveDrawableZOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideMoveDrawableZOrderArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideMoveDrawableZOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveDrawableZOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.old_ordered_infos_.MergeFrom(from._impl_.old_ordered_infos_);
  _this->_impl_.args_list_.MergeFrom(from._impl_.args_list_);
  _this->_impl_.old_ordered_infos_on_slide_for_undo_.MergeFrom(from._impl_.old_ordered_infos_on_slide_for_undo_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveDrawableZOrderArchive::CopyFrom(const CommandSlideMoveDrawableZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveDrawableZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveDrawableZOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_ordered_infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_ordered_infos_on_slide_for_undo_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveDrawableZOrderArchive::InternalSwap(CommandSlideMoveDrawableZOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.old_ordered_infos_.InternalSwap(&other->_impl_.old_ordered_infos_);
  _impl_.args_list_.InternalSwap(&other->_impl_.args_list_);
  _impl_.old_ordered_infos_on_slide_for_undo_.InternalSwap(&other->_impl_.old_ordered_infos_on_slide_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, _impl_.slide_id_)
      + sizeof(CommandSlideMoveDrawableZOrderArchive::_impl_.slide_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveDrawableZOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandSlideNodeSetPropertyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideNodeSetPropertyArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& slide_node_id_path(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_slide_node_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideNodeSetPropertyArchive::_Internal::super(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandSlideNodeSetPropertyArchive::_Internal::slide_node_id_path(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->_impl_.slide_node_id_path_;
}
void CommandSlideNodeSetPropertyArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideNodeSetPropertyArchive::clear_slide_node_id_path() {
  if (_impl_.slide_node_id_path_ != nullptr) _impl_.slide_node_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideNodeSetPropertyArchive)
}
CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(const CommandSlideNodeSetPropertyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideNodeSetPropertyArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_node_id_path_){nullptr}
    , decltype(_impl_.old_value_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_node_id_path()) {
    _this->_impl_.slide_node_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_node_id_path_);
  }
  ::memcpy(&_impl_.old_value_, &from._impl_.old_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.old_value_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideNodeSetPropertyArchive)
}

inline void CommandSlideNodeSetPropertyArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_node_id_path_){nullptr}
    , decltype(_impl_.old_value_){false}
    , decltype(_impl_.value_){false}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSlideNodeSetPropertyArchive::~CommandSlideNodeSetPropertyArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideNodeSetPropertyArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideNodeSetPropertyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_node_id_path_;
}

void CommandSlideNodeSetPropertyArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideNodeSetPropertyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideNodeSetPropertyArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_node_id_path_ != nullptr);
      _impl_.slide_node_id_path_->Clear();
    }
  }
  ::memset(&_impl_.old_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.old_value_)) + sizeof(_impl_.value_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideNodeSetPropertyArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_node_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandSlideNodeSetPropertyArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_old_value(&has_bits);
          _impl_.old_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideNodeSetPropertyArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideNodeSetPropertyArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_node_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_node_id_path(this),
        _Internal::slide_node_id_path(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideNodeSetPropertyArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required bool old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_old_value(), target);
  }

  // required bool value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideNodeSetPropertyArchive)
  return target;
}

size_t CommandSlideNodeSetPropertyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideNodeSetPropertyArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_node_id_path()) {
    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_id_path_);
  }

  if (_internal_has_old_value()) {
    // required bool old_value = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_value()) {
    // required bool value = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSlideNodeSetPropertyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideNodeSetPropertyArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_id_path_);

    // required bool old_value = 4;
    total_size += 1 + 1;

    // required bool value = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideNodeSetPropertyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideNodeSetPropertyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideNodeSetPropertyArchive::GetClassData() const { return &_class_data_; }


void CommandSlideNodeSetPropertyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideNodeSetPropertyArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideNodeSetPropertyArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideNodeSetPropertyArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide_node_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_node_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_value_ = from._impl_.old_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideNodeSetPropertyArchive::CopyFrom(const CommandSlideNodeSetPropertyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideNodeSetPropertyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetPropertyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_node_id_path()) {
    if (!_impl_.slide_node_id_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetPropertyArchive::InternalSwap(CommandSlideNodeSetPropertyArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, _impl_.value_)
      + sizeof(CommandSlideNodeSetPropertyArchive::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideNodeSetPropertyArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandSlideNodeSetViewStatePropertyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideNodeSetViewStatePropertyArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideNodeSetViewStatePropertyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& slide_node_id_path(const CommandSlideNodeSetViewStatePropertyArchive* msg);
  static void set_has_slide_node_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideNodeSetViewStatePropertyArchive::_Internal::super(const CommandSlideNodeSetViewStatePropertyArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandSlideNodeSetViewStatePropertyArchive::_Internal::slide_node_id_path(const CommandSlideNodeSetViewStatePropertyArchive* msg) {
  return *msg->_impl_.slide_node_id_path_;
}
void CommandSlideNodeSetViewStatePropertyArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideNodeSetViewStatePropertyArchive::clear_slide_node_id_path() {
  if (_impl_.slide_node_id_path_ != nullptr) _impl_.slide_node_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideNodeSetViewStatePropertyArchive::CommandSlideNodeSetViewStatePropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideNodeSetViewStatePropertyArchive)
}
CommandSlideNodeSetViewStatePropertyArchive::CommandSlideNodeSetViewStatePropertyArchive(const CommandSlideNodeSetViewStatePropertyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideNodeSetViewStatePropertyArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_node_id_path_){nullptr}
    , decltype(_impl_.old_value_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_node_id_path()) {
    _this->_impl_.slide_node_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_node_id_path_);
  }
  ::memcpy(&_impl_.old_value_, &from._impl_.old_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.old_value_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideNodeSetViewStatePropertyArchive)
}

inline void CommandSlideNodeSetViewStatePropertyArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_node_id_path_){nullptr}
    , decltype(_impl_.old_value_){false}
    , decltype(_impl_.value_){false}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSlideNodeSetViewStatePropertyArchive::~CommandSlideNodeSetViewStatePropertyArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideNodeSetViewStatePropertyArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideNodeSetViewStatePropertyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_node_id_path_;
}

void CommandSlideNodeSetViewStatePropertyArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideNodeSetViewStatePropertyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_node_id_path_ != nullptr);
      _impl_.slide_node_id_path_->Clear();
    }
  }
  ::memset(&_impl_.old_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.old_value_)) + sizeof(_impl_.value_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideNodeSetViewStatePropertyArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_node_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandSlideNodeSetViewStatePropertyArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_old_value(&has_bits);
          _impl_.old_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideNodeSetViewStatePropertyArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_node_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_node_id_path(this),
        _Internal::slide_node_id_path(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideNodeSetViewStatePropertyArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required bool old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_old_value(), target);
  }

  // required bool value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideNodeSetViewStatePropertyArchive)
  return target;
}

size_t CommandSlideNodeSetViewStatePropertyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_node_id_path()) {
    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_id_path_);
  }

  if (_internal_has_old_value()) {
    // required bool old_value = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_value()) {
    // required bool value = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSlideNodeSetViewStatePropertyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_id_path_);

    // required bool old_value = 4;
    total_size += 1 + 1;

    // required bool value = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideNodeSetViewStatePropertyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideNodeSetViewStatePropertyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideNodeSetViewStatePropertyArchive::GetClassData() const { return &_class_data_; }


void CommandSlideNodeSetViewStatePropertyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideNodeSetViewStatePropertyArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideNodeSetViewStatePropertyArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide_node_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_node_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_value_ = from._impl_.old_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideNodeSetViewStatePropertyArchive::CopyFrom(const CommandSlideNodeSetViewStatePropertyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetViewStatePropertyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_node_id_path()) {
    if (!_impl_.slide_node_id_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetViewStatePropertyArchive::InternalSwap(CommandSlideNodeSetViewStatePropertyArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetViewStatePropertyArchive, _impl_.value_)
      + sizeof(CommandSlideNodeSetViewStatePropertyArchive::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetViewStatePropertyArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideNodeSetViewStatePropertyArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandSlideSetBackgroundFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetBackgroundFillArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FillArchive& old_fill(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_old_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::FillArchive& new_fill(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_new_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetBackgroundFillArchive::_Internal::super(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandSlideSetBackgroundFillArchive::_Internal::slide_id_path(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->_impl_.slide_id_path_;
}
const ::TSD::FillArchive&
CommandSlideSetBackgroundFillArchive::_Internal::old_fill(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->_impl_.old_fill_;
}
const ::TSD::FillArchive&
CommandSlideSetBackgroundFillArchive::_Internal::new_fill(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->_impl_.new_fill_;
}
void CommandSlideSetBackgroundFillArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetBackgroundFillArchive::clear_slide_id_path() {
  if (_impl_.slide_id_path_ != nullptr) _impl_.slide_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetBackgroundFillArchive::clear_old_fill() {
  if (_impl_.old_fill_ != nullptr) _impl_.old_fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideSetBackgroundFillArchive::clear_new_fill() {
  if (_impl_.new_fill_ != nullptr) _impl_.new_fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSlideSetBackgroundFillArchive::CommandSlideSetBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetBackgroundFillArchive)
}
CommandSlideSetBackgroundFillArchive::CommandSlideSetBackgroundFillArchive(const CommandSlideSetBackgroundFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideSetBackgroundFillArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.old_fill_){nullptr}
    , decltype(_impl_.new_fill_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id_path()) {
    _this->_impl_.slide_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_id_path_);
  }
  if (from._internal_has_old_fill()) {
    _this->_impl_.old_fill_ = new ::TSD::FillArchive(*from._impl_.old_fill_);
  }
  if (from._internal_has_new_fill()) {
    _this->_impl_.new_fill_ = new ::TSD::FillArchive(*from._impl_.new_fill_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetBackgroundFillArchive)
}

inline void CommandSlideSetBackgroundFillArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.old_fill_){nullptr}
    , decltype(_impl_.new_fill_){nullptr}
  };
}

CommandSlideSetBackgroundFillArchive::~CommandSlideSetBackgroundFillArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetBackgroundFillArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideSetBackgroundFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_path_;
  if (this != internal_default_instance()) delete _impl_.old_fill_;
  if (this != internal_default_instance()) delete _impl_.new_fill_;
}

void CommandSlideSetBackgroundFillArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideSetBackgroundFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetBackgroundFillArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_path_ != nullptr);
      _impl_.slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_fill_ != nullptr);
      _impl_.old_fill_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_fill_ != nullptr);
      _impl_.new_fill_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetBackgroundFillArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive old_fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSD.FillArchive new_fill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideSetBackgroundFillArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetBackgroundFillArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id_path(this),
        _Internal::slide_id_path(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive old_fill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_fill(this),
        _Internal::old_fill(this).GetCachedSize(), target, stream);
  }

  // required .TSD.FillArchive new_fill = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_fill(this),
        _Internal::new_fill(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetBackgroundFillArchive)
  return target;
}

size_t CommandSlideSetBackgroundFillArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetBackgroundFillArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);
  }

  if (_internal_has_new_fill()) {
    // required .TSD.FillArchive new_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_fill_);
  }

  return total_size;
}
size_t CommandSlideSetBackgroundFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetBackgroundFillArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);

    // required .TSD.FillArchive new_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_fill_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.FillArchive old_fill = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_fill_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetBackgroundFillArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideSetBackgroundFillArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetBackgroundFillArchive::GetClassData() const { return &_class_data_; }


void CommandSlideSetBackgroundFillArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideSetBackgroundFillArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideSetBackgroundFillArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetBackgroundFillArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_old_fill());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_new_fill());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetBackgroundFillArchive::CopyFrom(const CommandSlideSetBackgroundFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetBackgroundFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetBackgroundFillArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!_impl_.slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_old_fill()) {
    if (!_impl_.old_fill_->IsInitialized()) return false;
  }
  if (_internal_has_new_fill()) {
    if (!_impl_.new_fill_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetBackgroundFillArchive::InternalSwap(CommandSlideSetBackgroundFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetBackgroundFillArchive, _impl_.new_fill_)
      + sizeof(CommandSlideSetBackgroundFillArchive::_impl_.new_fill_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetBackgroundFillArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetBackgroundFillArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandSlideSetStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetStyleArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlideSetStyleArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slide_style(const CommandSlideSetStyleArchive* msg);
  static void set_has_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_slide_style(const CommandSlideSetStyleArchive* msg);
  static void set_has_old_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetStyleArchive::_Internal::super(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandSlideSetStyleArchive::_Internal::slide_id_path(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.slide_id_path_;
}
const ::TSP::Reference&
CommandSlideSetStyleArchive::_Internal::slide_style(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.slide_style_;
}
const ::TSP::Reference&
CommandSlideSetStyleArchive::_Internal::old_slide_style(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.old_slide_style_;
}
void CommandSlideSetStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetStyleArchive::clear_slide_id_path() {
  if (_impl_.slide_id_path_ != nullptr) _impl_.slide_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetStyleArchive::clear_slide_style() {
  if (_impl_.slide_style_ != nullptr) _impl_.slide_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideSetStyleArchive::clear_old_slide_style() {
  if (_impl_.old_slide_style_ != nullptr) _impl_.old_slide_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetStyleArchive)
}
CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(const CommandSlideSetStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideSetStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.old_slide_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id_path()) {
    _this->_impl_.slide_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_id_path_);
  }
  if (from._internal_has_slide_style()) {
    _this->_impl_.slide_style_ = new ::TSP::Reference(*from._impl_.slide_style_);
  }
  if (from._internal_has_old_slide_style()) {
    _this->_impl_.old_slide_style_ = new ::TSP::Reference(*from._impl_.old_slide_style_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetStyleArchive)
}

inline void CommandSlideSetStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.old_slide_style_){nullptr}
  };
}

CommandSlideSetStyleArchive::~CommandSlideSetStyleArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideSetStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_path_;
  if (this != internal_default_instance()) delete _impl_.slide_style_;
  if (this != internal_default_instance()) delete _impl_.old_slide_style_;
}

void CommandSlideSetStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideSetStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_path_ != nullptr);
      _impl_.slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_style_ != nullptr);
      _impl_.slide_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_slide_style_ != nullptr);
      _impl_.old_slide_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_slide_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_slide_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideSetStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id_path(this),
        _Internal::slide_id_path(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slide_style(this),
        _Internal::slide_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_slide_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_slide_style(this),
        _Internal::old_slide_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetStyleArchive)
  return target;
}

size_t CommandSlideSetStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);
  }

  if (_internal_has_slide_style()) {
    // required .TSP.Reference slide_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_style_);
  }

  return total_size;
}
size_t CommandSlideSetStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetStyleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);

    // required .TSP.Reference slide_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_slide_style = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_slide_style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideSetStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetStyleArchive::GetClassData() const { return &_class_data_; }


void CommandSlideSetStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideSetStyleArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideSetStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide_style()->::TSP::Reference::MergeFrom(
          from._internal_slide_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_slide_style()->::TSP::Reference::MergeFrom(
          from._internal_old_slide_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetStyleArchive::CopyFrom(const CommandSlideSetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!_impl_.slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_slide_style()) {
    if (!_impl_.slide_style_->IsInitialized()) return false;
  }
  if (_internal_has_old_slide_style()) {
    if (!_impl_.old_slide_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetStyleArchive::InternalSwap(CommandSlideSetStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetStyleArchive, _impl_.old_slide_style_)
      + sizeof(CommandSlideSetStyleArchive::_impl_.old_slide_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandShowMarkOutOfSyncRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMarkOutOfSyncRecordingArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_is_recording_out_of_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_is_recording_out_of_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Date& old_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_old_modification_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Date& new_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_new_modification_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::super(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::show(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::old_recording(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.old_recording_;
}
const ::TSP::Date&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::old_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.old_modification_date_;
}
const ::TSP::Date&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::new_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.new_modification_date_;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_old_recording() {
  if (_impl_.old_recording_ != nullptr) _impl_.old_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_old_modification_date() {
  if (_impl_.old_modification_date_ != nullptr) _impl_.old_modification_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_new_modification_date() {
  if (_impl_.new_modification_date_ != nullptr) _impl_.new_modification_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
}
CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(const CommandShowMarkOutOfSyncRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowMarkOutOfSyncRecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
    , decltype(_impl_.old_modification_date_){nullptr}
    , decltype(_impl_.new_modification_date_){nullptr}
    , decltype(_impl_.old_is_recording_out_of_sync_){}
    , decltype(_impl_.new_is_recording_out_of_sync_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_old_recording()) {
    _this->_impl_.old_recording_ = new ::TSP::Reference(*from._impl_.old_recording_);
  }
  if (from._internal_has_old_modification_date()) {
    _this->_impl_.old_modification_date_ = new ::TSP::Date(*from._impl_.old_modification_date_);
  }
  if (from._internal_has_new_modification_date()) {
    _this->_impl_.new_modification_date_ = new ::TSP::Date(*from._impl_.new_modification_date_);
  }
  ::memcpy(&_impl_.old_is_recording_out_of_sync_, &from._impl_.old_is_recording_out_of_sync_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_is_recording_out_of_sync_) -
    reinterpret_cast<char*>(&_impl_.old_is_recording_out_of_sync_)) + sizeof(_impl_.new_is_recording_out_of_sync_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
}

inline void CommandShowMarkOutOfSyncRecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
    , decltype(_impl_.old_modification_date_){nullptr}
    , decltype(_impl_.new_modification_date_){nullptr}
    , decltype(_impl_.old_is_recording_out_of_sync_){false}
    , decltype(_impl_.new_is_recording_out_of_sync_){false}
  };
}

CommandShowMarkOutOfSyncRecordingArchive::~CommandShowMarkOutOfSyncRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowMarkOutOfSyncRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.old_recording_;
  if (this != internal_default_instance()) delete _impl_.old_modification_date_;
  if (this != internal_default_instance()) delete _impl_.new_modification_date_;
}

void CommandShowMarkOutOfSyncRecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowMarkOutOfSyncRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_recording_ != nullptr);
      _impl_.old_recording_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_modification_date_ != nullptr);
      _impl_.old_modification_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.new_modification_date_ != nullptr);
      _impl_.new_modification_date_->Clear();
    }
  }
  ::memset(&_impl_.old_is_recording_out_of_sync_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_is_recording_out_of_sync_) -
      reinterpret_cast<char*>(&_impl_.old_is_recording_out_of_sync_)) + sizeof(_impl_.new_is_recording_out_of_sync_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMarkOutOfSyncRecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool old_is_recording_out_of_sync = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_old_is_recording_out_of_sync(&has_bits);
          _impl_.old_is_recording_out_of_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool new_is_recording_out_of_sync = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_new_is_recording_out_of_sync(&has_bits);
          _impl_.new_is_recording_out_of_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date old_modification_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_modification_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date new_modification_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_modification_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowMarkOutOfSyncRecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_recording(this),
        _Internal::old_recording(this).GetCachedSize(), target, stream);
  }

  // optional bool old_is_recording_out_of_sync = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_old_is_recording_out_of_sync(), target);
  }

  // optional bool new_is_recording_out_of_sync = 5 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_new_is_recording_out_of_sync(), target);
  }

  // optional .TSP.Date old_modification_date = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::old_modification_date(this),
        _Internal::old_modification_date(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Date new_modification_date = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::new_modification_date(this),
        _Internal::new_modification_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMarkOutOfSyncRecordingArchive)
  return target;
}

size_t CommandShowMarkOutOfSyncRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  return total_size;
}
size_t CommandShowMarkOutOfSyncRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional .TSP.Reference old_recording = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_recording_);
    }

    // optional .TSP.Date old_modification_date = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_modification_date_);
    }

    // optional .TSP.Date new_modification_date = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_modification_date_);
    }

    // optional bool old_is_recording_out_of_sync = 4 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool new_is_recording_out_of_sync = 5 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMarkOutOfSyncRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowMarkOutOfSyncRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMarkOutOfSyncRecordingArchive::GetClassData() const { return &_class_data_; }


void CommandShowMarkOutOfSyncRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowMarkOutOfSyncRecordingArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowMarkOutOfSyncRecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_recording()->::TSP::Reference::MergeFrom(
          from._internal_old_recording());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_modification_date()->::TSP::Date::MergeFrom(
          from._internal_old_modification_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_new_modification_date()->::TSP::Date::MergeFrom(
          from._internal_new_modification_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.old_is_recording_out_of_sync_ = from._impl_.old_is_recording_out_of_sync_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.new_is_recording_out_of_sync_ = from._impl_.new_is_recording_out_of_sync_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMarkOutOfSyncRecordingArchive::CopyFrom(const CommandShowMarkOutOfSyncRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMarkOutOfSyncRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!_impl_.old_recording_->IsInitialized()) return false;
  }
  if (_internal_has_old_modification_date()) {
    if (!_impl_.old_modification_date_->IsInitialized()) return false;
  }
  if (_internal_has_new_modification_date()) {
    if (!_impl_.new_modification_date_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMarkOutOfSyncRecordingArchive::InternalSwap(CommandShowMarkOutOfSyncRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, _impl_.new_is_recording_out_of_sync_)
      + sizeof(CommandShowMarkOutOfSyncRecordingArchive::_impl_.new_is_recording_out_of_sync_)
      - PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMarkOutOfSyncRecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandShowMarkOutOfSyncRecordingIfNeededArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMarkOutOfSyncRecordingIfNeededArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& out_of_sync_token(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg);
  static void set_has_out_of_sync_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMarkOutOfSyncRecordingIfNeededArchive::_Internal::super(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandShowMarkOutOfSyncRecordingIfNeededArchive::_Internal::out_of_sync_token(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg) {
  return *msg->_impl_.out_of_sync_token_;
}
void CommandShowMarkOutOfSyncRecordingIfNeededArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowMarkOutOfSyncRecordingIfNeededArchive::clear_out_of_sync_token() {
  if (_impl_.out_of_sync_token_ != nullptr) _impl_.out_of_sync_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandShowMarkOutOfSyncRecordingIfNeededArchive::CommandShowMarkOutOfSyncRecordingIfNeededArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
}
CommandShowMarkOutOfSyncRecordingIfNeededArchive::CommandShowMarkOutOfSyncRecordingIfNeededArchive(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowMarkOutOfSyncRecordingIfNeededArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.out_of_sync_token_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_out_of_sync_token()) {
    _this->_impl_.out_of_sync_token_ = new ::TSP::UUID(*from._impl_.out_of_sync_token_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
}

inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.out_of_sync_token_){nullptr}
  };
}

CommandShowMarkOutOfSyncRecordingIfNeededArchive::~CommandShowMarkOutOfSyncRecordingIfNeededArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.out_of_sync_token_;
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.out_of_sync_token_ != nullptr);
      _impl_.out_of_sync_token_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMarkOutOfSyncRecordingIfNeededArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID out_of_sync_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_of_sync_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowMarkOutOfSyncRecordingIfNeededArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID out_of_sync_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::out_of_sync_token(this),
        _Internal::out_of_sync_token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  return target;
}

size_t CommandShowMarkOutOfSyncRecordingIfNeededArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUID out_of_sync_token = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.out_of_sync_token_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMarkOutOfSyncRecordingIfNeededArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowMarkOutOfSyncRecordingIfNeededArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMarkOutOfSyncRecordingIfNeededArchive::GetClassData() const { return &_class_data_; }


void CommandShowMarkOutOfSyncRecordingIfNeededArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowMarkOutOfSyncRecordingIfNeededArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowMarkOutOfSyncRecordingIfNeededArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_out_of_sync_token()->::TSP::UUID::MergeFrom(
          from._internal_out_of_sync_token());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::CopyFrom(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMarkOutOfSyncRecordingIfNeededArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_out_of_sync_token()) {
    if (!_impl_.out_of_sync_token_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::InternalSwap(CommandShowMarkOutOfSyncRecordingIfNeededArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingIfNeededArchive, _impl_.out_of_sync_token_)
      + sizeof(CommandShowMarkOutOfSyncRecordingIfNeededArchive::_impl_.out_of_sync_token_)
      - PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingIfNeededArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMarkOutOfSyncRecordingIfNeededArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandShowRemoveRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowRemoveRecordingArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowRemoveRecordingArchive::_Internal::super(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowRemoveRecordingArchive::_Internal::show(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowRemoveRecordingArchive::_Internal::old_recording(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->_impl_.old_recording_;
}
void CommandShowRemoveRecordingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowRemoveRecordingArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowRemoveRecordingArchive::clear_old_recording() {
  if (_impl_.old_recording_ != nullptr) _impl_.old_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowRemoveRecordingArchive)
}
CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(const CommandShowRemoveRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowRemoveRecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_old_recording()) {
    _this->_impl_.old_recording_ = new ::TSP::Reference(*from._impl_.old_recording_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowRemoveRecordingArchive)
}

inline void CommandShowRemoveRecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
  };
}

CommandShowRemoveRecordingArchive::~CommandShowRemoveRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowRemoveRecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowRemoveRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.old_recording_;
}

void CommandShowRemoveRecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowRemoveRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowRemoveRecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_recording_ != nullptr);
      _impl_.old_recording_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowRemoveRecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowRemoveRecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowRemoveRecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_recording(this),
        _Internal::old_recording(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowRemoveRecordingArchive)
  return target;
}

size_t CommandShowRemoveRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowRemoveRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  return total_size;
}
size_t CommandShowRemoveRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowRemoveRecordingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_recording = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_recording_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowRemoveRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowRemoveRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowRemoveRecordingArchive::GetClassData() const { return &_class_data_; }


void CommandShowRemoveRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowRemoveRecordingArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowRemoveRecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowRemoveRecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_recording()->::TSP::Reference::MergeFrom(
          from._internal_old_recording());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowRemoveRecordingArchive::CopyFrom(const CommandShowRemoveRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowRemoveRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!_impl_.old_recording_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveRecordingArchive::InternalSwap(CommandShowRemoveRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowRemoveRecordingArchive, _impl_.old_recording_)
      + sizeof(CommandShowRemoveRecordingArchive::_impl_.old_recording_)
      - PROTOBUF_FIELD_OFFSET(CommandShowRemoveRecordingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowRemoveRecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[13]);
}

// ===================================================================

class CommandShowReplaceRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowReplaceRecordingArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& replacement_recording(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_replacement_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowReplaceRecordingArchive::_Internal::super(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::show(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::replacement_recording(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.replacement_recording_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::old_recording(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.old_recording_;
}
void CommandShowReplaceRecordingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowReplaceRecordingArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowReplaceRecordingArchive::clear_replacement_recording() {
  if (_impl_.replacement_recording_ != nullptr) _impl_.replacement_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowReplaceRecordingArchive::clear_old_recording() {
  if (_impl_.old_recording_ != nullptr) _impl_.old_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowReplaceRecordingArchive)
}
CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(const CommandShowReplaceRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowReplaceRecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.replacement_recording_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_replacement_recording()) {
    _this->_impl_.replacement_recording_ = new ::TSP::Reference(*from._impl_.replacement_recording_);
  }
  if (from._internal_has_old_recording()) {
    _this->_impl_.old_recording_ = new ::TSP::Reference(*from._impl_.old_recording_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowReplaceRecordingArchive)
}

inline void CommandShowReplaceRecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.replacement_recording_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
  };
}

CommandShowReplaceRecordingArchive::~CommandShowReplaceRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowReplaceRecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowReplaceRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.replacement_recording_;
  if (this != internal_default_instance()) delete _impl_.old_recording_;
}

void CommandShowReplaceRecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowReplaceRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowReplaceRecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.replacement_recording_ != nullptr);
      _impl_.replacement_recording_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_recording_ != nullptr);
      _impl_.old_recording_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowReplaceRecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference replacement_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowReplaceRecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowReplaceRecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference replacement_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::replacement_recording(this),
        _Internal::replacement_recording(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_recording = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_recording(this),
        _Internal::old_recording(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowReplaceRecordingArchive)
  return target;
}

size_t CommandShowReplaceRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowReplaceRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_replacement_recording()) {
    // required .TSP.Reference replacement_recording = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacement_recording_);
  }

  return total_size;
}
size_t CommandShowReplaceRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowReplaceRecordingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSP.Reference replacement_recording = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacement_recording_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_recording = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_recording_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowReplaceRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowReplaceRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowReplaceRecordingArchive::GetClassData() const { return &_class_data_; }


void CommandShowReplaceRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowReplaceRecordingArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowReplaceRecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowReplaceRecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_replacement_recording()->::TSP::Reference::MergeFrom(
          from._internal_replacement_recording());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_recording()->::TSP::Reference::MergeFrom(
          from._internal_old_recording());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowReplaceRecordingArchive::CopyFrom(const CommandShowReplaceRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowReplaceRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowReplaceRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_recording()) {
    if (!_impl_.replacement_recording_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!_impl_.old_recording_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowReplaceRecordingArchive::InternalSwap(CommandShowReplaceRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowReplaceRecordingArchive, _impl_.old_recording_)
      + sizeof(CommandShowReplaceRecordingArchive::_impl_.old_recording_)
      - PROTOBUF_FIELD_OFFSET(CommandShowReplaceRecordingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowReplaceRecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandShowSetValueArchive_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetValueArchive_PropertyValue>()._impl_._has_bits_);
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_mode_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Size& size_value(const CommandShowSetValueArchive_PropertyValue* msg);
  static void set_has_size_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Size&
CommandShowSetValueArchive_PropertyValue::_Internal::size_value(const CommandShowSetValueArchive_PropertyValue* msg) {
  return *msg->_impl_.size_value_;
}
void CommandShowSetValueArchive_PropertyValue::clear_size_value() {
  if (_impl_.size_value_ != nullptr) _impl_.size_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetValueArchive.PropertyValue)
}
CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(const CommandShowSetValueArchive_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetValueArchive_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_value_){nullptr}
    , decltype(_impl_.double_value_){}
    , decltype(_impl_.bool_value_){}
    , decltype(_impl_.show_mode_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size_value()) {
    _this->_impl_.size_value_ = new ::TSP::Size(*from._impl_.size_value_);
  }
  ::memcpy(&_impl_.double_value_, &from._impl_.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_mode_value_) -
    reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.show_mode_value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetValueArchive.PropertyValue)
}

inline void CommandShowSetValueArchive_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_value_){nullptr}
    , decltype(_impl_.double_value_){0}
    , decltype(_impl_.bool_value_){false}
    , decltype(_impl_.show_mode_value_){0}
  };
}

CommandShowSetValueArchive_PropertyValue::~CommandShowSetValueArchive_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetValueArchive.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetValueArchive_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.size_value_;
}

void CommandShowSetValueArchive_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetValueArchive_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetValueArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.size_value_ != nullptr);
    _impl_.size_value_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_mode_value_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.show_mode_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetValueArchive_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bool_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bool_value(&has_bits);
          _impl_.bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::ShowArchive_KNShowMode_IsValid(val))) {
            _internal_set_show_mode_value(static_cast<::KN::ShowArchive_KNShowMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size size_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetValueArchive_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetValueArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_value(), target);
  }

  // optional double double_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_show_mode_value(), target);
  }

  // optional .TSP.Size size_value = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::size_value(this),
        _Internal::size_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetValueArchive.PropertyValue)
  return target;
}

size_t CommandShowSetValueArchive_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetValueArchive.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Size size_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.size_value_);
    }

    // optional double double_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool bool_value = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_show_mode_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetValueArchive_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetValueArchive_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetValueArchive_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandShowSetValueArchive_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetValueArchive_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandShowSetValueArchive_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetValueArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_size_value()->::TSP::Size::MergeFrom(
          from._internal_size_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bool_value_ = from._impl_.bool_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.show_mode_value_ = from._impl_.show_mode_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetValueArchive_PropertyValue::CopyFrom(const CommandShowSetValueArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetValueArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive_PropertyValue::IsInitialized() const {
  if (_internal_has_size_value()) {
    if (!_impl_.size_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive_PropertyValue::InternalSwap(CommandShowSetValueArchive_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, _impl_.show_mode_value_)
      + sizeof(CommandShowSetValueArchive_PropertyValue::_impl_.show_mode_value_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, _impl_.size_value_)>(
          reinterpret_cast<char*>(&_impl_.size_value_),
          reinterpret_cast<char*>(&other->_impl_.size_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetValueArchive_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[15]);
}

// ===================================================================

class CommandShowSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& show(const CommandShowSetValueArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandShowSetValueArchive_PropertyValue& old_value(const CommandShowSetValueArchive* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandShowSetValueArchive_PropertyValue& new_value(const CommandShowSetValueArchive* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetValueArchive::_Internal::super(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowSetValueArchive::_Internal::show(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.show_;
}
const ::KN::CommandShowSetValueArchive_PropertyValue&
CommandShowSetValueArchive::_Internal::old_value(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.old_value_;
}
const ::KN::CommandShowSetValueArchive_PropertyValue&
CommandShowSetValueArchive::_Internal::new_value(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.new_value_;
}
void CommandShowSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowSetValueArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandShowSetValueArchive::CommandShowSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetValueArchive)
}
CommandShowSetValueArchive::CommandShowSetValueArchive(const CommandShowSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_old_value()) {
    _this->_impl_.old_value_ = new ::KN::CommandShowSetValueArchive_PropertyValue(*from._impl_.old_value_);
  }
  if (from._internal_has_new_value()) {
    _this->_impl_.new_value_ = new ::KN::CommandShowSetValueArchive_PropertyValue(*from._impl_.new_value_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetValueArchive)
}

inline void CommandShowSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandShowSetValueArchive::~CommandShowSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.old_value_;
  if (this != internal_default_instance()) delete _impl_.new_value_;
}

void CommandShowSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_value_ != nullptr);
      _impl_.old_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.new_value_ != nullptr);
      _impl_.new_value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandShowSetValueArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_value(this),
        _Internal::old_value(this).GetCachedSize(), target, stream);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_value(this),
        _Internal::new_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetValueArchive)
  return target;
}

size_t CommandShowSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_old_value()) {
    // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_value_);
  }

  if (_internal_has_new_value()) {
    // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_value_);
  }

  return total_size;
}
size_t CommandShowSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_value_);

    // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandShowSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(
          from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_new_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(
          from._internal_new_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetValueArchive::CopyFrom(const CommandShowSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!_impl_.old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!_impl_.new_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive::InternalSwap(CommandShowSetValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive, _impl_.new_value_)
      + sizeof(CommandShowSetValueArchive::_impl_.new_value_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandShowInsertSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowInsertSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowInsertSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_archive(const CommandShowInsertSlideArchive* msg);
  static void set_has_undo_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowInsertSlideArchive::_Internal::super(const CommandShowInsertSlideArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowInsertSlideArchive::_Internal::undo_archive(const CommandShowInsertSlideArchive* msg) {
  return *msg->_impl_.undo_archive_;
}
void CommandShowInsertSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowInsertSlideArchive::clear_slide_nodes_being_inserted() {
  _impl_.slide_nodes_being_inserted_.Clear();
}
void CommandShowInsertSlideArchive::clear_working_slide_nodes_being_inserted() {
  _impl_.working_slide_nodes_being_inserted_.Clear();
}
void CommandShowInsertSlideArchive::clear_inserted_args_list() {
  _impl_.inserted_args_list_.Clear();
}
void CommandShowInsertSlideArchive::clear_ids_of_slide_nodes_with_depth_changes() {
  _impl_.ids_of_slide_nodes_with_depth_changes_.Clear();
}
void CommandShowInsertSlideArchive::clear_slide_nodes_for_depth_fix_up() {
  _impl_.slide_nodes_for_depth_fix_up_.Clear();
}
void CommandShowInsertSlideArchive::clear_template_slide_nodes_being_inserted() {
  _impl_.template_slide_nodes_being_inserted_.Clear();
}
void CommandShowInsertSlideArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
void CommandShowInsertSlideArchive::clear_undo_archive() {
  if (_impl_.undo_archive_ != nullptr) _impl_.undo_archive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowInsertSlideArchive)
}
CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(const CommandShowInsertSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowInsertSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_being_inserted_){from._impl_.slide_nodes_being_inserted_}
    , decltype(_impl_.inserted_args_list_){from._impl_.inserted_args_list_}
    , decltype(_impl_.ids_of_slide_nodes_with_depth_changes_){from._impl_.ids_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.depths_of_slide_nodes_with_depth_changes_){from._impl_.depths_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_){from._impl_.old_depths_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.slide_nodes_for_depth_fix_up_){from._impl_.slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_){from._impl_.depths_of_slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_){from._impl_.old_depths_of_slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.template_slide_nodes_being_inserted_){from._impl_.template_slide_nodes_being_inserted_}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.collapsed_state_of_slide_nodes_being_inserted_){from._impl_.collapsed_state_of_slide_nodes_being_inserted_}
    , decltype(_impl_.working_slide_nodes_being_inserted_){from._impl_.working_slide_nodes_being_inserted_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undo_archive_){nullptr}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_undo_archive()) {
    _this->_impl_.undo_archive_ = new ::TSP::Reference(*from._impl_.undo_archive_);
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowInsertSlideArchive)
}

inline void CommandShowInsertSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_being_inserted_){arena}
    , decltype(_impl_.inserted_args_list_){arena}
    , decltype(_impl_.ids_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.depths_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.template_slide_nodes_being_inserted_){arena}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.collapsed_state_of_slide_nodes_being_inserted_){arena}
    , decltype(_impl_.working_slide_nodes_being_inserted_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undo_archive_){nullptr}
    , decltype(_impl_.kind_){0}
  };
}

CommandShowInsertSlideArchive::~CommandShowInsertSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowInsertSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowInsertSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slide_nodes_being_inserted_.~RepeatedPtrField();
  _impl_.inserted_args_list_.~RepeatedPtrField();
  _impl_.ids_of_slide_nodes_with_depth_changes_.~RepeatedPtrField();
  _impl_.depths_of_slide_nodes_with_depth_changes_.~RepeatedField();
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.~RepeatedField();
  _impl_.slide_nodes_for_depth_fix_up_.~RepeatedPtrField();
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.~RepeatedField();
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.~RepeatedField();
  _impl_.template_slide_nodes_being_inserted_.~RepeatedPtrField();
  _impl_.custom_format_keys_.~RepeatedPtrField();
  _impl_.collapsed_state_of_slide_nodes_being_inserted_.~RepeatedField();
  _impl_.working_slide_nodes_being_inserted_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.undo_archive_;
}

void CommandShowInsertSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowInsertSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowInsertSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slide_nodes_being_inserted_.Clear();
  _impl_.inserted_args_list_.Clear();
  _impl_.ids_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.depths_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.slide_nodes_for_depth_fix_up_.Clear();
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.Clear();
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
  _impl_.template_slide_nodes_being_inserted_.Clear();
  _impl_.custom_format_keys_.Clear();
  _impl_.collapsed_state_of_slide_nodes_being_inserted_.Clear();
  _impl_.working_slide_nodes_being_inserted_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.undo_archive_ != nullptr);
      _impl_.undo_archive_->Clear();
    }
  }
  _impl_.kind_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowInsertSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_being_inserted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_being_inserted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inserted_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_with_depth_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_for_depth_fix_up(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::CommandShowInsertSlideArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::KN::CommandShowInsertSlideArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slide_nodes_being_inserted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_collapsed_state_of_slide_nodes_being_inserted(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_collapsed_state_of_slide_nodes_being_inserted(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_working_slide_nodes_being_inserted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_archive = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowInsertSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowInsertSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference slide_nodes_being_inserted = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_being_inserted_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes_being_inserted(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inserted_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_inserted_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_of_slide_nodes_with_depth_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids_of_slide_nodes_with_depth_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_old_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_for_depth_fix_up_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes_for_depth_fix_up(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_old_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_kind(), target);
  }

  // repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_template_slide_nodes_being_inserted_size()); i < n; i++) {
    const auto& repfield = this->_internal_template_slide_nodes_being_inserted(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
  for (int i = 0, n = this->_internal_collapsed_state_of_slide_nodes_being_inserted_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_collapsed_state_of_slide_nodes_being_inserted(i), target);
  }

  // repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_working_slide_nodes_being_inserted_size()); i < n; i++) {
    const auto& repfield = this->_internal_working_slide_nodes_being_inserted(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_archive = 15;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::undo_archive(this),
        _Internal::undo_archive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowInsertSlideArchive)
  return target;
}

size_t CommandShowInsertSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowInsertSlideArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes_being_inserted = 2;
  total_size += 1UL * this->_internal_slide_nodes_being_inserted_size();
  for (const auto& msg : this->_impl_.slide_nodes_being_inserted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
  total_size += 1UL * this->_internal_inserted_args_list_size();
  for (const auto& msg : this->_impl_.inserted_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_with_depth_changes_size();
  for (const auto& msg : this->_impl_.ids_of_slide_nodes_with_depth_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.old_depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_old_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  total_size += 1UL * this->_internal_slide_nodes_for_depth_fix_up_size();
  for (const auto& msg : this->_impl_.slide_nodes_for_depth_fix_up_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
  total_size += 1UL * this->_internal_template_slide_nodes_being_inserted_size();
  for (const auto& msg : this->_impl_.template_slide_nodes_being_inserted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 12;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_collapsed_state_of_slide_nodes_being_inserted_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_collapsed_state_of_slide_nodes_being_inserted_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
  total_size += 1UL * this->_internal_working_slide_nodes_being_inserted_size();
  for (const auto& msg : this->_impl_.working_slide_nodes_being_inserted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference undo_archive = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_archive_);
    }

    // optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowInsertSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowInsertSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowInsertSlideArchive::GetClassData() const { return &_class_data_; }


void CommandShowInsertSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowInsertSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowInsertSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowInsertSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slide_nodes_being_inserted_.MergeFrom(from._impl_.slide_nodes_being_inserted_);
  _this->_impl_.inserted_args_list_.MergeFrom(from._impl_.inserted_args_list_);
  _this->_impl_.ids_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.ids_of_slide_nodes_with_depth_changes_);
  _this->_impl_.depths_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.depths_of_slide_nodes_with_depth_changes_);
  _this->_impl_.old_depths_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.old_depths_of_slide_nodes_with_depth_changes_);
  _this->_impl_.slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.slide_nodes_for_depth_fix_up_);
  _this->_impl_.depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.depths_of_slide_nodes_for_depth_fix_up_);
  _this->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
  _this->_impl_.template_slide_nodes_being_inserted_.MergeFrom(from._impl_.template_slide_nodes_being_inserted_);
  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  _this->_impl_.collapsed_state_of_slide_nodes_being_inserted_.MergeFrom(from._impl_.collapsed_state_of_slide_nodes_being_inserted_);
  _this->_impl_.working_slide_nodes_being_inserted_.MergeFrom(from._impl_.working_slide_nodes_being_inserted_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_undo_archive()->::TSP::Reference::MergeFrom(
          from._internal_undo_archive());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowInsertSlideArchive::CopyFrom(const CommandShowInsertSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowInsertSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowInsertSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_being_inserted_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.inserted_args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ids_of_slide_nodes_with_depth_changes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_for_depth_fix_up_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.template_slide_nodes_being_inserted_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.working_slide_nodes_being_inserted_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_archive()) {
    if (!_impl_.undo_archive_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowInsertSlideArchive::InternalSwap(CommandShowInsertSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slide_nodes_being_inserted_.InternalSwap(&other->_impl_.slide_nodes_being_inserted_);
  _impl_.inserted_args_list_.InternalSwap(&other->_impl_.inserted_args_list_);
  _impl_.ids_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.ids_of_slide_nodes_with_depth_changes_);
  _impl_.depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.depths_of_slide_nodes_with_depth_changes_);
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.old_depths_of_slide_nodes_with_depth_changes_);
  _impl_.slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.slide_nodes_for_depth_fix_up_);
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.depths_of_slide_nodes_for_depth_fix_up_);
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
  _impl_.template_slide_nodes_being_inserted_.InternalSwap(&other->_impl_.template_slide_nodes_being_inserted_);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  _impl_.collapsed_state_of_slide_nodes_being_inserted_.InternalSwap(&other->_impl_.collapsed_state_of_slide_nodes_being_inserted_);
  _impl_.working_slide_nodes_being_inserted_.InternalSwap(&other->_impl_.working_slide_nodes_being_inserted_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowInsertSlideArchive, _impl_.kind_)
      + sizeof(CommandShowInsertSlideArchive::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(CommandShowInsertSlideArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowInsertSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandShowMoveSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMoveSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMoveSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMoveSlideArchive::_Internal::super(const CommandShowMoveSlideArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandShowMoveSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowMoveSlideArchive::clear_slide_nodes_being_moved_linearly() {
  _impl_.slide_nodes_being_moved_linearly_.Clear();
}
void CommandShowMoveSlideArchive::clear_rearranged_args_list() {
  _impl_.rearranged_args_list_.Clear();
}
void CommandShowMoveSlideArchive::clear_ids_of_slide_nodes_with_depth_changes() {
  _impl_.ids_of_slide_nodes_with_depth_changes_.Clear();
}
void CommandShowMoveSlideArchive::clear_slide_nodes_for_depth_fix_up() {
  _impl_.slide_nodes_for_depth_fix_up_.Clear();
}
CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMoveSlideArchive)
}
CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(const CommandShowMoveSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowMoveSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_being_moved_linearly_){from._impl_.slide_nodes_being_moved_linearly_}
    , decltype(_impl_.rearranged_args_list_){from._impl_.rearranged_args_list_}
    , decltype(_impl_.ids_of_slide_nodes_with_depth_changes_){from._impl_.ids_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.depths_of_slide_nodes_with_depth_changes_){from._impl_.depths_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_){from._impl_.old_depths_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.slide_nodes_for_depth_fix_up_){from._impl_.slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_){from._impl_.depths_of_slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_){from._impl_.old_depths_of_slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMoveSlideArchive)
}

inline void CommandShowMoveSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_being_moved_linearly_){arena}
    , decltype(_impl_.rearranged_args_list_){arena}
    , decltype(_impl_.ids_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.depths_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandShowMoveSlideArchive::~CommandShowMoveSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMoveSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowMoveSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slide_nodes_being_moved_linearly_.~RepeatedPtrField();
  _impl_.rearranged_args_list_.~RepeatedPtrField();
  _impl_.ids_of_slide_nodes_with_depth_changes_.~RepeatedPtrField();
  _impl_.depths_of_slide_nodes_with_depth_changes_.~RepeatedField();
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.~RepeatedField();
  _impl_.slide_nodes_for_depth_fix_up_.~RepeatedPtrField();
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.~RepeatedField();
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandShowMoveSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowMoveSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMoveSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slide_nodes_being_moved_linearly_.Clear();
  _impl_.rearranged_args_list_.Clear();
  _impl_.ids_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.depths_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.slide_nodes_for_depth_fix_up_.Clear();
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.Clear();
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMoveSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_being_moved_linearly(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rearranged_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_with_depth_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_for_depth_fix_up(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowMoveSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMoveSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_being_moved_linearly_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes_being_moved_linearly(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rearranged_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_rearranged_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_of_slide_nodes_with_depth_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids_of_slide_nodes_with_depth_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_old_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_for_depth_fix_up_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes_for_depth_fix_up(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_old_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMoveSlideArchive)
  return target;
}

size_t CommandShowMoveSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMoveSlideArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
  total_size += 1UL * this->_internal_slide_nodes_being_moved_linearly_size();
  for (const auto& msg : this->_impl_.slide_nodes_being_moved_linearly_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
  total_size += 1UL * this->_internal_rearranged_args_list_size();
  for (const auto& msg : this->_impl_.rearranged_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_with_depth_changes_size();
  for (const auto& msg : this->_impl_.ids_of_slide_nodes_with_depth_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.old_depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_old_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  total_size += 1UL * this->_internal_slide_nodes_for_depth_fix_up_size();
  for (const auto& msg : this->_impl_.slide_nodes_for_depth_fix_up_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMoveSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowMoveSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMoveSlideArchive::GetClassData() const { return &_class_data_; }


void CommandShowMoveSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowMoveSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowMoveSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMoveSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slide_nodes_being_moved_linearly_.MergeFrom(from._impl_.slide_nodes_being_moved_linearly_);
  _this->_impl_.rearranged_args_list_.MergeFrom(from._impl_.rearranged_args_list_);
  _this->_impl_.ids_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.ids_of_slide_nodes_with_depth_changes_);
  _this->_impl_.depths_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.depths_of_slide_nodes_with_depth_changes_);
  _this->_impl_.old_depths_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.old_depths_of_slide_nodes_with_depth_changes_);
  _this->_impl_.slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.slide_nodes_for_depth_fix_up_);
  _this->_impl_.depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.depths_of_slide_nodes_for_depth_fix_up_);
  _this->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMoveSlideArchive::CopyFrom(const CommandShowMoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMoveSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMoveSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_being_moved_linearly_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rearranged_args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ids_of_slide_nodes_with_depth_changes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_for_depth_fix_up_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMoveSlideArchive::InternalSwap(CommandShowMoveSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slide_nodes_being_moved_linearly_.InternalSwap(&other->_impl_.slide_nodes_being_moved_linearly_);
  _impl_.rearranged_args_list_.InternalSwap(&other->_impl_.rearranged_args_list_);
  _impl_.ids_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.ids_of_slide_nodes_with_depth_changes_);
  _impl_.depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.depths_of_slide_nodes_with_depth_changes_);
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.old_depths_of_slide_nodes_with_depth_changes_);
  _impl_.slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.slide_nodes_for_depth_fix_up_);
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.depths_of_slide_nodes_for_depth_fix_up_);
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMoveSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandShowRemoveSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowRemoveSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowRemoveSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowRemoveSlideArchive::_Internal::super(const CommandShowRemoveSlideArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandShowRemoveSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowRemoveSlideArchive::clear_slide_nodes_being_removed() {
  _impl_.slide_nodes_being_removed_.Clear();
}
void CommandShowRemoveSlideArchive::clear_removed_args_list() {
  _impl_.removed_args_list_.Clear();
}
void CommandShowRemoveSlideArchive::clear_ids_of_slide_nodes_with_depth_changes() {
  _impl_.ids_of_slide_nodes_with_depth_changes_.Clear();
}
void CommandShowRemoveSlideArchive::clear_slide_nodes_for_depth_fix_up() {
  _impl_.slide_nodes_for_depth_fix_up_.Clear();
}
CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowRemoveSlideArchive)
}
CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(const CommandShowRemoveSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowRemoveSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_being_removed_){from._impl_.slide_nodes_being_removed_}
    , decltype(_impl_.removed_args_list_){from._impl_.removed_args_list_}
    , decltype(_impl_.ids_of_slide_nodes_with_depth_changes_){from._impl_.ids_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.depths_of_slide_nodes_with_depth_changes_){from._impl_.depths_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_){from._impl_.old_depths_of_slide_nodes_with_depth_changes_}
    , decltype(_impl_.slide_nodes_for_depth_fix_up_){from._impl_.slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_){from._impl_.depths_of_slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_){from._impl_.old_depths_of_slide_nodes_for_depth_fix_up_}
    , decltype(_impl_.collapsed_state_of_slide_nodes_being_removed_){from._impl_.collapsed_state_of_slide_nodes_being_removed_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowRemoveSlideArchive)
}

inline void CommandShowRemoveSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_being_removed_){arena}
    , decltype(_impl_.removed_args_list_){arena}
    , decltype(_impl_.ids_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.depths_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.old_depths_of_slide_nodes_with_depth_changes_){arena}
    , decltype(_impl_.slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.depths_of_slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.old_depths_of_slide_nodes_for_depth_fix_up_){arena}
    , decltype(_impl_.collapsed_state_of_slide_nodes_being_removed_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandShowRemoveSlideArchive::~CommandShowRemoveSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowRemoveSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowRemoveSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slide_nodes_being_removed_.~RepeatedPtrField();
  _impl_.removed_args_list_.~RepeatedPtrField();
  _impl_.ids_of_slide_nodes_with_depth_changes_.~RepeatedPtrField();
  _impl_.depths_of_slide_nodes_with_depth_changes_.~RepeatedField();
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.~RepeatedField();
  _impl_.slide_nodes_for_depth_fix_up_.~RepeatedPtrField();
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.~RepeatedField();
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.~RepeatedField();
  _impl_.collapsed_state_of_slide_nodes_being_removed_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandShowRemoveSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowRemoveSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowRemoveSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slide_nodes_being_removed_.Clear();
  _impl_.removed_args_list_.Clear();
  _impl_.ids_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.depths_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.Clear();
  _impl_.slide_nodes_for_depth_fix_up_.Clear();
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.Clear();
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
  _impl_.collapsed_state_of_slide_nodes_being_removed_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowRemoveSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_being_removed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_being_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_with_depth_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_for_depth_fix_up(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_collapsed_state_of_slide_nodes_being_removed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_collapsed_state_of_slide_nodes_being_removed(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowRemoveSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowRemoveSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference slide_nodes_being_removed = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_being_removed_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes_being_removed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_of_slide_nodes_with_depth_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids_of_slide_nodes_with_depth_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_old_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_for_depth_fix_up_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes_for_depth_fix_up(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_old_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
  for (int i = 0, n = this->_internal_collapsed_state_of_slide_nodes_being_removed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_collapsed_state_of_slide_nodes_being_removed(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowRemoveSlideArchive)
  return target;
}

size_t CommandShowRemoveSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowRemoveSlideArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes_being_removed = 2;
  total_size += 1UL * this->_internal_slide_nodes_being_removed_size();
  for (const auto& msg : this->_impl_.slide_nodes_being_removed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
  total_size += 1UL * this->_internal_removed_args_list_size();
  for (const auto& msg : this->_impl_.removed_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_with_depth_changes_size();
  for (const auto& msg : this->_impl_.ids_of_slide_nodes_with_depth_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.old_depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_old_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  total_size += 1UL * this->_internal_slide_nodes_for_depth_fix_up_size();
  for (const auto& msg : this->_impl_.slide_nodes_for_depth_fix_up_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_collapsed_state_of_slide_nodes_being_removed_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_collapsed_state_of_slide_nodes_being_removed_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowRemoveSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowRemoveSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowRemoveSlideArchive::GetClassData() const { return &_class_data_; }


void CommandShowRemoveSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowRemoveSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowRemoveSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowRemoveSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slide_nodes_being_removed_.MergeFrom(from._impl_.slide_nodes_being_removed_);
  _this->_impl_.removed_args_list_.MergeFrom(from._impl_.removed_args_list_);
  _this->_impl_.ids_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.ids_of_slide_nodes_with_depth_changes_);
  _this->_impl_.depths_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.depths_of_slide_nodes_with_depth_changes_);
  _this->_impl_.old_depths_of_slide_nodes_with_depth_changes_.MergeFrom(from._impl_.old_depths_of_slide_nodes_with_depth_changes_);
  _this->_impl_.slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.slide_nodes_for_depth_fix_up_);
  _this->_impl_.depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.depths_of_slide_nodes_for_depth_fix_up_);
  _this->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from._impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
  _this->_impl_.collapsed_state_of_slide_nodes_being_removed_.MergeFrom(from._impl_.collapsed_state_of_slide_nodes_being_removed_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowRemoveSlideArchive::CopyFrom(const CommandShowRemoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowRemoveSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_being_removed_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.removed_args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ids_of_slide_nodes_with_depth_changes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_for_depth_fix_up_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveSlideArchive::InternalSwap(CommandShowRemoveSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slide_nodes_being_removed_.InternalSwap(&other->_impl_.slide_nodes_being_removed_);
  _impl_.removed_args_list_.InternalSwap(&other->_impl_.removed_args_list_);
  _impl_.ids_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.ids_of_slide_nodes_with_depth_changes_);
  _impl_.depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.depths_of_slide_nodes_with_depth_changes_);
  _impl_.old_depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->_impl_.old_depths_of_slide_nodes_with_depth_changes_);
  _impl_.slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.slide_nodes_for_depth_fix_up_);
  _impl_.depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.depths_of_slide_nodes_for_depth_fix_up_);
  _impl_.old_depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->_impl_.old_depths_of_slide_nodes_for_depth_fix_up_);
  _impl_.collapsed_state_of_slide_nodes_being_removed_.InternalSwap(&other->_impl_.collapsed_state_of_slide_nodes_being_removed_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowRemoveSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandShowChangeThemeArchive_IdentifierToStyleMap::_Internal {
 public:
};

void CommandShowChangeThemeArchive_IdentifierToStyleMap::clear_styles() {
  _impl_.styles_.Clear();
}
CommandShowChangeThemeArchive_IdentifierToStyleMap::CommandShowChangeThemeArchive_IdentifierToStyleMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
}
CommandShowChangeThemeArchive_IdentifierToStyleMap::CommandShowChangeThemeArchive_IdentifierToStyleMap(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowChangeThemeArchive_IdentifierToStyleMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.styles_){from._impl_.styles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
}

inline void CommandShowChangeThemeArchive_IdentifierToStyleMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.styles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommandShowChangeThemeArchive_IdentifierToStyleMap::~CommandShowChangeThemeArchive_IdentifierToStyleMap() {
  // @@protoc_insertion_point(destructor:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowChangeThemeArchive_IdentifierToStyleMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.styles_.~RepeatedPtrField();
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.styles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowChangeThemeArchive_IdentifierToStyleMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowChangeThemeArchive_IdentifierToStyleMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  return target;
}

size_t CommandShowChangeThemeArchive_IdentifierToStyleMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
  total_size += 1UL * this->_internal_styles_size();
  for (const auto& msg : this->_impl_.styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowChangeThemeArchive_IdentifierToStyleMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowChangeThemeArchive_IdentifierToStyleMap::GetClassData() const { return &_class_data_; }


void CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowChangeThemeArchive_IdentifierToStyleMap*>(&to_msg);
  auto& from = static_cast<const CommandShowChangeThemeArchive_IdentifierToStyleMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.styles_.MergeFrom(from._impl_.styles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::CopyFrom(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeThemeArchive_IdentifierToStyleMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.styles_))
    return false;
  return true;
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::InternalSwap(CommandShowChangeThemeArchive_IdentifierToStyleMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.styles_.InternalSwap(&other->_impl_.styles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowChangeThemeArchive_IdentifierToStyleMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandShowChangeThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowChangeThemeArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowChangeThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& show(const CommandShowChangeThemeArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& theme(const CommandShowChangeThemeArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_theme(const CommandShowChangeThemeArchive* msg);
  static void set_has_old_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_template_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_template_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& identifier_to_style_map(const CommandShowChangeThemeArchive* msg);
  static void set_has_identifier_to_style_map(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& old_identifier_to_style_map(const CommandShowChangeThemeArchive* msg);
  static void set_has_old_identifier_to_style_map(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowChangeThemeArchive::_Internal::super(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::show(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::theme(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::old_theme(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.old_theme_;
}
const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap&
CommandShowChangeThemeArchive::_Internal::identifier_to_style_map(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.identifier_to_style_map_;
}
const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap&
CommandShowChangeThemeArchive::_Internal::old_identifier_to_style_map(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.old_identifier_to_style_map_;
}
void CommandShowChangeThemeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowChangeThemeArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandShowChangeThemeArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandShowChangeThemeArchive::clear_old_theme() {
  if (_impl_.old_theme_ != nullptr) _impl_.old_theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowChangeThemeArchive)
}
CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(const CommandShowChangeThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowChangeThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_identifier_){}
    , decltype(_impl_.old_template_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_theme_){nullptr}
    , decltype(_impl_.identifier_to_style_map_){nullptr}
    , decltype(_impl_.old_identifier_to_style_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_identifier()) {
    _this->_impl_.template_identifier_.Set(from._internal_template_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_template_identifier()) {
    _this->_impl_.old_template_identifier_.Set(from._internal_old_template_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_old_theme()) {
    _this->_impl_.old_theme_ = new ::TSP::Reference(*from._impl_.old_theme_);
  }
  if (from._internal_has_identifier_to_style_map()) {
    _this->_impl_.identifier_to_style_map_ = new ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap(*from._impl_.identifier_to_style_map_);
  }
  if (from._internal_has_old_identifier_to_style_map()) {
    _this->_impl_.old_identifier_to_style_map_ = new ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap(*from._impl_.old_identifier_to_style_map_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowChangeThemeArchive)
}

inline void CommandShowChangeThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_identifier_){}
    , decltype(_impl_.old_template_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_theme_){nullptr}
    , decltype(_impl_.identifier_to_style_map_){nullptr}
    , decltype(_impl_.old_identifier_to_style_map_){nullptr}
  };
  _impl_.template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandShowChangeThemeArchive::~CommandShowChangeThemeArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowChangeThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowChangeThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.template_identifier_.Destroy();
  _impl_.old_template_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.old_theme_;
  if (this != internal_default_instance()) delete _impl_.identifier_to_style_map_;
  if (this != internal_default_instance()) delete _impl_.old_identifier_to_style_map_;
}

void CommandShowChangeThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowChangeThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowChangeThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.template_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.old_template_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.old_theme_ != nullptr);
      _impl_.old_theme_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.identifier_to_style_map_ != nullptr);
      _impl_.identifier_to_style_map_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.old_identifier_to_style_map_ != nullptr);
      _impl_.old_identifier_to_style_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowChangeThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_theme = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_template_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandShowChangeThemeArchive.template_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string old_template_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_old_template_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandShowChangeThemeArchive.old_template_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_to_style_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_identifier_to_style_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowChangeThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowChangeThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_theme = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_theme(this),
        _Internal::old_theme(this).GetCachedSize(), target, stream);
  }

  // optional string template_identifier = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_identifier().data(), static_cast<int>(this->_internal_template_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowChangeThemeArchive.template_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_template_identifier(), target);
  }

  // optional string old_template_identifier = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_template_identifier().data(), static_cast<int>(this->_internal_old_template_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowChangeThemeArchive.old_template_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_old_template_identifier(), target);
  }

  // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::identifier_to_style_map(this),
        _Internal::identifier_to_style_map(this).GetCachedSize(), target, stream);
  }

  // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::old_identifier_to_style_map(this),
        _Internal::old_identifier_to_style_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowChangeThemeArchive)
  return target;
}

size_t CommandShowChangeThemeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowChangeThemeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  return total_size;
}
size_t CommandShowChangeThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowChangeThemeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSP.Reference theme = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string template_identifier = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_identifier());
    }

    // optional string old_template_identifier = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_template_identifier());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference old_theme = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_theme_);
    }

    // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.identifier_to_style_map_);
    }

    // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_identifier_to_style_map_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowChangeThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowChangeThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowChangeThemeArchive::GetClassData() const { return &_class_data_; }


void CommandShowChangeThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowChangeThemeArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowChangeThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowChangeThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_template_identifier(from._internal_template_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_old_template_identifier(from._internal_old_template_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_old_theme()->::TSP::Reference::MergeFrom(
          from._internal_old_theme());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_identifier_to_style_map()->::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeFrom(
          from._internal_identifier_to_style_map());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_old_identifier_to_style_map()->::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeFrom(
          from._internal_old_identifier_to_style_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowChangeThemeArchive::CopyFrom(const CommandShowChangeThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowChangeThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_old_theme()) {
    if (!_impl_.old_theme_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_to_style_map()) {
    if (!_impl_.identifier_to_style_map_->IsInitialized()) return false;
  }
  if (_internal_has_old_identifier_to_style_map()) {
    if (!_impl_.old_identifier_to_style_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowChangeThemeArchive::InternalSwap(CommandShowChangeThemeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.template_identifier_, lhs_arena,
      &other->_impl_.template_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_template_identifier_, lhs_arena,
      &other->_impl_.old_template_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowChangeThemeArchive, _impl_.old_identifier_to_style_map_)
      + sizeof(CommandShowChangeThemeArchive::_impl_.old_identifier_to_style_map_)
      - PROTOBUF_FIELD_OFFSET(CommandShowChangeThemeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowChangeThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandShowChangeSlideSizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowChangeSlideSizeArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowChangeSlideSizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& size(const CommandShowChangeSlideSizeArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowChangeSlideSizeArchive::_Internal::super(const CommandShowChangeSlideSizeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Size&
CommandShowChangeSlideSizeArchive::_Internal::size(const CommandShowChangeSlideSizeArchive* msg) {
  return *msg->_impl_.size_;
}
void CommandShowChangeSlideSizeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowChangeSlideSizeArchive::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandShowChangeSlideSizeArchive::CommandShowChangeSlideSizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowChangeSlideSizeArchive)
}
CommandShowChangeSlideSizeArchive::CommandShowChangeSlideSizeArchive(const CommandShowChangeSlideSizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowChangeSlideSizeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::TSP::Size(*from._impl_.size_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowChangeSlideSizeArchive)
}

inline void CommandShowChangeSlideSizeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.size_){nullptr}
  };
}

CommandShowChangeSlideSizeArchive::~CommandShowChangeSlideSizeArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowChangeSlideSizeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowChangeSlideSizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void CommandShowChangeSlideSizeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowChangeSlideSizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowChangeSlideSizeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowChangeSlideSizeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowChangeSlideSizeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowChangeSlideSizeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowChangeSlideSizeArchive)
  return target;
}

size_t CommandShowChangeSlideSizeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowChangeSlideSizeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_size()) {
    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  return total_size;
}
size_t CommandShowChangeSlideSizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowChangeSlideSizeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowChangeSlideSizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowChangeSlideSizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowChangeSlideSizeArchive::GetClassData() const { return &_class_data_; }


void CommandShowChangeSlideSizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowChangeSlideSizeArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowChangeSlideSizeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowChangeSlideSizeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_size()->::TSP::Size::MergeFrom(
          from._internal_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowChangeSlideSizeArchive::CopyFrom(const CommandShowChangeSlideSizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowChangeSlideSizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeSlideSizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!_impl_.size_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowChangeSlideSizeArchive::InternalSwap(CommandShowChangeSlideSizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowChangeSlideSizeArchive, _impl_.size_)
      + sizeof(CommandShowChangeSlideSizeArchive::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(CommandShowChangeSlideSizeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowChangeSlideSizeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandSetThemeCustomEffectTimingCurveArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetThemeCustomEffectTimingCurveArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetThemeCustomEffectTimingCurveArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg);
  static void set_has_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::PathSourceArchive& old_path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg);
  static void set_has_old_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetThemeCustomEffectTimingCurveArchive::_Internal::super(const CommandSetThemeCustomEffectTimingCurveArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::PathSourceArchive&
CommandSetThemeCustomEffectTimingCurveArchive::_Internal::path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg) {
  return *msg->_impl_.path_source_;
}
const ::TSD::PathSourceArchive&
CommandSetThemeCustomEffectTimingCurveArchive::_Internal::old_path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg) {
  return *msg->_impl_.old_path_source_;
}
void CommandSetThemeCustomEffectTimingCurveArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetThemeCustomEffectTimingCurveArchive::clear_path_source() {
  if (_impl_.path_source_ != nullptr) _impl_.path_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetThemeCustomEffectTimingCurveArchive::clear_old_path_source() {
  if (_impl_.old_path_source_ != nullptr) _impl_.old_path_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSetThemeCustomEffectTimingCurveArchive::CommandSetThemeCustomEffectTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSetThemeCustomEffectTimingCurveArchive)
}
CommandSetThemeCustomEffectTimingCurveArchive::CommandSetThemeCustomEffectTimingCurveArchive(const CommandSetThemeCustomEffectTimingCurveArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetThemeCustomEffectTimingCurveArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.path_source_){nullptr}
    , decltype(_impl_.old_path_source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_path_source()) {
    _this->_impl_.path_source_ = new ::TSD::PathSourceArchive(*from._impl_.path_source_);
  }
  if (from._internal_has_old_path_source()) {
    _this->_impl_.old_path_source_ = new ::TSD::PathSourceArchive(*from._impl_.old_path_source_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSetThemeCustomEffectTimingCurveArchive)
}

inline void CommandSetThemeCustomEffectTimingCurveArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.path_source_){nullptr}
    , decltype(_impl_.old_path_source_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetThemeCustomEffectTimingCurveArchive::~CommandSetThemeCustomEffectTimingCurveArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetThemeCustomEffectTimingCurveArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.path_source_;
  if (this != internal_default_instance()) delete _impl_.old_path_source_;
}

void CommandSetThemeCustomEffectTimingCurveArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetThemeCustomEffectTimingCurveArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.path_source_ != nullptr);
      _impl_.path_source_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_path_source_ != nullptr);
      _impl_.old_path_source_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetThemeCustomEffectTimingCurveArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandSetThemeCustomEffectTimingCurveArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive path_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive old_path_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_path_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetThemeCustomEffectTimingCurveArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSetThemeCustomEffectTimingCurveArchive.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .TSD.PathSourceArchive path_source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::path_source(this),
        _Internal::path_source(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive old_path_source = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_path_source(this),
        _Internal::old_path_source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  return target;
}

size_t CommandSetThemeCustomEffectTimingCurveArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional .TSD.PathSourceArchive path_source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_source_);
    }

    // optional .TSD.PathSourceArchive old_path_source = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_path_source_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetThemeCustomEffectTimingCurveArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetThemeCustomEffectTimingCurveArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetThemeCustomEffectTimingCurveArchive::GetClassData() const { return &_class_data_; }


void CommandSetThemeCustomEffectTimingCurveArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetThemeCustomEffectTimingCurveArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetThemeCustomEffectTimingCurveArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_path_source()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_path_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_path_source()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_old_path_source());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetThemeCustomEffectTimingCurveArchive::CopyFrom(const CommandSetThemeCustomEffectTimingCurveArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetThemeCustomEffectTimingCurveArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_path_source()) {
    if (!_impl_.path_source_->IsInitialized()) return false;
  }
  if (_internal_has_old_path_source()) {
    if (!_impl_.old_path_source_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetThemeCustomEffectTimingCurveArchive::InternalSwap(CommandSetThemeCustomEffectTimingCurveArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetThemeCustomEffectTimingCurveArchive, _impl_.old_path_source_)
      + sizeof(CommandSetThemeCustomEffectTimingCurveArchive::_impl_.old_path_source_)
      - PROTOBUF_FIELD_OFFSET(CommandSetThemeCustomEffectTimingCurveArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetThemeCustomEffectTimingCurveArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandMoveTemplatesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveTemplatesArchive>()._impl_._has_bits_);
  static const ::TSD::ContainerReorderChildrenCommandArchive& super(const CommandMoveTemplatesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerReorderChildrenCommandArchive&
CommandMoveTemplatesArchive::_Internal::super(const CommandMoveTemplatesArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandMoveTemplatesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandMoveTemplatesArchive::clear_template_slides() {
  _impl_.template_slides_.Clear();
}
void CommandMoveTemplatesArchive::clear_previous_indexes_keys() {
  _impl_.previous_indexes_keys_.Clear();
}
void CommandMoveTemplatesArchive::clear_final_template_arrangement() {
  _impl_.final_template_arrangement_.Clear();
}
CommandMoveTemplatesArchive::CommandMoveTemplatesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandMoveTemplatesArchive)
}
CommandMoveTemplatesArchive::CommandMoveTemplatesArchive(const CommandMoveTemplatesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMoveTemplatesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_slides_){from._impl_.template_slides_}
    , decltype(_impl_.previous_indexes_keys_){from._impl_.previous_indexes_keys_}
    , decltype(_impl_.previous_indexes_values_){from._impl_.previous_indexes_values_}
    , decltype(_impl_.final_template_arrangement_){from._impl_.final_template_arrangement_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ContainerReorderChildrenCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandMoveTemplatesArchive)
}

inline void CommandMoveTemplatesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_slides_){arena}
    , decltype(_impl_.previous_indexes_keys_){arena}
    , decltype(_impl_.previous_indexes_values_){arena}
    , decltype(_impl_.final_template_arrangement_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandMoveTemplatesArchive::~CommandMoveTemplatesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMoveTemplatesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMoveTemplatesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.template_slides_.~RepeatedPtrField();
  _impl_.previous_indexes_keys_.~RepeatedPtrField();
  _impl_.previous_indexes_values_.~RepeatedField();
  _impl_.final_template_arrangement_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandMoveTemplatesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMoveTemplatesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMoveTemplatesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.template_slides_.Clear();
  _impl_.previous_indexes_keys_.Clear();
  _impl_.previous_indexes_values_.Clear();
  _impl_.final_template_arrangement_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveTemplatesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerReorderChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_indexes_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_indexes_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 previous_indexes_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_previous_indexes_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_previous_indexes_values(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference final_template_arrangement = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_final_template_arrangement(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMoveTemplatesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMoveTemplatesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ContainerReorderChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference template_slides = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_template_slides_size()); i < n; i++) {
    const auto& repfield = this->_internal_template_slides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_previous_indexes_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_previous_indexes_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 previous_indexes_values = 5;
  for (int i = 0, n = this->_internal_previous_indexes_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_previous_indexes_values(i), target);
  }

  // repeated .TSP.Reference final_template_arrangement = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_final_template_arrangement_size()); i < n; i++) {
    const auto& repfield = this->_internal_final_template_arrangement(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMoveTemplatesArchive)
  return target;
}

size_t CommandMoveTemplatesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMoveTemplatesArchive)
  size_t total_size = 0;

  // required .TSD.ContainerReorderChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference template_slides = 3;
  total_size += 1UL * this->_internal_template_slides_size();
  for (const auto& msg : this->_impl_.template_slides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  total_size += 1UL * this->_internal_previous_indexes_keys_size();
  for (const auto& msg : this->_impl_.previous_indexes_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 previous_indexes_values = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.previous_indexes_values_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_previous_indexes_values_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference final_template_arrangement = 6;
  total_size += 1UL * this->_internal_final_template_arrangement_size();
  for (const auto& msg : this->_impl_.final_template_arrangement_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveTemplatesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMoveTemplatesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveTemplatesArchive::GetClassData() const { return &_class_data_; }


void CommandMoveTemplatesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMoveTemplatesArchive*>(&to_msg);
  auto& from = static_cast<const CommandMoveTemplatesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMoveTemplatesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.template_slides_.MergeFrom(from._impl_.template_slides_);
  _this->_impl_.previous_indexes_keys_.MergeFrom(from._impl_.previous_indexes_keys_);
  _this->_impl_.previous_indexes_values_.MergeFrom(from._impl_.previous_indexes_values_);
  _this->_impl_.final_template_arrangement_.MergeFrom(from._impl_.final_template_arrangement_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::ContainerReorderChildrenCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveTemplatesArchive::CopyFrom(const CommandMoveTemplatesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMoveTemplatesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveTemplatesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.template_slides_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.previous_indexes_keys_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.final_template_arrangement_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveTemplatesArchive::InternalSwap(CommandMoveTemplatesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.template_slides_.InternalSwap(&other->_impl_.template_slides_);
  _impl_.previous_indexes_keys_.InternalSwap(&other->_impl_.previous_indexes_keys_);
  _impl_.previous_indexes_values_.InternalSwap(&other->_impl_.previous_indexes_values_);
  _impl_.final_template_arrangement_.InternalSwap(&other->_impl_.final_template_arrangement_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveTemplatesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandInsertTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInsertTemplateArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInsertTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_set_inserted_slide_as_default_template_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_replacement_template_slide_node(const CommandInsertTemplateArchive* msg);
  static void set_has_undo_replacement_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInsertTemplateArchive::_Internal::super(const CommandInsertTemplateArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandInsertTemplateArchive::_Internal::undo_replacement_template_slide_node(const CommandInsertTemplateArchive* msg) {
  return *msg->_impl_.undo_replacement_template_slide_node_;
}
void CommandInsertTemplateArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandInsertTemplateArchive::clear_undo_template_change_commands() {
  _impl_.undo_template_change_commands_.Clear();
}
void CommandInsertTemplateArchive::clear_undo_replacement_template_slide_node() {
  if (_impl_.undo_replacement_template_slide_node_ != nullptr) _impl_.undo_replacement_template_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandInsertTemplateArchive::CommandInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandInsertTemplateArchive)
}
CommandInsertTemplateArchive::CommandInsertTemplateArchive(const CommandInsertTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandInsertTemplateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_template_change_commands_){from._impl_.undo_template_change_commands_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undo_replacement_template_slide_node_){nullptr}
    , decltype(_impl_.set_inserted_slide_as_default_template_slide_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_undo_replacement_template_slide_node()) {
    _this->_impl_.undo_replacement_template_slide_node_ = new ::TSP::Reference(*from._impl_.undo_replacement_template_slide_node_);
  }
  _this->_impl_.set_inserted_slide_as_default_template_slide_ = from._impl_.set_inserted_slide_as_default_template_slide_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandInsertTemplateArchive)
}

inline void CommandInsertTemplateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_template_change_commands_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undo_replacement_template_slide_node_){nullptr}
    , decltype(_impl_.set_inserted_slide_as_default_template_slide_){false}
  };
}

CommandInsertTemplateArchive::~CommandInsertTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandInsertTemplateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandInsertTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.undo_template_change_commands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.undo_replacement_template_slide_node_;
}

void CommandInsertTemplateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandInsertTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandInsertTemplateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.undo_template_change_commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.undo_replacement_template_slide_node_ != nullptr);
      _impl_.undo_replacement_template_slide_node_->Clear();
    }
  }
  _impl_.set_inserted_slide_as_default_template_slide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInsertTemplateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference undo_template_change_commands = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_template_change_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool set_inserted_slide_as_default_template_slide = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_set_inserted_slide_as_default_template_slide(&has_bits);
          _impl_.set_inserted_slide_as_default_template_slide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_replacement_template_slide_node = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_replacement_template_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandInsertTemplateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandInsertTemplateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference undo_template_change_commands = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_template_change_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_template_change_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool set_inserted_slide_as_default_template_slide = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_set_inserted_slide_as_default_template_slide(), target);
  }

  // optional .TSP.Reference undo_replacement_template_slide_node = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::undo_replacement_template_slide_node(this),
        _Internal::undo_replacement_template_slide_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandInsertTemplateArchive)
  return target;
}

size_t CommandInsertTemplateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandInsertTemplateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_set_inserted_slide_as_default_template_slide()) {
    // required bool set_inserted_slide_as_default_template_slide = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandInsertTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandInsertTemplateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool set_inserted_slide_as_default_template_slide = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference undo_template_change_commands = 7;
  total_size += 1UL * this->_internal_undo_template_change_commands_size();
  for (const auto& msg : this->_impl_.undo_template_change_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference undo_replacement_template_slide_node = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_replacement_template_slide_node_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInsertTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandInsertTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInsertTemplateArchive::GetClassData() const { return &_class_data_; }


void CommandInsertTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandInsertTemplateArchive*>(&to_msg);
  auto& from = static_cast<const CommandInsertTemplateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandInsertTemplateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.undo_template_change_commands_.MergeFrom(from._impl_.undo_template_change_commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_undo_replacement_template_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_undo_replacement_template_slide_node());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.set_inserted_slide_as_default_template_slide_ = from._impl_.set_inserted_slide_as_default_template_slide_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInsertTemplateArchive::CopyFrom(const CommandInsertTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandInsertTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_template_change_commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_replacement_template_slide_node()) {
    if (!_impl_.undo_replacement_template_slide_node_->IsInitialized()) return false;
  }
  return true;
}

void CommandInsertTemplateArchive::InternalSwap(CommandInsertTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.undo_template_change_commands_.InternalSwap(&other->_impl_.undo_template_change_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandInsertTemplateArchive, _impl_.set_inserted_slide_as_default_template_slide_)
      + sizeof(CommandInsertTemplateArchive::_impl_.set_inserted_slide_as_default_template_slide_)
      - PROTOBUF_FIELD_OFFSET(CommandInsertTemplateArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInsertTemplateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandPrimitiveInsertTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPrimitiveInsertTemplateArchive>()._impl_._has_bits_);
  static const ::TSD::ContainerInsertChildrenCommandArchive& super(const CommandPrimitiveInsertTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_was_inserted_with_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::ContainerInsertChildrenCommandArchive&
CommandPrimitiveInsertTemplateArchive::_Internal::super(const CommandPrimitiveInsertTemplateArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandPrimitiveInsertTemplateArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandPrimitiveInsertTemplateArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
void CommandPrimitiveInsertTemplateArchive::clear_previous_classic_theme_records() {
  _impl_.previous_classic_theme_records_.Clear();
}
CommandPrimitiveInsertTemplateArchive::CommandPrimitiveInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandPrimitiveInsertTemplateArchive)
}
CommandPrimitiveInsertTemplateArchive::CommandPrimitiveInsertTemplateArchive(const CommandPrimitiveInsertTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPrimitiveInsertTemplateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.previous_classic_theme_records_){from._impl_.previous_classic_theme_records_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.was_inserted_with_drop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ContainerInsertChildrenCommandArchive(*from._impl_.super_);
  }
  _this->_impl_.was_inserted_with_drop_ = from._impl_.was_inserted_with_drop_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandPrimitiveInsertTemplateArchive)
}

inline void CommandPrimitiveInsertTemplateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.previous_classic_theme_records_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.was_inserted_with_drop_){false}
  };
}

CommandPrimitiveInsertTemplateArchive::~CommandPrimitiveInsertTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandPrimitiveInsertTemplateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPrimitiveInsertTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_format_keys_.~RepeatedPtrField();
  _impl_.previous_classic_theme_records_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandPrimitiveInsertTemplateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPrimitiveInsertTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandPrimitiveInsertTemplateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_format_keys_.Clear();
  _impl_.previous_classic_theme_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.was_inserted_with_drop_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPrimitiveInsertTemplateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool was_inserted_with_drop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_was_inserted_with_drop(&has_bits);
          _impl_.was_inserted_with_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_classic_theme_records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_classic_theme_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPrimitiveInsertTemplateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandPrimitiveInsertTemplateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool was_inserted_with_drop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_was_inserted_with_drop(), target);
  }

  // repeated .TSP.UUID custom_format_keys = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference previous_classic_theme_records = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_previous_classic_theme_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_previous_classic_theme_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandPrimitiveInsertTemplateArchive)
  return target;
}

size_t CommandPrimitiveInsertTemplateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandPrimitiveInsertTemplateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_was_inserted_with_drop()) {
    // required bool was_inserted_with_drop = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandPrimitiveInsertTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandPrimitiveInsertTemplateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool was_inserted_with_drop = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 3;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference previous_classic_theme_records = 4;
  total_size += 1UL * this->_internal_previous_classic_theme_records_size();
  for (const auto& msg : this->_impl_.previous_classic_theme_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPrimitiveInsertTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPrimitiveInsertTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPrimitiveInsertTemplateArchive::GetClassData() const { return &_class_data_; }


void CommandPrimitiveInsertTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPrimitiveInsertTemplateArchive*>(&to_msg);
  auto& from = static_cast<const CommandPrimitiveInsertTemplateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandPrimitiveInsertTemplateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  _this->_impl_.previous_classic_theme_records_.MergeFrom(from._impl_.previous_classic_theme_records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::ContainerInsertChildrenCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.was_inserted_with_drop_ = from._impl_.was_inserted_with_drop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPrimitiveInsertTemplateArchive::CopyFrom(const CommandPrimitiveInsertTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandPrimitiveInsertTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPrimitiveInsertTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.previous_classic_theme_records_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandPrimitiveInsertTemplateArchive::InternalSwap(CommandPrimitiveInsertTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  _impl_.previous_classic_theme_records_.InternalSwap(&other->_impl_.previous_classic_theme_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPrimitiveInsertTemplateArchive, _impl_.was_inserted_with_drop_)
      + sizeof(CommandPrimitiveInsertTemplateArchive::_impl_.was_inserted_with_drop_)
      - PROTOBUF_FIELD_OFFSET(CommandPrimitiveInsertTemplateArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPrimitiveInsertTemplateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[26]);
}

// ===================================================================

class CommandRemoveTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRemoveTemplateArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandRemoveTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& replacement_template_slide_node(const CommandRemoveTemplateArchive* msg);
  static void set_has_replacement_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_template_slide_node_was_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandRemoveTemplateArchive::_Internal::super(const CommandRemoveTemplateArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandRemoveTemplateArchive::_Internal::replacement_template_slide_node(const CommandRemoveTemplateArchive* msg) {
  return *msg->_impl_.replacement_template_slide_node_;
}
void CommandRemoveTemplateArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandRemoveTemplateArchive::clear_replacement_template_slide_node() {
  if (_impl_.replacement_template_slide_node_ != nullptr) _impl_.replacement_template_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandRemoveTemplateArchive::clear_template_change_commands() {
  _impl_.template_change_commands_.Clear();
}
CommandRemoveTemplateArchive::CommandRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandRemoveTemplateArchive)
}
CommandRemoveTemplateArchive::CommandRemoveTemplateArchive(const CommandRemoveTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRemoveTemplateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_change_commands_){from._impl_.template_change_commands_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.replacement_template_slide_node_){nullptr}
    , decltype(_impl_.default_template_slide_node_was_replaced_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_replacement_template_slide_node()) {
    _this->_impl_.replacement_template_slide_node_ = new ::TSP::Reference(*from._impl_.replacement_template_slide_node_);
  }
  _this->_impl_.default_template_slide_node_was_replaced_ = from._impl_.default_template_slide_node_was_replaced_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandRemoveTemplateArchive)
}

inline void CommandRemoveTemplateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_change_commands_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.replacement_template_slide_node_){nullptr}
    , decltype(_impl_.default_template_slide_node_was_replaced_){false}
  };
}

CommandRemoveTemplateArchive::~CommandRemoveTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandRemoveTemplateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRemoveTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.template_change_commands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.replacement_template_slide_node_;
}

void CommandRemoveTemplateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRemoveTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandRemoveTemplateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.template_change_commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.replacement_template_slide_node_ != nullptr);
      _impl_.replacement_template_slide_node_->Clear();
    }
  }
  _impl_.default_template_slide_node_was_replaced_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRemoveTemplateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference replacement_template_slide_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_template_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_change_commands = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_change_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool default_template_slide_node_was_replaced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_default_template_slide_node_was_replaced(&has_bits);
          _impl_.default_template_slide_node_was_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRemoveTemplateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandRemoveTemplateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference replacement_template_slide_node = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::replacement_template_slide_node(this),
        _Internal::replacement_template_slide_node(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference template_change_commands = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_template_change_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_template_change_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool default_template_slide_node_was_replaced = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_default_template_slide_node_was_replaced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandRemoveTemplateArchive)
  return target;
}

size_t CommandRemoveTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandRemoveTemplateArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference template_change_commands = 6;
  total_size += 1UL * this->_internal_template_change_commands_size();
  for (const auto& msg : this->_impl_.template_change_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference replacement_template_slide_node = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.replacement_template_slide_node_);
    }

    // optional bool default_template_slide_node_was_replaced = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRemoveTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRemoveTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRemoveTemplateArchive::GetClassData() const { return &_class_data_; }


void CommandRemoveTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRemoveTemplateArchive*>(&to_msg);
  auto& from = static_cast<const CommandRemoveTemplateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandRemoveTemplateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.template_change_commands_.MergeFrom(from._impl_.template_change_commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_replacement_template_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_replacement_template_slide_node());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.default_template_slide_node_was_replaced_ = from._impl_.default_template_slide_node_was_replaced_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRemoveTemplateArchive::CopyFrom(const CommandRemoveTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandRemoveTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.template_change_commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_template_slide_node()) {
    if (!_impl_.replacement_template_slide_node_->IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveTemplateArchive::InternalSwap(CommandRemoveTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.template_change_commands_.InternalSwap(&other->_impl_.template_change_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRemoveTemplateArchive, _impl_.default_template_slide_node_was_replaced_)
      + sizeof(CommandRemoveTemplateArchive::_impl_.default_template_slide_node_was_replaced_)
      - PROTOBUF_FIELD_OFFSET(CommandRemoveTemplateArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRemoveTemplateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandPrimitiveRemoveTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPrimitiveRemoveTemplateArchive>()._impl_._has_bits_);
  static const ::TSD::ContainerRemoveChildrenCommandArchive& super(const CommandPrimitiveRemoveTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerRemoveChildrenCommandArchive&
CommandPrimitiveRemoveTemplateArchive::_Internal::super(const CommandPrimitiveRemoveTemplateArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandPrimitiveRemoveTemplateArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandPrimitiveRemoveTemplateArchive::clear_previous_classic_theme_records() {
  _impl_.previous_classic_theme_records_.Clear();
}
CommandPrimitiveRemoveTemplateArchive::CommandPrimitiveRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandPrimitiveRemoveTemplateArchive)
}
CommandPrimitiveRemoveTemplateArchive::CommandPrimitiveRemoveTemplateArchive(const CommandPrimitiveRemoveTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPrimitiveRemoveTemplateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.previous_classic_theme_records_){from._impl_.previous_classic_theme_records_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ContainerRemoveChildrenCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandPrimitiveRemoveTemplateArchive)
}

inline void CommandPrimitiveRemoveTemplateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.previous_classic_theme_records_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandPrimitiveRemoveTemplateArchive::~CommandPrimitiveRemoveTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandPrimitiveRemoveTemplateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPrimitiveRemoveTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.previous_classic_theme_records_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandPrimitiveRemoveTemplateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPrimitiveRemoveTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandPrimitiveRemoveTemplateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.previous_classic_theme_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPrimitiveRemoveTemplateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_classic_theme_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_classic_theme_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPrimitiveRemoveTemplateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandPrimitiveRemoveTemplateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference previous_classic_theme_records = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_previous_classic_theme_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_previous_classic_theme_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandPrimitiveRemoveTemplateArchive)
  return target;
}

size_t CommandPrimitiveRemoveTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandPrimitiveRemoveTemplateArchive)
  size_t total_size = 0;

  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference previous_classic_theme_records = 3;
  total_size += 1UL * this->_internal_previous_classic_theme_records_size();
  for (const auto& msg : this->_impl_.previous_classic_theme_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPrimitiveRemoveTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPrimitiveRemoveTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPrimitiveRemoveTemplateArchive::GetClassData() const { return &_class_data_; }


void CommandPrimitiveRemoveTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPrimitiveRemoveTemplateArchive*>(&to_msg);
  auto& from = static_cast<const CommandPrimitiveRemoveTemplateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandPrimitiveRemoveTemplateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.previous_classic_theme_records_.MergeFrom(from._impl_.previous_classic_theme_records_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::ContainerRemoveChildrenCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPrimitiveRemoveTemplateArchive::CopyFrom(const CommandPrimitiveRemoveTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandPrimitiveRemoveTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPrimitiveRemoveTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.previous_classic_theme_records_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandPrimitiveRemoveTemplateArchive::InternalSwap(CommandPrimitiveRemoveTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.previous_classic_theme_records_.InternalSwap(&other->_impl_.previous_classic_theme_records_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPrimitiveRemoveTemplateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandSlideInsertBuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertBuildArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertBuildArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& insert_build_description(const CommandSlideInsertBuildArchive* msg);
  static void set_has_insert_build_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildArchive* msg);
  static void set_has_identifier_for_chunk_to_insert_after(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_should_create_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_was_initialized_over_the_wire(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_been_committed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertBuildArchive::_Internal::super(const CommandSlideInsertBuildArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideInsertBuildArchive::_Internal::insert_build_description(const CommandSlideInsertBuildArchive* msg) {
  return *msg->_impl_.insert_build_description_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideInsertBuildArchive::_Internal::identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildArchive* msg) {
  return *msg->_impl_.identifier_for_chunk_to_insert_after_;
}
void CommandSlideInsertBuildArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertBuildArchive::clear_insert_build_description() {
  if (_impl_.insert_build_description_ != nullptr) _impl_.insert_build_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertBuildArchive::clear_identifier_for_chunk_to_insert_after() {
  if (_impl_.identifier_for_chunk_to_insert_after_ != nullptr) _impl_.identifier_for_chunk_to_insert_after_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideInsertBuildArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertBuildArchive)
}
CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(const CommandSlideInsertBuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideInsertBuildArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.insert_build_description_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_insert_after_){nullptr}
    , decltype(_impl_.should_create_chunks_){}
    , decltype(_impl_.was_initialized_over_the_wire_){}
    , decltype(_impl_.has_been_committed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_insert_build_description()) {
    _this->_impl_.insert_build_description_ = new ::TSP::Reference(*from._impl_.insert_build_description_);
  }
  if (from._internal_has_identifier_for_chunk_to_insert_after()) {
    _this->_impl_.identifier_for_chunk_to_insert_after_ = new ::KN::BuildChunkIdentifierArchive(*from._impl_.identifier_for_chunk_to_insert_after_);
  }
  ::memcpy(&_impl_.should_create_chunks_, &from._impl_.should_create_chunks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_been_committed_) -
    reinterpret_cast<char*>(&_impl_.should_create_chunks_)) + sizeof(_impl_.has_been_committed_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertBuildArchive)
}

inline void CommandSlideInsertBuildArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.insert_build_description_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_insert_after_){nullptr}
    , decltype(_impl_.should_create_chunks_){false}
    , decltype(_impl_.was_initialized_over_the_wire_){false}
    , decltype(_impl_.has_been_committed_){false}
  };
}

CommandSlideInsertBuildArchive::~CommandSlideInsertBuildArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertBuildArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideInsertBuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.insert_build_description_;
  if (this != internal_default_instance()) delete _impl_.identifier_for_chunk_to_insert_after_;
}

void CommandSlideInsertBuildArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideInsertBuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertBuildArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_tuples_to_update_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.insert_build_description_ != nullptr);
      _impl_.insert_build_description_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.identifier_for_chunk_to_insert_after_ != nullptr);
      _impl_.identifier_for_chunk_to_insert_after_->Clear();
    }
  }
  ::memset(&_impl_.should_create_chunks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_been_committed_) -
      reinterpret_cast<char*>(&_impl_.should_create_chunks_)) + sizeof(_impl_.has_been_committed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertBuildArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference insert_build_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_build_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_insert_after(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_create_chunks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_should_create_chunks(&has_bits);
          _impl_.should_create_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool was_initialized_over_the_wire = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_was_initialized_over_the_wire(&has_bits);
          _impl_.was_initialized_over_the_wire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_been_committed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_has_been_committed(&has_bits);
          _impl_.has_been_committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideInsertBuildArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertBuildArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference insert_build_description = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::insert_build_description(this),
        _Internal::insert_build_description(this).GetCachedSize(), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::identifier_for_chunk_to_insert_after(this),
        _Internal::identifier_for_chunk_to_insert_after(this).GetCachedSize(), target, stream);
  }

  // optional bool should_create_chunks = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_should_create_chunks(), target);
  }

  // repeated .TSP.Reference old_tuples_to_update = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool was_initialized_over_the_wire = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_was_initialized_over_the_wire(), target);
  }

  // optional bool has_been_committed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_been_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertBuildArchive)
  return target;
}

size_t CommandSlideInsertBuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertBuildArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_insert_build_description()) {
    // required .TSP.Reference insert_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_build_description_);
  }

  return total_size;
}
size_t CommandSlideInsertBuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertBuildArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference insert_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_build_description_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference old_tuples_to_update = 5;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.identifier_for_chunk_to_insert_after_);
    }

    // optional bool should_create_chunks = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool was_initialized_over_the_wire = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_been_committed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertBuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideInsertBuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertBuildArchive::GetClassData() const { return &_class_data_; }


void CommandSlideInsertBuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideInsertBuildArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideInsertBuildArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertBuildArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_insert_build_description()->::TSP::Reference::MergeFrom(
          from._internal_insert_build_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_identifier_for_chunk_to_insert_after()->::KN::BuildChunkIdentifierArchive::MergeFrom(
          from._internal_identifier_for_chunk_to_insert_after());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.should_create_chunks_ = from._impl_.should_create_chunks_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.was_initialized_over_the_wire_ = from._impl_.was_initialized_over_the_wire_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.has_been_committed_ = from._impl_.has_been_committed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertBuildArchive::CopyFrom(const CommandSlideInsertBuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertBuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_insert_build_description()) {
    if (!_impl_.insert_build_description_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_insert_after()) {
    if (!_impl_.identifier_for_chunk_to_insert_after_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildArchive::InternalSwap(CommandSlideInsertBuildArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildArchive, _impl_.has_been_committed_)
      + sizeof(CommandSlideInsertBuildArchive::_impl_.has_been_committed_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertBuildArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[29]);
}

// ===================================================================

class InsertBuildDescriptionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertBuildDescriptionArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& slide_id(const InsertBuildDescriptionArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& build_to_insert(const InsertBuildDescriptionArchive* msg);
  static void set_has_build_to_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_assign_chunk_identifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_for_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
InsertBuildDescriptionArchive::_Internal::slide_id(const InsertBuildDescriptionArchive* msg) {
  return *msg->_impl_.slide_id_;
}
const ::TSP::Reference&
InsertBuildDescriptionArchive::_Internal::build_to_insert(const InsertBuildDescriptionArchive* msg) {
  return *msg->_impl_.build_to_insert_;
}
void InsertBuildDescriptionArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InsertBuildDescriptionArchive::clear_build_to_insert() {
  if (_impl_.build_to_insert_ != nullptr) _impl_.build_to_insert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InsertBuildDescriptionArchive::clear_chunks_to_insert() {
  _impl_.chunks_to_insert_.Clear();
}
void InsertBuildDescriptionArchive::clear_identifers_for_chunks_to_insert_after() {
  _impl_.identifers_for_chunks_to_insert_after_.Clear();
}
void InsertBuildDescriptionArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void InsertBuildDescriptionArchive::clear_fallback_chunk_identifiers() {
  _impl_.fallback_chunk_identifiers_.Clear();
}
InsertBuildDescriptionArchive::InsertBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.InsertBuildDescriptionArchive)
}
InsertBuildDescriptionArchive::InsertBuildDescriptionArchive(const InsertBuildDescriptionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBuildDescriptionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_insert_){from._impl_.chunks_to_insert_}
    , decltype(_impl_.identifers_for_chunks_to_insert_after_){from._impl_.identifers_for_chunks_to_insert_after_}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.fallback_chunk_identifiers_){from._impl_.fallback_chunk_identifiers_}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.build_to_insert_){nullptr}
    , decltype(_impl_.should_assign_chunk_identifiers_){}
    , decltype(_impl_.is_for_paste_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  if (from._internal_has_build_to_insert()) {
    _this->_impl_.build_to_insert_ = new ::TSP::Reference(*from._impl_.build_to_insert_);
  }
  ::memcpy(&_impl_.should_assign_chunk_identifiers_, &from._impl_.should_assign_chunk_identifiers_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_for_paste_) -
    reinterpret_cast<char*>(&_impl_.should_assign_chunk_identifiers_)) + sizeof(_impl_.is_for_paste_));
  // @@protoc_insertion_point(copy_constructor:KN.InsertBuildDescriptionArchive)
}

inline void InsertBuildDescriptionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_insert_){arena}
    , decltype(_impl_.identifers_for_chunks_to_insert_after_){arena}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.fallback_chunk_identifiers_){arena}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.build_to_insert_){nullptr}
    , decltype(_impl_.should_assign_chunk_identifiers_){false}
    , decltype(_impl_.is_for_paste_){false}
  };
}

InsertBuildDescriptionArchive::~InsertBuildDescriptionArchive() {
  // @@protoc_insertion_point(destructor:KN.InsertBuildDescriptionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBuildDescriptionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunks_to_insert_.~RepeatedPtrField();
  _impl_.identifers_for_chunks_to_insert_after_.~RepeatedPtrField();
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.fallback_chunk_identifiers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slide_id_;
  if (this != internal_default_instance()) delete _impl_.build_to_insert_;
}

void InsertBuildDescriptionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBuildDescriptionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.InsertBuildDescriptionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_to_insert_.Clear();
  _impl_.identifers_for_chunks_to_insert_after_.Clear();
  _impl_.tuples_to_update_.Clear();
  _impl_.fallback_chunk_identifiers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.build_to_insert_ != nullptr);
      _impl_.build_to_insert_->Clear();
    }
  }
  ::memset(&_impl_.should_assign_chunk_identifiers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_for_paste_) -
      reinterpret_cast<char*>(&_impl_.should_assign_chunk_identifiers_)) + sizeof(_impl_.is_for_paste_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBuildDescriptionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID slide_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference build_to_insert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_to_insert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_insert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_insert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool should_assign_chunk_identifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_should_assign_chunk_identifiers(&has_bits);
          _impl_.should_assign_chunk_identifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fallback_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool is_for_paste = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_for_paste(&has_bits);
          _impl_.is_for_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBuildDescriptionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.InsertBuildDescriptionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID slide_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference build_to_insert = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::build_to_insert(this),
        _Internal::build_to_insert(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference chunks_to_insert = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_to_insert_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_to_insert(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool should_assign_chunk_identifiers = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_should_assign_chunk_identifiers(), target);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifers_for_chunks_to_insert_after_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifers_for_chunks_to_insert_after(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fallback_chunk_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_fallback_chunk_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool is_for_paste = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_for_paste(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.InsertBuildDescriptionArchive)
  return target;
}

size_t InsertBuildDescriptionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.InsertBuildDescriptionArchive)
  size_t total_size = 0;

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  if (_internal_has_build_to_insert()) {
    // required .TSP.Reference build_to_insert = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_to_insert_);
  }

  if (_internal_has_should_assign_chunk_identifiers()) {
    // required bool should_assign_chunk_identifiers = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_is_for_paste()) {
    // required bool is_for_paste = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InsertBuildDescriptionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.InsertBuildDescriptionArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID slide_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

    // required .TSP.Reference build_to_insert = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_to_insert_);

    // required bool should_assign_chunk_identifiers = 4;
    total_size += 1 + 1;

    // required bool is_for_paste = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chunks_to_insert = 3;
  total_size += 1UL * this->_internal_chunks_to_insert_size();
  for (const auto& msg : this->_impl_.chunks_to_insert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
  total_size += 1UL * this->_internal_identifers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->_impl_.identifers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  total_size += 1UL * this->_internal_fallback_chunk_identifiers_size();
  for (const auto& msg : this->_impl_.fallback_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBuildDescriptionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBuildDescriptionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBuildDescriptionArchive::GetClassData() const { return &_class_data_; }


void InsertBuildDescriptionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBuildDescriptionArchive*>(&to_msg);
  auto& from = static_cast<const InsertBuildDescriptionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.InsertBuildDescriptionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunks_to_insert_.MergeFrom(from._impl_.chunks_to_insert_);
  _this->_impl_.identifers_for_chunks_to_insert_after_.MergeFrom(from._impl_.identifers_for_chunks_to_insert_after_);
  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.fallback_chunk_identifiers_.MergeFrom(from._impl_.fallback_chunk_identifiers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_build_to_insert()->::TSP::Reference::MergeFrom(
          from._internal_build_to_insert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.should_assign_chunk_identifiers_ = from._impl_.should_assign_chunk_identifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_for_paste_ = from._impl_.is_for_paste_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBuildDescriptionArchive::CopyFrom(const InsertBuildDescriptionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.InsertBuildDescriptionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBuildDescriptionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chunks_to_insert_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifers_for_chunks_to_insert_after_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.fallback_chunk_identifiers_))
    return false;
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_build_to_insert()) {
    if (!_impl_.build_to_insert_->IsInitialized()) return false;
  }
  return true;
}

void InsertBuildDescriptionArchive::InternalSwap(InsertBuildDescriptionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chunks_to_insert_.InternalSwap(&other->_impl_.chunks_to_insert_);
  _impl_.identifers_for_chunks_to_insert_after_.InternalSwap(&other->_impl_.identifers_for_chunks_to_insert_after_);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.fallback_chunk_identifiers_.InternalSwap(&other->_impl_.fallback_chunk_identifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertBuildDescriptionArchive, _impl_.is_for_paste_)
      + sizeof(InsertBuildDescriptionArchive::_impl_.is_for_paste_)
      - PROTOBUF_FIELD_OFFSET(InsertBuildDescriptionArchive, _impl_.slide_id_)>(
          reinterpret_cast<char*>(&_impl_.slide_id_),
          reinterpret_cast<char*>(&other->_impl_.slide_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBuildDescriptionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[30]);
}

// ===================================================================

class UndoObjectArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoObjectArchive>()._impl_._has_bits_);
  static const ::TSD::UndoObjectArchive& super(const UndoObjectArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::UndoObjectArchive&
UndoObjectArchive::_Internal::super(const UndoObjectArchive* msg) {
  return *msg->_impl_.super_;
}
void UndoObjectArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UndoObjectArchive::UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.UndoObjectArchive)
}
UndoObjectArchive::UndoObjectArchive(const UndoObjectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoObjectArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::UndoObjectArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.UndoObjectArchive)
}

inline void UndoObjectArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

UndoObjectArchive::~UndoObjectArchive() {
  // @@protoc_insertion_point(destructor:KN.UndoObjectArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoObjectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void UndoObjectArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoObjectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UndoObjectArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoObjectArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.UndoObjectArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoObjectArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UndoObjectArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.UndoObjectArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UndoObjectArchive)
  return target;
}

size_t UndoObjectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UndoObjectArchive)
  size_t total_size = 0;

  // required .TSD.UndoObjectArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoObjectArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoObjectArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoObjectArchive::GetClassData() const { return &_class_data_; }


void UndoObjectArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoObjectArchive*>(&to_msg);
  auto& from = static_cast<const UndoObjectArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.UndoObjectArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::UndoObjectArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoObjectArchive::CopyFrom(const UndoObjectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UndoObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoObjectArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void UndoObjectArchive::InternalSwap(UndoObjectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoObjectArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[31]);
}

// ===================================================================

class CommandSlideRemoveBuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveBuildArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& remove_build_description(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_remove_build_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& build(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveBuildArchive::_Internal::super(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildArchive::_Internal::remove_build_description(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->_impl_.remove_build_description_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildArchive::_Internal::build(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->_impl_.build_;
}
void CommandSlideRemoveBuildArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveBuildArchive::clear_remove_build_description() {
  if (_impl_.remove_build_description_ != nullptr) _impl_.remove_build_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveBuildArchive::clear_build() {
  if (_impl_.build_ != nullptr) _impl_.build_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideRemoveBuildArchive::clear_chunks_to_insert() {
  _impl_.chunks_to_insert_.Clear();
}
void CommandSlideRemoveBuildArchive::clear_identifiers_for_chunks_to_insert_after() {
  _impl_.identifiers_for_chunks_to_insert_after_.Clear();
}
void CommandSlideRemoveBuildArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
void CommandSlideRemoveBuildArchive::clear_fallback_chunk_identifiers() {
  _impl_.fallback_chunk_identifiers_.Clear();
}
CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveBuildArchive)
}
CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(const CommandSlideRemoveBuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideRemoveBuildArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_insert_){from._impl_.chunks_to_insert_}
    , decltype(_impl_.identifiers_for_chunks_to_insert_after_){from._impl_.identifiers_for_chunks_to_insert_after_}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.fallback_chunk_identifiers_){from._impl_.fallback_chunk_identifiers_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.remove_build_description_){nullptr}
    , decltype(_impl_.build_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_remove_build_description()) {
    _this->_impl_.remove_build_description_ = new ::TSP::Reference(*from._impl_.remove_build_description_);
  }
  if (from._internal_has_build()) {
    _this->_impl_.build_ = new ::TSP::Reference(*from._impl_.build_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveBuildArchive)
}

inline void CommandSlideRemoveBuildArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_insert_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_insert_after_){arena}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.fallback_chunk_identifiers_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.remove_build_description_){nullptr}
    , decltype(_impl_.build_){nullptr}
  };
}

CommandSlideRemoveBuildArchive::~CommandSlideRemoveBuildArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveBuildArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideRemoveBuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunks_to_insert_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_insert_after_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  _impl_.fallback_chunk_identifiers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.remove_build_description_;
  if (this != internal_default_instance()) delete _impl_.build_;
}

void CommandSlideRemoveBuildArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideRemoveBuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveBuildArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_to_insert_.Clear();
  _impl_.identifiers_for_chunks_to_insert_after_.Clear();
  _impl_.old_tuples_to_update_.Clear();
  _impl_.fallback_chunk_identifiers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.remove_build_description_ != nullptr);
      _impl_.remove_build_description_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.build_ != nullptr);
      _impl_.build_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveBuildArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference remove_build_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_build_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference build = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_insert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_insert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fallback_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideRemoveBuildArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveBuildArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference remove_build_description = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::remove_build_description(this),
        _Internal::remove_build_description(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference build = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::build(this),
        _Internal::build(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference chunks_to_insert = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_to_insert_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_to_insert(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_insert_after_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_insert_after(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fallback_chunk_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_fallback_chunk_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveBuildArchive)
  return target;
}

size_t CommandSlideRemoveBuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveBuildArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_remove_build_description()) {
    // required .TSP.Reference remove_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remove_build_description_);
  }

  return total_size;
}
size_t CommandSlideRemoveBuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveBuildArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference remove_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remove_build_description_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chunks_to_insert = 4;
  total_size += 1UL * this->_internal_chunks_to_insert_size();
  for (const auto& msg : this->_impl_.chunks_to_insert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  total_size += 1UL * this->_internal_fallback_chunk_identifiers_size();
  for (const auto& msg : this->_impl_.fallback_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference build = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveBuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideRemoveBuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveBuildArchive::GetClassData() const { return &_class_data_; }


void CommandSlideRemoveBuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideRemoveBuildArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideRemoveBuildArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveBuildArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunks_to_insert_.MergeFrom(from._impl_.chunks_to_insert_);
  _this->_impl_.identifiers_for_chunks_to_insert_after_.MergeFrom(from._impl_.identifiers_for_chunks_to_insert_after_);
  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  _this->_impl_.fallback_chunk_identifiers_.MergeFrom(from._impl_.fallback_chunk_identifiers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_remove_build_description()->::TSP::Reference::MergeFrom(
          from._internal_remove_build_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_build()->::TSP::Reference::MergeFrom(
          from._internal_build());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveBuildArchive::CopyFrom(const CommandSlideRemoveBuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveBuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chunks_to_insert_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_insert_after_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.fallback_chunk_identifiers_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_remove_build_description()) {
    if (!_impl_.remove_build_description_->IsInitialized()) return false;
  }
  if (_internal_has_build()) {
    if (!_impl_.build_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildArchive::InternalSwap(CommandSlideRemoveBuildArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chunks_to_insert_.InternalSwap(&other->_impl_.chunks_to_insert_);
  _impl_.identifiers_for_chunks_to_insert_after_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_insert_after_);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  _impl_.fallback_chunk_identifiers_.InternalSwap(&other->_impl_.fallback_chunk_identifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildArchive, _impl_.build_)
      + sizeof(CommandSlideRemoveBuildArchive::_impl_.build_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveBuildArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[32]);
}

// ===================================================================

class RemoveBuildDescriptionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveBuildDescriptionArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& slide_id(const RemoveBuildDescriptionArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& build_id(const RemoveBuildDescriptionArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_remove_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_should_remove_chunk_identifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::UUID&
RemoveBuildDescriptionArchive::_Internal::slide_id(const RemoveBuildDescriptionArchive* msg) {
  return *msg->_impl_.slide_id_;
}
const ::TSP::UUID&
RemoveBuildDescriptionArchive::_Internal::build_id(const RemoveBuildDescriptionArchive* msg) {
  return *msg->_impl_.build_id_;
}
void RemoveBuildDescriptionArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RemoveBuildDescriptionArchive::clear_build_id() {
  if (_impl_.build_id_ != nullptr) _impl_.build_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RemoveBuildDescriptionArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
RemoveBuildDescriptionArchive::RemoveBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RemoveBuildDescriptionArchive)
}
RemoveBuildDescriptionArchive::RemoveBuildDescriptionArchive(const RemoveBuildDescriptionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveBuildDescriptionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.should_remove_chunks_){}
    , decltype(_impl_.should_remove_chunk_identifiers_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  if (from._internal_has_build_id()) {
    _this->_impl_.build_id_ = new ::TSP::UUID(*from._impl_.build_id_);
  }
  ::memcpy(&_impl_.should_remove_chunks_, &from._impl_.should_remove_chunks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.should_remove_chunk_identifiers_) -
    reinterpret_cast<char*>(&_impl_.should_remove_chunks_)) + sizeof(_impl_.should_remove_chunk_identifiers_));
  // @@protoc_insertion_point(copy_constructor:KN.RemoveBuildDescriptionArchive)
}

inline void RemoveBuildDescriptionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.should_remove_chunks_){false}
    , decltype(_impl_.should_remove_chunk_identifiers_){false}
  };
}

RemoveBuildDescriptionArchive::~RemoveBuildDescriptionArchive() {
  // @@protoc_insertion_point(destructor:KN.RemoveBuildDescriptionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveBuildDescriptionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tuples_to_update_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slide_id_;
  if (this != internal_default_instance()) delete _impl_.build_id_;
}

void RemoveBuildDescriptionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveBuildDescriptionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RemoveBuildDescriptionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tuples_to_update_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.build_id_ != nullptr);
      _impl_.build_id_->Clear();
    }
  }
  ::memset(&_impl_.should_remove_chunks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.should_remove_chunk_identifiers_) -
      reinterpret_cast<char*>(&_impl_.should_remove_chunks_)) + sizeof(_impl_.should_remove_chunk_identifiers_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveBuildDescriptionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID slide_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID build_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_remove_chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_should_remove_chunks(&has_bits);
          _impl_.should_remove_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_remove_chunk_identifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_should_remove_chunk_identifiers(&has_bits);
          _impl_.should_remove_chunk_identifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveBuildDescriptionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RemoveBuildDescriptionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID slide_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID build_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::build_id(this),
        _Internal::build_id(this).GetCachedSize(), target, stream);
  }

  // optional bool should_remove_chunks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_should_remove_chunks(), target);
  }

  // optional bool should_remove_chunk_identifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_should_remove_chunk_identifiers(), target);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RemoveBuildDescriptionArchive)
  return target;
}

size_t RemoveBuildDescriptionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RemoveBuildDescriptionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 5;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.UUID slide_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_id_);
    }

    // optional .TSP.UUID build_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_id_);
    }

    // optional bool should_remove_chunks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool should_remove_chunk_identifiers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveBuildDescriptionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveBuildDescriptionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveBuildDescriptionArchive::GetClassData() const { return &_class_data_; }


void RemoveBuildDescriptionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveBuildDescriptionArchive*>(&to_msg);
  auto& from = static_cast<const RemoveBuildDescriptionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RemoveBuildDescriptionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_build_id()->::TSP::UUID::MergeFrom(
          from._internal_build_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.should_remove_chunks_ = from._impl_.should_remove_chunks_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.should_remove_chunk_identifiers_ = from._impl_.should_remove_chunk_identifiers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveBuildDescriptionArchive::CopyFrom(const RemoveBuildDescriptionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RemoveBuildDescriptionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBuildDescriptionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!_impl_.build_id_->IsInitialized()) return false;
  }
  return true;
}

void RemoveBuildDescriptionArchive::InternalSwap(RemoveBuildDescriptionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveBuildDescriptionArchive, _impl_.should_remove_chunk_identifiers_)
      + sizeof(RemoveBuildDescriptionArchive::_impl_.should_remove_chunk_identifiers_)
      - PROTOBUF_FIELD_OFFSET(RemoveBuildDescriptionArchive, _impl_.slide_id_)>(
          reinterpret_cast<char*>(&_impl_.slide_id_),
          reinterpret_cast<char*>(&other->_impl_.slide_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveBuildDescriptionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[33]);
}

// ===================================================================

class CommandSlideInsertBuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertBuildChunkArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& chunk_to_insert(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_chunk_to_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_identifier_for_chunk_to_insert_after(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_needs_selection_update(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_assign_chunk_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertBuildChunkArchive::_Internal::super(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlideInsertBuildChunkArchive::_Internal::slide_id(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->_impl_.slide_id_;
}
const ::TSP::Reference&
CommandSlideInsertBuildChunkArchive::_Internal::chunk_to_insert(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->_impl_.chunk_to_insert_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideInsertBuildChunkArchive::_Internal::identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->_impl_.identifier_for_chunk_to_insert_after_;
}
void CommandSlideInsertBuildChunkArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertBuildChunkArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertBuildChunkArchive::clear_chunk_to_insert() {
  if (_impl_.chunk_to_insert_ != nullptr) _impl_.chunk_to_insert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideInsertBuildChunkArchive::clear_identifier_for_chunk_to_insert_after() {
  if (_impl_.identifier_for_chunk_to_insert_after_ != nullptr) _impl_.identifier_for_chunk_to_insert_after_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandSlideInsertBuildChunkArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void CommandSlideInsertBuildChunkArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertBuildChunkArchive)
}
CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(const CommandSlideInsertBuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideInsertBuildChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.chunk_to_insert_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_insert_after_){nullptr}
    , decltype(_impl_.needs_selection_update_){}
    , decltype(_impl_.should_assign_chunk_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  if (from._internal_has_chunk_to_insert()) {
    _this->_impl_.chunk_to_insert_ = new ::TSP::Reference(*from._impl_.chunk_to_insert_);
  }
  if (from._internal_has_identifier_for_chunk_to_insert_after()) {
    _this->_impl_.identifier_for_chunk_to_insert_after_ = new ::KN::BuildChunkIdentifierArchive(*from._impl_.identifier_for_chunk_to_insert_after_);
  }
  ::memcpy(&_impl_.needs_selection_update_, &from._impl_.needs_selection_update_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.should_assign_chunk_identifier_) -
    reinterpret_cast<char*>(&_impl_.needs_selection_update_)) + sizeof(_impl_.should_assign_chunk_identifier_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertBuildChunkArchive)
}

inline void CommandSlideInsertBuildChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.chunk_to_insert_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_insert_after_){nullptr}
    , decltype(_impl_.needs_selection_update_){false}
    , decltype(_impl_.should_assign_chunk_identifier_){false}
  };
}

CommandSlideInsertBuildChunkArchive::~CommandSlideInsertBuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertBuildChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideInsertBuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
  if (this != internal_default_instance()) delete _impl_.chunk_to_insert_;
  if (this != internal_default_instance()) delete _impl_.identifier_for_chunk_to_insert_after_;
}

void CommandSlideInsertBuildChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideInsertBuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tuples_to_update_.Clear();
  _impl_.old_tuples_to_update_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.chunk_to_insert_ != nullptr);
      _impl_.chunk_to_insert_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.identifier_for_chunk_to_insert_after_ != nullptr);
      _impl_.identifier_for_chunk_to_insert_after_->Clear();
    }
  }
  ::memset(&_impl_.needs_selection_update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.should_assign_chunk_identifier_) -
      reinterpret_cast<char*>(&_impl_.needs_selection_update_)) + sizeof(_impl_.should_assign_chunk_identifier_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertBuildChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference chunk_to_insert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_to_insert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_insert_after(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_selection_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_needs_selection_update(&has_bits);
          _impl_.needs_selection_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_assign_chunk_identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_should_assign_chunk_identifier(&has_bits);
          _impl_.should_assign_chunk_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideInsertBuildChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference chunk_to_insert = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chunk_to_insert(this),
        _Internal::chunk_to_insert(this).GetCachedSize(), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::identifier_for_chunk_to_insert_after(this),
        _Internal::identifier_for_chunk_to_insert_after(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool needs_selection_update = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_needs_selection_update(), target);
  }

  // optional bool should_assign_chunk_identifier = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_should_assign_chunk_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertBuildChunkArchive)
  return target;
}

size_t CommandSlideInsertBuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertBuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  if (_internal_has_chunk_to_insert()) {
    // required .TSP.Reference chunk_to_insert = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_to_insert_);
  }

  return total_size;
}
size_t CommandSlideInsertBuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertBuildChunkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

    // required .TSP.Reference chunk_to_insert = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_to_insert_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 5;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.identifier_for_chunk_to_insert_after_);
    }

    // optional bool needs_selection_update = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool should_assign_chunk_identifier = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertBuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideInsertBuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertBuildChunkArchive::GetClassData() const { return &_class_data_; }


void CommandSlideInsertBuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideInsertBuildChunkArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideInsertBuildChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertBuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_chunk_to_insert()->::TSP::Reference::MergeFrom(
          from._internal_chunk_to_insert());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_identifier_for_chunk_to_insert_after()->::KN::BuildChunkIdentifierArchive::MergeFrom(
          from._internal_identifier_for_chunk_to_insert_after());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.needs_selection_update_ = from._impl_.needs_selection_update_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.should_assign_chunk_identifier_ = from._impl_.should_assign_chunk_identifier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertBuildChunkArchive::CopyFrom(const CommandSlideInsertBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertBuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_chunk_to_insert()) {
    if (!_impl_.chunk_to_insert_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_insert_after()) {
    if (!_impl_.identifier_for_chunk_to_insert_after_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildChunkArchive::InternalSwap(CommandSlideInsertBuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, _impl_.should_assign_chunk_identifier_)
      + sizeof(CommandSlideInsertBuildChunkArchive::_impl_.should_assign_chunk_identifier_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertBuildChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[34]);
}

// ===================================================================

class CommandSlideRemoveBuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveBuildChunkArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& removed_chunk(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_removed_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_remove(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_identifier_for_chunk_to_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_identifier_for_chunk_to_insert_after(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_needs_selection_update(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::super(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlideRemoveBuildChunkArchive::_Internal::slide_id(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.slide_id_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildChunkArchive::_Internal::removed_chunk(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.removed_chunk_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::identifier_for_chunk_to_remove(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.identifier_for_chunk_to_remove_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::identifier_for_chunk_to_insert_after(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.identifier_for_chunk_to_insert_after_;
}
void CommandSlideRemoveBuildChunkArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveBuildChunkArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveBuildChunkArchive::clear_removed_chunk() {
  if (_impl_.removed_chunk_ != nullptr) _impl_.removed_chunk_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideRemoveBuildChunkArchive::clear_identifier_for_chunk_to_remove() {
  if (_impl_.identifier_for_chunk_to_remove_ != nullptr) _impl_.identifier_for_chunk_to_remove_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandSlideRemoveBuildChunkArchive::clear_identifier_for_chunk_to_insert_after() {
  if (_impl_.identifier_for_chunk_to_insert_after_ != nullptr) _impl_.identifier_for_chunk_to_insert_after_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandSlideRemoveBuildChunkArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void CommandSlideRemoveBuildChunkArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveBuildChunkArchive)
}
CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(const CommandSlideRemoveBuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideRemoveBuildChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.removed_chunk_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_remove_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_insert_after_){nullptr}
    , decltype(_impl_.needs_selection_update_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  if (from._internal_has_removed_chunk()) {
    _this->_impl_.removed_chunk_ = new ::TSP::Reference(*from._impl_.removed_chunk_);
  }
  if (from._internal_has_identifier_for_chunk_to_remove()) {
    _this->_impl_.identifier_for_chunk_to_remove_ = new ::KN::BuildChunkIdentifierArchive(*from._impl_.identifier_for_chunk_to_remove_);
  }
  if (from._internal_has_identifier_for_chunk_to_insert_after()) {
    _this->_impl_.identifier_for_chunk_to_insert_after_ = new ::KN::BuildChunkIdentifierArchive(*from._impl_.identifier_for_chunk_to_insert_after_);
  }
  _this->_impl_.needs_selection_update_ = from._impl_.needs_selection_update_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveBuildChunkArchive)
}

inline void CommandSlideRemoveBuildChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.removed_chunk_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_remove_){nullptr}
    , decltype(_impl_.identifier_for_chunk_to_insert_after_){nullptr}
    , decltype(_impl_.needs_selection_update_){false}
  };
}

CommandSlideRemoveBuildChunkArchive::~CommandSlideRemoveBuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveBuildChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideRemoveBuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
  if (this != internal_default_instance()) delete _impl_.removed_chunk_;
  if (this != internal_default_instance()) delete _impl_.identifier_for_chunk_to_remove_;
  if (this != internal_default_instance()) delete _impl_.identifier_for_chunk_to_insert_after_;
}

void CommandSlideRemoveBuildChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideRemoveBuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tuples_to_update_.Clear();
  _impl_.old_tuples_to_update_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.removed_chunk_ != nullptr);
      _impl_.removed_chunk_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.identifier_for_chunk_to_remove_ != nullptr);
      _impl_.identifier_for_chunk_to_remove_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.identifier_for_chunk_to_insert_after_ != nullptr);
      _impl_.identifier_for_chunk_to_insert_after_->Clear();
    }
  }
  _impl_.needs_selection_update_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveBuildChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference removed_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_remove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_insert_after(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_selection_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_needs_selection_update(&has_bits);
          _impl_.needs_selection_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideRemoveBuildChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference removed_chunk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::removed_chunk(this),
        _Internal::removed_chunk(this).GetCachedSize(), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::identifier_for_chunk_to_remove(this),
        _Internal::identifier_for_chunk_to_remove(this).GetCachedSize(), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::identifier_for_chunk_to_insert_after(this),
        _Internal::identifier_for_chunk_to_insert_after(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool needs_selection_update = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_needs_selection_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveBuildChunkArchive)
  return target;
}

size_t CommandSlideRemoveBuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveBuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  return total_size;
}
size_t CommandSlideRemoveBuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveBuildChunkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 6;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 7;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference removed_chunk = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.removed_chunk_);
    }

    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.identifier_for_chunk_to_remove_);
    }

    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.identifier_for_chunk_to_insert_after_);
    }

    // optional bool needs_selection_update = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveBuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideRemoveBuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveBuildChunkArchive::GetClassData() const { return &_class_data_; }


void CommandSlideRemoveBuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideRemoveBuildChunkArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideRemoveBuildChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveBuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_removed_chunk()->::TSP::Reference::MergeFrom(
          from._internal_removed_chunk());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_identifier_for_chunk_to_remove()->::KN::BuildChunkIdentifierArchive::MergeFrom(
          from._internal_identifier_for_chunk_to_remove());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_identifier_for_chunk_to_insert_after()->::KN::BuildChunkIdentifierArchive::MergeFrom(
          from._internal_identifier_for_chunk_to_insert_after());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.needs_selection_update_ = from._impl_.needs_selection_update_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveBuildChunkArchive::CopyFrom(const CommandSlideRemoveBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveBuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_removed_chunk()) {
    if (!_impl_.removed_chunk_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_remove()) {
    if (!_impl_.identifier_for_chunk_to_remove_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_insert_after()) {
    if (!_impl_.identifier_for_chunk_to_insert_after_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildChunkArchive::InternalSwap(CommandSlideRemoveBuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, _impl_.needs_selection_update_)
      + sizeof(CommandSlideRemoveBuildChunkArchive::_impl_.needs_selection_update_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveBuildChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[35]);
}

// ===================================================================

class CommandSlideMoveBuildChunksArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveBuildChunksArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveBuildChunksArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveBuildChunksArchive::_Internal::super(const CommandSlideMoveBuildChunksArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSlideMoveBuildChunksArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move() {
  _impl_.identifiers_for_chunks_to_move_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move_after() {
  _impl_.identifiers_for_chunks_to_move_after_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move_after_for_undo() {
  _impl_.identifiers_for_chunks_to_move_after_for_undo_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move_including_clustered_inactive_chunks() {
  _impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.Clear();
}
CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveBuildChunksArchive)
}
CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(const CommandSlideMoveBuildChunksArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideMoveBuildChunksArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifiers_for_chunks_to_move_){from._impl_.identifiers_for_chunks_to_move_}
    , decltype(_impl_.identifiers_for_chunks_to_move_after_){from._impl_.identifiers_for_chunks_to_move_after_}
    , decltype(_impl_.identifiers_for_chunks_to_move_after_for_undo_){from._impl_.identifiers_for_chunks_to_move_after_for_undo_}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_){from._impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveBuildChunksArchive)
}

inline void CommandSlideMoveBuildChunksArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifiers_for_chunks_to_move_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_move_after_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_move_after_for_undo_){arena}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandSlideMoveBuildChunksArchive::~CommandSlideMoveBuildChunksArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveBuildChunksArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideMoveBuildChunksArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifiers_for_chunks_to_move_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_move_after_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_move_after_for_undo_.~RepeatedPtrField();
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSlideMoveBuildChunksArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideMoveBuildChunksArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveBuildChunksArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifiers_for_chunks_to_move_.Clear();
  _impl_.identifiers_for_chunks_to_move_after_.Clear();
  _impl_.identifiers_for_chunks_to_move_after_for_undo_.Clear();
  _impl_.tuples_to_update_.Clear();
  _impl_.old_tuples_to_update_.Clear();
  _impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveBuildChunksArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move_after_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideMoveBuildChunksArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveBuildChunksArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_move_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_move(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_move_after_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_move_after(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_move_after_for_undo_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_move_after_for_undo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveBuildChunksArchive)
  return target;
}

size_t CommandSlideMoveBuildChunksArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveBuildChunksArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_move_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_after_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_move_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_after_for_undo_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_move_after_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveBuildChunksArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideMoveBuildChunksArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveBuildChunksArchive::GetClassData() const { return &_class_data_; }


void CommandSlideMoveBuildChunksArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideMoveBuildChunksArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideMoveBuildChunksArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveBuildChunksArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.identifiers_for_chunks_to_move_.MergeFrom(from._impl_.identifiers_for_chunks_to_move_);
  _this->_impl_.identifiers_for_chunks_to_move_after_.MergeFrom(from._impl_.identifiers_for_chunks_to_move_after_);
  _this->_impl_.identifiers_for_chunks_to_move_after_for_undo_.MergeFrom(from._impl_.identifiers_for_chunks_to_move_after_for_undo_);
  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  _this->_impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.MergeFrom(from._impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveBuildChunksArchive::CopyFrom(const CommandSlideMoveBuildChunksArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveBuildChunksArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildChunksArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_move_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_move_after_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_move_after_for_undo_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildChunksArchive::InternalSwap(CommandSlideMoveBuildChunksArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.identifiers_for_chunks_to_move_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_move_);
  _impl_.identifiers_for_chunks_to_move_after_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_move_after_);
  _impl_.identifiers_for_chunks_to_move_after_for_undo_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_move_after_for_undo_);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  _impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveBuildChunksArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[36]);
}

// ===================================================================

class CommandBuildSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tuple(const CommandBuildSetValueArchive* msg);
  static void set_has_tuple(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_tuple_for_main_property(const CommandBuildSetValueArchive* msg);
  static void set_has_old_tuple_for_main_property(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_chunk_id_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildSetValueArchive::_Internal::super(const CommandBuildSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandBuildSetValueArchive::_Internal::tuple(const CommandBuildSetValueArchive* msg) {
  return *msg->_impl_.tuple_;
}
const ::TSP::Reference&
CommandBuildSetValueArchive::_Internal::old_tuple_for_main_property(const CommandBuildSetValueArchive* msg) {
  return *msg->_impl_.old_tuple_for_main_property_;
}
void CommandBuildSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandBuildSetValueArchive::clear_tuple() {
  if (_impl_.tuple_ != nullptr) _impl_.tuple_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandBuildSetValueArchive::clear_chunks_to_add() {
  _impl_.chunks_to_add_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_chunks_to_insert_after() {
  _impl_.identifiers_for_chunks_to_insert_after_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_chunks_to_remove() {
  _impl_.identifiers_for_chunks_to_remove_.Clear();
}
void CommandBuildSetValueArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void CommandBuildSetValueArchive::clear_old_tuple_for_main_property() {
  if (_impl_.old_tuple_for_main_property_ != nullptr) _impl_.old_tuple_for_main_property_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandBuildSetValueArchive::clear_old_tuples_to_update_for_sub_commands() {
  _impl_.old_tuples_to_update_for_sub_commands_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_added_chunks() {
  _impl_.identifiers_for_added_chunks_.Clear();
}
void CommandBuildSetValueArchive::clear_generated_identifiers() {
  _impl_.generated_identifiers_.Clear();
}
void CommandBuildSetValueArchive::clear_removed_chunks() {
  _impl_.removed_chunks_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_chunks_prior_to_removed_chunks() {
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.Clear();
}
void CommandBuildSetValueArchive::clear_old_chunk_identifiers() {
  _impl_.old_chunk_identifiers_.Clear();
}
void CommandBuildSetValueArchive::clear_chunks_removed_during_undo() {
  _impl_.chunks_removed_during_undo_.Clear();
}
CommandBuildSetValueArchive::CommandBuildSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildSetValueArchive)
}
CommandBuildSetValueArchive::CommandBuildSetValueArchive(const CommandBuildSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBuildSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_add_){from._impl_.chunks_to_add_}
    , decltype(_impl_.identifiers_for_chunks_to_insert_after_){from._impl_.identifiers_for_chunks_to_insert_after_}
    , decltype(_impl_.identifiers_for_chunks_to_remove_){from._impl_.identifiers_for_chunks_to_remove_}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.old_tuples_to_update_for_sub_commands_){from._impl_.old_tuples_to_update_for_sub_commands_}
    , decltype(_impl_.identifiers_for_added_chunks_){from._impl_.identifiers_for_added_chunks_}
    , decltype(_impl_.generated_identifiers_){from._impl_.generated_identifiers_}
    , decltype(_impl_.removed_chunks_){from._impl_.removed_chunks_}
    , decltype(_impl_.identifiers_for_chunks_prior_to_removed_chunks_){from._impl_.identifiers_for_chunks_prior_to_removed_chunks_}
    , decltype(_impl_.old_chunk_identifiers_){from._impl_.old_chunk_identifiers_}
    , decltype(_impl_.chunks_removed_during_undo_){from._impl_.chunks_removed_during_undo_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tuple_){nullptr}
    , decltype(_impl_.old_tuple_for_main_property_){nullptr}
    , decltype(_impl_.old_chunk_id_seed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_tuple()) {
    _this->_impl_.tuple_ = new ::TSP::Reference(*from._impl_.tuple_);
  }
  if (from._internal_has_old_tuple_for_main_property()) {
    _this->_impl_.old_tuple_for_main_property_ = new ::TSP::Reference(*from._impl_.old_tuple_for_main_property_);
  }
  _this->_impl_.old_chunk_id_seed_ = from._impl_.old_chunk_id_seed_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildSetValueArchive)
}

inline void CommandBuildSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_add_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_insert_after_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_remove_){arena}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.old_tuples_to_update_for_sub_commands_){arena}
    , decltype(_impl_.identifiers_for_added_chunks_){arena}
    , decltype(_impl_.generated_identifiers_){arena}
    , decltype(_impl_.removed_chunks_){arena}
    , decltype(_impl_.identifiers_for_chunks_prior_to_removed_chunks_){arena}
    , decltype(_impl_.old_chunk_identifiers_){arena}
    , decltype(_impl_.chunks_removed_during_undo_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tuple_){nullptr}
    , decltype(_impl_.old_tuple_for_main_property_){nullptr}
    , decltype(_impl_.old_chunk_id_seed_){0u}
  };
}

CommandBuildSetValueArchive::~CommandBuildSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBuildSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunks_to_add_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_insert_after_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_remove_.~RepeatedPtrField();
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_for_sub_commands_.~RepeatedPtrField();
  _impl_.identifiers_for_added_chunks_.~RepeatedPtrField();
  _impl_.generated_identifiers_.~RepeatedPtrField();
  _impl_.removed_chunks_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.~RepeatedPtrField();
  _impl_.old_chunk_identifiers_.~RepeatedPtrField();
  _impl_.chunks_removed_during_undo_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tuple_;
  if (this != internal_default_instance()) delete _impl_.old_tuple_for_main_property_;
}

void CommandBuildSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBuildSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_to_add_.Clear();
  _impl_.identifiers_for_chunks_to_insert_after_.Clear();
  _impl_.identifiers_for_chunks_to_remove_.Clear();
  _impl_.tuples_to_update_.Clear();
  _impl_.old_tuples_to_update_for_sub_commands_.Clear();
  _impl_.identifiers_for_added_chunks_.Clear();
  _impl_.generated_identifiers_.Clear();
  _impl_.removed_chunks_.Clear();
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.Clear();
  _impl_.old_chunk_identifiers_.Clear();
  _impl_.chunks_removed_during_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tuple_ != nullptr);
      _impl_.tuple_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_tuple_for_main_property_ != nullptr);
      _impl_.old_tuple_for_main_property_->Clear();
    }
  }
  _impl_.old_chunk_id_seed_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tuple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_add = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_add(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_remove(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_tuple_for_main_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_tuple_for_main_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update_for_sub_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_added_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generated_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference removed_chunks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_prior_to_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 old_chunk_ID_seed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_old_chunk_id_seed(&has_bits);
          _impl_.old_chunk_id_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_removed_during_undo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_removed_during_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBuildSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference tuple = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tuple(this),
        _Internal::tuple(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference chunks_to_add = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_to_add_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_to_add(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_insert_after_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_insert_after(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_remove_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_remove(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_tuple_for_main_property = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::old_tuple_for_main_property(this),
        _Internal::old_tuple_for_main_property(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_for_sub_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update_for_sub_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_added_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_added_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_generated_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_generated_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference removed_chunks = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_prior_to_removed_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 old_chunk_ID_seed = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_old_chunk_id_seed(), target);
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_chunk_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_chunk_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_removed_during_undo_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_removed_during_undo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildSetValueArchive)
  return target;
}

size_t CommandBuildSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildSetValueArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chunks_to_add = 3;
  total_size += 1UL * this->_internal_chunks_to_add_size();
  for (const auto& msg : this->_impl_.chunks_to_add_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_remove_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_remove_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
  total_size += 1UL * this->_internal_old_tuples_to_update_for_sub_commands_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_for_sub_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
  total_size += 1UL * this->_internal_identifiers_for_added_chunks_size();
  for (const auto& msg : this->_impl_.identifiers_for_added_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
  total_size += 1UL * this->_internal_generated_identifiers_size();
  for (const auto& msg : this->_impl_.generated_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference removed_chunks = 11;
  total_size += 1UL * this->_internal_removed_chunks_size();
  for (const auto& msg : this->_impl_.removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
  total_size += 1UL * this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_prior_to_removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
  total_size += 1UL * this->_internal_old_chunk_identifiers_size();
  for (const auto& msg : this->_impl_.old_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 15;
  total_size += 1UL * this->_internal_chunks_removed_during_undo_size();
  for (const auto& msg : this->_impl_.chunks_removed_during_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference tuple = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tuple_);
    }

    // optional .TSP.Reference old_tuple_for_main_property = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_tuple_for_main_property_);
    }

    // optional uint32 old_chunk_ID_seed = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_chunk_id_seed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBuildSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandBuildSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBuildSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandBuildSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunks_to_add_.MergeFrom(from._impl_.chunks_to_add_);
  _this->_impl_.identifiers_for_chunks_to_insert_after_.MergeFrom(from._impl_.identifiers_for_chunks_to_insert_after_);
  _this->_impl_.identifiers_for_chunks_to_remove_.MergeFrom(from._impl_.identifiers_for_chunks_to_remove_);
  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.old_tuples_to_update_for_sub_commands_.MergeFrom(from._impl_.old_tuples_to_update_for_sub_commands_);
  _this->_impl_.identifiers_for_added_chunks_.MergeFrom(from._impl_.identifiers_for_added_chunks_);
  _this->_impl_.generated_identifiers_.MergeFrom(from._impl_.generated_identifiers_);
  _this->_impl_.removed_chunks_.MergeFrom(from._impl_.removed_chunks_);
  _this->_impl_.identifiers_for_chunks_prior_to_removed_chunks_.MergeFrom(from._impl_.identifiers_for_chunks_prior_to_removed_chunks_);
  _this->_impl_.old_chunk_identifiers_.MergeFrom(from._impl_.old_chunk_identifiers_);
  _this->_impl_.chunks_removed_during_undo_.MergeFrom(from._impl_.chunks_removed_during_undo_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tuple()->::TSP::Reference::MergeFrom(
          from._internal_tuple());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_tuple_for_main_property()->::TSP::Reference::MergeFrom(
          from._internal_old_tuple_for_main_property());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_chunk_id_seed_ = from._impl_.old_chunk_id_seed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildSetValueArchive::CopyFrom(const CommandBuildSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chunks_to_add_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_insert_after_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_remove_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_for_sub_commands_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_added_chunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.generated_identifiers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.removed_chunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_prior_to_removed_chunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_chunk_identifiers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chunks_removed_during_undo_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tuple()) {
    if (!_impl_.tuple_->IsInitialized()) return false;
  }
  if (_internal_has_old_tuple_for_main_property()) {
    if (!_impl_.old_tuple_for_main_property_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildSetValueArchive::InternalSwap(CommandBuildSetValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chunks_to_add_.InternalSwap(&other->_impl_.chunks_to_add_);
  _impl_.identifiers_for_chunks_to_insert_after_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_insert_after_);
  _impl_.identifiers_for_chunks_to_remove_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_remove_);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.old_tuples_to_update_for_sub_commands_.InternalSwap(&other->_impl_.old_tuples_to_update_for_sub_commands_);
  _impl_.identifiers_for_added_chunks_.InternalSwap(&other->_impl_.identifiers_for_added_chunks_);
  _impl_.generated_identifiers_.InternalSwap(&other->_impl_.generated_identifiers_);
  _impl_.removed_chunks_.InternalSwap(&other->_impl_.removed_chunks_);
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.InternalSwap(&other->_impl_.identifiers_for_chunks_prior_to_removed_chunks_);
  _impl_.old_chunk_identifiers_.InternalSwap(&other->_impl_.old_chunk_identifiers_);
  _impl_.chunks_removed_during_undo_.InternalSwap(&other->_impl_.chunks_removed_during_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildSetValueArchive, _impl_.old_chunk_id_seed_)
      + sizeof(CommandBuildSetValueArchive::_impl_.old_chunk_id_seed_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[37]);
}

// ===================================================================

class CommandBuildUpdateChunkReferentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildUpdateChunkReferentsArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildUpdateChunkReferentsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& build_id(const CommandBuildUpdateChunkReferentsArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildUpdateChunkReferentsArchive::_Internal::super(const CommandBuildUpdateChunkReferentsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandBuildUpdateChunkReferentsArchive::_Internal::build_id(const CommandBuildUpdateChunkReferentsArchive* msg) {
  return *msg->_impl_.build_id_;
}
void CommandBuildUpdateChunkReferentsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandBuildUpdateChunkReferentsArchive::clear_build_id() {
  if (_impl_.build_id_ != nullptr) _impl_.build_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandBuildUpdateChunkReferentsArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void CommandBuildUpdateChunkReferentsArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
CommandBuildUpdateChunkReferentsArchive::CommandBuildUpdateChunkReferentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildUpdateChunkReferentsArchive)
}
CommandBuildUpdateChunkReferentsArchive::CommandBuildUpdateChunkReferentsArchive(const CommandBuildUpdateChunkReferentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBuildUpdateChunkReferentsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.build_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_build_id()) {
    _this->_impl_.build_id_ = new ::TSP::UUID(*from._impl_.build_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildUpdateChunkReferentsArchive)
}

inline void CommandBuildUpdateChunkReferentsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.build_id_){nullptr}
  };
}

CommandBuildUpdateChunkReferentsArchive::~CommandBuildUpdateChunkReferentsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildUpdateChunkReferentsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBuildUpdateChunkReferentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.build_id_;
}

void CommandBuildUpdateChunkReferentsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBuildUpdateChunkReferentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildUpdateChunkReferentsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tuples_to_update_.Clear();
  _impl_.old_tuples_to_update_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.build_id_ != nullptr);
      _impl_.build_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildUpdateChunkReferentsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID build_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBuildUpdateChunkReferentsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildUpdateChunkReferentsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID build_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::build_id(this),
        _Internal::build_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildUpdateChunkReferentsArchive)
  return target;
}

size_t CommandBuildUpdateChunkReferentsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandBuildUpdateChunkReferentsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_build_id()) {
    // required .TSP.UUID build_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_id_);
  }

  return total_size;
}
size_t CommandBuildUpdateChunkReferentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildUpdateChunkReferentsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID build_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 3;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 4;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildUpdateChunkReferentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBuildUpdateChunkReferentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildUpdateChunkReferentsArchive::GetClassData() const { return &_class_data_; }


void CommandBuildUpdateChunkReferentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBuildUpdateChunkReferentsArchive*>(&to_msg);
  auto& from = static_cast<const CommandBuildUpdateChunkReferentsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildUpdateChunkReferentsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_build_id()->::TSP::UUID::MergeFrom(
          from._internal_build_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildUpdateChunkReferentsArchive::CopyFrom(const CommandBuildUpdateChunkReferentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildUpdateChunkReferentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildUpdateChunkReferentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!_impl_.build_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildUpdateChunkReferentsArchive::InternalSwap(CommandBuildUpdateChunkReferentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkReferentsArchive, _impl_.build_id_)
      + sizeof(CommandBuildUpdateChunkReferentsArchive::_impl_.build_id_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkReferentsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildUpdateChunkReferentsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[38]);
}

// ===================================================================

class CommandBuildUpdateChunkCountArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildUpdateChunkCountArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildUpdateChunkCountArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandBuildUpdateChunkCountArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_needs_async_process_changes_selection_update(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildUpdateChunkCountArchive::_Internal::super(const CommandBuildUpdateChunkCountArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandBuildUpdateChunkCountArchive::_Internal::slide_id(const CommandBuildUpdateChunkCountArchive* msg) {
  return *msg->_impl_.slide_id_;
}
void CommandBuildUpdateChunkCountArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandBuildUpdateChunkCountArchive::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandBuildUpdateChunkCountArchive::clear_drawable_ids() {
  _impl_.drawable_ids_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_expected_delivery_style_tuples() {
  _impl_.expected_delivery_style_tuples_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_chunks_to_add() {
  _impl_.chunks_to_add_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_chunks_to_insert_after() {
  _impl_.identifiers_for_chunks_to_insert_after_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_chunks_to_remove() {
  _impl_.identifiers_for_chunks_to_remove_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_added_chunks() {
  _impl_.identifiers_for_added_chunks_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_generated_identifiers() {
  _impl_.generated_identifiers_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_removed_chunks() {
  _impl_.removed_chunks_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_chunks_prior_to_removed_chunks() {
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_old_delivery_style_tuples() {
  _impl_.old_delivery_style_tuples_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_old_chunk_identifiers() {
  _impl_.old_chunk_identifiers_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_working_builds() {
  _impl_.working_builds_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_chunks_removed_during_undo() {
  _impl_.chunks_removed_during_undo_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_chunks_added_during_undo() {
  _impl_.chunks_added_during_undo_.Clear();
}
CommandBuildUpdateChunkCountArchive::CommandBuildUpdateChunkCountArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildUpdateChunkCountArchive)
}
CommandBuildUpdateChunkCountArchive::CommandBuildUpdateChunkCountArchive(const CommandBuildUpdateChunkCountArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBuildUpdateChunkCountArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_ids_){from._impl_.drawable_ids_}
    , decltype(_impl_.expected_delivery_style_tuples_){from._impl_.expected_delivery_style_tuples_}
    , decltype(_impl_.chunks_to_add_){from._impl_.chunks_to_add_}
    , decltype(_impl_.identifiers_for_chunks_to_insert_after_){from._impl_.identifiers_for_chunks_to_insert_after_}
    , decltype(_impl_.identifiers_for_chunks_to_remove_){from._impl_.identifiers_for_chunks_to_remove_}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.identifiers_for_added_chunks_){from._impl_.identifiers_for_added_chunks_}
    , decltype(_impl_.generated_identifiers_){from._impl_.generated_identifiers_}
    , decltype(_impl_.removed_chunks_){from._impl_.removed_chunks_}
    , decltype(_impl_.identifiers_for_chunks_prior_to_removed_chunks_){from._impl_.identifiers_for_chunks_prior_to_removed_chunks_}
    , decltype(_impl_.old_delivery_style_tuples_){from._impl_.old_delivery_style_tuples_}
    , decltype(_impl_.old_chunk_id_seeds_){from._impl_.old_chunk_id_seeds_}
    , decltype(_impl_.old_chunk_identifiers_){from._impl_.old_chunk_identifiers_}
    , decltype(_impl_.working_builds_){from._impl_.working_builds_}
    , decltype(_impl_.chunks_removed_during_undo_){from._impl_.chunks_removed_during_undo_}
    , decltype(_impl_.chunks_added_during_undo_){from._impl_.chunks_added_during_undo_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.needs_async_process_changes_selection_update_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  _this->_impl_.needs_async_process_changes_selection_update_ = from._impl_.needs_async_process_changes_selection_update_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildUpdateChunkCountArchive)
}

inline void CommandBuildUpdateChunkCountArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_ids_){arena}
    , decltype(_impl_.expected_delivery_style_tuples_){arena}
    , decltype(_impl_.chunks_to_add_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_insert_after_){arena}
    , decltype(_impl_.identifiers_for_chunks_to_remove_){arena}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.identifiers_for_added_chunks_){arena}
    , decltype(_impl_.generated_identifiers_){arena}
    , decltype(_impl_.removed_chunks_){arena}
    , decltype(_impl_.identifiers_for_chunks_prior_to_removed_chunks_){arena}
    , decltype(_impl_.old_delivery_style_tuples_){arena}
    , decltype(_impl_.old_chunk_id_seeds_){arena}
    , decltype(_impl_.old_chunk_identifiers_){arena}
    , decltype(_impl_.working_builds_){arena}
    , decltype(_impl_.chunks_removed_during_undo_){arena}
    , decltype(_impl_.chunks_added_during_undo_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
    , decltype(_impl_.needs_async_process_changes_selection_update_){false}
  };
}

CommandBuildUpdateChunkCountArchive::~CommandBuildUpdateChunkCountArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildUpdateChunkCountArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBuildUpdateChunkCountArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawable_ids_.~RepeatedPtrField();
  _impl_.expected_delivery_style_tuples_.~RepeatedPtrField();
  _impl_.chunks_to_add_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_insert_after_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_to_remove_.~RepeatedPtrField();
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  _impl_.identifiers_for_added_chunks_.~RepeatedPtrField();
  _impl_.generated_identifiers_.~RepeatedPtrField();
  _impl_.removed_chunks_.~RepeatedPtrField();
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.~RepeatedPtrField();
  _impl_.old_delivery_style_tuples_.~RepeatedPtrField();
  _impl_.old_chunk_id_seeds_.~RepeatedField();
  _impl_.old_chunk_identifiers_.~RepeatedPtrField();
  _impl_.working_builds_.~RepeatedPtrField();
  _impl_.chunks_removed_during_undo_.~RepeatedPtrField();
  _impl_.chunks_added_during_undo_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
}

void CommandBuildUpdateChunkCountArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBuildUpdateChunkCountArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildUpdateChunkCountArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawable_ids_.Clear();
  _impl_.expected_delivery_style_tuples_.Clear();
  _impl_.chunks_to_add_.Clear();
  _impl_.identifiers_for_chunks_to_insert_after_.Clear();
  _impl_.identifiers_for_chunks_to_remove_.Clear();
  _impl_.tuples_to_update_.Clear();
  _impl_.old_tuples_to_update_.Clear();
  _impl_.identifiers_for_added_chunks_.Clear();
  _impl_.generated_identifiers_.Clear();
  _impl_.removed_chunks_.Clear();
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.Clear();
  _impl_.old_delivery_style_tuples_.Clear();
  _impl_.old_chunk_id_seeds_.Clear();
  _impl_.old_chunk_identifiers_.Clear();
  _impl_.working_builds_.Clear();
  _impl_.chunks_removed_during_undo_.Clear();
  _impl_.chunks_added_during_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
  }
  _impl_.needs_async_process_changes_selection_update_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildUpdateChunkCountArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID drawable_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference expected_delivery_style_tuples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expected_delivery_style_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_add(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_remove(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_async_process_changes_selection_update = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_needs_async_process_changes_selection_update(&has_bits);
          _impl_.needs_async_process_changes_selection_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_added_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generated_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference removed_chunks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_prior_to_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_delivery_style_tuples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_delivery_style_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 old_chunk_ID_seeds = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_old_chunk_id_seeds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_chunk_id_seeds(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_old_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_builds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_working_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_removed_during_undo = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chunks_removed_during_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_added_during_undo = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chunks_added_during_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBuildUpdateChunkCountArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildUpdateChunkCountArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID drawable_ids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawable_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawable_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference expected_delivery_style_tuples = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expected_delivery_style_tuples_size()); i < n; i++) {
    const auto& repfield = this->_internal_expected_delivery_style_tuples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference chunks_to_add = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_to_add_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_to_add(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_insert_after_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_insert_after(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_to_remove_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_to_remove(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool needs_async_process_changes_selection_update = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_needs_async_process_changes_selection_update(), target);
  }

  // repeated .TSP.Reference old_tuples_to_update = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_added_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_added_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_generated_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_generated_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference removed_chunks = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers_for_chunks_prior_to_removed_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_delivery_style_tuples = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_delivery_style_tuples_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_delivery_style_tuples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 old_chunk_ID_seeds = 16;
  for (int i = 0, n = this->_internal_old_chunk_id_seeds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_old_chunk_id_seeds(i), target);
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_chunk_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_chunk_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference working_builds = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_working_builds_size()); i < n; i++) {
    const auto& repfield = this->_internal_working_builds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_removed_during_undo_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_removed_during_undo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference chunks_added_during_undo = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_added_during_undo_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_added_during_undo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildUpdateChunkCountArchive)
  return target;
}

size_t CommandBuildUpdateChunkCountArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandBuildUpdateChunkCountArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  return total_size;
}
size_t CommandBuildUpdateChunkCountArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildUpdateChunkCountArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID drawable_ids = 3;
  total_size += 1UL * this->_internal_drawable_ids_size();
  for (const auto& msg : this->_impl_.drawable_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference expected_delivery_style_tuples = 4;
  total_size += 1UL * this->_internal_expected_delivery_style_tuples_size();
  for (const auto& msg : this->_impl_.expected_delivery_style_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_to_add = 5;
  total_size += 1UL * this->_internal_chunks_to_add_size();
  for (const auto& msg : this->_impl_.chunks_to_add_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_remove_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_to_remove_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 8;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 10;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
  total_size += 1UL * this->_internal_identifiers_for_added_chunks_size();
  for (const auto& msg : this->_impl_.identifiers_for_added_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
  total_size += 1UL * this->_internal_generated_identifiers_size();
  for (const auto& msg : this->_impl_.generated_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference removed_chunks = 13;
  total_size += 1UL * this->_internal_removed_chunks_size();
  for (const auto& msg : this->_impl_.removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
  total_size += 1UL * this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size();
  for (const auto& msg : this->_impl_.identifiers_for_chunks_prior_to_removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_delivery_style_tuples = 15;
  total_size += 1UL * this->_internal_old_delivery_style_tuples_size();
  for (const auto& msg : this->_impl_.old_delivery_style_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 old_chunk_ID_seeds = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.old_chunk_id_seeds_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_old_chunk_id_seeds_size());
    total_size += data_size;
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
  total_size += 2UL * this->_internal_old_chunk_identifiers_size();
  for (const auto& msg : this->_impl_.old_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference working_builds = 18;
  total_size += 2UL * this->_internal_working_builds_size();
  for (const auto& msg : this->_impl_.working_builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 19;
  total_size += 2UL * this->_internal_chunks_removed_during_undo_size();
  for (const auto& msg : this->_impl_.chunks_removed_during_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_added_during_undo = 20;
  total_size += 2UL * this->_internal_chunks_added_during_undo_size();
  for (const auto& msg : this->_impl_.chunks_added_during_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool needs_async_process_changes_selection_update = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildUpdateChunkCountArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBuildUpdateChunkCountArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildUpdateChunkCountArchive::GetClassData() const { return &_class_data_; }


void CommandBuildUpdateChunkCountArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBuildUpdateChunkCountArchive*>(&to_msg);
  auto& from = static_cast<const CommandBuildUpdateChunkCountArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildUpdateChunkCountArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawable_ids_.MergeFrom(from._impl_.drawable_ids_);
  _this->_impl_.expected_delivery_style_tuples_.MergeFrom(from._impl_.expected_delivery_style_tuples_);
  _this->_impl_.chunks_to_add_.MergeFrom(from._impl_.chunks_to_add_);
  _this->_impl_.identifiers_for_chunks_to_insert_after_.MergeFrom(from._impl_.identifiers_for_chunks_to_insert_after_);
  _this->_impl_.identifiers_for_chunks_to_remove_.MergeFrom(from._impl_.identifiers_for_chunks_to_remove_);
  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  _this->_impl_.identifiers_for_added_chunks_.MergeFrom(from._impl_.identifiers_for_added_chunks_);
  _this->_impl_.generated_identifiers_.MergeFrom(from._impl_.generated_identifiers_);
  _this->_impl_.removed_chunks_.MergeFrom(from._impl_.removed_chunks_);
  _this->_impl_.identifiers_for_chunks_prior_to_removed_chunks_.MergeFrom(from._impl_.identifiers_for_chunks_prior_to_removed_chunks_);
  _this->_impl_.old_delivery_style_tuples_.MergeFrom(from._impl_.old_delivery_style_tuples_);
  _this->_impl_.old_chunk_id_seeds_.MergeFrom(from._impl_.old_chunk_id_seeds_);
  _this->_impl_.old_chunk_identifiers_.MergeFrom(from._impl_.old_chunk_identifiers_);
  _this->_impl_.working_builds_.MergeFrom(from._impl_.working_builds_);
  _this->_impl_.chunks_removed_during_undo_.MergeFrom(from._impl_.chunks_removed_during_undo_);
  _this->_impl_.chunks_added_during_undo_.MergeFrom(from._impl_.chunks_added_during_undo_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.needs_async_process_changes_selection_update_ = from._impl_.needs_async_process_changes_selection_update_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildUpdateChunkCountArchive::CopyFrom(const CommandBuildUpdateChunkCountArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildUpdateChunkCountArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildUpdateChunkCountArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawable_ids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.expected_delivery_style_tuples_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chunks_to_add_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_insert_after_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_to_remove_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_added_chunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.generated_identifiers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.removed_chunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_for_chunks_prior_to_removed_chunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_delivery_style_tuples_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_chunk_identifiers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.working_builds_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chunks_removed_during_undo_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chunks_added_during_undo_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildUpdateChunkCountArchive::InternalSwap(CommandBuildUpdateChunkCountArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawable_ids_.InternalSwap(&other->_impl_.drawable_ids_);
  _impl_.expected_delivery_style_tuples_.InternalSwap(&other->_impl_.expected_delivery_style_tuples_);
  _impl_.chunks_to_add_.InternalSwap(&other->_impl_.chunks_to_add_);
  _impl_.identifiers_for_chunks_to_insert_after_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_insert_after_);
  _impl_.identifiers_for_chunks_to_remove_.InternalSwap(&other->_impl_.identifiers_for_chunks_to_remove_);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  _impl_.identifiers_for_added_chunks_.InternalSwap(&other->_impl_.identifiers_for_added_chunks_);
  _impl_.generated_identifiers_.InternalSwap(&other->_impl_.generated_identifiers_);
  _impl_.removed_chunks_.InternalSwap(&other->_impl_.removed_chunks_);
  _impl_.identifiers_for_chunks_prior_to_removed_chunks_.InternalSwap(&other->_impl_.identifiers_for_chunks_prior_to_removed_chunks_);
  _impl_.old_delivery_style_tuples_.InternalSwap(&other->_impl_.old_delivery_style_tuples_);
  _impl_.old_chunk_id_seeds_.InternalSwap(&other->_impl_.old_chunk_id_seeds_);
  _impl_.old_chunk_identifiers_.InternalSwap(&other->_impl_.old_chunk_identifiers_);
  _impl_.working_builds_.InternalSwap(&other->_impl_.working_builds_);
  _impl_.chunks_removed_during_undo_.InternalSwap(&other->_impl_.chunks_removed_during_undo_);
  _impl_.chunks_added_during_undo_.InternalSwap(&other->_impl_.chunks_added_during_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkCountArchive, _impl_.needs_async_process_changes_selection_update_)
      + sizeof(CommandBuildUpdateChunkCountArchive::_impl_.needs_async_process_changes_selection_update_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkCountArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildUpdateChunkCountArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[39]);
}

// ===================================================================

class CommandBuildChunkSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildChunkSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildChunkSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildChunkSetValueArchive::_Internal::super(const CommandBuildChunkSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandBuildChunkSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandBuildChunkSetValueArchive::clear_tuples_to_update() {
  _impl_.tuples_to_update_.Clear();
}
void CommandBuildChunkSetValueArchive::clear_old_tuples_to_update() {
  _impl_.old_tuples_to_update_.Clear();
}
CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildChunkSetValueArchive)
}
CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(const CommandBuildChunkSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBuildChunkSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){from._impl_.tuples_to_update_}
    , decltype(_impl_.old_tuples_to_update_){from._impl_.old_tuples_to_update_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildChunkSetValueArchive)
}

inline void CommandBuildChunkSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tuples_to_update_){arena}
    , decltype(_impl_.old_tuples_to_update_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandBuildChunkSetValueArchive::~CommandBuildChunkSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildChunkSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBuildChunkSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tuples_to_update_.~RepeatedPtrField();
  _impl_.old_tuples_to_update_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandBuildChunkSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBuildChunkSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildChunkSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tuples_to_update_.Clear();
  _impl_.old_tuples_to_update_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildChunkSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBuildChunkSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildChunkSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_tuples_to_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildChunkSetValueArchive)
  return target;
}

size_t CommandBuildChunkSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildChunkSetValueArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 2;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->_impl_.tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 3;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->_impl_.old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildChunkSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBuildChunkSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildChunkSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandBuildChunkSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBuildChunkSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandBuildChunkSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildChunkSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tuples_to_update_.MergeFrom(from._impl_.tuples_to_update_);
  _this->_impl_.old_tuples_to_update_.MergeFrom(from._impl_.old_tuples_to_update_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildChunkSetValueArchive::CopyFrom(const CommandBuildChunkSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildChunkSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildChunkSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tuples_to_update_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_tuples_to_update_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildChunkSetValueArchive::InternalSwap(CommandBuildChunkSetValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tuples_to_update_.InternalSwap(&other->_impl_.tuples_to_update_);
  _impl_.old_tuples_to_update_.InternalSwap(&other->_impl_.old_tuples_to_update_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildChunkSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[40]);
}

// ===================================================================

class CommandTransitionSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTransitionSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandTransitionSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& slide_node_id_path(const CommandTransitionSetValueArchive* msg);
  static void set_has_slide_node_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::TransitionAttributesArchive& old_attributes(const CommandTransitionSetValueArchive* msg);
  static void set_has_old_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::TransitionAttributesArchive& attributes(const CommandTransitionSetValueArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSK::CommandArchive&
CommandTransitionSetValueArchive::_Internal::super(const CommandTransitionSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandTransitionSetValueArchive::_Internal::slide_node_id_path(const CommandTransitionSetValueArchive* msg) {
  return *msg->_impl_.slide_node_id_path_;
}
const ::KN::TransitionAttributesArchive&
CommandTransitionSetValueArchive::_Internal::old_attributes(const CommandTransitionSetValueArchive* msg) {
  return *msg->_impl_.old_attributes_;
}
const ::KN::TransitionAttributesArchive&
CommandTransitionSetValueArchive::_Internal::attributes(const CommandTransitionSetValueArchive* msg) {
  return *msg->_impl_.attributes_;
}
void CommandTransitionSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandTransitionSetValueArchive::clear_slide_node_id_path() {
  if (_impl_.slide_node_id_path_ != nullptr) _impl_.slide_node_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandTransitionSetValueArchive::clear_old_attributes() {
  if (_impl_.old_attributes_ != nullptr) _impl_.old_attributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandTransitionSetValueArchive::clear_attributes() {
  if (_impl_.attributes_ != nullptr) _impl_.attributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandTransitionSetValueArchive)
}
CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(const CommandTransitionSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandTransitionSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_node_id_path_){nullptr}
    , decltype(_impl_.old_attributes_){nullptr}
    , decltype(_impl_.attributes_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_node_id_path()) {
    _this->_impl_.slide_node_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_node_id_path_);
  }
  if (from._internal_has_old_attributes()) {
    _this->_impl_.old_attributes_ = new ::KN::TransitionAttributesArchive(*from._impl_.old_attributes_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::KN::TransitionAttributesArchive(*from._impl_.attributes_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandTransitionSetValueArchive)
}

inline void CommandTransitionSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_node_id_path_){nullptr}
    , decltype(_impl_.old_attributes_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandTransitionSetValueArchive::~CommandTransitionSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTransitionSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandTransitionSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_node_id_path_;
  if (this != internal_default_instance()) delete _impl_.old_attributes_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void CommandTransitionSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandTransitionSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTransitionSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_node_id_path_ != nullptr);
      _impl_.slide_node_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_attributes_ != nullptr);
      _impl_.old_attributes_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.attributes_ != nullptr);
      _impl_.attributes_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTransitionSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_node_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive old_attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandTransitionSetValueArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandTransitionSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTransitionSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_node_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_node_id_path(this),
        _Internal::slide_node_id_path(this).GetCachedSize(), target, stream);
  }

  // optional .KN.TransitionAttributesArchive old_attributes = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_attributes(this),
        _Internal::old_attributes(this).GetCachedSize(), target, stream);
  }

  // optional .KN.TransitionAttributesArchive attributes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // optional string property = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTransitionSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTransitionSetValueArchive)
  return target;
}

size_t CommandTransitionSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTransitionSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_node_id_path()) {
    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_id_path_);
  }

  return total_size;
}
size_t CommandTransitionSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTransitionSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string property = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional .KN.TransitionAttributesArchive old_attributes = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_attributes_);
    }

    // optional .KN.TransitionAttributesArchive attributes = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.attributes_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTransitionSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandTransitionSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTransitionSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandTransitionSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandTransitionSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandTransitionSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTransitionSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide_node_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_node_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_attributes()->::KN::TransitionAttributesArchive::MergeFrom(
          from._internal_old_attributes());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_attributes()->::KN::TransitionAttributesArchive::MergeFrom(
          from._internal_attributes());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTransitionSetValueArchive::CopyFrom(const CommandTransitionSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTransitionSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTransitionSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_node_id_path()) {
    if (!_impl_.slide_node_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_old_attributes()) {
    if (!_impl_.old_attributes_->IsInitialized()) return false;
  }
  if (_internal_has_attributes()) {
    if (!_impl_.attributes_->IsInitialized()) return false;
  }
  return true;
}

void CommandTransitionSetValueArchive::InternalSwap(CommandTransitionSetValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTransitionSetValueArchive, _impl_.attributes_)
      + sizeof(CommandTransitionSetValueArchive::_impl_.attributes_)
      - PROTOBUF_FIELD_OFFSET(CommandTransitionSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTransitionSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[41]);
}

// ===================================================================

class CommandShowSetSlideNumberVisibilityArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetSlideNumberVisibilityArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetSlideNumberVisibilityArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slide_numbers_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetSlideNumberVisibilityArchive::_Internal::super(const CommandShowSetSlideNumberVisibilityArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandShowSetSlideNumberVisibilityArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowSetSlideNumberVisibilityArchive::clear_ids_of_slide_nodes_to_skip() {
  _impl_.ids_of_slide_nodes_to_skip_.Clear();
}
void CommandShowSetSlideNumberVisibilityArchive::clear_ids_of_slide_nodes_already_correct() {
  _impl_.ids_of_slide_nodes_already_correct_.Clear();
}
CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetSlideNumberVisibilityArchive)
}
CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(const CommandShowSetSlideNumberVisibilityArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetSlideNumberVisibilityArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_of_slide_nodes_to_skip_){from._impl_.ids_of_slide_nodes_to_skip_}
    , decltype(_impl_.ids_of_slide_nodes_already_correct_){from._impl_.ids_of_slide_nodes_already_correct_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_numbers_visible_){}
    , decltype(_impl_.is_undo_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.slide_numbers_visible_, &from._impl_.slide_numbers_visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_undo_) -
    reinterpret_cast<char*>(&_impl_.slide_numbers_visible_)) + sizeof(_impl_.is_undo_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetSlideNumberVisibilityArchive)
}

inline void CommandShowSetSlideNumberVisibilityArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_of_slide_nodes_to_skip_){arena}
    , decltype(_impl_.ids_of_slide_nodes_already_correct_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_numbers_visible_){false}
    , decltype(_impl_.is_undo_){false}
  };
}

CommandShowSetSlideNumberVisibilityArchive::~CommandShowSetSlideNumberVisibilityArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetSlideNumberVisibilityArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetSlideNumberVisibilityArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_of_slide_nodes_to_skip_.~RepeatedPtrField();
  _impl_.ids_of_slide_nodes_already_correct_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandShowSetSlideNumberVisibilityArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetSlideNumberVisibilityArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_of_slide_nodes_to_skip_.Clear();
  _impl_.ids_of_slide_nodes_already_correct_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.slide_numbers_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_undo_) -
      reinterpret_cast<char*>(&_impl_.slide_numbers_visible_)) + sizeof(_impl_.is_undo_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetSlideNumberVisibilityArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool slide_numbers_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slide_numbers_visible(&has_bits);
          _impl_.slide_numbers_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_to_skip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_already_correct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool is_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_undo(&has_bits);
          _impl_.is_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetSlideNumberVisibilityArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool slide_numbers_visible = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_slide_numbers_visible(), target);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_of_slide_nodes_to_skip_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids_of_slide_nodes_to_skip(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_of_slide_nodes_already_correct_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids_of_slide_nodes_already_correct(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool is_undo = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetSlideNumberVisibilityArchive)
  return target;
}

size_t CommandShowSetSlideNumberVisibilityArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_numbers_visible()) {
    // required bool slide_numbers_visible = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_is_undo()) {
    // required bool is_undo = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandShowSetSlideNumberVisibilityArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool slide_numbers_visible = 3;
    total_size += 1 + 1;

    // required bool is_undo = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_to_skip_size();
  for (const auto& msg : this->_impl_.ids_of_slide_nodes_to_skip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_already_correct_size();
  for (const auto& msg : this->_impl_.ids_of_slide_nodes_already_correct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetSlideNumberVisibilityArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetSlideNumberVisibilityArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetSlideNumberVisibilityArchive::GetClassData() const { return &_class_data_; }


void CommandShowSetSlideNumberVisibilityArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetSlideNumberVisibilityArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowSetSlideNumberVisibilityArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_of_slide_nodes_to_skip_.MergeFrom(from._impl_.ids_of_slide_nodes_to_skip_);
  _this->_impl_.ids_of_slide_nodes_already_correct_.MergeFrom(from._impl_.ids_of_slide_nodes_already_correct_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slide_numbers_visible_ = from._impl_.slide_numbers_visible_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_undo_ = from._impl_.is_undo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetSlideNumberVisibilityArchive::CopyFrom(const CommandShowSetSlideNumberVisibilityArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSlideNumberVisibilityArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ids_of_slide_nodes_to_skip_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ids_of_slide_nodes_already_correct_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSlideNumberVisibilityArchive::InternalSwap(CommandShowSetSlideNumberVisibilityArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ids_of_slide_nodes_to_skip_.InternalSwap(&other->_impl_.ids_of_slide_nodes_to_skip_);
  _impl_.ids_of_slide_nodes_already_correct_.InternalSwap(&other->_impl_.ids_of_slide_nodes_already_correct_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, _impl_.is_undo_)
      + sizeof(CommandShowSetSlideNumberVisibilityArchive::_impl_.is_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetSlideNumberVisibilityArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[42]);
}

// ===================================================================

class CommandTemplateSetThumbnailTextArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTemplateSetThumbnailTextArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandTemplateSetThumbnailTextArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& template_id(const CommandTemplateSetThumbnailTextArchive* msg);
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_body(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_new_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandTemplateSetThumbnailTextArchive::_Internal::super(const CommandTemplateSetThumbnailTextArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandTemplateSetThumbnailTextArchive::_Internal::template_id(const CommandTemplateSetThumbnailTextArchive* msg) {
  return *msg->_impl_.template_id_;
}
void CommandTemplateSetThumbnailTextArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandTemplateSetThumbnailTextArchive::clear_template_id() {
  if (_impl_.template_id_ != nullptr) _impl_.template_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandTemplateSetThumbnailTextArchive::CommandTemplateSetThumbnailTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandTemplateSetThumbnailTextArchive)
}
CommandTemplateSetThumbnailTextArchive::CommandTemplateSetThumbnailTextArchive(const CommandTemplateSetThumbnailTextArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandTemplateSetThumbnailTextArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_text_){}
    , decltype(_impl_.old_text_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.template_id_){nullptr}
    , decltype(_impl_.is_body_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.new_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_text()) {
    _this->_impl_.new_text_.Set(from._internal_new_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_text()) {
    _this->_impl_.old_text_.Set(from._internal_old_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_template_id()) {
    _this->_impl_.template_id_ = new ::TSP::UUID(*from._impl_.template_id_);
  }
  _this->_impl_.is_body_ = from._impl_.is_body_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandTemplateSetThumbnailTextArchive)
}

inline void CommandTemplateSetThumbnailTextArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_text_){}
    , decltype(_impl_.old_text_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.template_id_){nullptr}
    , decltype(_impl_.is_body_){false}
  };
  _impl_.new_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandTemplateSetThumbnailTextArchive::~CommandTemplateSetThumbnailTextArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTemplateSetThumbnailTextArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandTemplateSetThumbnailTextArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_text_.Destroy();
  _impl_.old_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.template_id_;
}

void CommandTemplateSetThumbnailTextArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandTemplateSetThumbnailTextArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTemplateSetThumbnailTextArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.new_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.old_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.template_id_ != nullptr);
      _impl_.template_id_->Clear();
    }
  }
  _impl_.is_body_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTemplateSetThumbnailTextArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID template_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_body(&has_bits);
          _impl_.is_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string new_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandTemplateSetThumbnailTextArchive.new_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string old_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_old_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandTemplateSetThumbnailTextArchive.old_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandTemplateSetThumbnailTextArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTemplateSetThumbnailTextArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID template_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::template_id(this),
        _Internal::template_id(this).GetCachedSize(), target, stream);
  }

  // required bool is_body = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_body(), target);
  }

  // optional string new_text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_new_text().data(), static_cast<int>(this->_internal_new_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTemplateSetThumbnailTextArchive.new_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_text(), target);
  }

  // optional string old_text = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_text().data(), static_cast<int>(this->_internal_old_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTemplateSetThumbnailTextArchive.old_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_old_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTemplateSetThumbnailTextArchive)
  return target;
}

size_t CommandTemplateSetThumbnailTextArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTemplateSetThumbnailTextArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_template_id()) {
    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_id_);
  }

  if (_internal_has_is_body()) {
    // required bool is_body = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandTemplateSetThumbnailTextArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTemplateSetThumbnailTextArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_id_);

    // required bool is_body = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string new_text = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_text());
    }

    // optional string old_text = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_text());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTemplateSetThumbnailTextArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandTemplateSetThumbnailTextArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTemplateSetThumbnailTextArchive::GetClassData() const { return &_class_data_; }


void CommandTemplateSetThumbnailTextArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandTemplateSetThumbnailTextArchive*>(&to_msg);
  auto& from = static_cast<const CommandTemplateSetThumbnailTextArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTemplateSetThumbnailTextArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_new_text(from._internal_new_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_old_text(from._internal_old_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_template_id()->::TSP::UUID::MergeFrom(
          from._internal_template_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_body_ = from._impl_.is_body_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTemplateSetThumbnailTextArchive::CopyFrom(const CommandTemplateSetThumbnailTextArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTemplateSetThumbnailTextArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTemplateSetThumbnailTextArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_template_id()) {
    if (!_impl_.template_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandTemplateSetThumbnailTextArchive::InternalSwap(CommandTemplateSetThumbnailTextArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_text_, lhs_arena,
      &other->_impl_.new_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_text_, lhs_arena,
      &other->_impl_.old_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTemplateSetThumbnailTextArchive, _impl_.is_body_)
      + sizeof(CommandTemplateSetThumbnailTextArchive::_impl_.is_body_)
      - PROTOBUF_FIELD_OFFSET(CommandTemplateSetThumbnailTextArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTemplateSetThumbnailTextArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[43]);
}

// ===================================================================

class CommandTemplateSetBodyStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTemplateSetBodyStylesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandTemplateSetBodyStylesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& template_id(const CommandTemplateSetBodyStylesArchive* msg);
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandTemplateSetBodyStylesArchive::_Internal::super(const CommandTemplateSetBodyStylesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandTemplateSetBodyStylesArchive::_Internal::template_id(const CommandTemplateSetBodyStylesArchive* msg) {
  return *msg->_impl_.template_id_;
}
void CommandTemplateSetBodyStylesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandTemplateSetBodyStylesArchive::clear_template_id() {
  if (_impl_.template_id_ != nullptr) _impl_.template_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandTemplateSetBodyStylesArchive::clear_new_paragraph_styles() {
  _impl_.new_paragraph_styles_.Clear();
}
void CommandTemplateSetBodyStylesArchive::clear_new_list_styles() {
  _impl_.new_list_styles_.Clear();
}
void CommandTemplateSetBodyStylesArchive::clear_old_paragraph_styles() {
  _impl_.old_paragraph_styles_.Clear();
}
void CommandTemplateSetBodyStylesArchive::clear_old_list_styles() {
  _impl_.old_list_styles_.Clear();
}
CommandTemplateSetBodyStylesArchive::CommandTemplateSetBodyStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandTemplateSetBodyStylesArchive)
}
CommandTemplateSetBodyStylesArchive::CommandTemplateSetBodyStylesArchive(const CommandTemplateSetBodyStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandTemplateSetBodyStylesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_paragraph_styles_){from._impl_.new_paragraph_styles_}
    , decltype(_impl_.new_list_styles_){from._impl_.new_list_styles_}
    , decltype(_impl_.old_paragraph_styles_){from._impl_.old_paragraph_styles_}
    , decltype(_impl_.old_list_styles_){from._impl_.old_list_styles_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.template_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_template_id()) {
    _this->_impl_.template_id_ = new ::TSP::UUID(*from._impl_.template_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandTemplateSetBodyStylesArchive)
}

inline void CommandTemplateSetBodyStylesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_paragraph_styles_){arena}
    , decltype(_impl_.new_list_styles_){arena}
    , decltype(_impl_.old_paragraph_styles_){arena}
    , decltype(_impl_.old_list_styles_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.template_id_){nullptr}
  };
}

CommandTemplateSetBodyStylesArchive::~CommandTemplateSetBodyStylesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTemplateSetBodyStylesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandTemplateSetBodyStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_paragraph_styles_.~RepeatedPtrField();
  _impl_.new_list_styles_.~RepeatedPtrField();
  _impl_.old_paragraph_styles_.~RepeatedPtrField();
  _impl_.old_list_styles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.template_id_;
}

void CommandTemplateSetBodyStylesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandTemplateSetBodyStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTemplateSetBodyStylesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_paragraph_styles_.Clear();
  _impl_.new_list_styles_.Clear();
  _impl_.old_paragraph_styles_.Clear();
  _impl_.old_list_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.template_id_ != nullptr);
      _impl_.template_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTemplateSetBodyStylesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID template_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_paragraph_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_list_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_list_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_paragraph_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_list_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_list_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandTemplateSetBodyStylesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTemplateSetBodyStylesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID template_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::template_id(this),
        _Internal::template_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference new_paragraph_styles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_list_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_list_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_list_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_list_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTemplateSetBodyStylesArchive)
  return target;
}

size_t CommandTemplateSetBodyStylesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTemplateSetBodyStylesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_template_id()) {
    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_id_);
  }

  return total_size;
}
size_t CommandTemplateSetBodyStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTemplateSetBodyStylesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference new_paragraph_styles = 3;
  total_size += 1UL * this->_internal_new_paragraph_styles_size();
  for (const auto& msg : this->_impl_.new_paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  total_size += 1UL * this->_internal_new_list_styles_size();
  for (const auto& msg : this->_impl_.new_list_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  total_size += 1UL * this->_internal_old_paragraph_styles_size();
  for (const auto& msg : this->_impl_.old_paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  total_size += 1UL * this->_internal_old_list_styles_size();
  for (const auto& msg : this->_impl_.old_list_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTemplateSetBodyStylesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandTemplateSetBodyStylesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTemplateSetBodyStylesArchive::GetClassData() const { return &_class_data_; }


void CommandTemplateSetBodyStylesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandTemplateSetBodyStylesArchive*>(&to_msg);
  auto& from = static_cast<const CommandTemplateSetBodyStylesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTemplateSetBodyStylesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.new_paragraph_styles_.MergeFrom(from._impl_.new_paragraph_styles_);
  _this->_impl_.new_list_styles_.MergeFrom(from._impl_.new_list_styles_);
  _this->_impl_.old_paragraph_styles_.MergeFrom(from._impl_.old_paragraph_styles_);
  _this->_impl_.old_list_styles_.MergeFrom(from._impl_.old_list_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_template_id()->::TSP::UUID::MergeFrom(
          from._internal_template_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTemplateSetBodyStylesArchive::CopyFrom(const CommandTemplateSetBodyStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTemplateSetBodyStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTemplateSetBodyStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_paragraph_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_list_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_paragraph_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_list_styles_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_template_id()) {
    if (!_impl_.template_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandTemplateSetBodyStylesArchive::InternalSwap(CommandTemplateSetBodyStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.new_paragraph_styles_.InternalSwap(&other->_impl_.new_paragraph_styles_);
  _impl_.new_list_styles_.InternalSwap(&other->_impl_.new_list_styles_);
  _impl_.old_paragraph_styles_.InternalSwap(&other->_impl_.old_paragraph_styles_);
  _impl_.old_list_styles_.InternalSwap(&other->_impl_.old_list_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTemplateSetBodyStylesArchive, _impl_.template_id_)
      + sizeof(CommandTemplateSetBodyStylesArchive::_impl_.template_id_)
      - PROTOBUF_FIELD_OFFSET(CommandTemplateSetBodyStylesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTemplateSetBodyStylesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[44]);
}

// ===================================================================

class CommandChangeTemplateSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChangeTemplateSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& template_slide_node(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_template_slide_node(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_old_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_undo_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& target_prototype(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_target_prototype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000027) ^ 0x00000027) != 0;
  }
};

const ::TSK::CommandArchive&
CommandChangeTemplateSlideArchive::_Internal::super(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandChangeTemplateSlideArchive::_Internal::slide_id_path(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->_impl_.slide_id_path_;
}
const ::TSP::Reference&
CommandChangeTemplateSlideArchive::_Internal::template_slide_node(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->_impl_.template_slide_node_;
}
const ::TSP::Reference&
CommandChangeTemplateSlideArchive::_Internal::old_template_slide_node(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->_impl_.old_template_slide_node_;
}
const ::TSP::Reference&
CommandChangeTemplateSlideArchive::_Internal::target_prototype(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->_impl_.target_prototype_;
}
void CommandChangeTemplateSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandChangeTemplateSlideArchive::clear_slide_id_path() {
  if (_impl_.slide_id_path_ != nullptr) _impl_.slide_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandChangeTemplateSlideArchive::clear_template_slide_node() {
  if (_impl_.template_slide_node_ != nullptr) _impl_.template_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandChangeTemplateSlideArchive::clear_old_template_slide_node() {
  if (_impl_.old_template_slide_node_ != nullptr) _impl_.old_template_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandChangeTemplateSlideArchive::clear_target_prototype() {
  if (_impl_.target_prototype_ != nullptr) _impl_.target_prototype_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandChangeTemplateSlideArchive::CommandChangeTemplateSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandChangeTemplateSlideArchive)
}
CommandChangeTemplateSlideArchive::CommandChangeTemplateSlideArchive(const CommandChangeTemplateSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChangeTemplateSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.template_slide_node_){nullptr}
    , decltype(_impl_.old_template_slide_node_){nullptr}
    , decltype(_impl_.target_prototype_){nullptr}
    , decltype(_impl_.is_undo_redo_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id_path()) {
    _this->_impl_.slide_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_id_path_);
  }
  if (from._internal_has_template_slide_node()) {
    _this->_impl_.template_slide_node_ = new ::TSP::Reference(*from._impl_.template_slide_node_);
  }
  if (from._internal_has_old_template_slide_node()) {
    _this->_impl_.old_template_slide_node_ = new ::TSP::Reference(*from._impl_.old_template_slide_node_);
  }
  if (from._internal_has_target_prototype()) {
    _this->_impl_.target_prototype_ = new ::TSP::Reference(*from._impl_.target_prototype_);
  }
  _this->_impl_.is_undo_redo_ = from._impl_.is_undo_redo_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandChangeTemplateSlideArchive)
}

inline void CommandChangeTemplateSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.template_slide_node_){nullptr}
    , decltype(_impl_.old_template_slide_node_){nullptr}
    , decltype(_impl_.target_prototype_){nullptr}
    , decltype(_impl_.is_undo_redo_){false}
  };
}

CommandChangeTemplateSlideArchive::~CommandChangeTemplateSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandChangeTemplateSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChangeTemplateSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_path_;
  if (this != internal_default_instance()) delete _impl_.template_slide_node_;
  if (this != internal_default_instance()) delete _impl_.old_template_slide_node_;
  if (this != internal_default_instance()) delete _impl_.target_prototype_;
}

void CommandChangeTemplateSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChangeTemplateSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandChangeTemplateSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_path_ != nullptr);
      _impl_.slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.template_slide_node_ != nullptr);
      _impl_.template_slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_template_slide_node_ != nullptr);
      _impl_.old_template_slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.target_prototype_ != nullptr);
      _impl_.target_prototype_->Clear();
    }
  }
  _impl_.is_undo_redo_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChangeTemplateSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference template_slide_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_template_slide_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_template_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_undo_redo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_undo_redo(&has_bits);
          _impl_.is_undo_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference target_prototype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_prototype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChangeTemplateSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandChangeTemplateSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id_path(this),
        _Internal::slide_id_path(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference template_slide_node = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::template_slide_node(this),
        _Internal::template_slide_node(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_template_slide_node = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_template_slide_node(this),
        _Internal::old_template_slide_node(this).GetCachedSize(), target, stream);
  }

  // required bool is_undo_redo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_undo_redo(), target);
  }

  // optional .TSP.Reference target_prototype = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::target_prototype(this),
        _Internal::target_prototype(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandChangeTemplateSlideArchive)
  return target;
}

size_t CommandChangeTemplateSlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandChangeTemplateSlideArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);
  }

  if (_internal_has_template_slide_node()) {
    // required .TSP.Reference template_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_slide_node_);
  }

  if (_internal_has_is_undo_redo()) {
    // required bool is_undo_redo = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandChangeTemplateSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandChangeTemplateSlideArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);

    // required .TSP.Reference template_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_slide_node_);

    // required bool is_undo_redo = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional .TSP.Reference old_template_slide_node = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_template_slide_node_);
    }

    // optional .TSP.Reference target_prototype = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_prototype_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChangeTemplateSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChangeTemplateSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChangeTemplateSlideArchive::GetClassData() const { return &_class_data_; }


void CommandChangeTemplateSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChangeTemplateSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandChangeTemplateSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandChangeTemplateSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_template_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_template_slide_node());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_template_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_old_template_slide_node());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_target_prototype()->::TSP::Reference::MergeFrom(
          from._internal_target_prototype());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_undo_redo_ = from._impl_.is_undo_redo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChangeTemplateSlideArchive::CopyFrom(const CommandChangeTemplateSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandChangeTemplateSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeTemplateSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!_impl_.slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_template_slide_node()) {
    if (!_impl_.template_slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_old_template_slide_node()) {
    if (!_impl_.old_template_slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_target_prototype()) {
    if (!_impl_.target_prototype_->IsInitialized()) return false;
  }
  return true;
}

void CommandChangeTemplateSlideArchive::InternalSwap(CommandChangeTemplateSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChangeTemplateSlideArchive, _impl_.is_undo_redo_)
      + sizeof(CommandChangeTemplateSlideArchive::_impl_.is_undo_redo_)
      - PROTOBUF_FIELD_OFFSET(CommandChangeTemplateSlideArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChangeTemplateSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[45]);
}

// ===================================================================

class CommandSlidePrimitiveSetTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlidePrimitiveSetTemplateArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& template_id(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_template_slide_node(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_old_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlidePrimitiveSetTemplateArchive::_Internal::super(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandSlidePrimitiveSetTemplateArchive::_Internal::slide_id_path(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->_impl_.slide_id_path_;
}
const ::TSP::UUID&
CommandSlidePrimitiveSetTemplateArchive::_Internal::template_id(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->_impl_.template_id_;
}
const ::TSP::Reference&
CommandSlidePrimitiveSetTemplateArchive::_Internal::old_template_slide_node(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->_impl_.old_template_slide_node_;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_slide_id_path() {
  if (_impl_.slide_id_path_ != nullptr) _impl_.slide_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_template_id() {
  if (_impl_.template_id_ != nullptr) _impl_.template_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_old_template_slide_node() {
  if (_impl_.old_template_slide_node_ != nullptr) _impl_.old_template_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSlidePrimitiveSetTemplateArchive::CommandSlidePrimitiveSetTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlidePrimitiveSetTemplateArchive)
}
CommandSlidePrimitiveSetTemplateArchive::CommandSlidePrimitiveSetTemplateArchive(const CommandSlidePrimitiveSetTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlidePrimitiveSetTemplateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.template_id_){nullptr}
    , decltype(_impl_.old_template_slide_node_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id_path()) {
    _this->_impl_.slide_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_id_path_);
  }
  if (from._internal_has_template_id()) {
    _this->_impl_.template_id_ = new ::TSP::UUID(*from._impl_.template_id_);
  }
  if (from._internal_has_old_template_slide_node()) {
    _this->_impl_.old_template_slide_node_ = new ::TSP::Reference(*from._impl_.old_template_slide_node_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlidePrimitiveSetTemplateArchive)
}

inline void CommandSlidePrimitiveSetTemplateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.template_id_){nullptr}
    , decltype(_impl_.old_template_slide_node_){nullptr}
  };
}

CommandSlidePrimitiveSetTemplateArchive::~CommandSlidePrimitiveSetTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlidePrimitiveSetTemplateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlidePrimitiveSetTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_path_;
  if (this != internal_default_instance()) delete _impl_.template_id_;
  if (this != internal_default_instance()) delete _impl_.old_template_slide_node_;
}

void CommandSlidePrimitiveSetTemplateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlidePrimitiveSetTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_path_ != nullptr);
      _impl_.slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.template_id_ != nullptr);
      _impl_.template_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_template_slide_node_ != nullptr);
      _impl_.old_template_slide_node_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlidePrimitiveSetTemplateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID template_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_template_slide_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_template_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlidePrimitiveSetTemplateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id_path(this),
        _Internal::slide_id_path(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID template_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::template_id(this),
        _Internal::template_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_template_slide_node = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_template_slide_node(this),
        _Internal::old_template_slide_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlidePrimitiveSetTemplateArchive)
  return target;
}

size_t CommandSlidePrimitiveSetTemplateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);
  }

  if (_internal_has_template_id()) {
    // required .TSP.UUID template_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_id_);
  }

  return total_size;
}
size_t CommandSlidePrimitiveSetTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);

    // required .TSP.UUID template_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_template_slide_node = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_template_slide_node_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlidePrimitiveSetTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlidePrimitiveSetTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlidePrimitiveSetTemplateArchive::GetClassData() const { return &_class_data_; }


void CommandSlidePrimitiveSetTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlidePrimitiveSetTemplateArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlidePrimitiveSetTemplateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_template_id()->::TSP::UUID::MergeFrom(
          from._internal_template_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_template_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_old_template_slide_node());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlidePrimitiveSetTemplateArchive::CopyFrom(const CommandSlidePrimitiveSetTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePrimitiveSetTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!_impl_.slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_template_id()) {
    if (!_impl_.template_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_template_slide_node()) {
    if (!_impl_.old_template_slide_node_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePrimitiveSetTemplateArchive::InternalSwap(CommandSlidePrimitiveSetTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlidePrimitiveSetTemplateArchive, _impl_.old_template_slide_node_)
      + sizeof(CommandSlidePrimitiveSetTemplateArchive::_impl_.old_template_slide_node_)
      - PROTOBUF_FIELD_OFFSET(CommandSlidePrimitiveSetTemplateArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlidePrimitiveSetTemplateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[46]);
}

// ===================================================================

class CommandSlideResetTemplateBackgroundObjectsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideResetTemplateBackgroundObjectsArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideResetTemplateBackgroundObjectsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlideResetTemplateBackgroundObjectsArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideResetTemplateBackgroundObjectsArchive::_Internal::super(const CommandSlideResetTemplateBackgroundObjectsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandSlideResetTemplateBackgroundObjectsArchive::_Internal::slide_id_path(const CommandSlideResetTemplateBackgroundObjectsArchive* msg) {
  return *msg->_impl_.slide_id_path_;
}
void CommandSlideResetTemplateBackgroundObjectsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideResetTemplateBackgroundObjectsArchive::clear_slide_id_path() {
  if (_impl_.slide_id_path_ != nullptr) _impl_.slide_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSlideResetTemplateBackgroundObjectsArchive::CommandSlideResetTemplateBackgroundObjectsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
}
CommandSlideResetTemplateBackgroundObjectsArchive::CommandSlideResetTemplateBackgroundObjectsArchive(const CommandSlideResetTemplateBackgroundObjectsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideResetTemplateBackgroundObjectsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id_path()) {
    _this->_impl_.slide_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
}

inline void CommandSlideResetTemplateBackgroundObjectsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
  };
}

CommandSlideResetTemplateBackgroundObjectsArchive::~CommandSlideResetTemplateBackgroundObjectsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideResetTemplateBackgroundObjectsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_path_;
}

void CommandSlideResetTemplateBackgroundObjectsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideResetTemplateBackgroundObjectsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_path_ != nullptr);
      _impl_.slide_id_path_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideResetTemplateBackgroundObjectsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideResetTemplateBackgroundObjectsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id_path(this),
        _Internal::slide_id_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  return target;
}

size_t CommandSlideResetTemplateBackgroundObjectsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath slide_id_path = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideResetTemplateBackgroundObjectsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideResetTemplateBackgroundObjectsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideResetTemplateBackgroundObjectsArchive::GetClassData() const { return &_class_data_; }


void CommandSlideResetTemplateBackgroundObjectsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideResetTemplateBackgroundObjectsArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideResetTemplateBackgroundObjectsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_id_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideResetTemplateBackgroundObjectsArchive::CopyFrom(const CommandSlideResetTemplateBackgroundObjectsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideResetTemplateBackgroundObjectsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!_impl_.slide_id_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideResetTemplateBackgroundObjectsArchive::InternalSwap(CommandSlideResetTemplateBackgroundObjectsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideResetTemplateBackgroundObjectsArchive, _impl_.slide_id_path_)
      + sizeof(CommandSlideResetTemplateBackgroundObjectsArchive::_impl_.slide_id_path_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideResetTemplateBackgroundObjectsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideResetTemplateBackgroundObjectsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[47]);
}

// ===================================================================

class CommandShowSetSoundtrack::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetSoundtrack>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetSoundtrack* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowSetSoundtrack* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& soundtrack(const CommandShowSetSoundtrack* msg);
  static void set_has_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_soundtrack(const CommandShowSetSoundtrack* msg);
  static void set_has_old_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetSoundtrack::_Internal::super(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::show(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::soundtrack(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.soundtrack_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::old_soundtrack(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.old_soundtrack_;
}
void CommandShowSetSoundtrack::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowSetSoundtrack::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowSetSoundtrack::clear_soundtrack() {
  if (_impl_.soundtrack_ != nullptr) _impl_.soundtrack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowSetSoundtrack::clear_old_soundtrack() {
  if (_impl_.old_soundtrack_ != nullptr) _impl_.old_soundtrack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandShowSetSoundtrack::CommandShowSetSoundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetSoundtrack)
}
CommandShowSetSoundtrack::CommandShowSetSoundtrack(const CommandShowSetSoundtrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetSoundtrack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.old_soundtrack_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_soundtrack()) {
    _this->_impl_.soundtrack_ = new ::TSP::Reference(*from._impl_.soundtrack_);
  }
  if (from._internal_has_old_soundtrack()) {
    _this->_impl_.old_soundtrack_ = new ::TSP::Reference(*from._impl_.old_soundtrack_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetSoundtrack)
}

inline void CommandShowSetSoundtrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.old_soundtrack_){nullptr}
  };
}

CommandShowSetSoundtrack::~CommandShowSetSoundtrack() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetSoundtrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetSoundtrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.soundtrack_;
  if (this != internal_default_instance()) delete _impl_.old_soundtrack_;
}

void CommandShowSetSoundtrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetSoundtrack::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetSoundtrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.soundtrack_ != nullptr);
      _impl_.soundtrack_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_soundtrack_ != nullptr);
      _impl_.old_soundtrack_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetSoundtrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference soundtrack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_soundtrack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_soundtrack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetSoundtrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetSoundtrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference soundtrack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::soundtrack(this),
        _Internal::soundtrack(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_soundtrack = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_soundtrack(this),
        _Internal::old_soundtrack(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetSoundtrack)
  return target;
}

size_t CommandShowSetSoundtrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetSoundtrack)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.show_);
    }

    // optional .TSP.Reference soundtrack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.soundtrack_);
    }

    // optional .TSP.Reference old_soundtrack = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_soundtrack_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetSoundtrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetSoundtrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetSoundtrack::GetClassData() const { return &_class_data_; }


void CommandShowSetSoundtrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetSoundtrack*>(&to_msg);
  auto& from = static_cast<const CommandShowSetSoundtrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetSoundtrack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_soundtrack()->::TSP::Reference::MergeFrom(
          from._internal_soundtrack());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_soundtrack()->::TSP::Reference::MergeFrom(
          from._internal_old_soundtrack());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetSoundtrack::CopyFrom(const CommandShowSetSoundtrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetSoundtrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSoundtrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack()) {
    if (!_impl_.soundtrack_->IsInitialized()) return false;
  }
  if (_internal_has_old_soundtrack()) {
    if (!_impl_.old_soundtrack_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSoundtrack::InternalSwap(CommandShowSetSoundtrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetSoundtrack, _impl_.old_soundtrack_)
      + sizeof(CommandShowSetSoundtrack::_impl_.old_soundtrack_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetSoundtrack, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetSoundtrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[48]);
}

// ===================================================================

class CommandSoundtrackSetValue_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSoundtrackSetValue_PropertyValue>()._impl_._has_bits_);
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CommandSoundtrackSetValue_PropertyValue::clear_media_reference_values() {
  _impl_.media_reference_values_.Clear();
}
CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSoundtrackSetValue.PropertyValue)
}
CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(const CommandSoundtrackSetValue_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSoundtrackSetValue_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_reference_values_){from._impl_.media_reference_values_}
    , decltype(_impl_.double_value_){}
    , decltype(_impl_.mode_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.double_value_, &from._impl_.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_value_) -
    reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.mode_value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSoundtrackSetValue.PropertyValue)
}

inline void CommandSoundtrackSetValue_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_reference_values_){arena}
    , decltype(_impl_.double_value_){0}
    , decltype(_impl_.mode_value_){0}
  };
}

CommandSoundtrackSetValue_PropertyValue::~CommandSoundtrackSetValue_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSoundtrackSetValue.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSoundtrackSetValue_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_reference_values_.~RepeatedPtrField();
}

void CommandSoundtrackSetValue_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSoundtrackSetValue_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSoundtrackSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_reference_values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mode_value_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.mode_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSoundtrackSetValue_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::Soundtrack_SoundtrackMode_IsValid(val))) {
            _internal_set_mode_value(static_cast<::KN::Soundtrack_SoundtrackMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference media_reference_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media_reference_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSoundtrackSetValue_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSoundtrackSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double double_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode_value(), target);
  }

  // repeated .TSP.DataReference media_reference_values = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_reference_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_media_reference_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSoundtrackSetValue.PropertyValue)
  return target;
}

size_t CommandSoundtrackSetValue_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSoundtrackSetValue.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataReference media_reference_values = 3;
  total_size += 1UL * this->_internal_media_reference_values_size();
  for (const auto& msg : this->_impl_.media_reference_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double double_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSoundtrackSetValue_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSoundtrackSetValue_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSoundtrackSetValue_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandSoundtrackSetValue_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSoundtrackSetValue_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandSoundtrackSetValue_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSoundtrackSetValue.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_reference_values_.MergeFrom(from._impl_.media_reference_values_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mode_value_ = from._impl_.mode_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSoundtrackSetValue_PropertyValue::CopyFrom(const CommandSoundtrackSetValue_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSoundtrackSetValue.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue_PropertyValue::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.media_reference_values_))
    return false;
  return true;
}

void CommandSoundtrackSetValue_PropertyValue::InternalSwap(CommandSoundtrackSetValue_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.media_reference_values_.InternalSwap(&other->_impl_.media_reference_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, _impl_.mode_value_)
      + sizeof(CommandSoundtrackSetValue_PropertyValue::_impl_.mode_value_)
      - PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, _impl_.double_value_)>(
          reinterpret_cast<char*>(&_impl_.double_value_),
          reinterpret_cast<char*>(&other->_impl_.double_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSoundtrackSetValue_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[49]);
}

// ===================================================================

class CommandSoundtrackSetValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSoundtrackSetValue>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSoundtrackSetValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& soundtrack_id(const CommandSoundtrackSetValue* msg);
  static void set_has_soundtrack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandSoundtrackSetValue_PropertyValue& old_value(const CommandSoundtrackSetValue* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandSoundtrackSetValue_PropertyValue& new_value(const CommandSoundtrackSetValue* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSoundtrackSetValue::_Internal::super(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSoundtrackSetValue::_Internal::soundtrack_id(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.soundtrack_id_;
}
const ::KN::CommandSoundtrackSetValue_PropertyValue&
CommandSoundtrackSetValue::_Internal::old_value(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.old_value_;
}
const ::KN::CommandSoundtrackSetValue_PropertyValue&
CommandSoundtrackSetValue::_Internal::new_value(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.new_value_;
}
void CommandSoundtrackSetValue::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSoundtrackSetValue::clear_soundtrack_id() {
  if (_impl_.soundtrack_id_ != nullptr) _impl_.soundtrack_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSoundtrackSetValue::CommandSoundtrackSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSoundtrackSetValue)
}
CommandSoundtrackSetValue::CommandSoundtrackSetValue(const CommandSoundtrackSetValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSoundtrackSetValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.soundtrack_id_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_soundtrack_id()) {
    _this->_impl_.soundtrack_id_ = new ::TSP::UUID(*from._impl_.soundtrack_id_);
  }
  if (from._internal_has_old_value()) {
    _this->_impl_.old_value_ = new ::KN::CommandSoundtrackSetValue_PropertyValue(*from._impl_.old_value_);
  }
  if (from._internal_has_new_value()) {
    _this->_impl_.new_value_ = new ::KN::CommandSoundtrackSetValue_PropertyValue(*from._impl_.new_value_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSoundtrackSetValue)
}

inline void CommandSoundtrackSetValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.soundtrack_id_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSoundtrackSetValue::~CommandSoundtrackSetValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSoundtrackSetValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSoundtrackSetValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.soundtrack_id_;
  if (this != internal_default_instance()) delete _impl_.old_value_;
  if (this != internal_default_instance()) delete _impl_.new_value_;
}

void CommandSoundtrackSetValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSoundtrackSetValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSoundtrackSetValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.soundtrack_id_ != nullptr);
      _impl_.soundtrack_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_value_ != nullptr);
      _impl_.old_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.new_value_ != nullptr);
      _impl_.new_value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSoundtrackSetValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID soundtrack_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandSoundtrackSetValue.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSoundtrackSetValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSoundtrackSetValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID soundtrack_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::soundtrack_id(this),
        _Internal::soundtrack_id(this).GetCachedSize(), target, stream);
  }

  // optional string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSoundtrackSetValue.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_value(this),
        _Internal::old_value(this).GetCachedSize(), target, stream);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_value(this),
        _Internal::new_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSoundtrackSetValue)
  return target;
}

size_t CommandSoundtrackSetValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSoundtrackSetValue)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string property = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.UUID soundtrack_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.soundtrack_id_);
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_value_);
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSoundtrackSetValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSoundtrackSetValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSoundtrackSetValue::GetClassData() const { return &_class_data_; }


void CommandSoundtrackSetValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSoundtrackSetValue*>(&to_msg);
  auto& from = static_cast<const CommandSoundtrackSetValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSoundtrackSetValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_soundtrack_id()->::TSP::UUID::MergeFrom(
          from._internal_soundtrack_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(
          from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_new_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(
          from._internal_new_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSoundtrackSetValue::CopyFrom(const CommandSoundtrackSetValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSoundtrackSetValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack_id()) {
    if (!_impl_.soundtrack_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!_impl_.old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!_impl_.new_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandSoundtrackSetValue::InternalSwap(CommandSoundtrackSetValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue, _impl_.new_value_)
      + sizeof(CommandSoundtrackSetValue::_impl_.new_value_)
      - PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSoundtrackSetValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[50]);
}

// ===================================================================

class CommandSlideUpdateTemplateDrawables::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideUpdateTemplateDrawables>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideUpdateTemplateDrawables* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideUpdateTemplateDrawables* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideUpdateTemplateDrawables::_Internal::super(const CommandSlideUpdateTemplateDrawables* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSlideUpdateTemplateDrawables::_Internal::slide_id(const CommandSlideUpdateTemplateDrawables* msg) {
  return *msg->_impl_.slide_id_;
}
void CommandSlideUpdateTemplateDrawables::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideUpdateTemplateDrawables::clear_slide_id() {
  if (_impl_.slide_id_ != nullptr) _impl_.slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideUpdateTemplateDrawables::clear_id_placement_operation_args() {
  _impl_.id_placement_operation_args_.Clear();
}
void CommandSlideUpdateTemplateDrawables::clear_old_child_infos_for_undo() {
  _impl_.old_child_infos_for_undo_.Clear();
}
CommandSlideUpdateTemplateDrawables::CommandSlideUpdateTemplateDrawables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideUpdateTemplateDrawables)
}
CommandSlideUpdateTemplateDrawables::CommandSlideUpdateTemplateDrawables(const CommandSlideUpdateTemplateDrawables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideUpdateTemplateDrawables* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_placement_operation_args_){from._impl_.id_placement_operation_args_}
    , decltype(_impl_.old_child_infos_for_undo_){from._impl_.old_child_infos_for_undo_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_id()) {
    _this->_impl_.slide_id_ = new ::TSP::UUID(*from._impl_.slide_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideUpdateTemplateDrawables)
}

inline void CommandSlideUpdateTemplateDrawables::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_placement_operation_args_){arena}
    , decltype(_impl_.old_child_infos_for_undo_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_id_){nullptr}
  };
}

CommandSlideUpdateTemplateDrawables::~CommandSlideUpdateTemplateDrawables() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideUpdateTemplateDrawables)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideUpdateTemplateDrawables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_placement_operation_args_.~RepeatedPtrField();
  _impl_.old_child_infos_for_undo_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_id_;
}

void CommandSlideUpdateTemplateDrawables::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideUpdateTemplateDrawables::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideUpdateTemplateDrawables)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_placement_operation_args_.Clear();
  _impl_.old_child_infos_for_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_id_ != nullptr);
      _impl_.slide_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideUpdateTemplateDrawables::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_placement_operation_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_child_infos_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_child_infos_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideUpdateTemplateDrawables::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideUpdateTemplateDrawables)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_id(this),
        _Internal::slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_id_placement_operation_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_id_placement_operation_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_child_infos_for_undo = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_child_infos_for_undo_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_child_infos_for_undo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideUpdateTemplateDrawables)
  return target;
}

size_t CommandSlideUpdateTemplateDrawables::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideUpdateTemplateDrawables)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);
  }

  return total_size;
}
size_t CommandSlideUpdateTemplateDrawables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideUpdateTemplateDrawables)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
  total_size += 1UL * this->_internal_id_placement_operation_args_size();
  for (const auto& msg : this->_impl_.id_placement_operation_args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_child_infos_for_undo = 4;
  total_size += 1UL * this->_internal_old_child_infos_for_undo_size();
  for (const auto& msg : this->_impl_.old_child_infos_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideUpdateTemplateDrawables::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideUpdateTemplateDrawables::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideUpdateTemplateDrawables::GetClassData() const { return &_class_data_; }


void CommandSlideUpdateTemplateDrawables::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideUpdateTemplateDrawables*>(&to_msg);
  auto& from = static_cast<const CommandSlideUpdateTemplateDrawables&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideUpdateTemplateDrawables)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_placement_operation_args_.MergeFrom(from._impl_.id_placement_operation_args_);
  _this->_impl_.old_child_infos_for_undo_.MergeFrom(from._impl_.old_child_infos_for_undo_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_slide_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideUpdateTemplateDrawables::CopyFrom(const CommandSlideUpdateTemplateDrawables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideUpdateTemplateDrawables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideUpdateTemplateDrawables::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.id_placement_operation_args_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_child_infos_for_undo_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!_impl_.slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideUpdateTemplateDrawables::InternalSwap(CommandSlideUpdateTemplateDrawables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.id_placement_operation_args_.InternalSwap(&other->_impl_.id_placement_operation_args_);
  _impl_.old_child_infos_for_undo_.InternalSwap(&other->_impl_.old_child_infos_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideUpdateTemplateDrawables, _impl_.slide_id_)
      + sizeof(CommandSlideUpdateTemplateDrawables::_impl_.slide_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideUpdateTemplateDrawables, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideUpdateTemplateDrawables::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[51]);
}

// ===================================================================

class ChartInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartInfoGeometryCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoGeometryCommandArchive& super(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& previous_legend_offset(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_previous_legend_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& previous_legend_size(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_previous_legend_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Point& adjusted_legend_offset(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_adjusted_legend_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Size& adjusted_legend_size(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_adjusted_legend_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSD::InfoGeometryCommandArchive&
ChartInfoGeometryCommandArchive::_Internal::super(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Point&
ChartInfoGeometryCommandArchive::_Internal::previous_legend_offset(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.previous_legend_offset_;
}
const ::TSP::Size&
ChartInfoGeometryCommandArchive::_Internal::previous_legend_size(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.previous_legend_size_;
}
const ::TSP::Point&
ChartInfoGeometryCommandArchive::_Internal::adjusted_legend_offset(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.adjusted_legend_offset_;
}
const ::TSP::Size&
ChartInfoGeometryCommandArchive::_Internal::adjusted_legend_size(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.adjusted_legend_size_;
}
void ChartInfoGeometryCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartInfoGeometryCommandArchive::clear_previous_legend_offset() {
  if (_impl_.previous_legend_offset_ != nullptr) _impl_.previous_legend_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartInfoGeometryCommandArchive::clear_previous_legend_size() {
  if (_impl_.previous_legend_size_ != nullptr) _impl_.previous_legend_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartInfoGeometryCommandArchive::clear_adjusted_legend_offset() {
  if (_impl_.adjusted_legend_offset_ != nullptr) _impl_.adjusted_legend_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartInfoGeometryCommandArchive::clear_adjusted_legend_size() {
  if (_impl_.adjusted_legend_size_ != nullptr) _impl_.adjusted_legend_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ChartInfoGeometryCommandArchive)
}
ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(const ChartInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartInfoGeometryCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.previous_legend_offset_){nullptr}
    , decltype(_impl_.previous_legend_size_){nullptr}
    , decltype(_impl_.adjusted_legend_offset_){nullptr}
    , decltype(_impl_.adjusted_legend_size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoGeometryCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_previous_legend_offset()) {
    _this->_impl_.previous_legend_offset_ = new ::TSP::Point(*from._impl_.previous_legend_offset_);
  }
  if (from._internal_has_previous_legend_size()) {
    _this->_impl_.previous_legend_size_ = new ::TSP::Size(*from._impl_.previous_legend_size_);
  }
  if (from._internal_has_adjusted_legend_offset()) {
    _this->_impl_.adjusted_legend_offset_ = new ::TSP::Point(*from._impl_.adjusted_legend_offset_);
  }
  if (from._internal_has_adjusted_legend_size()) {
    _this->_impl_.adjusted_legend_size_ = new ::TSP::Size(*from._impl_.adjusted_legend_size_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ChartInfoGeometryCommandArchive)
}

inline void ChartInfoGeometryCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.previous_legend_offset_){nullptr}
    , decltype(_impl_.previous_legend_size_){nullptr}
    , decltype(_impl_.adjusted_legend_offset_){nullptr}
    , decltype(_impl_.adjusted_legend_size_){nullptr}
  };
}

ChartInfoGeometryCommandArchive::~ChartInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:KN.ChartInfoGeometryCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.previous_legend_offset_;
  if (this != internal_default_instance()) delete _impl_.previous_legend_size_;
  if (this != internal_default_instance()) delete _impl_.adjusted_legend_offset_;
  if (this != internal_default_instance()) delete _impl_.adjusted_legend_size_;
}

void ChartInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ChartInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.previous_legend_offset_ != nullptr);
      _impl_.previous_legend_offset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.previous_legend_size_ != nullptr);
      _impl_.previous_legend_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.adjusted_legend_offset_ != nullptr);
      _impl_.adjusted_legend_offset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.adjusted_legend_size_ != nullptr);
      _impl_.adjusted_legend_size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Point previous_legend_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_legend_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size previous_legend_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_legend_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Point adjusted_legend_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjusted_legend_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size adjusted_legend_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjusted_legend_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartInfoGeometryCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ChartInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Point previous_legend_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::previous_legend_offset(this),
        _Internal::previous_legend_offset(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size previous_legend_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::previous_legend_size(this),
        _Internal::previous_legend_size(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Point adjusted_legend_offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::adjusted_legend_offset(this),
        _Internal::adjusted_legend_offset(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size adjusted_legend_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::adjusted_legend_size(this),
        _Internal::adjusted_legend_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ChartInfoGeometryCommandArchive)
  return target;
}

size_t ChartInfoGeometryCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.ChartInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_previous_legend_offset()) {
    // required .TSP.Point previous_legend_offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.previous_legend_offset_);
  }

  if (_internal_has_previous_legend_size()) {
    // required .TSP.Size previous_legend_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.previous_legend_size_);
  }

  if (_internal_has_adjusted_legend_offset()) {
    // required .TSP.Point adjusted_legend_offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adjusted_legend_offset_);
  }

  if (_internal_has_adjusted_legend_size()) {
    // required .TSP.Size adjusted_legend_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adjusted_legend_size_);
  }

  return total_size;
}
size_t ChartInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ChartInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Point previous_legend_offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.previous_legend_offset_);

    // required .TSP.Size previous_legend_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.previous_legend_size_);

    // required .TSP.Point adjusted_legend_offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adjusted_legend_offset_);

    // required .TSP.Size adjusted_legend_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adjusted_legend_size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartInfoGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartInfoGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartInfoGeometryCommandArchive::GetClassData() const { return &_class_data_; }


void ChartInfoGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartInfoGeometryCommandArchive*>(&to_msg);
  auto& from = static_cast<const ChartInfoGeometryCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ChartInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoGeometryCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_previous_legend_offset()->::TSP::Point::MergeFrom(
          from._internal_previous_legend_offset());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_previous_legend_size()->::TSP::Size::MergeFrom(
          from._internal_previous_legend_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_adjusted_legend_offset()->::TSP::Point::MergeFrom(
          from._internal_adjusted_legend_offset());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_adjusted_legend_size()->::TSP::Size::MergeFrom(
          from._internal_adjusted_legend_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartInfoGeometryCommandArchive::CopyFrom(const ChartInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ChartInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartInfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_previous_legend_offset()) {
    if (!_impl_.previous_legend_offset_->IsInitialized()) return false;
  }
  if (_internal_has_previous_legend_size()) {
    if (!_impl_.previous_legend_size_->IsInitialized()) return false;
  }
  if (_internal_has_adjusted_legend_offset()) {
    if (!_impl_.adjusted_legend_offset_->IsInitialized()) return false;
  }
  if (_internal_has_adjusted_legend_size()) {
    if (!_impl_.adjusted_legend_size_->IsInitialized()) return false;
  }
  return true;
}

void ChartInfoGeometryCommandArchive::InternalSwap(ChartInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartInfoGeometryCommandArchive, _impl_.adjusted_legend_size_)
      + sizeof(ChartInfoGeometryCommandArchive::_impl_.adjusted_legend_size_)
      - PROTOBUF_FIELD_OFFSET(ChartInfoGeometryCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartInfoGeometryCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[52]);
}

// ===================================================================

class CanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::transformer_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->_impl_.transformer_helper_;
}
void CanvasSelectionTransformerArchive::clear_transformer_helper() {
  if (_impl_.transformer_helper_ != nullptr) _impl_.transformer_helper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CanvasSelectionTransformerArchive::clear_build_chunk_ids() {
  _impl_.build_chunk_ids_.Clear();
}
void CanvasSelectionTransformerArchive::clear_action_build_ids() {
  _impl_.action_build_ids_.Clear();
}
void CanvasSelectionTransformerArchive::clear_originally_selected_drawable_uuids() {
  _impl_.originally_selected_drawable_uuids_.Clear();
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CanvasSelectionTransformerArchive)
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanvasSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_chunk_ids_){from._impl_.build_chunk_ids_}
    , decltype(_impl_.action_build_ids_){from._impl_.action_build_ids_}
    , decltype(_impl_.originally_selected_drawable_uuids_){from._impl_.originally_selected_drawable_uuids_}
    , decltype(_impl_.transformer_helper_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    _this->_impl_.transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from._impl_.transformer_helper_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CanvasSelectionTransformerArchive)
}

inline void CanvasSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_chunk_ids_){arena}
    , decltype(_impl_.action_build_ids_){arena}
    , decltype(_impl_.originally_selected_drawable_uuids_){arena}
    , decltype(_impl_.transformer_helper_){nullptr}
  };
}

CanvasSelectionTransformerArchive::~CanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.CanvasSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.build_chunk_ids_.~RepeatedPtrField();
  _impl_.action_build_ids_.~RepeatedPtrField();
  _impl_.originally_selected_drawable_uuids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.transformer_helper_;
}

void CanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.build_chunk_ids_.Clear();
  _impl_.action_build_ids_.Clear();
  _impl_.originally_selected_drawable_uuids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformer_helper_ != nullptr);
    _impl_.transformer_helper_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_build_chunk_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID action_build_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_build_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID originally_selected_drawable_uuids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_originally_selected_drawable_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanvasSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transformer_helper(this),
        _Internal::transformer_helper(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_build_chunk_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_build_chunk_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID action_build_ids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_build_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_action_build_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID originally_selected_drawable_uuids = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_originally_selected_drawable_uuids_size()); i < n; i++) {
    const auto& repfield = this->_internal_originally_selected_drawable_uuids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CanvasSelectionTransformerArchive)
  return target;
}

size_t CanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_helper_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
  total_size += 1UL * this->_internal_build_chunk_ids_size();
  for (const auto& msg : this->_impl_.build_chunk_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID action_build_ids = 3;
  total_size += 1UL * this->_internal_action_build_ids_size();
  for (const auto& msg : this->_impl_.action_build_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID originally_selected_drawable_uuids = 4;
  total_size += 1UL * this->_internal_originally_selected_drawable_uuids_size();
  for (const auto& msg : this->_impl_.originally_selected_drawable_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanvasSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanvasSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanvasSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void CanvasSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanvasSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const CanvasSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.build_chunk_ids_.MergeFrom(from._impl_.build_chunk_ids_);
  _this->_impl_.action_build_ids_.MergeFrom(from._impl_.action_build_ids_);
  _this->_impl_.originally_selected_drawable_uuids_.MergeFrom(from._impl_.originally_selected_drawable_uuids_);
  if (from._internal_has_transformer_helper()) {
    _this->_internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(
        from._internal_transformer_helper());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanvasSelectionTransformerArchive::CopyFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.build_chunk_ids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.action_build_ids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.originally_selected_drawable_uuids_))
    return false;
  if (_internal_has_transformer_helper()) {
    if (!_impl_.transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionTransformerArchive::InternalSwap(CanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.build_chunk_ids_.InternalSwap(&other->_impl_.build_chunk_ids_);
  _impl_.action_build_ids_.InternalSwap(&other->_impl_.action_build_ids_);
  _impl_.originally_selected_drawable_uuids_.InternalSwap(&other->_impl_.originally_selected_drawable_uuids_);
  swap(_impl_.transformer_helper_, other->_impl_.transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[53]);
}

// ===================================================================

class ActionGhostSelectionTransformerArchive::_Internal {
 public:
};

ActionGhostSelectionTransformerArchive::ActionGhostSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:KN.ActionGhostSelectionTransformerArchive)
}
ActionGhostSelectionTransformerArchive::ActionGhostSelectionTransformerArchive(const ActionGhostSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ActionGhostSelectionTransformerArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.ActionGhostSelectionTransformerArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionGhostSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionGhostSelectionTransformerArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ActionGhostSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[54]);
}

// ===================================================================

class DocumentSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& document_selection(const DocumentSelectionTransformerArchive* msg);
  static void set_has_document_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
DocumentSelectionTransformerArchive::_Internal::document_selection(const DocumentSelectionTransformerArchive* msg) {
  return *msg->_impl_.document_selection_;
}
void DocumentSelectionTransformerArchive::clear_document_selection() {
  if (_impl_.document_selection_ != nullptr) _impl_.document_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.DocumentSelectionTransformerArchive)
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(const DocumentSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document_selection()) {
    _this->_impl_.document_selection_ = new ::TSP::Reference(*from._impl_.document_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.DocumentSelectionTransformerArchive)
}

inline void DocumentSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_selection_){nullptr}
  };
}

DocumentSelectionTransformerArchive::~DocumentSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.DocumentSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.document_selection_;
}

void DocumentSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DocumentSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.document_selection_ != nullptr);
    _impl_.document_selection_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference document_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DocumentSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference document_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::document_selection(this),
        _Internal::document_selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DocumentSelectionTransformerArchive)
  return target;
}

size_t DocumentSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DocumentSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.Reference document_selection = 1;
  if (_internal_has_document_selection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_selection_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void DocumentSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const DocumentSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.DocumentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document_selection()) {
    _this->_internal_mutable_document_selection()->::TSP::Reference::MergeFrom(
        from._internal_document_selection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSelectionTransformerArchive::CopyFrom(const DocumentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DocumentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_document_selection()) {
    if (!_impl_.document_selection_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSelectionTransformerArchive::InternalSwap(DocumentSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.document_selection_, other->_impl_.document_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[55]);
}

// ===================================================================

class NoteCanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NoteCanvasSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const NoteCanvasSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
NoteCanvasSelectionTransformerArchive::_Internal::transformer_helper(const NoteCanvasSelectionTransformerArchive* msg) {
  return *msg->_impl_.transformer_helper_;
}
void NoteCanvasSelectionTransformerArchive::clear_transformer_helper() {
  if (_impl_.transformer_helper_ != nullptr) _impl_.transformer_helper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NoteCanvasSelectionTransformerArchive::NoteCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.NoteCanvasSelectionTransformerArchive)
}
NoteCanvasSelectionTransformerArchive::NoteCanvasSelectionTransformerArchive(const NoteCanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteCanvasSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    _this->_impl_.transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from._impl_.transformer_helper_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.NoteCanvasSelectionTransformerArchive)
}

inline void NoteCanvasSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}
  };
}

NoteCanvasSelectionTransformerArchive::~NoteCanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.NoteCanvasSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteCanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transformer_helper_;
}

void NoteCanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteCanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.NoteCanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformer_helper_ != nullptr);
    _impl_.transformer_helper_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteCanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteCanvasSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.NoteCanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transformer_helper(this),
        _Internal::transformer_helper(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.NoteCanvasSelectionTransformerArchive)
  return target;
}

size_t NoteCanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.NoteCanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_helper_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteCanvasSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteCanvasSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteCanvasSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void NoteCanvasSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteCanvasSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const NoteCanvasSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.NoteCanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transformer_helper()) {
    _this->_internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(
        from._internal_transformer_helper());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteCanvasSelectionTransformerArchive::CopyFrom(const NoteCanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.NoteCanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteCanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!_impl_.transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void NoteCanvasSelectionTransformerArchive::InternalSwap(NoteCanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.transformer_helper_, other->_impl_.transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteCanvasSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[56]);
}

// ===================================================================

class OutlineCanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OutlineCanvasSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& canvas_selection_transformer(const OutlineCanvasSelectionTransformerArchive* msg);
  static void set_has_canvas_selection_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& storage_uuid_path(const OutlineCanvasSelectionTransformerArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
OutlineCanvasSelectionTransformerArchive::_Internal::canvas_selection_transformer(const OutlineCanvasSelectionTransformerArchive* msg) {
  return *msg->_impl_.canvas_selection_transformer_;
}
const ::TSP::UUIDPath&
OutlineCanvasSelectionTransformerArchive::_Internal::storage_uuid_path(const OutlineCanvasSelectionTransformerArchive* msg) {
  return *msg->_impl_.storage_uuid_path_;
}
void OutlineCanvasSelectionTransformerArchive::clear_canvas_selection_transformer() {
  if (_impl_.canvas_selection_transformer_ != nullptr) _impl_.canvas_selection_transformer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OutlineCanvasSelectionTransformerArchive::clear_storage_uuid_path() {
  if (_impl_.storage_uuid_path_ != nullptr) _impl_.storage_uuid_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
OutlineCanvasSelectionTransformerArchive::OutlineCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.OutlineCanvasSelectionTransformerArchive)
}
OutlineCanvasSelectionTransformerArchive::OutlineCanvasSelectionTransformerArchive(const OutlineCanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutlineCanvasSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.canvas_selection_transformer_){nullptr}
    , decltype(_impl_.storage_uuid_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_canvas_selection_transformer()) {
    _this->_impl_.canvas_selection_transformer_ = new ::TSP::Reference(*from._impl_.canvas_selection_transformer_);
  }
  if (from._internal_has_storage_uuid_path()) {
    _this->_impl_.storage_uuid_path_ = new ::TSP::UUIDPath(*from._impl_.storage_uuid_path_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.OutlineCanvasSelectionTransformerArchive)
}

inline void OutlineCanvasSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.canvas_selection_transformer_){nullptr}
    , decltype(_impl_.storage_uuid_path_){nullptr}
  };
}

OutlineCanvasSelectionTransformerArchive::~OutlineCanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.OutlineCanvasSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutlineCanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.canvas_selection_transformer_;
  if (this != internal_default_instance()) delete _impl_.storage_uuid_path_;
}

void OutlineCanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutlineCanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.OutlineCanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.canvas_selection_transformer_ != nullptr);
      _impl_.canvas_selection_transformer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.storage_uuid_path_ != nullptr);
      _impl_.storage_uuid_path_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutlineCanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference canvas_selection_transformer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_canvas_selection_transformer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath storage_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutlineCanvasSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.OutlineCanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference canvas_selection_transformer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::canvas_selection_transformer(this),
        _Internal::canvas_selection_transformer(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::storage_uuid_path(this),
        _Internal::storage_uuid_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.OutlineCanvasSelectionTransformerArchive)
  return target;
}

size_t OutlineCanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.OutlineCanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.Reference canvas_selection_transformer = 1;
  if (_internal_has_canvas_selection_transformer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.canvas_selection_transformer_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_uuid_path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutlineCanvasSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutlineCanvasSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutlineCanvasSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void OutlineCanvasSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutlineCanvasSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const OutlineCanvasSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.OutlineCanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_canvas_selection_transformer()->::TSP::Reference::MergeFrom(
          from._internal_canvas_selection_transformer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_storage_uuid_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutlineCanvasSelectionTransformerArchive::CopyFrom(const OutlineCanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.OutlineCanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutlineCanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_canvas_selection_transformer()) {
    if (!_impl_.canvas_selection_transformer_->IsInitialized()) return false;
  }
  if (_internal_has_storage_uuid_path()) {
    if (!_impl_.storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void OutlineCanvasSelectionTransformerArchive::InternalSwap(OutlineCanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutlineCanvasSelectionTransformerArchive, _impl_.storage_uuid_path_)
      + sizeof(OutlineCanvasSelectionTransformerArchive::_impl_.storage_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(OutlineCanvasSelectionTransformerArchive, _impl_.canvas_selection_transformer_)>(
          reinterpret_cast<char*>(&_impl_.canvas_selection_transformer_),
          reinterpret_cast<char*>(&other->_impl_.canvas_selection_transformer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutlineCanvasSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[57]);
}

// ===================================================================

class SlideCollectionSelectionTransformerHelperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionTransformerHelperArchive>()._impl_._has_bits_);
  static const ::TSP::UUIDPath& slide_node_to_edit(const SlideCollectionSelectionTransformerHelperArchive* msg);
  static void set_has_slide_node_to_edit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slide_collection_is_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_previous_primary_selected_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::UUIDPath&
SlideCollectionSelectionTransformerHelperArchive::_Internal::slide_node_to_edit(const SlideCollectionSelectionTransformerHelperArchive* msg) {
  return *msg->_impl_.slide_node_to_edit_;
}
void SlideCollectionSelectionTransformerHelperArchive::clear_slide_nodes() {
  _impl_.slide_nodes_.Clear();
}
void SlideCollectionSelectionTransformerHelperArchive::clear_slide_node_to_edit() {
  if (_impl_.slide_node_to_edit_ != nullptr) _impl_.slide_node_to_edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideCollectionSelectionTransformerHelperArchive::SlideCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionTransformerHelperArchive)
}
SlideCollectionSelectionTransformerHelperArchive::SlideCollectionSelectionTransformerHelperArchive(const SlideCollectionSelectionTransformerHelperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideCollectionSelectionTransformerHelperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_){from._impl_.slide_nodes_}
    , decltype(_impl_.slide_node_to_edit_){nullptr}
    , decltype(_impl_.slide_collection_is_theme_){}
    , decltype(_impl_.previous_primary_selected_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node_to_edit()) {
    _this->_impl_.slide_node_to_edit_ = new ::TSP::UUIDPath(*from._impl_.slide_node_to_edit_);
  }
  ::memcpy(&_impl_.slide_collection_is_theme_, &from._impl_.slide_collection_is_theme_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.previous_primary_selected_index_) -
    reinterpret_cast<char*>(&_impl_.slide_collection_is_theme_)) + sizeof(_impl_.previous_primary_selected_index_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionTransformerHelperArchive)
}

inline void SlideCollectionSelectionTransformerHelperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_){arena}
    , decltype(_impl_.slide_node_to_edit_){nullptr}
    , decltype(_impl_.slide_collection_is_theme_){false}
    , decltype(_impl_.previous_primary_selected_index_){0u}
  };
}

SlideCollectionSelectionTransformerHelperArchive::~SlideCollectionSelectionTransformerHelperArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionTransformerHelperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideCollectionSelectionTransformerHelperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slide_nodes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slide_node_to_edit_;
}

void SlideCollectionSelectionTransformerHelperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideCollectionSelectionTransformerHelperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slide_nodes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.slide_node_to_edit_ != nullptr);
    _impl_.slide_node_to_edit_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.slide_collection_is_theme_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.previous_primary_selected_index_) -
        reinterpret_cast<char*>(&_impl_.slide_collection_is_theme_)) + sizeof(_impl_.previous_primary_selected_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionTransformerHelperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUIDPath slide_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath slide_node_to_edit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_to_edit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool slide_collection_is_theme = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slide_collection_is_theme(&has_bits);
          _impl_.slide_collection_is_theme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 previous_primary_selected_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_previous_primary_selected_index(&has_bits);
          _impl_.previous_primary_selected_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideCollectionSelectionTransformerHelperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath slide_nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUIDPath slide_node_to_edit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_node_to_edit(this),
        _Internal::slide_node_to_edit(this).GetCachedSize(), target, stream);
  }

  // optional bool slide_collection_is_theme = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_slide_collection_is_theme(), target);
  }

  // optional uint32 previous_primary_selected_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_previous_primary_selected_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionTransformerHelperArchive)
  return target;
}

size_t SlideCollectionSelectionTransformerHelperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath slide_nodes = 1;
  total_size += 1UL * this->_internal_slide_nodes_size();
  for (const auto& msg : this->_impl_.slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.UUIDPath slide_node_to_edit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_node_to_edit_);
    }

    // optional bool slide_collection_is_theme = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 previous_primary_selected_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_previous_primary_selected_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionTransformerHelperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideCollectionSelectionTransformerHelperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionTransformerHelperArchive::GetClassData() const { return &_class_data_; }


void SlideCollectionSelectionTransformerHelperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideCollectionSelectionTransformerHelperArchive*>(&to_msg);
  auto& from = static_cast<const SlideCollectionSelectionTransformerHelperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slide_nodes_.MergeFrom(from._impl_.slide_nodes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_node_to_edit()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_node_to_edit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slide_collection_is_theme_ = from._impl_.slide_collection_is_theme_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.previous_primary_selected_index_ = from._impl_.previous_primary_selected_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionTransformerHelperArchive::CopyFrom(const SlideCollectionSelectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionTransformerHelperArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_))
    return false;
  if (_internal_has_slide_node_to_edit()) {
    if (!_impl_.slide_node_to_edit_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionTransformerHelperArchive::InternalSwap(SlideCollectionSelectionTransformerHelperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slide_nodes_.InternalSwap(&other->_impl_.slide_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionTransformerHelperArchive, _impl_.previous_primary_selected_index_)
      + sizeof(SlideCollectionSelectionTransformerHelperArchive::_impl_.previous_primary_selected_index_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionTransformerHelperArchive, _impl_.slide_node_to_edit_)>(
          reinterpret_cast<char*>(&_impl_.slide_node_to_edit_),
          reinterpret_cast<char*>(&other->_impl_.slide_node_to_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionTransformerHelperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[58]);
}

// ===================================================================

class SlideCollectionSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::KN::SlideCollectionSelectionTransformerHelperArchive& transformer_helper(const SlideCollectionSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::KN::SlideCollectionSelectionTransformerHelperArchive&
SlideCollectionSelectionTransformerArchive::_Internal::transformer_helper(const SlideCollectionSelectionTransformerArchive* msg) {
  return *msg->_impl_.transformer_helper_;
}
SlideCollectionSelectionTransformerArchive::SlideCollectionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionTransformerArchive)
}
SlideCollectionSelectionTransformerArchive::SlideCollectionSelectionTransformerArchive(const SlideCollectionSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideCollectionSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    _this->_impl_.transformer_helper_ = new ::KN::SlideCollectionSelectionTransformerHelperArchive(*from._impl_.transformer_helper_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionTransformerArchive)
}

inline void SlideCollectionSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}
  };
}

SlideCollectionSelectionTransformerArchive::~SlideCollectionSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideCollectionSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transformer_helper_;
}

void SlideCollectionSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideCollectionSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformer_helper_ != nullptr);
    _impl_.transformer_helper_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideCollectionSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transformer_helper(this),
        _Internal::transformer_helper(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionTransformerArchive)
  return target;
}

size_t SlideCollectionSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionTransformerArchive)
  size_t total_size = 0;

  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_helper_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideCollectionSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void SlideCollectionSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideCollectionSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const SlideCollectionSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transformer_helper()) {
    _this->_internal_mutable_transformer_helper()->::KN::SlideCollectionSelectionTransformerHelperArchive::MergeFrom(
        from._internal_transformer_helper());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionTransformerArchive::CopyFrom(const SlideCollectionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!_impl_.transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionTransformerArchive::InternalSwap(SlideCollectionSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.transformer_helper_, other->_impl_.transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[59]);
}

// ===================================================================

class OutlineSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OutlineSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::KN::SlideCollectionSelectionTransformerHelperArchive& transformer_helper(const OutlineSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_have_range_in_selected_paragraph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::KN::SlideCollectionSelectionTransformerHelperArchive&
OutlineSelectionTransformerArchive::_Internal::transformer_helper(const OutlineSelectionTransformerArchive* msg) {
  return *msg->_impl_.transformer_helper_;
}
void OutlineSelectionTransformerArchive::clear_selection_range_addresses() {
  _impl_.selection_range_addresses_.Clear();
}
OutlineSelectionTransformerArchive::OutlineSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.OutlineSelectionTransformerArchive)
}
OutlineSelectionTransformerArchive::OutlineSelectionTransformerArchive(const OutlineSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutlineSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_range_addresses_){from._impl_.selection_range_addresses_}
    , decltype(_impl_.transformer_helper_){nullptr}
    , decltype(_impl_.can_have_range_in_selected_paragraph_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    _this->_impl_.transformer_helper_ = new ::KN::SlideCollectionSelectionTransformerHelperArchive(*from._impl_.transformer_helper_);
  }
  _this->_impl_.can_have_range_in_selected_paragraph_ = from._impl_.can_have_range_in_selected_paragraph_;
  // @@protoc_insertion_point(copy_constructor:KN.OutlineSelectionTransformerArchive)
}

inline void OutlineSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_range_addresses_){arena}
    , decltype(_impl_.transformer_helper_){nullptr}
    , decltype(_impl_.can_have_range_in_selected_paragraph_){false}
  };
}

OutlineSelectionTransformerArchive::~OutlineSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.OutlineSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutlineSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selection_range_addresses_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.transformer_helper_;
}

void OutlineSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutlineSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.OutlineSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_range_addresses_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformer_helper_ != nullptr);
    _impl_.transformer_helper_->Clear();
  }
  _impl_.can_have_range_in_selected_paragraph_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutlineSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_have_range_in_selected_paragraph = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_can_have_range_in_selected_paragraph(&has_bits);
          _impl_.can_have_range_in_selected_paragraph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.RangeAddress selection_range_addresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection_range_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutlineSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.OutlineSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transformer_helper(this),
        _Internal::transformer_helper(this).GetCachedSize(), target, stream);
  }

  // optional bool can_have_range_in_selected_paragraph = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_have_range_in_selected_paragraph(), target);
  }

  // repeated .TSK.RangeAddress selection_range_addresses = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selection_range_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_selection_range_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.OutlineSelectionTransformerArchive)
  return target;
}

size_t OutlineSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.OutlineSelectionTransformerArchive)
  size_t total_size = 0;

  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_helper_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RangeAddress selection_range_addresses = 3;
  total_size += 1UL * this->_internal_selection_range_addresses_size();
  for (const auto& msg : this->_impl_.selection_range_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool can_have_range_in_selected_paragraph = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutlineSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutlineSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutlineSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void OutlineSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutlineSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const OutlineSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.OutlineSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selection_range_addresses_.MergeFrom(from._impl_.selection_range_addresses_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transformer_helper()->::KN::SlideCollectionSelectionTransformerHelperArchive::MergeFrom(
          from._internal_transformer_helper());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.can_have_range_in_selected_paragraph_ = from._impl_.can_have_range_in_selected_paragraph_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutlineSelectionTransformerArchive::CopyFrom(const OutlineSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.OutlineSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutlineSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!_impl_.transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void OutlineSelectionTransformerArchive::InternalSwap(OutlineSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.selection_range_addresses_.InternalSwap(&other->_impl_.selection_range_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutlineSelectionTransformerArchive, _impl_.can_have_range_in_selected_paragraph_)
      + sizeof(OutlineSelectionTransformerArchive::_impl_.can_have_range_in_selected_paragraph_)
      - PROTOBUF_FIELD_OFFSET(OutlineSelectionTransformerArchive, _impl_.transformer_helper_)>(
          reinterpret_cast<char*>(&_impl_.transformer_helper_),
          reinterpret_cast<char*>(&other->_impl_.transformer_helper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutlineSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[60]);
}

// ===================================================================

class CommandLiveVideoInfoApplyPreset::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandLiveVideoInfoApplyPreset>()._impl_._has_bits_);
  static const ::TSD::BaseApplyPresetCommandArchive& super(const CommandLiveVideoInfoApplyPreset* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseApplyPresetCommandArchive&
CommandLiveVideoInfoApplyPreset::_Internal::super(const CommandLiveVideoInfoApplyPreset* msg) {
  return *msg->_impl_.super_;
}
void CommandLiveVideoInfoApplyPreset::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandLiveVideoInfoApplyPreset::CommandLiveVideoInfoApplyPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandLiveVideoInfoApplyPreset)
}
CommandLiveVideoInfoApplyPreset::CommandLiveVideoInfoApplyPreset(const CommandLiveVideoInfoApplyPreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandLiveVideoInfoApplyPreset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::BaseApplyPresetCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandLiveVideoInfoApplyPreset)
}

inline void CommandLiveVideoInfoApplyPreset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandLiveVideoInfoApplyPreset::~CommandLiveVideoInfoApplyPreset() {
  // @@protoc_insertion_point(destructor:KN.CommandLiveVideoInfoApplyPreset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandLiveVideoInfoApplyPreset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandLiveVideoInfoApplyPreset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandLiveVideoInfoApplyPreset::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandLiveVideoInfoApplyPreset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandLiveVideoInfoApplyPreset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseApplyPresetCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandLiveVideoInfoApplyPreset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandLiveVideoInfoApplyPreset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandLiveVideoInfoApplyPreset)
  return target;
}

size_t CommandLiveVideoInfoApplyPreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandLiveVideoInfoApplyPreset)
  size_t total_size = 0;

  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandLiveVideoInfoApplyPreset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandLiveVideoInfoApplyPreset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandLiveVideoInfoApplyPreset::GetClassData() const { return &_class_data_; }


void CommandLiveVideoInfoApplyPreset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandLiveVideoInfoApplyPreset*>(&to_msg);
  auto& from = static_cast<const CommandLiveVideoInfoApplyPreset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandLiveVideoInfoApplyPreset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::BaseApplyPresetCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandLiveVideoInfoApplyPreset::CopyFrom(const CommandLiveVideoInfoApplyPreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandLiveVideoInfoApplyPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLiveVideoInfoApplyPreset::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandLiveVideoInfoApplyPreset::InternalSwap(CommandLiveVideoInfoApplyPreset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLiveVideoInfoApplyPreset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[61]);
}

// ===================================================================

class CommandLiveVideoInfoSetSource::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandLiveVideoInfoSetSource>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandLiveVideoInfoSetSource* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& live_video_info_id_path(const CommandLiveVideoInfoSetSource* msg);
  static void set_has_live_video_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& source_id(const CommandLiveVideoInfoSetSource* msg);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& local_collaboration_command_usage_token(const CommandLiveVideoInfoSetSource* msg);
  static void set_has_local_collaboration_command_usage_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::LiveVideoSourceCollaborationCommandUsageState& working_source_old_collaboration_command_usage_state(const CommandLiveVideoInfoSetSource* msg);
  static void set_has_working_source_old_collaboration_command_usage_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_source(const CommandLiveVideoInfoSetSource* msg);
  static void set_has_old_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& old_source_id(const CommandLiveVideoInfoSetSource* msg);
  static void set_has_old_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandLiveVideoInfoSetSource::_Internal::super(const CommandLiveVideoInfoSetSource* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandLiveVideoInfoSetSource::_Internal::live_video_info_id_path(const CommandLiveVideoInfoSetSource* msg) {
  return *msg->_impl_.live_video_info_id_path_;
}
const ::TSP::UUID&
CommandLiveVideoInfoSetSource::_Internal::source_id(const CommandLiveVideoInfoSetSource* msg) {
  return *msg->_impl_.source_id_;
}
const ::TSP::UUID&
CommandLiveVideoInfoSetSource::_Internal::local_collaboration_command_usage_token(const CommandLiveVideoInfoSetSource* msg) {
  return *msg->_impl_.local_collaboration_command_usage_token_;
}
const ::KN::LiveVideoSourceCollaborationCommandUsageState&
CommandLiveVideoInfoSetSource::_Internal::working_source_old_collaboration_command_usage_state(const CommandLiveVideoInfoSetSource* msg) {
  return *msg->_impl_.working_source_old_collaboration_command_usage_state_;
}
const ::TSP::Reference&
CommandLiveVideoInfoSetSource::_Internal::old_source(const CommandLiveVideoInfoSetSource* msg) {
  return *msg->_impl_.old_source_;
}
const ::TSP::UUID&
CommandLiveVideoInfoSetSource::_Internal::old_source_id(const CommandLiveVideoInfoSetSource* msg) {
  return *msg->_impl_.old_source_id_;
}
void CommandLiveVideoInfoSetSource::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandLiveVideoInfoSetSource::clear_live_video_info_id_path() {
  if (_impl_.live_video_info_id_path_ != nullptr) _impl_.live_video_info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandLiveVideoInfoSetSource::clear_source_id() {
  if (_impl_.source_id_ != nullptr) _impl_.source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandLiveVideoInfoSetSource::clear_local_collaboration_command_usage_token() {
  if (_impl_.local_collaboration_command_usage_token_ != nullptr) _impl_.local_collaboration_command_usage_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandLiveVideoInfoSetSource::clear_working_source_old_collaboration_command_usage_state() {
  if (_impl_.working_source_old_collaboration_command_usage_state_ != nullptr) _impl_.working_source_old_collaboration_command_usage_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandLiveVideoInfoSetSource::clear_old_source() {
  if (_impl_.old_source_ != nullptr) _impl_.old_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandLiveVideoInfoSetSource::clear_old_source_id() {
  if (_impl_.old_source_id_ != nullptr) _impl_.old_source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
CommandLiveVideoInfoSetSource::CommandLiveVideoInfoSetSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandLiveVideoInfoSetSource)
}
CommandLiveVideoInfoSetSource::CommandLiveVideoInfoSetSource(const CommandLiveVideoInfoSetSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandLiveVideoInfoSetSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_info_id_path_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.local_collaboration_command_usage_token_){nullptr}
    , decltype(_impl_.working_source_old_collaboration_command_usage_state_){nullptr}
    , decltype(_impl_.old_source_){nullptr}
    , decltype(_impl_.old_source_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_live_video_info_id_path()) {
    _this->_impl_.live_video_info_id_path_ = new ::TSP::UUIDPath(*from._impl_.live_video_info_id_path_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::TSP::UUID(*from._impl_.source_id_);
  }
  if (from._internal_has_local_collaboration_command_usage_token()) {
    _this->_impl_.local_collaboration_command_usage_token_ = new ::TSP::UUID(*from._impl_.local_collaboration_command_usage_token_);
  }
  if (from._internal_has_working_source_old_collaboration_command_usage_state()) {
    _this->_impl_.working_source_old_collaboration_command_usage_state_ = new ::KN::LiveVideoSourceCollaborationCommandUsageState(*from._impl_.working_source_old_collaboration_command_usage_state_);
  }
  if (from._internal_has_old_source()) {
    _this->_impl_.old_source_ = new ::TSP::Reference(*from._impl_.old_source_);
  }
  if (from._internal_has_old_source_id()) {
    _this->_impl_.old_source_id_ = new ::TSP::UUID(*from._impl_.old_source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandLiveVideoInfoSetSource)
}

inline void CommandLiveVideoInfoSetSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_info_id_path_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.local_collaboration_command_usage_token_){nullptr}
    , decltype(_impl_.working_source_old_collaboration_command_usage_state_){nullptr}
    , decltype(_impl_.old_source_){nullptr}
    , decltype(_impl_.old_source_id_){nullptr}
  };
}

CommandLiveVideoInfoSetSource::~CommandLiveVideoInfoSetSource() {
  // @@protoc_insertion_point(destructor:KN.CommandLiveVideoInfoSetSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandLiveVideoInfoSetSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.live_video_info_id_path_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.local_collaboration_command_usage_token_;
  if (this != internal_default_instance()) delete _impl_.working_source_old_collaboration_command_usage_state_;
  if (this != internal_default_instance()) delete _impl_.old_source_;
  if (this != internal_default_instance()) delete _impl_.old_source_id_;
}

void CommandLiveVideoInfoSetSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandLiveVideoInfoSetSource::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandLiveVideoInfoSetSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.live_video_info_id_path_ != nullptr);
      _impl_.live_video_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.local_collaboration_command_usage_token_ != nullptr);
      _impl_.local_collaboration_command_usage_token_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.working_source_old_collaboration_command_usage_state_ != nullptr);
      _impl_.working_source_old_collaboration_command_usage_state_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.old_source_ != nullptr);
      _impl_.old_source_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.old_source_id_ != nullptr);
      _impl_.old_source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandLiveVideoInfoSetSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath live_video_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID source_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID local_collaboration_command_usage_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_collaboration_command_usage_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.LiveVideoSourceCollaborationCommandUsageState working_source_old_collaboration_command_usage_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_working_source_old_collaboration_command_usage_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID old_source_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandLiveVideoInfoSetSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandLiveVideoInfoSetSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath live_video_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::live_video_info_id_path(this),
        _Internal::live_video_info_id_path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID source_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID local_collaboration_command_usage_token = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::local_collaboration_command_usage_token(this),
        _Internal::local_collaboration_command_usage_token(this).GetCachedSize(), target, stream);
  }

  // optional .KN.LiveVideoSourceCollaborationCommandUsageState working_source_old_collaboration_command_usage_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::working_source_old_collaboration_command_usage_state(this),
        _Internal::working_source_old_collaboration_command_usage_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_source = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::old_source(this),
        _Internal::old_source(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID old_source_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::old_source_id(this),
        _Internal::old_source_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandLiveVideoInfoSetSource)
  return target;
}

size_t CommandLiveVideoInfoSetSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandLiveVideoInfoSetSource)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_live_video_info_id_path()) {
    // required .TSP.UUIDPath live_video_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_info_id_path_);
  }

  return total_size;
}
size_t CommandLiveVideoInfoSetSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandLiveVideoInfoSetSource)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath live_video_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_info_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional .TSP.UUID source_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_id_);
    }

    // optional .TSP.UUID local_collaboration_command_usage_token = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.local_collaboration_command_usage_token_);
    }

    // optional .KN.LiveVideoSourceCollaborationCommandUsageState working_source_old_collaboration_command_usage_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.working_source_old_collaboration_command_usage_state_);
    }

    // optional .TSP.Reference old_source = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_source_);
    }

    // optional .TSP.UUID old_source_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_source_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandLiveVideoInfoSetSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandLiveVideoInfoSetSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandLiveVideoInfoSetSource::GetClassData() const { return &_class_data_; }


void CommandLiveVideoInfoSetSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandLiveVideoInfoSetSource*>(&to_msg);
  auto& from = static_cast<const CommandLiveVideoInfoSetSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandLiveVideoInfoSetSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_live_video_info_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_live_video_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_source_id()->::TSP::UUID::MergeFrom(
          from._internal_source_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_local_collaboration_command_usage_token()->::TSP::UUID::MergeFrom(
          from._internal_local_collaboration_command_usage_token());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_working_source_old_collaboration_command_usage_state()->::KN::LiveVideoSourceCollaborationCommandUsageState::MergeFrom(
          from._internal_working_source_old_collaboration_command_usage_state());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_old_source()->::TSP::Reference::MergeFrom(
          from._internal_old_source());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_old_source_id()->::TSP::UUID::MergeFrom(
          from._internal_old_source_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandLiveVideoInfoSetSource::CopyFrom(const CommandLiveVideoInfoSetSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandLiveVideoInfoSetSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLiveVideoInfoSetSource::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_live_video_info_id_path()) {
    if (!_impl_.live_video_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_source_id()) {
    if (!_impl_.source_id_->IsInitialized()) return false;
  }
  if (_internal_has_local_collaboration_command_usage_token()) {
    if (!_impl_.local_collaboration_command_usage_token_->IsInitialized()) return false;
  }
  if (_internal_has_working_source_old_collaboration_command_usage_state()) {
    if (!_impl_.working_source_old_collaboration_command_usage_state_->IsInitialized()) return false;
  }
  if (_internal_has_old_source()) {
    if (!_impl_.old_source_->IsInitialized()) return false;
  }
  if (_internal_has_old_source_id()) {
    if (!_impl_.old_source_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandLiveVideoInfoSetSource::InternalSwap(CommandLiveVideoInfoSetSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandLiveVideoInfoSetSource, _impl_.old_source_id_)
      + sizeof(CommandLiveVideoInfoSetSource::_impl_.old_source_id_)
      - PROTOBUF_FIELD_OFFSET(CommandLiveVideoInfoSetSource, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLiveVideoInfoSetSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[62]);
}

// ===================================================================

class CommandLiveVideoInfoSetValue_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandLiveVideoInfoSetValue_PropertyValue>()._impl_._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Point& normalized_offset(const CommandLiveVideoInfoSetValue_PropertyValue* msg);
  static void set_has_normalized_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mask_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mask_corner_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_background_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::FillArchive& background_fill(const CommandLiveVideoInfoSetValue_PropertyValue* msg);
  static void set_has_background_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Point&
CommandLiveVideoInfoSetValue_PropertyValue::_Internal::normalized_offset(const CommandLiveVideoInfoSetValue_PropertyValue* msg) {
  return *msg->_impl_.normalized_offset_;
}
const ::TSD::FillArchive&
CommandLiveVideoInfoSetValue_PropertyValue::_Internal::background_fill(const CommandLiveVideoInfoSetValue_PropertyValue* msg) {
  return *msg->_impl_.background_fill_;
}
void CommandLiveVideoInfoSetValue_PropertyValue::clear_normalized_offset() {
  if (_impl_.normalized_offset_ != nullptr) _impl_.normalized_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandLiveVideoInfoSetValue_PropertyValue::clear_background_fill() {
  if (_impl_.background_fill_ != nullptr) _impl_.background_fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandLiveVideoInfoSetValue_PropertyValue::CommandLiveVideoInfoSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandLiveVideoInfoSetValue.PropertyValue)
}
CommandLiveVideoInfoSetValue_PropertyValue::CommandLiveVideoInfoSetValue_PropertyValue(const CommandLiveVideoInfoSetValue_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandLiveVideoInfoSetValue_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.normalized_offset_){nullptr}
    , decltype(_impl_.background_fill_){nullptr}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.mask_corner_radius_){}
    , decltype(_impl_.mask_kind_){}
    , decltype(_impl_.is_placeholder_){}
    , decltype(_impl_.background_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_normalized_offset()) {
    _this->_impl_.normalized_offset_ = new ::TSP::Point(*from._impl_.normalized_offset_);
  }
  if (from._internal_has_background_fill()) {
    _this->_impl_.background_fill_ = new ::TSD::FillArchive(*from._impl_.background_fill_);
  }
  ::memcpy(&_impl_.scale_, &from._impl_.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.background_kind_) -
    reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.background_kind_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandLiveVideoInfoSetValue.PropertyValue)
}

inline void CommandLiveVideoInfoSetValue_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.normalized_offset_){nullptr}
    , decltype(_impl_.background_fill_){nullptr}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.mask_corner_radius_){0}
    , decltype(_impl_.mask_kind_){0}
    , decltype(_impl_.is_placeholder_){false}
    , decltype(_impl_.background_kind_){0}
  };
}

CommandLiveVideoInfoSetValue_PropertyValue::~CommandLiveVideoInfoSetValue_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandLiveVideoInfoSetValue.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandLiveVideoInfoSetValue_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.normalized_offset_;
  if (this != internal_default_instance()) delete _impl_.background_fill_;
}

void CommandLiveVideoInfoSetValue_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandLiveVideoInfoSetValue_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandLiveVideoInfoSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.normalized_offset_ != nullptr);
      _impl_.normalized_offset_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.background_fill_ != nullptr);
      _impl_.background_fill_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.background_kind_) -
        reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.background_kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandLiveVideoInfoSetValue_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point normalized_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalized_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mask_kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mask_kind(&has_bits);
          _impl_.mask_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mask_corner_radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_mask_corner_radius(&has_bits);
          _impl_.mask_corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_placeholder(&has_bits);
          _impl_.is_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 background_kind = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_background_kind(&has_bits);
          _impl_.background_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive background_fill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandLiveVideoInfoSetValue_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandLiveVideoInfoSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double scale = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_scale(), target);
  }

  // optional .TSP.Point normalized_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::normalized_offset(this),
        _Internal::normalized_offset(this).GetCachedSize(), target, stream);
  }

  // optional int32 mask_kind = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mask_kind(), target);
  }

  // optional double mask_corner_radius = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_mask_corner_radius(), target);
  }

  // optional bool is_placeholder = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_placeholder(), target);
  }

  // optional int32 background_kind = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_background_kind(), target);
  }

  // optional .TSD.FillArchive background_fill = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::background_fill(this),
        _Internal::background_fill(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandLiveVideoInfoSetValue.PropertyValue)
  return target;
}

size_t CommandLiveVideoInfoSetValue_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandLiveVideoInfoSetValue.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Point normalized_offset = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.normalized_offset_);
    }

    // optional .TSD.FillArchive background_fill = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_fill_);
    }

    // optional double scale = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double mask_corner_radius = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 mask_kind = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mask_kind());
    }

    // optional bool is_placeholder = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 background_kind = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_background_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandLiveVideoInfoSetValue_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandLiveVideoInfoSetValue_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandLiveVideoInfoSetValue_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandLiveVideoInfoSetValue_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandLiveVideoInfoSetValue_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandLiveVideoInfoSetValue_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandLiveVideoInfoSetValue.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_normalized_offset()->::TSP::Point::MergeFrom(
          from._internal_normalized_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_background_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_background_fill());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mask_corner_radius_ = from._impl_.mask_corner_radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mask_kind_ = from._impl_.mask_kind_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_placeholder_ = from._impl_.is_placeholder_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.background_kind_ = from._impl_.background_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandLiveVideoInfoSetValue_PropertyValue::CopyFrom(const CommandLiveVideoInfoSetValue_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandLiveVideoInfoSetValue.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLiveVideoInfoSetValue_PropertyValue::IsInitialized() const {
  if (_internal_has_normalized_offset()) {
    if (!_impl_.normalized_offset_->IsInitialized()) return false;
  }
  if (_internal_has_background_fill()) {
    if (!_impl_.background_fill_->IsInitialized()) return false;
  }
  return true;
}

void CommandLiveVideoInfoSetValue_PropertyValue::InternalSwap(CommandLiveVideoInfoSetValue_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandLiveVideoInfoSetValue_PropertyValue, _impl_.background_kind_)
      + sizeof(CommandLiveVideoInfoSetValue_PropertyValue::_impl_.background_kind_)
      - PROTOBUF_FIELD_OFFSET(CommandLiveVideoInfoSetValue_PropertyValue, _impl_.normalized_offset_)>(
          reinterpret_cast<char*>(&_impl_.normalized_offset_),
          reinterpret_cast<char*>(&other->_impl_.normalized_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLiveVideoInfoSetValue_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[63]);
}

// ===================================================================

class CommandLiveVideoInfoSetValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandLiveVideoInfoSetValue>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandLiveVideoInfoSetValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& live_video_info_id_path(const CommandLiveVideoInfoSetValue* msg);
  static void set_has_live_video_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KN::CommandLiveVideoInfoSetValue_PropertyValue& value(const CommandLiveVideoInfoSetValue* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::CommandLiveVideoInfoSetValue_PropertyValue& old_value(const CommandLiveVideoInfoSetValue* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::TSK::CommandArchive&
CommandLiveVideoInfoSetValue::_Internal::super(const CommandLiveVideoInfoSetValue* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandLiveVideoInfoSetValue::_Internal::live_video_info_id_path(const CommandLiveVideoInfoSetValue* msg) {
  return *msg->_impl_.live_video_info_id_path_;
}
const ::KN::CommandLiveVideoInfoSetValue_PropertyValue&
CommandLiveVideoInfoSetValue::_Internal::value(const CommandLiveVideoInfoSetValue* msg) {
  return *msg->_impl_.value_;
}
const ::KN::CommandLiveVideoInfoSetValue_PropertyValue&
CommandLiveVideoInfoSetValue::_Internal::old_value(const CommandLiveVideoInfoSetValue* msg) {
  return *msg->_impl_.old_value_;
}
void CommandLiveVideoInfoSetValue::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandLiveVideoInfoSetValue::clear_live_video_info_id_path() {
  if (_impl_.live_video_info_id_path_ != nullptr) _impl_.live_video_info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandLiveVideoInfoSetValue::CommandLiveVideoInfoSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandLiveVideoInfoSetValue)
}
CommandLiveVideoInfoSetValue::CommandLiveVideoInfoSetValue(const CommandLiveVideoInfoSetValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandLiveVideoInfoSetValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_info_id_path_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.property_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_live_video_info_id_path()) {
    _this->_impl_.live_video_info_id_path_ = new ::TSP::UUIDPath(*from._impl_.live_video_info_id_path_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::KN::CommandLiveVideoInfoSetValue_PropertyValue(*from._impl_.value_);
  }
  if (from._internal_has_old_value()) {
    _this->_impl_.old_value_ = new ::KN::CommandLiveVideoInfoSetValue_PropertyValue(*from._impl_.old_value_);
  }
  _this->_impl_.property_ = from._impl_.property_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandLiveVideoInfoSetValue)
}

inline void CommandLiveVideoInfoSetValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_info_id_path_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.property_){0}
  };
}

CommandLiveVideoInfoSetValue::~CommandLiveVideoInfoSetValue() {
  // @@protoc_insertion_point(destructor:KN.CommandLiveVideoInfoSetValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandLiveVideoInfoSetValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.live_video_info_id_path_;
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.old_value_;
}

void CommandLiveVideoInfoSetValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandLiveVideoInfoSetValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandLiveVideoInfoSetValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.live_video_info_id_path_ != nullptr);
      _impl_.live_video_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_value_ != nullptr);
      _impl_.old_value_->Clear();
    }
  }
  _impl_.property_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandLiveVideoInfoSetValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath live_video_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandLiveVideoInfoSetValue.Property property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::CommandLiveVideoInfoSetValue_Property_IsValid(val))) {
            _internal_set_property(static_cast<::KN::CommandLiveVideoInfoSetValue_Property>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandLiveVideoInfoSetValue.PropertyValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandLiveVideoInfoSetValue.PropertyValue old_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandLiveVideoInfoSetValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandLiveVideoInfoSetValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath live_video_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::live_video_info_id_path(this),
        _Internal::live_video_info_id_path(this).GetCachedSize(), target, stream);
  }

  // required .KN.CommandLiveVideoInfoSetValue.Property property = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_property(), target);
  }

  // optional .KN.CommandLiveVideoInfoSetValue.PropertyValue value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional .KN.CommandLiveVideoInfoSetValue.PropertyValue old_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_value(this),
        _Internal::old_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandLiveVideoInfoSetValue)
  return target;
}

size_t CommandLiveVideoInfoSetValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandLiveVideoInfoSetValue)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_live_video_info_id_path()) {
    // required .TSP.UUIDPath live_video_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_info_id_path_);
  }

  if (_internal_has_property()) {
    // required .KN.CommandLiveVideoInfoSetValue.Property property = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_property());
  }

  return total_size;
}
size_t CommandLiveVideoInfoSetValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandLiveVideoInfoSetValue)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath live_video_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_info_id_path_);

    // required .KN.CommandLiveVideoInfoSetValue.Property property = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_property());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .KN.CommandLiveVideoInfoSetValue.PropertyValue value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional .KN.CommandLiveVideoInfoSetValue.PropertyValue old_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandLiveVideoInfoSetValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandLiveVideoInfoSetValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandLiveVideoInfoSetValue::GetClassData() const { return &_class_data_; }


void CommandLiveVideoInfoSetValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandLiveVideoInfoSetValue*>(&to_msg);
  auto& from = static_cast<const CommandLiveVideoInfoSetValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandLiveVideoInfoSetValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_live_video_info_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_live_video_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_value()->::KN::CommandLiveVideoInfoSetValue_PropertyValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_value()->::KN::CommandLiveVideoInfoSetValue_PropertyValue::MergeFrom(
          from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.property_ = from._impl_.property_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandLiveVideoInfoSetValue::CopyFrom(const CommandLiveVideoInfoSetValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandLiveVideoInfoSetValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLiveVideoInfoSetValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_live_video_info_id_path()) {
    if (!_impl_.live_video_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!_impl_.value_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!_impl_.old_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandLiveVideoInfoSetValue::InternalSwap(CommandLiveVideoInfoSetValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandLiveVideoInfoSetValue, _impl_.property_)
      + sizeof(CommandLiveVideoInfoSetValue::_impl_.property_)
      - PROTOBUF_FIELD_OFFSET(CommandLiveVideoInfoSetValue, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLiveVideoInfoSetValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[64]);
}

// ===================================================================

class CommandLiveVideoSourceSetValue_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandLiveVideoSourceSetValue_PropertyValue>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::LiveVideoCaptureDeviceDescription& capture_device_description(const CommandLiveVideoSourceSetValue_PropertyValue* msg);
  static void set_has_capture_device_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& poster_image_data(const CommandLiveVideoSourceSetValue_PropertyValue* msg);
  static void set_has_poster_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_symbol_abbreviation_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_symbol_image_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_symbol_tint_color_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::KN::LiveVideoCaptureDeviceDescription&
CommandLiveVideoSourceSetValue_PropertyValue::_Internal::capture_device_description(const CommandLiveVideoSourceSetValue_PropertyValue* msg) {
  return *msg->_impl_.capture_device_description_;
}
const ::TSP::DataReference&
CommandLiveVideoSourceSetValue_PropertyValue::_Internal::poster_image_data(const CommandLiveVideoSourceSetValue_PropertyValue* msg) {
  return *msg->_impl_.poster_image_data_;
}
void CommandLiveVideoSourceSetValue_PropertyValue::clear_capture_device_description() {
  if (_impl_.capture_device_description_ != nullptr) _impl_.capture_device_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandLiveVideoSourceSetValue_PropertyValue::clear_poster_image_data() {
  if (_impl_.poster_image_data_ != nullptr) _impl_.poster_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandLiveVideoSourceSetValue_PropertyValue::CommandLiveVideoSourceSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandLiveVideoSourceSetValue.PropertyValue)
}
CommandLiveVideoSourceSetValue_PropertyValue::CommandLiveVideoSourceSetValue_PropertyValue(const CommandLiveVideoSourceSetValue_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandLiveVideoSourceSetValue_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_abbreviation_text_){}
    , decltype(_impl_.capture_device_description_){nullptr}
    , decltype(_impl_.poster_image_data_){nullptr}
    , decltype(_impl_.symbol_image_identifier_){}
    , decltype(_impl_.symbol_tint_color_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_abbreviation_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_abbreviation_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_symbol_abbreviation_text()) {
    _this->_impl_.symbol_abbreviation_text_.Set(from._internal_symbol_abbreviation_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_capture_device_description()) {
    _this->_impl_.capture_device_description_ = new ::KN::LiveVideoCaptureDeviceDescription(*from._impl_.capture_device_description_);
  }
  if (from._internal_has_poster_image_data()) {
    _this->_impl_.poster_image_data_ = new ::TSP::DataReference(*from._impl_.poster_image_data_);
  }
  ::memcpy(&_impl_.symbol_image_identifier_, &from._impl_.symbol_image_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.symbol_tint_color_identifier_) -
    reinterpret_cast<char*>(&_impl_.symbol_image_identifier_)) + sizeof(_impl_.symbol_tint_color_identifier_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandLiveVideoSourceSetValue.PropertyValue)
}

inline void CommandLiveVideoSourceSetValue_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_abbreviation_text_){}
    , decltype(_impl_.capture_device_description_){nullptr}
    , decltype(_impl_.poster_image_data_){nullptr}
    , decltype(_impl_.symbol_image_identifier_){0}
    , decltype(_impl_.symbol_tint_color_identifier_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_abbreviation_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_abbreviation_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandLiveVideoSourceSetValue_PropertyValue::~CommandLiveVideoSourceSetValue_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandLiveVideoSourceSetValue.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandLiveVideoSourceSetValue_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.symbol_abbreviation_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.capture_device_description_;
  if (this != internal_default_instance()) delete _impl_.poster_image_data_;
}

void CommandLiveVideoSourceSetValue_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandLiveVideoSourceSetValue_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandLiveVideoSourceSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.symbol_abbreviation_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.capture_device_description_ != nullptr);
      _impl_.capture_device_description_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.poster_image_data_ != nullptr);
      _impl_.poster_image_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.symbol_image_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.symbol_tint_color_identifier_) -
        reinterpret_cast<char*>(&_impl_.symbol_image_identifier_)) + sizeof(_impl_.symbol_tint_color_identifier_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandLiveVideoSourceSetValue_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandLiveVideoSourceSetValue.PropertyValue.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .KN.LiveVideoCaptureDeviceDescription capture_device_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_device_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference poster_image_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poster_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string symbol_abbreviation_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_symbol_abbreviation_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandLiveVideoSourceSetValue.PropertyValue.symbol_abbreviation_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 symbol_image_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_symbol_image_identifier(&has_bits);
          _impl_.symbol_image_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 symbol_tint_color_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_symbol_tint_color_identifier(&has_bits);
          _impl_.symbol_tint_color_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandLiveVideoSourceSetValue_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandLiveVideoSourceSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandLiveVideoSourceSetValue.PropertyValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .KN.LiveVideoCaptureDeviceDescription capture_device_description = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::capture_device_description(this),
        _Internal::capture_device_description(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference poster_image_data = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::poster_image_data(this),
        _Internal::poster_image_data(this).GetCachedSize(), target, stream);
  }

  // optional string symbol_abbreviation_text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol_abbreviation_text().data(), static_cast<int>(this->_internal_symbol_abbreviation_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandLiveVideoSourceSetValue.PropertyValue.symbol_abbreviation_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_symbol_abbreviation_text(), target);
  }

  // optional int32 symbol_image_identifier = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_symbol_image_identifier(), target);
  }

  // optional int32 symbol_tint_color_identifier = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_symbol_tint_color_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandLiveVideoSourceSetValue.PropertyValue)
  return target;
}

size_t CommandLiveVideoSourceSetValue_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandLiveVideoSourceSetValue.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string symbol_abbreviation_text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol_abbreviation_text());
    }

    // optional .KN.LiveVideoCaptureDeviceDescription capture_device_description = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.capture_device_description_);
    }

    // optional .TSP.DataReference poster_image_data = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poster_image_data_);
    }

    // optional int32 symbol_image_identifier = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_symbol_image_identifier());
    }

    // optional int32 symbol_tint_color_identifier = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_symbol_tint_color_identifier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandLiveVideoSourceSetValue_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandLiveVideoSourceSetValue_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandLiveVideoSourceSetValue_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandLiveVideoSourceSetValue_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandLiveVideoSourceSetValue_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandLiveVideoSourceSetValue_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandLiveVideoSourceSetValue.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_symbol_abbreviation_text(from._internal_symbol_abbreviation_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_capture_device_description()->::KN::LiveVideoCaptureDeviceDescription::MergeFrom(
          from._internal_capture_device_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_poster_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_poster_image_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.symbol_image_identifier_ = from._impl_.symbol_image_identifier_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.symbol_tint_color_identifier_ = from._impl_.symbol_tint_color_identifier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandLiveVideoSourceSetValue_PropertyValue::CopyFrom(const CommandLiveVideoSourceSetValue_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandLiveVideoSourceSetValue.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLiveVideoSourceSetValue_PropertyValue::IsInitialized() const {
  if (_internal_has_capture_device_description()) {
    if (!_impl_.capture_device_description_->IsInitialized()) return false;
  }
  if (_internal_has_poster_image_data()) {
    if (!_impl_.poster_image_data_->IsInitialized()) return false;
  }
  return true;
}

void CommandLiveVideoSourceSetValue_PropertyValue::InternalSwap(CommandLiveVideoSourceSetValue_PropertyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_abbreviation_text_, lhs_arena,
      &other->_impl_.symbol_abbreviation_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandLiveVideoSourceSetValue_PropertyValue, _impl_.symbol_tint_color_identifier_)
      + sizeof(CommandLiveVideoSourceSetValue_PropertyValue::_impl_.symbol_tint_color_identifier_)
      - PROTOBUF_FIELD_OFFSET(CommandLiveVideoSourceSetValue_PropertyValue, _impl_.capture_device_description_)>(
          reinterpret_cast<char*>(&_impl_.capture_device_description_),
          reinterpret_cast<char*>(&other->_impl_.capture_device_description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLiveVideoSourceSetValue_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[65]);
}

// ===================================================================

class CommandLiveVideoSourceSetValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandLiveVideoSourceSetValue>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandLiveVideoSourceSetValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& live_video_source_id(const CommandLiveVideoSourceSetValue* msg);
  static void set_has_live_video_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KN::CommandLiveVideoSourceSetValue_PropertyValue& value(const CommandLiveVideoSourceSetValue* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::CommandLiveVideoSourceSetValue_PropertyValue& old_value(const CommandLiveVideoSourceSetValue* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::TSK::CommandArchive&
CommandLiveVideoSourceSetValue::_Internal::super(const CommandLiveVideoSourceSetValue* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandLiveVideoSourceSetValue::_Internal::live_video_source_id(const CommandLiveVideoSourceSetValue* msg) {
  return *msg->_impl_.live_video_source_id_;
}
const ::KN::CommandLiveVideoSourceSetValue_PropertyValue&
CommandLiveVideoSourceSetValue::_Internal::value(const CommandLiveVideoSourceSetValue* msg) {
  return *msg->_impl_.value_;
}
const ::KN::CommandLiveVideoSourceSetValue_PropertyValue&
CommandLiveVideoSourceSetValue::_Internal::old_value(const CommandLiveVideoSourceSetValue* msg) {
  return *msg->_impl_.old_value_;
}
void CommandLiveVideoSourceSetValue::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandLiveVideoSourceSetValue::clear_live_video_source_id() {
  if (_impl_.live_video_source_id_ != nullptr) _impl_.live_video_source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandLiveVideoSourceSetValue::CommandLiveVideoSourceSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandLiveVideoSourceSetValue)
}
CommandLiveVideoSourceSetValue::CommandLiveVideoSourceSetValue(const CommandLiveVideoSourceSetValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandLiveVideoSourceSetValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_source_id_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.property_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_live_video_source_id()) {
    _this->_impl_.live_video_source_id_ = new ::TSP::UUID(*from._impl_.live_video_source_id_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::KN::CommandLiveVideoSourceSetValue_PropertyValue(*from._impl_.value_);
  }
  if (from._internal_has_old_value()) {
    _this->_impl_.old_value_ = new ::KN::CommandLiveVideoSourceSetValue_PropertyValue(*from._impl_.old_value_);
  }
  _this->_impl_.property_ = from._impl_.property_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandLiveVideoSourceSetValue)
}

inline void CommandLiveVideoSourceSetValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_source_id_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.property_){0}
  };
}

CommandLiveVideoSourceSetValue::~CommandLiveVideoSourceSetValue() {
  // @@protoc_insertion_point(destructor:KN.CommandLiveVideoSourceSetValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandLiveVideoSourceSetValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.live_video_source_id_;
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.old_value_;
}

void CommandLiveVideoSourceSetValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandLiveVideoSourceSetValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandLiveVideoSourceSetValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.live_video_source_id_ != nullptr);
      _impl_.live_video_source_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_value_ != nullptr);
      _impl_.old_value_->Clear();
    }
  }
  _impl_.property_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandLiveVideoSourceSetValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID live_video_source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandLiveVideoSourceSetValue.Property property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::CommandLiveVideoSourceSetValue_Property_IsValid(val))) {
            _internal_set_property(static_cast<::KN::CommandLiveVideoSourceSetValue_Property>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandLiveVideoSourceSetValue.PropertyValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandLiveVideoSourceSetValue.PropertyValue old_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandLiveVideoSourceSetValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandLiveVideoSourceSetValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID live_video_source_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::live_video_source_id(this),
        _Internal::live_video_source_id(this).GetCachedSize(), target, stream);
  }

  // required .KN.CommandLiveVideoSourceSetValue.Property property = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_property(), target);
  }

  // optional .KN.CommandLiveVideoSourceSetValue.PropertyValue value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional .KN.CommandLiveVideoSourceSetValue.PropertyValue old_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_value(this),
        _Internal::old_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandLiveVideoSourceSetValue)
  return target;
}

size_t CommandLiveVideoSourceSetValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandLiveVideoSourceSetValue)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_live_video_source_id()) {
    // required .TSP.UUID live_video_source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_source_id_);
  }

  if (_internal_has_property()) {
    // required .KN.CommandLiveVideoSourceSetValue.Property property = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_property());
  }

  return total_size;
}
size_t CommandLiveVideoSourceSetValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandLiveVideoSourceSetValue)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID live_video_source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_source_id_);

    // required .KN.CommandLiveVideoSourceSetValue.Property property = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_property());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .KN.CommandLiveVideoSourceSetValue.PropertyValue value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional .KN.CommandLiveVideoSourceSetValue.PropertyValue old_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandLiveVideoSourceSetValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandLiveVideoSourceSetValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandLiveVideoSourceSetValue::GetClassData() const { return &_class_data_; }


void CommandLiveVideoSourceSetValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandLiveVideoSourceSetValue*>(&to_msg);
  auto& from = static_cast<const CommandLiveVideoSourceSetValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandLiveVideoSourceSetValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_live_video_source_id()->::TSP::UUID::MergeFrom(
          from._internal_live_video_source_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_value()->::KN::CommandLiveVideoSourceSetValue_PropertyValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_value()->::KN::CommandLiveVideoSourceSetValue_PropertyValue::MergeFrom(
          from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.property_ = from._impl_.property_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandLiveVideoSourceSetValue::CopyFrom(const CommandLiveVideoSourceSetValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandLiveVideoSourceSetValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLiveVideoSourceSetValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_live_video_source_id()) {
    if (!_impl_.live_video_source_id_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!_impl_.value_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!_impl_.old_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandLiveVideoSourceSetValue::InternalSwap(CommandLiveVideoSourceSetValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandLiveVideoSourceSetValue, _impl_.property_)
      + sizeof(CommandLiveVideoSourceSetValue::_impl_.property_)
      - PROTOBUF_FIELD_OFFSET(CommandLiveVideoSourceSetValue, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLiveVideoSourceSetValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[66]);
}

// ===================================================================

class CommandLiveVideoStyleSetValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandLiveVideoStyleSetValue>()._impl_._has_bits_);
  static const ::TSD::BaseStyleSetValueCommandArchive& super(const CommandLiveVideoStyleSetValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::MediaStylePropertyChangeSetArchive& change(const CommandLiveVideoStyleSetValue* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseStyleSetValueCommandArchive&
CommandLiveVideoStyleSetValue::_Internal::super(const CommandLiveVideoStyleSetValue* msg) {
  return *msg->_impl_.super_;
}
const ::TSDSOS::MediaStylePropertyChangeSetArchive&
CommandLiveVideoStyleSetValue::_Internal::change(const CommandLiveVideoStyleSetValue* msg) {
  return *msg->_impl_.change_;
}
void CommandLiveVideoStyleSetValue::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandLiveVideoStyleSetValue::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandLiveVideoStyleSetValue::CommandLiveVideoStyleSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandLiveVideoStyleSetValue)
}
CommandLiveVideoStyleSetValue::CommandLiveVideoStyleSetValue(const CommandLiveVideoStyleSetValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandLiveVideoStyleSetValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::BaseStyleSetValueCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::TSDSOS::MediaStylePropertyChangeSetArchive(*from._impl_.change_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandLiveVideoStyleSetValue)
}

inline void CommandLiveVideoStyleSetValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_){nullptr}
  };
}

CommandLiveVideoStyleSetValue::~CommandLiveVideoStyleSetValue() {
  // @@protoc_insertion_point(destructor:KN.CommandLiveVideoStyleSetValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandLiveVideoStyleSetValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.change_;
}

void CommandLiveVideoStyleSetValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandLiveVideoStyleSetValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandLiveVideoStyleSetValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandLiveVideoStyleSetValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseStyleSetValueCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandLiveVideoStyleSetValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandLiveVideoStyleSetValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandLiveVideoStyleSetValue)
  return target;
}

size_t CommandLiveVideoStyleSetValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandLiveVideoStyleSetValue)
  size_t total_size = 0;

  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.change_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandLiveVideoStyleSetValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandLiveVideoStyleSetValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandLiveVideoStyleSetValue::GetClassData() const { return &_class_data_; }


void CommandLiveVideoStyleSetValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandLiveVideoStyleSetValue*>(&to_msg);
  auto& from = static_cast<const CommandLiveVideoStyleSetValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandLiveVideoStyleSetValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::BaseStyleSetValueCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_change()->::TSDSOS::MediaStylePropertyChangeSetArchive::MergeFrom(
          from._internal_change());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandLiveVideoStyleSetValue::CopyFrom(const CommandLiveVideoStyleSetValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandLiveVideoStyleSetValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLiveVideoStyleSetValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  return true;
}

void CommandLiveVideoStyleSetValue::InternalSwap(CommandLiveVideoStyleSetValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandLiveVideoStyleSetValue, _impl_.change_)
      + sizeof(CommandLiveVideoStyleSetValue::_impl_.change_)
      - PROTOBUF_FIELD_OFFSET(CommandLiveVideoStyleSetValue, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLiveVideoStyleSetValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[67]);
}

// ===================================================================

class CommandThemeAddLiveVideoSource::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandThemeAddLiveVideoSource>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandThemeAddLiveVideoSource* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& live_video_source(const CommandThemeAddLiveVideoSource* msg);
  static void set_has_live_video_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandThemeAddLiveVideoSource::_Internal::super(const CommandThemeAddLiveVideoSource* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandThemeAddLiveVideoSource::_Internal::live_video_source(const CommandThemeAddLiveVideoSource* msg) {
  return *msg->_impl_.live_video_source_;
}
void CommandThemeAddLiveVideoSource::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandThemeAddLiveVideoSource::clear_live_video_source() {
  if (_impl_.live_video_source_ != nullptr) _impl_.live_video_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandThemeAddLiveVideoSource::CommandThemeAddLiveVideoSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandThemeAddLiveVideoSource)
}
CommandThemeAddLiveVideoSource::CommandThemeAddLiveVideoSource(const CommandThemeAddLiveVideoSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandThemeAddLiveVideoSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_source_){nullptr}
    , decltype(_impl_.is_implicit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_live_video_source()) {
    _this->_impl_.live_video_source_ = new ::TSP::Reference(*from._impl_.live_video_source_);
  }
  _this->_impl_.is_implicit_ = from._impl_.is_implicit_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandThemeAddLiveVideoSource)
}

inline void CommandThemeAddLiveVideoSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_source_){nullptr}
    , decltype(_impl_.is_implicit_){false}
  };
}

CommandThemeAddLiveVideoSource::~CommandThemeAddLiveVideoSource() {
  // @@protoc_insertion_point(destructor:KN.CommandThemeAddLiveVideoSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandThemeAddLiveVideoSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.live_video_source_;
}

void CommandThemeAddLiveVideoSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandThemeAddLiveVideoSource::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandThemeAddLiveVideoSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.live_video_source_ != nullptr);
      _impl_.live_video_source_->Clear();
    }
  }
  _impl_.is_implicit_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandThemeAddLiveVideoSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference live_video_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_implicit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_implicit(&has_bits);
          _impl_.is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandThemeAddLiveVideoSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandThemeAddLiveVideoSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference live_video_source = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::live_video_source(this),
        _Internal::live_video_source(this).GetCachedSize(), target, stream);
  }

  // optional bool is_implicit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_implicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandThemeAddLiveVideoSource)
  return target;
}

size_t CommandThemeAddLiveVideoSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandThemeAddLiveVideoSource)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference live_video_source = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.live_video_source_);
    }

    // optional bool is_implicit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandThemeAddLiveVideoSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandThemeAddLiveVideoSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandThemeAddLiveVideoSource::GetClassData() const { return &_class_data_; }


void CommandThemeAddLiveVideoSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandThemeAddLiveVideoSource*>(&to_msg);
  auto& from = static_cast<const CommandThemeAddLiveVideoSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandThemeAddLiveVideoSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_live_video_source()->::TSP::Reference::MergeFrom(
          from._internal_live_video_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_implicit_ = from._impl_.is_implicit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandThemeAddLiveVideoSource::CopyFrom(const CommandThemeAddLiveVideoSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandThemeAddLiveVideoSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandThemeAddLiveVideoSource::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_live_video_source()) {
    if (!_impl_.live_video_source_->IsInitialized()) return false;
  }
  return true;
}

void CommandThemeAddLiveVideoSource::InternalSwap(CommandThemeAddLiveVideoSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandThemeAddLiveVideoSource, _impl_.is_implicit_)
      + sizeof(CommandThemeAddLiveVideoSource::_impl_.is_implicit_)
      - PROTOBUF_FIELD_OFFSET(CommandThemeAddLiveVideoSource, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandThemeAddLiveVideoSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[68]);
}

// ===================================================================

class CommandThemeRemoveLiveVideoSource::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandThemeRemoveLiveVideoSource>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandThemeRemoveLiveVideoSource* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& live_video_source_id(const CommandThemeRemoveLiveVideoSource* msg);
  static void set_has_live_video_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& removed_live_video_source(const CommandThemeRemoveLiveVideoSource* msg);
  static void set_has_removed_live_video_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandThemeRemoveLiveVideoSource::_Internal::super(const CommandThemeRemoveLiveVideoSource* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandThemeRemoveLiveVideoSource::_Internal::live_video_source_id(const CommandThemeRemoveLiveVideoSource* msg) {
  return *msg->_impl_.live_video_source_id_;
}
const ::TSP::Reference&
CommandThemeRemoveLiveVideoSource::_Internal::removed_live_video_source(const CommandThemeRemoveLiveVideoSource* msg) {
  return *msg->_impl_.removed_live_video_source_;
}
void CommandThemeRemoveLiveVideoSource::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandThemeRemoveLiveVideoSource::clear_live_video_source_id() {
  if (_impl_.live_video_source_id_ != nullptr) _impl_.live_video_source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandThemeRemoveLiveVideoSource::clear_removed_live_video_source() {
  if (_impl_.removed_live_video_source_ != nullptr) _impl_.removed_live_video_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandThemeRemoveLiveVideoSource::CommandThemeRemoveLiveVideoSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandThemeRemoveLiveVideoSource)
}
CommandThemeRemoveLiveVideoSource::CommandThemeRemoveLiveVideoSource(const CommandThemeRemoveLiveVideoSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandThemeRemoveLiveVideoSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_source_id_){nullptr}
    , decltype(_impl_.removed_live_video_source_){nullptr}
    , decltype(_impl_.is_implicit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_live_video_source_id()) {
    _this->_impl_.live_video_source_id_ = new ::TSP::UUID(*from._impl_.live_video_source_id_);
  }
  if (from._internal_has_removed_live_video_source()) {
    _this->_impl_.removed_live_video_source_ = new ::TSP::Reference(*from._impl_.removed_live_video_source_);
  }
  _this->_impl_.is_implicit_ = from._impl_.is_implicit_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandThemeRemoveLiveVideoSource)
}

inline void CommandThemeRemoveLiveVideoSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.live_video_source_id_){nullptr}
    , decltype(_impl_.removed_live_video_source_){nullptr}
    , decltype(_impl_.is_implicit_){false}
  };
}

CommandThemeRemoveLiveVideoSource::~CommandThemeRemoveLiveVideoSource() {
  // @@protoc_insertion_point(destructor:KN.CommandThemeRemoveLiveVideoSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandThemeRemoveLiveVideoSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.live_video_source_id_;
  if (this != internal_default_instance()) delete _impl_.removed_live_video_source_;
}

void CommandThemeRemoveLiveVideoSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandThemeRemoveLiveVideoSource::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandThemeRemoveLiveVideoSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.live_video_source_id_ != nullptr);
      _impl_.live_video_source_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.removed_live_video_source_ != nullptr);
      _impl_.removed_live_video_source_->Clear();
    }
  }
  _impl_.is_implicit_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandThemeRemoveLiveVideoSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID live_video_source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_implicit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_implicit(&has_bits);
          _impl_.is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference removed_live_video_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_live_video_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandThemeRemoveLiveVideoSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandThemeRemoveLiveVideoSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID live_video_source_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::live_video_source_id(this),
        _Internal::live_video_source_id(this).GetCachedSize(), target, stream);
  }

  // optional bool is_implicit = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_implicit(), target);
  }

  // optional .TSP.Reference removed_live_video_source = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::removed_live_video_source(this),
        _Internal::removed_live_video_source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandThemeRemoveLiveVideoSource)
  return target;
}

size_t CommandThemeRemoveLiveVideoSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandThemeRemoveLiveVideoSource)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_live_video_source_id()) {
    // required .TSP.UUID live_video_source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_source_id_);
  }

  return total_size;
}
size_t CommandThemeRemoveLiveVideoSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandThemeRemoveLiveVideoSource)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID live_video_source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.live_video_source_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Reference removed_live_video_source = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.removed_live_video_source_);
    }

    // optional bool is_implicit = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandThemeRemoveLiveVideoSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandThemeRemoveLiveVideoSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandThemeRemoveLiveVideoSource::GetClassData() const { return &_class_data_; }


void CommandThemeRemoveLiveVideoSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandThemeRemoveLiveVideoSource*>(&to_msg);
  auto& from = static_cast<const CommandThemeRemoveLiveVideoSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandThemeRemoveLiveVideoSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_live_video_source_id()->::TSP::UUID::MergeFrom(
          from._internal_live_video_source_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_removed_live_video_source()->::TSP::Reference::MergeFrom(
          from._internal_removed_live_video_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_implicit_ = from._impl_.is_implicit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandThemeRemoveLiveVideoSource::CopyFrom(const CommandThemeRemoveLiveVideoSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandThemeRemoveLiveVideoSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandThemeRemoveLiveVideoSource::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_live_video_source_id()) {
    if (!_impl_.live_video_source_id_->IsInitialized()) return false;
  }
  if (_internal_has_removed_live_video_source()) {
    if (!_impl_.removed_live_video_source_->IsInitialized()) return false;
  }
  return true;
}

void CommandThemeRemoveLiveVideoSource::InternalSwap(CommandThemeRemoveLiveVideoSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandThemeRemoveLiveVideoSource, _impl_.is_implicit_)
      + sizeof(CommandThemeRemoveLiveVideoSource::_impl_.is_implicit_)
      - PROTOBUF_FIELD_OFFSET(CommandThemeRemoveLiveVideoSource, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandThemeRemoveLiveVideoSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[69]);
}

// ===================================================================

class CommandMotionBackgroundStyleSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMotionBackgroundStyleSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandMotionBackgroundStyleSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandMotionBackgroundStyleSetValueArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& old_style(const CommandMotionBackgroundStyleSetValueArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_slide_style(const CommandMotionBackgroundStyleSetValueArchive* msg);
  static void set_has_old_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KNSOS::MotionBackgroundStylePropertyChangeSetArchive& change(const CommandMotionBackgroundStyleSetValueArchive* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KNSOS::MotionBackgroundStylePropertyChangeSetArchive& undo_property_change(const CommandMotionBackgroundStyleSetValueArchive* msg);
  static void set_has_undo_property_change(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TSK::CommandArchive&
CommandMotionBackgroundStyleSetValueArchive::_Internal::super(const CommandMotionBackgroundStyleSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandMotionBackgroundStyleSetValueArchive::_Internal::slide_id_path(const CommandMotionBackgroundStyleSetValueArchive* msg) {
  return *msg->_impl_.slide_id_path_;
}
const ::TSP::Reference&
CommandMotionBackgroundStyleSetValueArchive::_Internal::old_style(const CommandMotionBackgroundStyleSetValueArchive* msg) {
  return *msg->_impl_.old_style_;
}
const ::TSP::Reference&
CommandMotionBackgroundStyleSetValueArchive::_Internal::old_slide_style(const CommandMotionBackgroundStyleSetValueArchive* msg) {
  return *msg->_impl_.old_slide_style_;
}
const ::KNSOS::MotionBackgroundStylePropertyChangeSetArchive&
CommandMotionBackgroundStyleSetValueArchive::_Internal::change(const CommandMotionBackgroundStyleSetValueArchive* msg) {
  return *msg->_impl_.change_;
}
const ::KNSOS::MotionBackgroundStylePropertyChangeSetArchive&
CommandMotionBackgroundStyleSetValueArchive::_Internal::undo_property_change(const CommandMotionBackgroundStyleSetValueArchive* msg) {
  return *msg->_impl_.undo_property_change_;
}
void CommandMotionBackgroundStyleSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandMotionBackgroundStyleSetValueArchive::clear_slide_id_path() {
  if (_impl_.slide_id_path_ != nullptr) _impl_.slide_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandMotionBackgroundStyleSetValueArchive::clear_old_style() {
  if (_impl_.old_style_ != nullptr) _impl_.old_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMotionBackgroundStyleSetValueArchive::clear_old_slide_style() {
  if (_impl_.old_slide_style_ != nullptr) _impl_.old_slide_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandMotionBackgroundStyleSetValueArchive::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandMotionBackgroundStyleSetValueArchive::clear_undo_property_change() {
  if (_impl_.undo_property_change_ != nullptr) _impl_.undo_property_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandMotionBackgroundStyleSetValueArchive::CommandMotionBackgroundStyleSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandMotionBackgroundStyleSetValueArchive)
}
CommandMotionBackgroundStyleSetValueArchive::CommandMotionBackgroundStyleSetValueArchive(const CommandMotionBackgroundStyleSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMotionBackgroundStyleSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.old_slide_style_){nullptr}
    , decltype(_impl_.undo_property_change_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_style()) {
    _this->_impl_.old_style_ = new ::TSP::Reference(*from._impl_.old_style_);
  }
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::KNSOS::MotionBackgroundStylePropertyChangeSetArchive(*from._impl_.change_);
  }
  if (from._internal_has_slide_id_path()) {
    _this->_impl_.slide_id_path_ = new ::TSP::UUIDPath(*from._impl_.slide_id_path_);
  }
  if (from._internal_has_old_slide_style()) {
    _this->_impl_.old_slide_style_ = new ::TSP::Reference(*from._impl_.old_slide_style_);
  }
  if (from._internal_has_undo_property_change()) {
    _this->_impl_.undo_property_change_ = new ::KNSOS::MotionBackgroundStylePropertyChangeSetArchive(*from._impl_.undo_property_change_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandMotionBackgroundStyleSetValueArchive)
}

inline void CommandMotionBackgroundStyleSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.slide_id_path_){nullptr}
    , decltype(_impl_.old_slide_style_){nullptr}
    , decltype(_impl_.undo_property_change_){nullptr}
  };
}

CommandMotionBackgroundStyleSetValueArchive::~CommandMotionBackgroundStyleSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMotionBackgroundStyleSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMotionBackgroundStyleSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_style_;
  if (this != internal_default_instance()) delete _impl_.change_;
  if (this != internal_default_instance()) delete _impl_.slide_id_path_;
  if (this != internal_default_instance()) delete _impl_.old_slide_style_;
  if (this != internal_default_instance()) delete _impl_.undo_property_change_;
}

void CommandMotionBackgroundStyleSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMotionBackgroundStyleSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMotionBackgroundStyleSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_style_ != nullptr);
      _impl_.old_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.slide_id_path_ != nullptr);
      _impl_.slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.old_slide_style_ != nullptr);
      _impl_.old_slide_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.undo_property_change_ != nullptr);
      _impl_.undo_property_change_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMotionBackgroundStyleSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_slide_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_slide_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive undo_property_change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_property_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMotionBackgroundStyleSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMotionBackgroundStyleSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_style(this),
        _Internal::old_style(this).GetCachedSize(), target, stream);
  }

  // optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive change = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::slide_id_path(this),
        _Internal::slide_id_path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_slide_style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_slide_style(this),
        _Internal::old_slide_style(this).GetCachedSize(), target, stream);
  }

  // optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive undo_property_change = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::undo_property_change(this),
        _Internal::undo_property_change(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMotionBackgroundStyleSetValueArchive)
  return target;
}

size_t CommandMotionBackgroundStyleSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandMotionBackgroundStyleSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);
  }

  return total_size;
}
size_t CommandMotionBackgroundStyleSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMotionBackgroundStyleSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath slide_id_path = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference old_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_style_);
    }

    // optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive change = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_);
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional .TSP.Reference old_slide_style = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_slide_style_);
    }

    // optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive undo_property_change = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_property_change_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMotionBackgroundStyleSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMotionBackgroundStyleSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMotionBackgroundStyleSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandMotionBackgroundStyleSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMotionBackgroundStyleSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandMotionBackgroundStyleSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMotionBackgroundStyleSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_style()->::TSP::Reference::MergeFrom(
          from._internal_old_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_change()->::KNSOS::MotionBackgroundStylePropertyChangeSetArchive::MergeFrom(
          from._internal_change());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_old_slide_style()->::TSP::Reference::MergeFrom(
          from._internal_old_slide_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_undo_property_change()->::KNSOS::MotionBackgroundStylePropertyChangeSetArchive::MergeFrom(
          from._internal_undo_property_change());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMotionBackgroundStyleSetValueArchive::CopyFrom(const CommandMotionBackgroundStyleSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMotionBackgroundStyleSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMotionBackgroundStyleSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!_impl_.old_style_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!_impl_.slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_old_slide_style()) {
    if (!_impl_.old_slide_style_->IsInitialized()) return false;
  }
  if (_internal_has_undo_property_change()) {
    if (!_impl_.undo_property_change_->IsInitialized()) return false;
  }
  return true;
}

void CommandMotionBackgroundStyleSetValueArchive::InternalSwap(CommandMotionBackgroundStyleSetValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMotionBackgroundStyleSetValueArchive, _impl_.undo_property_change_)
      + sizeof(CommandMotionBackgroundStyleSetValueArchive::_impl_.undo_property_change_)
      - PROTOBUF_FIELD_OFFSET(CommandMotionBackgroundStyleSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMotionBackgroundStyleSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[70]);
}

// ===================================================================

class CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMotionBackgroundStyleUpdatePosterFrameDataArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& motion_background_style(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg);
  static void set_has_motion_background_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataReference& poster_image_data(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg);
  static void set_has_poster_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& old_poster_image_data(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg);
  static void set_has_old_poster_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_Internal::super(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_Internal::motion_background_style(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg) {
  return *msg->_impl_.motion_background_style_;
}
const ::TSP::DataReference&
CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_Internal::poster_image_data(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg) {
  return *msg->_impl_.poster_image_data_;
}
const ::TSP::DataReference&
CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_Internal::old_poster_image_data(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* msg) {
  return *msg->_impl_.old_poster_image_data_;
}
void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::clear_motion_background_style() {
  if (_impl_.motion_background_style_ != nullptr) _impl_.motion_background_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::clear_poster_image_data() {
  if (_impl_.poster_image_data_ != nullptr) _impl_.poster_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::clear_old_poster_image_data() {
  if (_impl_.old_poster_image_data_ != nullptr) _impl_.old_poster_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
}
CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.motion_background_style_){nullptr}
    , decltype(_impl_.poster_image_data_){nullptr}
    , decltype(_impl_.old_poster_image_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_motion_background_style()) {
    _this->_impl_.motion_background_style_ = new ::TSP::Reference(*from._impl_.motion_background_style_);
  }
  if (from._internal_has_poster_image_data()) {
    _this->_impl_.poster_image_data_ = new ::TSP::DataReference(*from._impl_.poster_image_data_);
  }
  if (from._internal_has_old_poster_image_data()) {
    _this->_impl_.old_poster_image_data_ = new ::TSP::DataReference(*from._impl_.old_poster_image_data_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
}

inline void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.motion_background_style_){nullptr}
    , decltype(_impl_.poster_image_data_){nullptr}
    , decltype(_impl_.old_poster_image_data_){nullptr}
  };
}

CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::~CommandMotionBackgroundStyleUpdatePosterFrameDataArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.motion_background_style_;
  if (this != internal_default_instance()) delete _impl_.poster_image_data_;
  if (this != internal_default_instance()) delete _impl_.old_poster_image_data_;
}

void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.motion_background_style_ != nullptr);
      _impl_.motion_background_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.poster_image_data_ != nullptr);
      _impl_.poster_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_poster_image_data_ != nullptr);
      _impl_.old_poster_image_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference motion_background_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_background_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference poster_image_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poster_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_poster_image_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_poster_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference motion_background_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::motion_background_style(this),
        _Internal::motion_background_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference poster_image_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::poster_image_data(this),
        _Internal::poster_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference old_poster_image_data = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_poster_image_data(this),
        _Internal::old_poster_image_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
  return target;
}

size_t CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference motion_background_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.motion_background_style_);
    }

    // optional .TSP.DataReference poster_image_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poster_image_data_);
    }

    // optional .TSP.DataReference old_poster_image_data = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_poster_image_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::GetClassData() const { return &_class_data_; }


void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMotionBackgroundStyleUpdatePosterFrameDataArchive*>(&to_msg);
  auto& from = static_cast<const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_motion_background_style()->::TSP::Reference::MergeFrom(
          from._internal_motion_background_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_poster_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_poster_image_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_poster_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_old_poster_image_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::CopyFrom(const CommandMotionBackgroundStyleUpdatePosterFrameDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMotionBackgroundStyleUpdatePosterFrameDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_motion_background_style()) {
    if (!_impl_.motion_background_style_->IsInitialized()) return false;
  }
  if (_internal_has_poster_image_data()) {
    if (!_impl_.poster_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_poster_image_data()) {
    if (!_impl_.old_poster_image_data_->IsInitialized()) return false;
  }
  return true;
}

void CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::InternalSwap(CommandMotionBackgroundStyleUpdatePosterFrameDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _impl_.old_poster_image_data_)
      + sizeof(CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::_impl_.old_poster_image_data_)
      - PROTOBUF_FIELD_OFFSET(CommandMotionBackgroundStyleUpdatePosterFrameDataArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMotionBackgroundStyleUpdatePosterFrameDataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[71]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KN::UIStateCommandGroupArchive*
Arena::CreateMaybeMessage< ::KN::UIStateCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UIStateCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertDrawablesArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideInsertDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetPlaceholdersForTagsArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideSetPlaceholdersForTagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetPlaceholdersForTagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTemplateSlideSetPlaceholderForTagArchive*
Arena::CreateMaybeMessage< ::KN::CommandTemplateSlideSetPlaceholderForTagArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTemplateSlideSetPlaceholderForTagArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlidePropagateSetPlaceholderForTagArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlidePropagateSetPlaceholderForTagArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlidePropagateSetPlaceholderForTagArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveDrawableArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveDrawableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveDrawableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveDrawableZOrderArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideMoveDrawableZOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveDrawableZOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideNodeSetPropertyArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideNodeSetPropertyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideNodeSetPropertyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideNodeSetViewStatePropertyArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideNodeSetViewStatePropertyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideNodeSetViewStatePropertyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetBackgroundFillArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideSetBackgroundFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetBackgroundFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetStyleArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideSetStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMarkOutOfSyncRecordingArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowMarkOutOfSyncRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMarkOutOfSyncRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowRemoveRecordingArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowRemoveRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowRemoveRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowReplaceRecordingArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowReplaceRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowReplaceRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetValueArchive_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandShowSetValueArchive_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetValueArchive_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowInsertSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowInsertSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowInsertSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMoveSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowMoveSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMoveSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowRemoveSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowRemoveSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowRemoveSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap*
Arena::CreateMaybeMessage< ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowChangeThemeArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowChangeThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowChangeThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowChangeSlideSizeArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowChangeSlideSizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowChangeSlideSizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSetThemeCustomEffectTimingCurveArchive*
Arena::CreateMaybeMessage< ::KN::CommandSetThemeCustomEffectTimingCurveArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSetThemeCustomEffectTimingCurveArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMoveTemplatesArchive*
Arena::CreateMaybeMessage< ::KN::CommandMoveTemplatesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMoveTemplatesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandInsertTemplateArchive*
Arena::CreateMaybeMessage< ::KN::CommandInsertTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandInsertTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandPrimitiveInsertTemplateArchive*
Arena::CreateMaybeMessage< ::KN::CommandPrimitiveInsertTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandPrimitiveInsertTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandRemoveTemplateArchive*
Arena::CreateMaybeMessage< ::KN::CommandRemoveTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandRemoveTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandPrimitiveRemoveTemplateArchive*
Arena::CreateMaybeMessage< ::KN::CommandPrimitiveRemoveTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandPrimitiveRemoveTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertBuildArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideInsertBuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertBuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::InsertBuildDescriptionArchive*
Arena::CreateMaybeMessage< ::KN::InsertBuildDescriptionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::InsertBuildDescriptionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::UndoObjectArchive*
Arena::CreateMaybeMessage< ::KN::UndoObjectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UndoObjectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveBuildArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveBuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveBuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RemoveBuildDescriptionArchive*
Arena::CreateMaybeMessage< ::KN::RemoveBuildDescriptionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RemoveBuildDescriptionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertBuildChunkArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideInsertBuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertBuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveBuildChunkArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveBuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveBuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveBuildChunksArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideMoveBuildChunksArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveBuildChunksArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandBuildSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildUpdateChunkReferentsArchive*
Arena::CreateMaybeMessage< ::KN::CommandBuildUpdateChunkReferentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildUpdateChunkReferentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildUpdateChunkCountArchive*
Arena::CreateMaybeMessage< ::KN::CommandBuildUpdateChunkCountArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildUpdateChunkCountArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildChunkSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandBuildChunkSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildChunkSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTransitionSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandTransitionSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTransitionSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetSlideNumberVisibilityArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowSetSlideNumberVisibilityArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetSlideNumberVisibilityArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTemplateSetThumbnailTextArchive*
Arena::CreateMaybeMessage< ::KN::CommandTemplateSetThumbnailTextArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTemplateSetThumbnailTextArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTemplateSetBodyStylesArchive*
Arena::CreateMaybeMessage< ::KN::CommandTemplateSetBodyStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTemplateSetBodyStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandChangeTemplateSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandChangeTemplateSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandChangeTemplateSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlidePrimitiveSetTemplateArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlidePrimitiveSetTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlidePrimitiveSetTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideResetTemplateBackgroundObjectsArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideResetTemplateBackgroundObjectsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideResetTemplateBackgroundObjectsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetSoundtrack*
Arena::CreateMaybeMessage< ::KN::CommandShowSetSoundtrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetSoundtrack >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSoundtrackSetValue_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandSoundtrackSetValue_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSoundtrackSetValue_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSoundtrackSetValue*
Arena::CreateMaybeMessage< ::KN::CommandSoundtrackSetValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSoundtrackSetValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideUpdateTemplateDrawables*
Arena::CreateMaybeMessage< ::KN::CommandSlideUpdateTemplateDrawables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideUpdateTemplateDrawables >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ChartInfoGeometryCommandArchive*
Arena::CreateMaybeMessage< ::KN::ChartInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ChartInfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CanvasSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::KN::CanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ActionGhostSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::KN::ActionGhostSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ActionGhostSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DocumentSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::KN::DocumentSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DocumentSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::NoteCanvasSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::KN::NoteCanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::NoteCanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::OutlineCanvasSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::KN::OutlineCanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::OutlineCanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionTransformerHelperArchive*
Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionTransformerHelperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionTransformerHelperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::OutlineSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::KN::OutlineSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::OutlineSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandLiveVideoInfoApplyPreset*
Arena::CreateMaybeMessage< ::KN::CommandLiveVideoInfoApplyPreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandLiveVideoInfoApplyPreset >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandLiveVideoInfoSetSource*
Arena::CreateMaybeMessage< ::KN::CommandLiveVideoInfoSetSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandLiveVideoInfoSetSource >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandLiveVideoInfoSetValue_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandLiveVideoInfoSetValue_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandLiveVideoInfoSetValue_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandLiveVideoInfoSetValue*
Arena::CreateMaybeMessage< ::KN::CommandLiveVideoInfoSetValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandLiveVideoInfoSetValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandLiveVideoSourceSetValue_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandLiveVideoSourceSetValue_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandLiveVideoSourceSetValue_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandLiveVideoSourceSetValue*
Arena::CreateMaybeMessage< ::KN::CommandLiveVideoSourceSetValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandLiveVideoSourceSetValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandLiveVideoStyleSetValue*
Arena::CreateMaybeMessage< ::KN::CommandLiveVideoStyleSetValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandLiveVideoStyleSetValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandThemeAddLiveVideoSource*
Arena::CreateMaybeMessage< ::KN::CommandThemeAddLiveVideoSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandThemeAddLiveVideoSource >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandThemeRemoveLiveVideoSource*
Arena::CreateMaybeMessage< ::KN::CommandThemeRemoveLiveVideoSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandThemeRemoveLiveVideoSource >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMotionBackgroundStyleSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandMotionBackgroundStyleSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMotionBackgroundStyleSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive*
Arena::CreateMaybeMessage< ::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMotionBackgroundStyleUpdatePosterFrameDataArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
