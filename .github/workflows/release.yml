# this_file: .github/workflows/release.yml
# Release workflow for creating GitHub releases from tags

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate semantic version tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Tag: $TAG"
        
        # Check if tag matches semantic versioning pattern
        if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
          echo "Valid semantic version tag"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if it's a prerelease
          if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+-.+$ ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Invalid semantic version tag format"
          exit 1
        fi
  
  build-release:
    needs: validate-tag
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: macos-latest
            platform: darwin
            arch: x86_64
          - os: macos-latest
            platform: darwin
            arch: arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libboost-filesystem-dev libprotobuf-dev protobuf-compiler libsnappy-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake boost protobuf
    
    - name: Build release
      run: |
        ./build.sh Release ${{ matrix.platform }} ${{ matrix.arch }} false
    
    - name: Create release package
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}
        PACKAGE_NAME="svg2keynote-v${VERSION}-${{ matrix.platform }}-${{ matrix.arch }}"
        PACKAGE_DIR="release/$PACKAGE_NAME"
        
        mkdir -p "$PACKAGE_DIR"
        
        # Copy distribution files
        cp -r "dist/${{ matrix.platform }}-${{ matrix.arch }}/"* "$PACKAGE_DIR/"
        
        # Copy documentation
        cp README.md "$PACKAGE_DIR/"
        cp LICENSE "$PACKAGE_DIR/"
        [ -f CHANGELOG.md ] && cp CHANGELOG.md "$PACKAGE_DIR/" || echo "# Changelog\n\nSee GitHub releases." > "$PACKAGE_DIR/CHANGELOG.md"
        
        # Create installation script
        cat > "$PACKAGE_DIR/install.sh" << 'EOF'
        #!/usr/bin/env bash
        # Installation script for SVG2Keynote-lib
        
        set -e
        
        INSTALL_PREFIX="${1:-/usr/local}"
        
        echo "Installing SVG2Keynote-lib to $INSTALL_PREFIX..."
        
        # Install library
        mkdir -p "$INSTALL_PREFIX/lib"
        cp libkeynote_lib.a "$INSTALL_PREFIX/lib/"
        
        # Install headers
        mkdir -p "$INSTALL_PREFIX/include/svg2keynote"
        cp include/*.h "$INSTALL_PREFIX/include/svg2keynote/"
        
        # Install binary (if available)
        if [ -f svg2key ]; then
            mkdir -p "$INSTALL_PREFIX/bin"
            cp svg2key "$INSTALL_PREFIX/bin/"
        fi
        
        echo "Installation completed!"
        echo "Library: $INSTALL_PREFIX/lib/libkeynote_lib.a"
        echo "Headers: $INSTALL_PREFIX/include/svg2keynote/"
        if [ -f svg2key ]; then
            echo "Binary: $INSTALL_PREFIX/bin/svg2key"
        fi
        EOF
        
        chmod +x "$PACKAGE_DIR/install.sh"
        
        # Create archive
        cd release
        tar -czf "$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME"
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.platform }}-${{ matrix.arch }}
        path: release/*.tar.gz
        retention-days: 30
  
  create-release:
    needs: [validate-tag, build-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        pattern: release-*
    
    - name: Prepare release assets
      run: |
        mkdir -p release-final
        find release-artifacts -name "*.tar.gz" -exec cp {} release-final/ \;
        
        # Create checksums
        cd release-final
        sha256sum *.tar.gz > checksums.sha256
        cd ..
    
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}
        TAG="v$VERSION"
        
        # Generate release notes
        echo "## Release Notes" > release-notes.md
        echo "" >> release-notes.md
        echo "SVG2Keynote-lib version $VERSION" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "Download the appropriate package for your platform:" >> release-notes.md
        echo "" >> release-notes.md
        echo "- **macOS (Intel)**: \`svg2keynote-v$VERSION-darwin-x86_64.tar.gz\`" >> release-notes.md
        echo "- **macOS (Apple Silicon)**: \`svg2keynote-v$VERSION-darwin-arm64.tar.gz\`" >> release-notes.md
        echo "- **Linux (x86_64)**: \`svg2keynote-v$VERSION-linux-x86_64.tar.gz\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "Extract the archive and run \`./install.sh\` to install." >> release-notes.md
        echo "" >> release-notes.md
        echo "### Checksums" >> release-notes.md
        echo "" >> release-notes.md
        echo "Verify your download with SHA256 checksums in \`checksums.sha256\`." >> release-notes.md
        echo "" >> release-notes.md
        
        # Add recent commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG" >> release-notes.md
          echo "" >> release-notes.md
          git log --oneline --pretty=format:"- %s" "$LAST_TAG"..HEAD >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        echo "Release notes generated:"
        cat release-notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: SVG2Keynote-lib v${{ needs.validate-tag.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-tag.outputs.is_prerelease }}
        files: |
          release-final/*.tar.gz
          release-final/checksums.sha256