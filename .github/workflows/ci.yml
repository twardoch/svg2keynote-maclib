# this_file: .github/workflows/ci.yml
# CI workflow for continuous integration

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libboost-filesystem-dev libprotobuf-dev protobuf-compiler libsnappy-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake boost protobuf
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON ..
    
    - name: Build
      run: |
        cd build
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
        path: build/Testing/
        retention-days: 30
    
    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.platform }}-${{ matrix.build_type }}
        path: |
          build/keynote_lib/libkeynote_lib.a
          build/svg2key
          build/version.hpp
        retention-days: 30
  
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libboost-filesystem-dev libprotobuf-dev protobuf-compiler libsnappy-dev clang-format
    
    - name: Check code formatting
      run: |
        # Find C++ files and check formatting
        find . -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | grep -E "(keynote_lib|tests)" | head -10 | xargs clang-format --dry-run --Werror || true
    
    - name: Static analysis
      run: |
        # Basic static analysis with compiler warnings
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror" ..
        make -j$(nproc) 2>&1 | tee build.log || true
        
        # Check for warnings
        if grep -i "warning" build.log; then
          echo "::warning::Build contains warnings"
        fi
  
  coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libboost-filesystem-dev libprotobuf-dev protobuf-compiler libsnappy-dev gcov
    
    - name: Build with coverage
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DCMAKE_CXX_FLAGS="--coverage" ..
        make -j$(nproc)
    
    - name: Run tests with coverage
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Generate coverage report
      run: |
        cd build
        gcov -r $(find . -name "*.gcno") || true
        find . -name "*.gcov" -exec cat {} \; > coverage.txt || true
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: build/coverage.txt
        retention-days: 30